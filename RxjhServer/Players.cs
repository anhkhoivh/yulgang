using DbClss;
using HelperTools;
using LuaInterface;
using Network;
using RxjhServer.RxjhServer;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Timers;
using YulgangServer.RxjhServer;
using YulgangServer.RxjhServer.DbClss;

namespace RxjhServer
{
	public class Players : PlayersBes, IDisposable
	{
		private bool eval_h;

		private bool eval_i;

		private int eval_k;

		private int MyPet_Type;

		private long eval_m;

		private bool j;

		public DateTime time_UpdateTime;

		public DateTime time_MoveTime;

		public DateTime time_MoveTime_pet;

		private Dictionary<int, HcItimesClass> ClassHcItimes;

		public DateTime time_PK;

		public DateTime time_AFK;

		public DateTime time_PK_801302;

		public DateTime time_PK_801303;

		public DateTime time_PK_1000501;

		public DateTime time_PK_901501;

		public DateTime time_PK_801401;

		public DateTime time_PK_501701;

		public DateTime time_PK_3000401;

		public DateTime time_PK_Switch;

		public int Pk武功ID;

		public int times;

		public DateTime time_KIDiTinh;

		public DateTime time_InviteParty;

		public DateTime Time_EnterGiftCode;

		public DateTime time_Chat;

		public DateTime time_PickUpItem;

		public DateTime time_狮子吼;

		public int 石头剪子布赢次数;

		public DateTime time_物品兑换;

		public DateTime Time_Use_Hp;

		public DateTime Time_Use_Mp;

		public DateTime Time_Use_Hp_NamLam;

		public DateTime Time_Use_Mp_NamLam;

		public DateTime time_Tele_Couple;

		public DateTime time_UpdateItemVH;

		public int 元宝合成开关;

		public bool bEnableSnowEffect = false;

		public bool autoAttackPhysical = false;

		public byte[] autoAttackPhysical_ByteArray = new byte[255];

		public System.Timers.Timer Timer_AutoAttack = new System.Timers.Timer();

		public byte[] verifyAttack_ByteArray = new byte[255];

		public System.Timers.Timer Timer_VerifyAttack = new System.Timers.Timer();

		public int vancong;

		public int Wait_Trade = 0;

		public int Check_Aoe = 0;

		public int Check_Aoe1 = 0;

		public int AoeTuHao = 0;

		public int Check_kepskill = 0;

		public int Check_Attack_Skill_Or_Physical = 0;

		public int Check_speedskill = 0;

		public int Level_Party = 0;

		public int Bat_Tu = 0;

		public int NgungThanChau_Index = -1;

		public int NgungThanChau_Type = 1;

		public float Player_FLD_X_Old = 0f;

		public float Player_FLD_Y_Old = 0f;

		public int KCPhanNo = 0;

		public int DEBUG_TargetID = 0;

		public int ThienMaQuangHuyetx2 = 0;

		public int Int32_80 = 1;

		public int CheckDoiPhuongNeSkill = 0;

		public int CheckHackSpeed_SkillID = 0;

		public int CheckHackSpeed_Skill_Time = 0;

		public int CheckHackSpeed_Kep_Skill = 0;

		public ThreadSafeDictionary<int, KeyValuePair<int, DateTime>> timeDelaySkill;

		public int Tu_Dong_Nhat_Item = 0;

		public int Step_Status_TLC = 0;

		public int 怒气_JOB6 = 0;

		public int 怒气_JOB11 = 0;

		public int ComboQuyenSu = 0;

		public ThreadSafeDictionary<int, Players> PlayList;

		public bool DeadByNpc = false;

		public bool Check_Skill_Combo_DHL = false;

		public bool bFlag_KC150_JOB6 = false;

		public System.Timers.Timer Timer_OneSec = new System.Timers.Timer(1000.0);

		public float[] WarpHanBaoQuan = new float[3];

		public Players(NetState client)
			: base(client)
		{
			World.Numv13 = ((World.Newversion >= 13) ? 4 : 0);
			World.单个物品大小 = ((World.Newversion >= 14) ? (88 + ((World.Newversion >= 15) ? 8 : 4)) : 88);
			eval_k = 1;
			ClassHcItimes = new Dictionary<int, HcItimesClass>();
			time_狮子吼 = DateTime.Now;
			time_InviteParty = DateTime.Now;
			time_Chat = DateTime.Now;
			time_PickUpItem = DateTime.Now;
			time_KIDiTinh = DateTime.Now;
			time_物品兑换 = DateTime.Now;
			time_UpdateTime = DateTime.Now;
			time_MoveTime = DateTime.Now;
			time_MoveTime_pet = DateTime.Now;
			time_PK = DateTime.Now;
			time_PK_801303 = DateTime.Now;
			time_PK_1000501 = DateTime.Now;
			time_PK_801302 = DateTime.Now;
			time_PK_3000401 = DateTime.Now;
			time_Tele_Couple = DateTime.Now.AddMinutes(-10.0);
			time_UpdateItemVH = DateTime.Now;
			time_PK_Switch = DateTime.Now;
			time_PK_901501 = DateTime.Now;
			time_PK_801401 = DateTime.Now;
			time_PK_501701 = DateTime.Now;
			Timer_OneSec.Elapsed += Timer_Player_OneSec;
			Timer_OneSec.AutoReset = true;
			Timer_OneSec.Enabled = true;
			Pk武功ID = -1;
			PlayList = new ThreadSafeDictionary<int, Players>();
			timeDelaySkill = new ThreadSafeDictionary<int, KeyValuePair<int, DateTime>>();
		}

		public string TITLE_THANG_THUA(int a)
		{
			string result = "无";
			switch (a)
			{
				case 0:
					return "平局";
				case 1:
					return "赢";
				case 2:
					result = "输";
					break;
			}
			return result;
		}

		public string TITLE_OAN_TU_XI(int a)
		{
			string result = "无";
			switch (a)
			{
				case 0:
					return "剪刀";
				case 1:
					return "石头";
				case 2:
					result = "布";
					break;
			}
			return result;
		}

		public void Dispose()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_Dispose()");
			}
			try
			{
				if (查坐标 != null)
				{
					查坐标.Close();
					查坐标.Dispose();
					查坐标 = null;
				}
				if (allChars != null)
				{
					allChars.Clear();
				}
				if (攻击列表 != null)
				{
					攻击列表.Clear();
				}
				if (SkillCombo != null)
				{
					SkillCombo.Clear();
				}
				if (玉连环 != null)
				{
					玉连环.Clear();
				}
				if (PlayerShop != null)
				{
					PlayerShop = null;
				}
				if (交易 != null)
				{
					交易 = null;
				}
				if (得到门徽ID != null)
				{
					得到门徽ID.Clear();
					得到门徽ID = null;
				}
				if (PlayList != null)
				{
					PlayList.Clear();
					PlayList.Dispose();
					PlayList = null;
				}
				if (NpcList != null)
				{
					NpcList.Clear();
					NpcList.Dispose();
					NpcList = null;
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
					地面物品列表.Dispose();
					地面物品列表 = null;
				}
				if (Show_Pic_Class != null)
				{
					Show_Pic_Class.Clear();
					Show_Pic_Class.Dispose();
					Show_Pic_Class = null;
				}
				if (追加状态New列表 != null)
				{
					追加状态New列表.Clear();
					追加状态New列表.Dispose();
					追加状态New列表 = null;
				}
				if (异常状态 != null)
				{
					异常状态.Clear();
					异常状态.Dispose();
					异常状态 = null;
				}
				if (tem != null)
				{
					tem.Clear();
					tem = null;
				}
				eval_h = true;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "用户数据释放_Dispose()出错[" + ex.Message + "]");
			}
		}

		private void eval_a()
		{
			if (PlayerShop != null)
			{
				打开仓库中 = false;
				PlayerShop_AddItem(4, 4, null, null);
				eval_a(4, base.UserSessionID, null);
				if (PlayerShop.进入人 != null)
				{
					PlayerShop.进入人.进店中 = false;
					PlayerShop.进入人.打开仓库中 = false;
					PlayerShop.进入人.进店中ID = 0;
					PlayerShop.进入人.eval_a(3, 3, base.UserSessionID, PlayerShop.进入人.UserSessionID, null, null);
				}
				PlayerShop.个人商店是否开启 = false;
				PlayerShop.商店物品列表.Clear();
				PlayerShop.Dispose();
				PlayerShop.进入人 = null;
				PlayerShop = null;
			}
			else
			{
				if (!进店中 || 进店中ID == 0)
				{
					return;
				}
				Players players = Select_Character_ID(进店中ID);
				if (players != null && players.PlayerShop != null)
				{
					if (players.PlayerShop.商店类型 == 1)
					{
						出店(进店中ID);
					}
					else if (players.PlayerShop.商店类型 == 2)
					{
						EnterExitPremShop(进店中ID);
					}
				}
			}
		}

		private void Players_Dispose(bool A_0)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_Dispose(bool disposing)");
			}
			if (eval_h)
			{
			}
			eval_h = true;
		}

		private void eval_a(int A_0)
		{
			PremShopStoreQuery2(1);
			查百宝阁元宝数();
			PremShopStoreQuery2(0);
			PacketData packetData = new PacketData();
			packetData.WriteInt(A_0);
			packetData.WriteInt(base.FLD_RXPIONT);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 5660, base.UserSessionID);
			}
		}

		private void 宠物升级(Players Players, double number)
		{
			try
			{
				Players.Pet.FLD_EXP += (long)(number * (double)Players.Config.宠物经验 * 0.01);
				if (Players.Pet.Pet_FLD_LEVEL >= 15)
				{
					Players.Pet.FLD_JOB_LEVEL = 1;
				}
				if (Players.Pet.Pet_FLD_LEVEL >= 50)
				{
					Players.Pet.FLD_JOB_LEVEL = 2;
				}
				if (Players.Pet.Pet_FLD_LEVEL >= 75)
				{
					Players.Pet.FLD_JOB_LEVEL = 3;
				}
				Players.更新灵兽经验和历练();
				Players.Pet.计算基本数据();
				Players.更新灵兽HP_MP_SP();
				Players.更新灵兽武功和状态();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "宠物升级错误" + base.UserSessionID + "|" + ToString() + " " + ex.Message);
			}
		}

		private void eval_a(byte[] A_0, int A_1)
		{
			int key = BitConverter.ToInt32(A_0, 11);
			MartialArts value;
			if (World.TblKongfu.TryGetValue(key, out value) && value.FLD_武功类型 == 3 && base.Player_ExpErience >= value.FLD_NEEDEXP + Array_Skill_Book[3, value.FLD_INDEX].每级加历练(Array_Skill_Book[3, value.FLD_INDEX].武功_等级 - 1) && 升天武功点数 >= Array_Skill_Book[3, value.FLD_INDEX].武功_等级 * Array_Skill_Book[3, value.FLD_INDEX].FLD_每级武功点数 && Array_Skill_Book[3, value.FLD_INDEX].武功_等级 < value.最高武功_等级)
			{
				base.Player_ExpErience -= value.FLD_NEEDEXP + Array_Skill_Book[3, value.FLD_INDEX].每级加历练(Array_Skill_Book[3, value.FLD_INDEX].武功_等级 - 1);
				升天武功点数 -= Array_Skill_Book[3, value.FLD_INDEX].武功_等级 * Array_Skill_Book[3, value.FLD_INDEX].FLD_每级武功点数;
				MartialArts MartialArts = Array_Skill_Book[3, value.FLD_INDEX];
				MartialArts.武功_等级++;
				Update_Exp_Marble();
				UpdatePowersAndStatus();
				记算夫妻武功攻击力数据();
			}
		}

		private void eval_a(int A_0, int A_1, byte[] A_2)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(1);
			packetData.WriteInt(A_1);
			if (A_0 == 3)
			{
				packetData.WriteInt(A_1);
			}
			else
			{
				packetData.WriteInt(uint.MaxValue);
			}
			if (A_2 != null)
			{
				packetData.WriteShort((byte)A_2.Length);
				packetData.Write(A_2, 0, A_2.Length);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 2588, base.UserSessionID);
			}
			SendRangeOfPackets(packetData, 2588, base.UserSessionID);
		}

		private void Craft_Item_NPC_Tip(int num1, int num2, int num3, int num = 10)
		{
			PacketData packetData = new PacketData();
			packetData.WriteShort(num);
			packetData.WriteShort(num1);
			packetData.WriteLong(num2);
			packetData.WriteInt(num3);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 793, base.UserSessionID);
			}
		}

		private void PlayerShop_AddItem(int A_0, int A_1, string A_2, 个人商店物品类 A_3)
		{
			PacketData packetData = new PacketData();
			packetData.WriteByte(A_0);
			packetData.WriteByte(A_1);
			if (A_2 != null)
			{
				packetData.WriteAsciiFixed(A_2);
			}
			if (A_3 != null)
			{
				packetData.WriteLong(A_3.物品.FLD_PID);
				packetData.WriteLong(A_3.物品.Get物品全局ID);
				packetData.WriteShort(A_3.数量);
				packetData.WriteShort(A_3.位置);
				packetData.WriteLong(A_3.价格);
				packetData.WriteInt(A_3.物品.FLD_MAGIC0);
				packetData.WriteInt(A_3.物品.FLD_MAGIC1);
				packetData.WriteInt(A_3.物品.FLD_MAGIC2);
				packetData.WriteInt(A_3.物品.FLD_MAGIC3);
				packetData.WriteInt(A_3.物品.FLD_MAGIC4);
				packetData.WriteShort(A_3.物品.FLD_FJ_MAGIC0);
				packetData.WriteShort(A_3.物品.FLD_FJ_MAGIC1);
				packetData.WriteShort(A_3.物品.FLD_FJ_中级附魂);
				packetData.WriteShort(A_3.物品.FLD_FJ_MAGIC2);
				packetData.WriteShort(A_3.物品.FLD_FJ_MAGIC3);
				packetData.WriteShort(A_3.物品.FLD_FJ_MAGIC4);
				packetData.WriteShort(A_3.物品.FLD_FJ_MAGIC5);
				packetData.WriteShort(0);
				packetData.WriteInt(A_3.物品.FLD_FJ_KSSJ);
				packetData.WriteInt(A_3.物品.FLD_FJ_JSSJ);
				if (A_3.物品.FLD_持久力 != 0)
				{
					packetData.WriteShort(A_3.物品.FLD_持久力);
				}
				else
				{
					packetData.WriteShort(0);
				}
				packetData.WriteInt(A_3.物品.FLD_FJ_觉醒 + A_3.物品.物品_中级附魂_追加_觉醒);
				packetData.WriteShort(0);
				packetData.WriteShort(A_3.物品.FLD_FJ_进化);
				packetData.WriteShort(0);
				packetData.WriteInt(0);
				packetData.WriteInt(0);
				packetData.WriteInt(0);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 3100, base.UserSessionID);
			}
		}

		private void eval_a(int A_0, int A_1, int A_2, int A_3, byte[] A_4, ThreadSafeDictionary<long, 个人商店物品类> A_5)
		{
			PacketData packetData = new PacketData();
			packetData.WriteByte(A_0);
			packetData.WriteByte(A_1);
			packetData.WriteInt(A_2);
			if (A_0 != A_1)
			{
				packetData.WriteByte(1);
			}
			if (A_4 != null)
			{
				packetData.WriteShort(A_4.Length);
				packetData.Write(A_4, 0, A_4.Length);
				if (A_5 != null)
				{
					packetData.WriteShort(A_5.Count);
					foreach (个人商店物品类 value in A_5.Values)
					{
						packetData.WriteLong(value.物品.FLD_PID);
						packetData.WriteLong(value.物品.Get物品全局ID);
						packetData.WriteShort(value.数量);
						packetData.WriteShort(value.位置);
						packetData.WriteLong(value.价格);
						packetData.WriteInt(value.物品.FLD_MAGIC0);
						packetData.WriteInt(value.物品.FLD_MAGIC1);
						packetData.WriteInt(value.物品.FLD_MAGIC2);
						packetData.WriteInt(value.物品.FLD_MAGIC3);
						packetData.WriteInt(value.物品.FLD_MAGIC4);
						packetData.WriteShort(value.物品.FLD_FJ_MAGIC0);
						packetData.WriteShort(value.物品.FLD_FJ_MAGIC1);
						packetData.WriteShort(value.物品.FLD_FJ_中级附魂);
						packetData.WriteShort(value.物品.FLD_FJ_MAGIC2);
						packetData.WriteShort(value.物品.FLD_FJ_MAGIC3);
						packetData.WriteShort(value.物品.FLD_FJ_MAGIC4);
						packetData.WriteShort(value.物品.FLD_FJ_MAGIC5);
						packetData.WriteShort(0);
						packetData.WriteInt(value.物品.FLD_FJ_KSSJ);
						packetData.WriteInt(value.物品.FLD_FJ_JSSJ);
						if (value.物品.FLD_持久力 != 0)
						{
							packetData.WriteShort(value.物品.FLD_持久力);
						}
						else
						{
							packetData.WriteShort(0);
						}
						packetData.WriteInt(value.物品.FLD_FJ_觉醒 + value.物品.物品_中级附魂_追加_觉醒);
						packetData.WriteShort(0);
						packetData.WriteShort(value.物品.FLD_FJ_进化);
						packetData.WriteShort(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
					}
				}
			}
			else if (A_0 == A_1)
			{
				packetData.WriteInt(A_3);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 3868, base.UserSessionID);
			}
		}

		private void PremShopStoreQuery2(int A_0)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(A_0);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 50200, base.UserSessionID);
			}
		}

		private void PremShopStoreQuery2(byte[] A_0, int A_1)
		{
			PacketVerify(A_0, A_1);
			eval_k = 1;
			PacketData packetData = new PacketData();
			packetData.WriteInt(1);
			packetData.WriteInt(base.FLD_RXPIONT);
			packetData.WriteInt(25);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 6428, base.UserSessionID);
			}
		}

		private void PremShopSToryQuery(int A_0)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(A_0);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 12316, base.UserSessionID);
			}
		}

		private void PremShopSToryQuery(byte[] A_0, int A_1)
		{
			eval_a(1);
		}

		private void EnterExitPremShop(int A_0)
		{
			进店中 = false;
			打开仓库中 = false;
			进店中ID = 0;
			eval_a(3, 3, A_0, base.UserSessionID, null, null);
			Players players = Select_Character_ID(A_0);
			if (players != null && players.PlayerShop != null)
			{
				players.PlayerShop.个人商店是否使用中 = false;
				players.PlayerShop.进入人 = null;
				players.eval_a(3, 3, players.UserSessionID, base.UserSessionID, null, null);
			}
		}

		private void EnterExitPremShop(byte[] A_0, int A_1)
		{
			PacketVerify(A_0, A_1);
			int num = BitConverter.ToInt32(A_0, 12);
			switch (A_0[11])
			{
				case 4:
					break;
				case 1:
					try
					{
						if (打开仓库中)
						{
							eval_a(1, 14, num, 0, null, null);
						}
						else
						{
							Players players2 = Select_Character_ID(num);
							if (players2 != null && players2.PlayerShop.商店类型 == 2 && players2.PlayerShop != null && players2.PlayerShop.个人商店是否开启)
							{
								if (!Check_Radius_Player(40, players2))
								{
									eval_a(1, 12, num, 0, null, null);
								}
								else if (players2.PlayerShop.个人商店是否使用中)
								{
									eval_a(1, 13, num, 0, null, null);
								}
								else
								{
									players2.PlayerShop.个人商店是否使用中 = true;
									players2.PlayerShop.进入人 = this;
									进店中 = true;
									进店中ID = num;
									打开仓库中 = true;
									eval_a(1, 1, players2.UserSessionID, 0, players2.PlayerShop.商店名, players2.PlayerShop.商店物品列表);
									players2.eval_a(1, 1, players2.UserSessionID, base.UserSessionID, null, null);
								}
							}
						}
					}
					catch (Exception ex3)
					{
						Form1.WriteLine(1, "进元宝个人商店 1 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex3);
					}
					break;
				case 2:
					try
					{
						int num2 = BitConverter.ToInt32(A_0, 16);
						long num3 = BitConverter.ToInt64(A_0, 24);
						int num4 = BitConverter.ToInt16(A_0, 32);
						Players players = Select_Character_ID(num);
						个人商店物品类 value = default(个人商店物品类);
						if (players != null && players.打开仓库中 && players.PlayerShop.商店物品列表.TryGetValue(num3, out value))
						{
							int num5 = Find_Package_Empty(this);
							if (num5 == -1)
							{
								eval_a(2, 24, num, 0, null, null);
							}
							else if (num4 <= value.物品.Get_Int_Item_Count && value.物品.Get_Int_Item_Count >= 0 && num4 >= 0)
							{
								if (BitConverter.ToInt32(players.Item_In_Bag[value.位置].Get_Byte_Item_PID, 0) == 0)
								{
									eval_a(2, 21, num, 0, null, null);
								}
								else if (BitConverter.ToInt64(players.Item_In_Bag[value.位置].物品全局ID, 0) != num3)
								{
									eval_a(2, 21, num, 0, null, null);
								}
								else if (BitConverter.ToInt32(players.Item_In_Bag[value.位置].Get_Byte_Item_PID, 0) != num2)
								{
									eval_a(2, 21, num, 0, null, null);
								}
								else if (num3 == 0)
								{
									eval_a(2, 21, num, 0, null, null);
								}
								else if (base.FLD_RXPIONT < value.价格 * num4)
								{
									eval_a(2, 22, num, 0, null, null);
								}
								else
								{
									物品类 物品类 = 得到人物物品物品全局ID(players, num3);
									if (物品类 != null)
									{
										if (BitConverter.ToInt32(物品类.Item_Amount, 0) < value.数量)
										{
											Form1.WriteLine(6, "非法复制_元宝个人商店_进店1[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + value.数量 + "]");
										}
										else
										{
											ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0)];
											if (itmeClass.FLD_SIDE == 0 && BitConverter.ToInt32(物品类.Item_Amount, 0) > 1)
											{
												Form1.WriteLine(6, "非法复制_元宝个人商店_进店2[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + value.数量 + "]");
											}
											else
											{
												Form1.WriteLine(5, "[" + players.Userid + "][" + players.UserName + "] 元宝个人商店买出物品 :[" + base.Userid + "][" + base.UserName + "] (物品:" + 物品类.Get_Name() + "/编号:" + BitConverter.ToInt32(物品类.得到全局ID(), 0) + "属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "] 价格[" + value.价格 + "]");
												int fLD_RXPIONT = base.FLD_RXPIONT;
												players.Add_Del_Rxpiont((int)(value.价格 * num4), 1);
												Add_Del_Rxpiont((int)(value.价格 * num4), 0);
												RxjhClass.物品记录(players.Userid, players.UserName, base.Userid, base.UserName, BitConverter.ToInt64(物品类.物品全局ID, 0), BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0), 物品类.Get_Name(), num4, fLD_RXPIONT + "->" + base.FLD_RXPIONT + "@ | " + 物品类.FLD_MAGIC0 + "-" + 物品类.FLD_MAGIC1 + "-" + 物品类.FLD_MAGIC2 + "-" + 物品类.FLD_MAGIC3 + "-" + 物品类.FLD_MAGIC4 + "初" + 物品类.FLD_FJ_觉醒 + "中" + 物品类.FLD_FJ_中级附魂 + "进" + 物品类.FLD_FJ_进化, (int)(value.价格 * num4), "元宝商店");
												PacketData packetData = new PacketData();
												packetData.WriteByte(2);
												packetData.WriteByte(2);
												packetData.WriteInt(num);
												packetData.WriteLong(value.物品.FLD_PID);
												packetData.WriteLong(num3);
												packetData.WriteShort(num4);
												packetData.WriteShort(value.位置);
												packetData.WriteLong(value.价格);
												packetData.WriteInt(value.物品.FLD_MAGIC0);
												packetData.WriteInt(value.物品.FLD_MAGIC1);
												packetData.WriteInt(value.物品.FLD_MAGIC2);
												packetData.WriteInt(value.物品.FLD_MAGIC3);
												packetData.WriteInt(value.物品.FLD_MAGIC4);
												packetData.WriteShort(value.物品.FLD_FJ_MAGIC0);
												packetData.WriteShort(value.物品.FLD_FJ_MAGIC1);
												packetData.WriteShort(value.物品.FLD_FJ_中级附魂);
												packetData.WriteShort(value.物品.FLD_FJ_MAGIC2);
												packetData.WriteShort(value.物品.FLD_FJ_MAGIC3);
												packetData.WriteShort(value.物品.FLD_FJ_MAGIC4);
												packetData.WriteShort(value.物品.FLD_FJ_MAGIC5);
												packetData.WriteShort(0);
												packetData.WriteInt(value.物品.FLD_FJ_KSSJ);
												packetData.WriteInt(value.物品.FLD_FJ_JSSJ);
												if (value.物品.FLD_持久力 != 0)
												{
													packetData.WriteShort(value.物品.FLD_持久力);
												}
												else
												{
													packetData.WriteShort(0);
												}
												packetData.WriteInt(value.物品.FLD_FJ_觉醒);
												packetData.WriteShort(0);
												packetData.WriteShort(value.物品.FLD_FJ_进化);
												packetData.WriteShort(0);
												packetData.WriteInt(0);
												packetData.WriteInt(0);
												packetData.WriteInt(0);
												packetData.WriteLong(num3);
												if (base.Client != null)
												{
													base.Client.SendPak(packetData, 3868, base.UserSessionID);
												}
												if (players.Client != null)
												{
													players.Client.SendPak(packetData, 3868, base.UserSessionID);
												}
												players.Send_Packet_Delete_Item(物品类.Bag, num4);
												_Make_Item_Option(物品类.物品全局ID, 物品类.Get_Byte_Item_PID, num5, BitConverter.GetBytes(num4), 物品类.Get_Byte_Item_Option);
												if (value.数量 - num4 > 0)
												{
													value.数量 -= num4;
												}
												else if (players.PlayerShop.商店物品列表.ContainsKey(num3))
												{
													个人商店物品类 个人商店物品类 = players.PlayerShop.商店物品列表[num3];
													players.PlayerShop.商店物品列表.Remove(num3);
												}
												Save_data_Rxpiont();
												players.Save_data_Rxpiont();
												SaveDataCharacter();
												players.SaveDataCharacter();
												if (players.PlayerShop.商店物品列表.Count == 0)
												{
													players.eval_a();
												}
											}
										}
									}
									else
									{
										eval_a(2, 21, num, 0, null, null);
									}
								}
							}
							else
							{
								Form1.WriteLine(77, "非法购买_元宝个人商店_负数物品[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + value.物品.Get_Name() + "] 物品数量[" + value.物品.Get_Int_Item_Count + "]");
								eval_a(2, 21, num, 0, null, null);
							}
						}
					}
					catch (Exception ex2)
					{
						Form1.WriteLine(1, "进元宝个人商店 2 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex2);
					}
					break;
				case 3:
					try
					{
						EnterExitPremShop(num);
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "进元宝个人商店 3 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex);
					}
					break;
				case 5:
					if (eval_k == 0)
					{
						PremShopSToryQuery(0);
					}
					else if (eval_k == 1)
					{
						PremShopSToryQuery(1);
					}
					break;
			}
		}

		private void 是否开启元宝商店(byte[] data, int length)
		{
			if (World.是否开启元宝商店 == 0)
			{
				GameMessage("元宝商店功能尚未开放,请联系管理员！", 10);
				return;
			}
			switch (data[11])
			{
				case 1:
					{
						byte[] array = new byte[BitConverter.ToUInt16(data, 12)];
						Buffer.BlockCopy(data, 14, array, 0, array.Length);
						string @string = Encoding.GetEncoding(1252).GetString(array);
						if (!打开仓库中)
						{
							if (@string.Length >= 2 && @string.Length <= 16)
							{
								if (base.Player_Level <= 20)
								{
									PlayerShop_AddItem(1, 13, @string, null);
									break;
								}
								PlayerShop_AddItem(1, 1, @string, null);
								打开仓库中 = true;
								PlayerShop = new 个人商店类();
								PlayerShop.商店名 = array;
								PlayerShop.商店类型 = 2;
							}
							else
							{
								PlayerShop_AddItem(1, 12, @string, null);
							}
						}
						else
						{
							PlayerShop_AddItem(1, 11, @string, null);
						}
						break;
					}
				case 2:
					{
						byte[] dst = new byte[4];
						byte[] dst2 = new byte[8];
						byte[] array2 = new byte[8];
						byte[] array3 = new byte[4];
						Buffer.BlockCopy(data, 12, dst, 0, 4);
						Buffer.BlockCopy(data, 20, dst2, 0, 8);
						Buffer.BlockCopy(data, 28, array3, 0, 2);
						Buffer.BlockCopy(data, 32, array2, 0, 8);
						int num = BitConverter.ToInt16(data, 30);
						if (!World.检查物品是否被锁定(BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0)))
						{
							if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == 0)
							{
								PlayerShop_AddItem(2, 21, null, null);
							}
							else if (BitConverter.ToInt32(array3, 0) <= 0)
							{
								PlayerShop_AddItem(2, 22, null, null);
							}
							else if (BitConverter.ToInt32(array3, 0) > 9999)
							{
								PlayerShop_AddItem(2, 23, null, null);
							}
							else if (BitConverter.ToInt32(array2, 0) <= 0)
							{
								PlayerShop_AddItem(2, 24, null, null);
							}
							else if (BitConverter.ToInt32(array2, 0) > 100000)
							{
								PlayerShop_AddItem(2, 25, null, null);
							}
							else if (PlayerShop.商店物品列表.Count >= 8)
							{
								PlayerShop_AddItem(2, 26, null, null);
							}
							else if (BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0) >= BitConverter.ToInt32(array3, 0) && BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0) >= 0 && BitConverter.ToInt32(array3, 0) >= 0)
							{
								if (Item_In_Bag[num].物品绑定)
								{
									PlayerShop_AddItem(2, 27, null, null);
									break;
								}
								if (PlayerShop.商店物品列表.ContainsKey(BitConverter.ToInt64(Item_In_Bag[num].物品全局ID, 0)))
								{
									PlayerShop_AddItem(2, 27, null, null);
									break;
								}
								个人商店物品类 个人商店物品类 = new 个人商店物品类();
								个人商店物品类.数量 = BitConverter.ToInt32(array3, 0);
								个人商店物品类.价格 = BitConverter.ToInt32(array2, 0);
								个人商店物品类.位置 = num;
								个人商店物品类.物品 = Item_In_Bag[num];
								PlayerShop.商店物品列表.Add(BitConverter.ToInt64(Item_In_Bag[num].物品全局ID, 0), 个人商店物品类);
								PlayerShop_AddItem(2, 2, null, 个人商店物品类);
							}
							else
							{
								Form1.WriteLine(77, "非法负数物品_元宝个人商店_开店[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + Item_In_Bag[num].Get_Name() + "] 物品数量[" + BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0) + "]");
								Send_Packet_Delete_Item(Item_In_Bag[num].Bag, BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0));
								PlayerShop_AddItem(2, 27, null, null);
							}
						}
						else
						{
							PlayerShop_AddItem(2, 27, null, null);
						}
						break;
					}
				case 3:
					PlayerShop_AddItem(3, 3, null, null);
					eval_a(3, base.UserSessionID, PlayerShop.商店名);
					PlayerShop.个人商店是否开启 = true;
					break;
				case 4:
					eval_a();
					break;
				case 5:
					if (eval_k != 0)
					{
						if (eval_k == 1)
						{
							PremShopSToryQuery(1);
						}
					}
					else
					{
						PremShopSToryQuery(0);
					}
					break;
			}
		}

		private void Craft_Item_NPC(byte[] data, int length)
		{
			int num = BitConverter.ToInt32(data, 15);
			int num2 = BitConverter.ToInt32(data, 23);
			if (num >= 1000000815 && num <= 1000000861)
			{
				TableOfMedicines TableOfMedicines = null;
				foreach (TableOfMedicines item in World.listOfMedicines)
				{
					if (item.FLD_ZZWPID == num)
					{
						TableOfMedicines = item;
						break;
					}
				}
				if (TableOfMedicines == null)
				{
					return;
				}
				int num3 = -1;
				int num4 = -1;
				int num5 = -1;
				int num6 = -1;
				for (int i = 0; i < 66; i++)
				{
					if (TableOfMedicines.FLD_XHWPID1 == Item_In_Bag[i].FLD_PID && TableOfMedicines.FLD_XHWPNUM1 * num2 <= Item_In_Bag[i].Get_Int_Item_Count)
					{
						num3 = i;
					}
					if (TableOfMedicines.FLD_XHWPID2 == Item_In_Bag[i].FLD_PID && TableOfMedicines.FLD_XHWPNUM2 * num2 <= Item_In_Bag[i].Get_Int_Item_Count)
					{
						num4 = i;
					}
					if (TableOfMedicines.FLD_XHWPID3 == Item_In_Bag[i].FLD_PID && TableOfMedicines.FLD_XHWPNUM3 * num2 <= Item_In_Bag[i].Get_Int_Item_Count)
					{
						num5 = i;
					}
					if (TableOfMedicines.FLD_XHWPID4 == Item_In_Bag[i].FLD_PID && TableOfMedicines.FLD_XHWPNUM4 * num2 <= Item_In_Bag[i].Get_Int_Item_Count)
					{
						num6 = i;
					}
				}
				if (num3 == -1 || num4 == -1 || num5 == -1 || num6 == -1)
				{
					Craft_Item_NPC_Tip(3, num, num2);
					return;
				}
				int num7 = Find_Package_Empty(this);
				if (num7 == -1)
				{
					Craft_Item_NPC_Tip(4, num, num2);
					return;
				}
				Send_Packet_Delete_Item(num3, TableOfMedicines.FLD_XHWPNUM1 * num2);
				Send_Packet_Delete_Item(num4, TableOfMedicines.FLD_XHWPNUM2 * num2);
				Send_Packet_Delete_Item(num5, TableOfMedicines.FLD_XHWPNUM3 * num2);
				Send_Packet_Delete_Item(num6, TableOfMedicines.FLD_XHWPNUM4 * num2);
				byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
				增加物品2(bytes, BitConverter.GetBytes(num), num7, BitConverter.GetBytes(num2), new byte[56]);
				Craft_Item_NPC_Tip(1, num, num2);
				return;
			}
			switch (num)
			{
				case 1000000772:
					{
						int num13 = 0;
						for (int num14 = 0; num14 < ((base.装备行囊是否开启 == 0) ? 36 : 66); num14++)
						{
							if (BitConverter.ToInt32(Item_In_Bag[num14].Get_Byte_Item_PID, 0) == 1000000771 && BitConverter.ToInt32(Item_In_Bag[num14].Item_Amount, 0) >= 3 * num2)
							{
								num13 = 1;
								break;
							}
						}
						if (num13 == 0)
						{
							Craft_Item_NPC_Tip(3, num, num2);
							break;
						}
						int num15 = Find_Package_Empty(this);
						if (num15 == -1)
						{
							Craft_Item_NPC_Tip(4, num, num2);
							break;
						}
						for (int num16 = 0; num16 < ((base.装备行囊是否开启 == 0) ? 36 : 66); num16++)
						{
							if (BitConverter.ToInt32(Item_In_Bag[num16].Get_Byte_Item_PID, 0) == 1000000771)
							{
								Send_Packet_Delete_Item(num16, 3 * num2);
							}
						}
						byte[] bytes4 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						增加物品2(bytes4, BitConverter.GetBytes(num), num15, BitConverter.GetBytes(num2), new byte[56]);
						Craft_Item_NPC_Tip(1, num, num2);
						break;
					}
				case 1000000773:
					{
						int num10 = 0;
						for (int n = 0; n < ((base.装备行囊是否开启 == 0) ? 36 : 66); n++)
						{
							if (BitConverter.ToInt32(Item_In_Bag[n].Get_Byte_Item_PID, 0) == 1000000772 && BitConverter.ToInt32(Item_In_Bag[n].Item_Amount, 0) >= 2 * num2)
							{
								num10 = 1;
								break;
							}
						}
						if (num10 == 0)
						{
							Craft_Item_NPC_Tip(3, num, num2);
							break;
						}
						int num11 = Find_Package_Empty(this);
						if (num11 == -1)
						{
							Craft_Item_NPC_Tip(4, num, num2);
							break;
						}
						for (int num12 = 0; num12 < ((base.装备行囊是否开启 == 0) ? 36 : 66); num12++)
						{
							if (BitConverter.ToInt32(Item_In_Bag[num12].Get_Byte_Item_PID, 0) == 1000000772)
							{
								Send_Packet_Delete_Item(num12, 2 * num2);
							}
						}
						byte[] bytes3 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						增加物品2(bytes3, BitConverter.GetBytes(num), num11, BitConverter.GetBytes(num2), new byte[56]);
						Craft_Item_NPC_Tip(1, num, num2);
						break;
					}
				case 800000047:
					{
						int num8 = 0;
						int num9 = 0;
						for (int j = 0; j < ((base.装备行囊是否开启 == 0) ? 36 : 66); j++)
						{
							if (BitConverter.ToInt32(Item_In_Bag[j].Get_Byte_Item_PID, 0) == 800000046)
							{
								num8 += BitConverter.ToInt32(Item_In_Bag[j].Item_Amount, 0);
							}
							else if (BitConverter.ToInt32(Item_In_Bag[j].Get_Byte_Item_PID, 0) == 1000000771 && BitConverter.ToInt32(Item_In_Bag[j].Item_Amount, 0) >= 10 * num2)
							{
								num9 = 1;
							}
						}
						if (num8 < 5 * num2 || num9 == 0)
						{
							Craft_Item_NPC_Tip(3, num, num2);
							break;
						}
						if (得到包裹空位数() < num2)
						{
							Craft_Item_NPC_Tip(4, num, num2);
							break;
						}
						num8 = 5 * num2;
						for (int k = 0; k < ((base.装备行囊是否开启 == 0) ? 36 : 66); k++)
						{
							if (BitConverter.ToInt32(Item_In_Bag[k].Get_Byte_Item_PID, 0) == 800000046)
							{
								if (num8 > 0)
								{
									Send_Packet_Delete_Item(k, 1);
									num8--;
								}
							}
							else if (BitConverter.ToInt32(Item_In_Bag[k].Get_Byte_Item_PID, 0) == 1000000771)
							{
								Send_Packet_Delete_Item(k, 10 * num2);
							}
						}
						Random random = new Random(World.GetRandomSeed());
						for (int l = 0; l < 100; l++)
						{
							Console.WriteLine(random.Next(23, 52));
						}
						for (int m = 0; m < num2; m++)
						{
							int 位置 = Find_Package_Empty(this);
							byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							byte[] array = new byte[56];
							Buffer.BlockCopy(BitConverter.GetBytes(random.Next(23, 52)), 0, array, 0, 4);
							增加物品2(bytes2, BitConverter.GetBytes(num), 位置, BitConverter.GetBytes(1), array);
						}
						Craft_Item_NPC_Tip(1, num, num2);
						break;
					}
			}
		}

		~Players()
		{
			Players_Dispose(A_0: false);
		}

		public Players GetPlayerThis()
		{
			return this;
		}

		public int Get任务阶段(int 任务ID)
		{
			if (任务.TryGetValue(任务ID, out 任务类 value))
			{
				return value.任务阶段ID;
			}
			return 0;
		}

		public void Logoin()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_Logoin");
			}
			try
			{
				World.AllConnectedChars.Add(base.UserSessionID, this);
				Form1.WriteLine(3, "Enter Ingame -> [" + base.Userid + "]-[" + base.UserName + "]");
				查坐标 = new System.Timers.Timer(1000.0);
				查坐标.Elapsed += MoveAll;
				查坐标.AutoReset = true;
				查坐标.Enabled = true;
				RxjhClass.登陆记录(base.Userid, base.UserName, base.Client.ToString(), "Login");
				DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ONLINE=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
				foreach (Players value in World.AllConnectedChars.Values)
				{
					if (base.FLD_SVIP >= 2000000 && base.FLD_SVIP < 4999999)
					{
						value.GameMessage("VIP ÐÔÌNG [" + base.UserName + "] ðaÞ vaÌo game.", 8);
					}
					else if (base.FLD_SVIP >= 5000000 && base.FLD_SVIP < 9999999)
					{
						value.GameMessage("VIP BAòC [" + base.UserName + "] ðaÞ vaÌo game.", 8);
					}
					else if (base.FLD_SVIP >= 10000000 && base.FLD_SVIP < 19999999)
					{
						value.GameMessage("VIP VAÌNG [" + base.UserName + "] ðaÞ vaÌo game.", 8);
					}
					else if (base.FLD_SVIP >= 20000000 && base.FLD_SVIP < 49999999)
					{
						value.GameMessage("VIP KIM CÝÕNG [" + base.UserName + "] ðaÞ vaÌo game.", 8);
					}
					else if (base.FLD_SVIP >= 50000000 && base.FLD_SVIP < 99999999)
					{
						value.GameMessage("VIP TITAN [" + base.UserName + "] ðaÞ vaÌo game.", 8);
					}
					else if (base.FLD_SVIP >= 100000000)
					{
						value.GameMessage("VIP RUBY [" + base.UserName + "] ðaÞ vaÌo game.", 8);
					}
				}
			}
			catch (Exception ex)
			{
				base.Client.Dispose();
				GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 2", 7);
				Form1.WriteLine(100, "Logoin()出错![" + base.Userid + "]-[" + base.UserName + "][" + base.UserSessionID + "]" + ex.ToString());
			}
		}

		public void Logout()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_Logout");
			}
			int num = 0;
			try
			{
				if (j)
				{
					if (World.AllConnectedChars.ContainsKey(base.UserSessionID))
					{
						SaveDataCharacter();
						RxjhClass.登陆记录(base.Userid, base.UserName, base.Client.ToString(), "Logout");
						if (base.Player_FLD_Map != 7001 && base.Player_FLD_Map == 7301)
						{
							if (World.血战 != null && World.血战.结束 == 0)
							{
								if (World.血战.帮战主方.申请帮派ID == base.Guild_ID)
								{
									if (World.血战.帮战主方.申请人物列表.ContainsKey(base.UserSessionID))
									{
										if (base.Guild_Level == 6)
										{
											World.血战.主方分数 = 0L;
											World.血战.结束 = 1;
											World.血战.Dispose();
										}
										else
										{
											World.血战.帮战主方.申请人物列表.Remove(base.UserSessionID);
										}
										关起来 = 0;
									}
								}
								else if (World.血战.帮战客方.申请帮派ID == base.Guild_ID && World.血战.帮战客方.申请人物列表.ContainsKey(base.UserSessionID))
								{
									if (base.Guild_Level == 6)
									{
										World.血战.客方分数 = 0L;
										World.血战.结束 = 1;
										World.血战.Dispose();
									}
									else
									{
										World.血战.帮战客方.申请人物列表.Remove(base.UserSessionID);
									}
									关起来 = 0;
								}
							}
							if (World.Newversion >= 14 && World.Newversion <= 15)
							{
								Move(500f, 1750f, 15f, 101);
							}
							else
							{
								Move(412f, 1542f, 15f, 101);
							}
						}
						if (World.AllConnectedChars.ContainsKey(base.UserSessionID))
						{
							World.AllConnectedChars.Remove(base.UserSessionID);
						}
						if (base.FLD_Couple_Name != "")
						{
							World.FindPlayerbyName(base.FLD_Couple_Name)?.更新情侣系统(1, base.UserName, base.FLD_Couple_Name_Unknow);
						}
						num = 1;
						清空追加状态New列表();
						num = 111;
						清空追加状态列表();
						num = 1112;
						异常状态列表();
						num = 2;
						离开当前地图();
						num = 3;
						TeamClass value = default(TeamClass);
						if (Party_ID != 0 && World.PartyClass.TryGetValue(Party_ID, out value))
						{
							value.退出(this);
						}
						num = 4;
						if (PlayerShop != null && PlayerShop.个人商店是否开启)
						{
							if (PlayerShop.商店类型 == 1)
							{
								关店();
							}
							else if (PlayerShop.商店类型 == 2)
							{
								eval_a();
							}
						}
						num = 5;
						if (进店中 && 进店中ID != 0)
						{
							Players players = Select_Character_ID(进店中ID);
							if (players != null && players.PlayerShop != null)
							{
								if (players.PlayerShop.商店类型 == 1)
								{
									出店(进店中ID);
								}
								else if (players.PlayerShop.商店类型 == 2)
								{
									EnterExitPremShop(进店中ID);
								}
							}
						}
						num = 6;
						if (Pet != null)
						{
							Pet.保存数据();
							Pet.Dispose();
							Pet = null;
						}
						num = 7;
						if (交易 != null && 交易.交易中)
						{
							关闭交易(0, 6);
						}
						if (base.FLD_Student1 != "")
						{
							World.FindPlayerbyName(base.FLD_Student1)?.Write_Name_Teacher();
						}
						if (base.FLD_Student2 != "")
						{
							World.FindPlayerbyName(base.FLD_Student2)?.Write_Name_Teacher();
						}
						if (base.FLD_Student3 != "")
						{
							World.FindPlayerbyName(base.FLD_Student3)?.Write_Name_Teacher();
						}
						Form1.WriteLine(3, "Relog character: [" + base.Userid + "]-[" + base.UserName + "]");
					}
					else
					{
						Form1.WriteLine(3, "Quit game: [" + base.Userid + "]-[" + base.UserName + "]");
					}
					DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ONLINE=0 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
					num = 8;
					if (查坐标 != null)
					{
						查坐标.Enabled = false;
					}
					num = 9;
					num = 10;
					if (快捷栏 != null)
					{
						快捷栏.Clear();
					}
					num = 11;
					传书列表.Clear();
				}
			}
			catch (Exception ex)
			{
				World.AllConnectedChars.Remove(base.UserSessionID);
				Console.Write("DEBUG: " + num + " - msg error: " + ex);
			}
		}

		public void ls攻击确认(byte[] data, int length)
		{
			int key = BitConverter.ToInt16(data, 5);
			Players value = default(Players);
			if (World.攻击确认模式 != 2 && World.AllConnectedChars.TryGetValue(key, out value) && value.Client != null && value.Client.Running)
			{
				value.VerifyAttack(data, length);
			}
		}

		public void ManagePacket(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_ManagePacket");
			}
			int num = BitConverter.ToInt16(data, 7);
			int num2 = BitConverter.ToInt16(data, 9);
			if (World.Debug != 0)
			{
				Form1.WriteLine(55, "Recv [" + num.ToString("X4") + " - " + num + "] " + base.UserSessionID + " : " + Converter.ToString(data));
			}
			try
			{
				if (!World.AllConnectedChars.ContainsKey(base.UserSessionID))
				{
					switch (num)
					{
						case 20:
							CreateCharacter(data, length);
							break;
						case 30:
							Delete_Char(data, length);
							break;
						case 371:
							Delete_Char(data, length);
							break;
						case 1:
							base.Client.版本验证 = true;
							LoginConnection(data, length);
							break;
						case 3:
							Player_Exit();
							break;
						case 5:
							CharLogin(data, length);
							break;
						case 16:
							LoadCharacters();
							break;
						case 37:
							VerifyAttack(data, length);
							break;
						case 56:
							CheckIfPlayerExists(data, length);
							break;
						case 143:
							Display();
							break;
						case 8212:
							VersionVerification();
							break;
						case 836:
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, data, 5, 2);
							data[7] = 69;
							if (base.Client != null)
							{
								base.Client.Send(data, data.Length);
							}
							break;
						case 5638:
							{
								byte[] array = Converter.hexStringToByte("AA55080000020069010200040055AA");
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
								if (base.Client != null)
								{
									base.Client.Send(array, array.Length);
								}
								break;
							}
					}
				}
				else
				{
					switch (num)
					{
						case 3:
							Player_Exit();
							break;
						case 7:
							if (Timer_AutoAttack != null)
							{
								Timer_AutoAttack.Enabled = false;
								Timer_AutoAttack.AutoReset = false;
								Timer_AutoAttack.Dispose();
								Timer_AutoAttack = null;
							}
							autoAttackPhysical = false;
							if (异常状态.ContainsKey(4) || 异常状态.ContainsKey(8) || 异常状态.ContainsKey(24) || 异常状态.ContainsKey(26) || 异常状态.ContainsKey(28))
							{
								GameMessage("Traòng thaìi không thêÒ di chuyêÒn", 9);
							}
							else
							{
								if (base.Player_FLD_Map == 7301 && base.人物PK模式 != 2)
								{
									string hex = "AA551100000000161002000100000000000000000055AA";
									byte[] array4 = Converter.hexStringToByte(hex);
									base.人物PK模式 = 2;
									array4[11] = 2;
									if (base.Client != null)
									{
										base.Client.Send(array4, array4.Length);
									}
								}
								vancong = 0;
								MovePlayer(data, length);
							}
							break;
						case 8:
							说话(data, length);
							break;
						case 9:
						case 6437:
							time_AFK = DateTime.Now;
							攻击(data, length);
							break;
						case 11:
							Pickup_Item(data, length);
							break;
						case 14:
							扔物品(data, length);
							break;
						case 16:
							LoadCharacters();
							break;
						case 22:
							UpdateConfig(data, length);
							break;
						case 36:
							if (Check_kepskill == 1 && World.Newversion <= 10 && BitConverter.ToInt16(data, 10) == 4864 && base.人物PK模式 != 0)
							{
								行走状态(BitConverter.GetBytes(1), 1);
								CheckHackSpeed_Kep_Skill = 1;
							}
							动作表情(data, length);
							break;
						case 40:
							队长管理(data, length);
							break;
						case 42:
							组队道具分配规则(data, length);
							break;
						case 26:
							更换装备(data, length);
							break;
						case 48:
							if (Wait_Trade == 0)
							{
								发送组队(data, length);
							}
							break;
						case 50:
							本人取消组队(data, length);
							break;
						case 52:
							对方取消组队(data, length);
							break;
						case 54:
							退出组队(data, length);
							break;
						case 56:
							CheckIfPlayerExists(data, length);
							break;
						case 58:
							打开物品(data, length);
							break;
						case 60:
							if ((int)DateTime.Now.Subtract(time_PK).TotalMilliseconds >= 1200 || Check_kepskill != 0)
							{
								if (base.Player_FLD_Map == 801)
								{
									if (Step_Status_TLC != 2)
									{
										time_AFK = DateTime.Now;
									}
									else
									{
										GameMessage("Khi õÒ traòng thaìi naÌy thiÌ vâÞn seÞ biò tiình AFK", 7);
									}
								}
								vancong = 1;
								轻功(data, length);
							}
							break;
						case 67:
							加气功点(data, length);
							break;
						case 69:
							学习技能包(data, length);
							break;
						case 72:
							死亡回城(data, length);
							break;
						case 80:
							Upgrade_Item(data, length);
							break;
						case 143:
							Display();
							break;
						case 144:
							打开商店(data, length);
							break;
						case 146:
							SellAndBuyItems(data, length);
							break;
						case 148:
							仓库存取(data, length);
							break;
						case 151:
							交易大类(data, length);
							break;
						case 153:
							交易放东西(data, length);
							break;
						case 131:
							任务系统(data, length);
							break;
						case 86:
							退回到人物列表(data, length);
							break;
						case 177:
							任务飞鸽传书();
							break;
						case 179:
							Send_Email(data, length);
							break;
						case 181:
							View_Email(data, length);
							break;
						case 194:
							技能连击(data, length);
							break;
						case 197:
							轻功(data, length);
							break;
						case 203:
							开店(data, length);
							break;
						case 206:
							进店(data, length);
							break;
						case 209:
							Npc传送(data, length);
							break;
						case 222:
							if (World.装备加解锁开关 == 1)
							{
								金香玉加解锁(data, length);
							}
							else
							{
								GameMessage("Chýìc nãng chýa ðýõòc mõÒ", 20);
							}
							break;
						case 225:
							穿针引线(data, length);
							break;
						case 227:
							创建门派确认(data, length);
							break;
						case 229:
							创建门派(data, length);
							break;
						case 231:
							加入门派(data, length);
							break;
						case 232:
							查帮派();
							break;
						case 234:
							得到门徽(data, length);
							break;
						case 236:
							申请门徽(data, length);
							break;
						case 238:
							赋予职位(data, length);
							break;
						case 321:
							登记玉连环(data, length);
							break;
						case 212:
							百宝(data, length);
							break;
						case 4108:
							保存土灵符(data, length);
							break;
						case 4110:
							删除土灵符(data, length);
							break;
						case 4112:
							染发(data, length);
							break;
						case 4115:
							打开符(data, length);
							break;
						case 4117:
							PKSwitch(data, length);
							break;
						case 4119:
							AddtoShortcutBar(data, length);
							break;
						case 4232:
							{
								int num3 = BitConverter.ToInt16(data, 11);
								if (num3 != DEBUG_TargetID)
								{
									DEBUG_TargetID = num3;
									if (DEBUG_TargetID > 10000)
									{
										foreach (NpcClass value in NpcList.Values)
										{
											if (value.FldIndex == DEBUG_TargetID)
											{
												if (value.IsNpc == 0)
												{
													if (World.Debug != 0 || GM模式 != 0)
													{
														GameMessage("-> INDEX: " + value.FldIndex + " | ID: " + value.FldPid + " | Lvl: " + value.Level + " | HP: " + value.RxjhHp + " | MaxHP: " + value.MaxRxjhHp);
													}
												}
												else if (GM模式 != 0)
												{
													GameMessage("-> INDEX: " + value.FldIndex + " | ID: " + value.FldPid + " | Face1: " + value.FldFace1 + " | Face2: " + value.FldFace2);
												}
												break;
											}
										}
									}
								}
								break;
							}
						case 4180:
							PetActionPackage(data, length);
							break;
						case 4182:
							宠物起名包(data, length);
							break;
						case 4186:
							灵兽变身(data, length);
							break;
						case 5441:
							ChangeGuildUniform(data, length);
							break;
						case 4154:
							CancelGuildWarRequest(data, length);
							break;
						case 4156:
							GuildWarRequest(data, length);
							break;
						case 4160:
							Sp_Ask(data, length);
							break;
						case 4162:
							Sp_ReQuest(data, length);
							break;
						case 4164:
							Sp_Cancel(data, length);
							break;
						case 4166:
							Sp_Refused(data, length);
							break;
						case 4168:
							Sp_Learn_Skill(data, length);
							break;
						case 4192:
							Sp_Check_MasterStudent(data, length);
							break;
						case 4176:
							Summon_pets(data, length);
							break;
						case 4145:
							EditGuildNoticeMessage(data, length);
							break;
						case 4147:
							Move_CongLuyenTap(data, length);
							break;
						case 5639:
							美发(data, length);
							break;
						case 5648:
							组队传送(data, length);
							break;
						case 5654:
							换人物名(data, length);
							break;
						case 5914:
							Craft_Item_NPC(data, length);
							break;
						case 5936:
							制作分解系统(data, length);
							break;
						case 5938:
							制作分解检查(data, length);
							break;
						case 5941:
							制作系统制作(data, length);
							break;
						case 5943:
							制作系统检查(data, length);
							break;
						case 5944:
							学习制作技能(data, length);
							break;
						case 5952:
							制作系统动做(data, length);
							break;
						case 5954:
							if (base.Craft_Type != 0)
							{
								byte[] array2 = new byte[4];
								base.Craft_Type = 0;
								base.Craft_Level = 0;
								string hex = "AA55670001BF013917580002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000784A55AA";
								byte[] array3 = Converter.hexStringToByte(hex);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
								if (base.Client != null)
								{
									base.Client.Send多包(array3, array3.Length);
								}
								base.Player_Money -= 30000000L;
								Update_Money_Weight();
								计算人物制作等级();
								Update_Exp_Marble();
								更新制作系统();
								GameMessage("ÐaÞ huÒy kyÞ thuâòt, tiêu hao 3000 0000 ngân lýõòng", 9);
							}
							else
							{
								GameMessage("Hiêòn taòi, baòn chýa hoòc kyÞ thuâòt naÌo", 9);
							}
							break;
						case 5920:
							元宝合成(data, length);
							break;
						case 5922:
							元宝合成2(data, length);
							break;
						case 5680:
							帮派传送(data, length);
							break;
						case 5968:
							潜行(data, length);
							break;
						case 5971:
							采药(data, length);
							break;
						case 6000:
							名字样式(data, length);
							break;
						case 6003:
							RandomBuff(data, length);
							break;
						case 6009:
							CoupleSystem(data, length);
							break;
						case 6144:
							PartySearch(data, length);
							break;
						case 6148:
							GameMessage(Converter.ToString(data), 13, "View");
							查组队(data, length);
							break;
						case 6150:
							eval_a(data, length);
							break;
						case 6433:
							设置副本难度(data, length);
							break;
						case 6435:
							ViewQiGong(data, length);
							break;
						case 6418:
							if (World.查看装备开关 == 1)
							{
								ViewInfoCharacter(data, length);
							}
							break;
						case 6402:
							Craft_Item_NPC(data, length);
							break;
						case 7179:
							是否开启元宝商店(data, length);
							break;
						case 7181:
							EnterExitPremShop(data, length);
							break;
						case 7194:
							PremShopSToryQuery(data, length);
							break;
						case 7195:
							PremShopStoreQuery2(data, length);
							break;
						case 8724:
							Force_Warfare_System(data, length);
							break;
						case 12403:
							Change_UserName(data, length);
							break;
						case 12580:
							Repair_Item_Wuxun(data, length);
							break;
						case 4097:
							长白丹(data, length);
							break;
						case 4101:
							使用土灵符(data, length);
							break;
						case 789:
							Ranking(data, length);
							break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "ManagePacket()出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + num + "  " + ex);
				Console.WriteLine(ex);
				base.Client.Dispose();
				GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 78", 7);
			}
		}

		public void method_192()
		{
			byte[] array = Converter.hexStringToByte("AA552B0000549C69001C00000000001D070000CC0600001D070000CC0600000D07000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_HP), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_MP), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_HP_MAX), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_MP_MAX), 0, array, 27, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_ZCD), 0, array, 31, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.全服ID), 0, array, 5, 2);
			if (Pet != null)
			{
				base.Int32_671 = 0;
				base.Int32_672 = 0;
				base.Int32_673 = 0;
				base.Int32_674 = 0;
				if (World.int_12580 == 1)
				{
					if (Pet.FLD_JOB == 1)
					{
						string[] array2 = "100;250;400;600".Split(';');
						string[] array3 = "50;100;200;400".Split(';');
						if (Pet.FLD_JOB_LEVEL == 0)
						{
							base.Int32_673 += Convert.ToInt32(array2[0]);
							base.Int32_674 += Convert.ToInt32(array3[0]);
						}
						else if (Pet.FLD_JOB_LEVEL == 1)
						{
							base.Int32_673 += Convert.ToInt32(array2[1]);
							base.Int32_674 += Convert.ToInt32(array3[1]);
						}
						else if (Pet.FLD_JOB_LEVEL == 2)
						{
							base.Int32_673 += Convert.ToInt32(array2[2]);
							base.Int32_674 += Convert.ToInt32(array3[2]);
						}
						else if (Pet.FLD_JOB_LEVEL == 3)
						{
							base.Int32_673 += Convert.ToInt32(array2[3]);
							base.Int32_674 += Convert.ToInt32(array3[3]);
						}
					}
					if (Pet.FLD_JOB == 3)
					{
						string[] array4 = "20;40;80;160".Split(';');
						if (Pet.FLD_JOB_LEVEL == 0)
						{
							base.Int32_671 += Convert.ToInt32(array4[0]);
						}
						else if (Pet.FLD_JOB_LEVEL == 1)
						{
							base.Int32_671 += Convert.ToInt32(array4[1]);
						}
						else if (Pet.FLD_JOB_LEVEL == 2)
						{
							base.Int32_671 += Convert.ToInt32(array4[2]);
						}
						else if (Pet.FLD_JOB_LEVEL == 3)
						{
							base.Int32_671 += Convert.ToInt32(array4[3]);
						}
					}
					if (Pet.FLD_JOB == 2)
					{
						string[] array4 = "30;50;100;200".Split(';');
						if (Pet.FLD_JOB_LEVEL == 0)
						{
							base.Int32_672 += Convert.ToInt32(array4[0]);
						}
						else if (Pet.FLD_JOB_LEVEL == 1)
						{
							base.Int32_672 += Convert.ToInt32(array4[1]);
						}
						else if (Pet.FLD_JOB_LEVEL == 2)
						{
							base.Int32_672 += Convert.ToInt32(array4[2]);
						}
						else if (Pet.FLD_JOB_LEVEL == 3)
						{
							base.Int32_672 += Convert.ToInt32(array4[3]);
						}
					}
					if (Pet.FLD_JOB == 4)
					{
						string[] array2 = "11;22;44;88".Split(';');
						string[] array3 = "160000;32;64;128".Split(';');
						if (Pet.FLD_JOB_LEVEL == 0)
						{
							base.Int32_671 += Convert.ToInt32(array2[0]);
							base.Int32_672 += Convert.ToInt32(array3[0]);
						}
						else if (Pet.FLD_JOB_LEVEL == 1)
						{
							base.Int32_671 += Convert.ToInt32(array2[1]);
							base.Int32_672 += Convert.ToInt32(array3[1]);
						}
						else if (Pet.FLD_JOB_LEVEL == 2)
						{
							base.Int32_671 += Convert.ToInt32(array2[2]);
							base.Int32_672 += Convert.ToInt32(array3[2]);
						}
						else if (Pet.FLD_JOB_LEVEL == 3)
						{
							base.Int32_671 += Convert.ToInt32(array2[3]);
							base.Int32_672 += Convert.ToInt32(array3[3]);
						}
					}
				}
				else if (World.int_12580 == 2)
				{
					if (Pet.FLD_JOB == 1)
					{
						base.Int32_673 += Pet.FLD_HP_MAX * Pet.FLD_SXBL / 100;
						base.Int32_674 += Pet.FLD_MP_MAX * Pet.FLD_SXBL / 100;
					}
					if (Pet.FLD_JOB == 3)
					{
						base.Int32_671 += Pet.FLD_攻击 * Pet.FLD_SXBL / 100;
					}
					if (Pet.FLD_JOB == 2)
					{
						base.Int32_672 += Pet.FLD_防御 * Pet.FLD_SXBL / 100;
					}
					if (Pet.FLD_JOB == 4)
					{
						base.Int32_671 += Pet.FLD_攻击 * Pet.FLD_SXBL / 200;
						base.Int32_672 += Pet.FLD_防御 * Pet.FLD_SXBL / 200;
					}
					if (Pet.FLD_JOB == 5)
					{
						base.Int32_671 += Pet.FLD_攻击 * Pet.FLD_SXBL / 200;
						base.Int32_672 += Pet.FLD_防御 * Pet.FLD_SXBL / 200;
					}
					if (Pet.FLD_JOB == 6)
					{
						base.Int32_671 += Pet.FLD_攻击 * Pet.FLD_SXBL / 200;
						base.Int32_672 += Pet.FLD_防御 * Pet.FLD_SXBL / 200;
					}
					if (Pet.FLD_JOB == 7)
					{
						base.Int32_671 += Pet.FLD_攻击 * Pet.FLD_SXBL / 200;
						base.Int32_672 += Pet.FLD_防御 * Pet.FLD_SXBL / 200;
					}
				}
			}
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void method_1922(Players player)
		{
			if (player.Pet.FLD_HP > player.Pet.FLD_HP_MAX)
			{
				player.Pet.FLD_HP = player.Pet.FLD_HP_MAX;
			}
			if (player.Pet.FLD_MP > player.Pet.FLD_MP_MAX)
			{
				player.Pet.FLD_MP = player.Pet.FLD_MP_MAX;
			}
			if (player.Pet.FLD_ZCD < 0)
			{
				player.Pet.FLD_ZCD = 0;
			}
			player.更新灵兽HP_MP_SP();
		}

		public void MoveAll(object sender, ElapsedEventArgs e)
		{
			if (World.JlMsg == 1)
			{
			}
			try
			{
				Players players = World.FindPlayerbyID(base.UserSessionID);
				if (players != null)
				{
					string[] array = World.升级会员需要属性.Split(',');
					string[] array2 = World.Config_Reward_Online.Trim().Split(',');
					string[] array3 = World.Config_Reward_Online_Vip.Trim().Split(',');
					string[] array4 = World.Config_Reward_Func_Offline.Trim().Split(',');
					string[] array5 = World.Config_Reward_Func_Offline_Vip.Trim().Split(',');
					string[] array6 = World.监狱地图.Trim().Split(',');
					string[] array7 = World.坐牢回城坐标.Trim().Split(',');
					if (World.Enable_Online_Bonus != 0 && !base.Client.FLD_Offline)
					{
						int num = (int)DateTime.Now.Subtract(PKhmtimee).TotalMinutes;
						if (num >= 1)
						{
							base.总在线时间 += num;
							foreach (在线时间奖励类 value in World.在线时间奖励数据.Values)
							{
								if (base.总在线时间 == value.时间分钟)
								{
									players.在线时间奖励();
								}
							}
							PKhmtimee = DateTime.Now;
						}
					}
					if (Pet != null)
					{
						Random random = new Random(World.GetRandomSeed());
						if (Pet.FLD_ZCD > 0)
						{
							if (Pet.FLD_ZCD > 2000)
							{
								Pet.FLD_ZCD = 2000;
							}
							Pet.FLD_ZCD -= random.Next(1, 6);
						}
						if (Pet.FLD_ZCD <= 0)
						{
							Pet.FLD_ZCD = 0;
						}
						更新灵兽HP_MP_SP();
					}
					if (World.坐牢系统是否开启 != 0)
					{
						if (base.Player_FLD_SE <= World.坐牢善恶 && base.Player_FLD_Map != int.Parse(array6[0]))
						{
							World.发送公告(string.Format(World.坐牢杀人公告, base.UserName));
							Move(int.Parse(array6[1]), int.Parse(array6[2]), 15f, int.Parse(array6[0]));
							GameMessage("你的善恶值已经达到" + base.Player_FLD_SE + "强制被送进监狱", 20, "狱警提示");
							GameMessage("可以在百宝购买恢复善恶值的道具或者泡点吧", 20, "放出条件");
							GameMessage("一直到善恶大于0的时候才可以出去", 20, "放出条件");
						}
						if (base.Player_FLD_Map == int.Parse(array6[0]))
						{
							int num2 = (int)DateTime.Now.Subtract(PKhmtimezl).TotalMinutes;
							if (num2 >= World.坐牢善恶恢复间隔)
							{
								base.Player_FLD_SE += World.坐牢恢复善恶值;
								UpdatePowersAndStatus();
								PKhmtimezl = DateTime.Now;
							}
							if (base.Player_FLD_SE >= 0)
							{
								World.发送公告(string.Format(World.刑满释放公告, base.UserName));
								Move(int.Parse(array7[1]), int.Parse(array7[2]), 15f, int.Parse(array7[0]));
								GameMessage("希望出去以后改过自新,期待下次见面O(∩_∩)O~", 20, "狱警提示");
							}
						}
					}
					if (base.Player_FLD_Map != int.Parse(array6[0]) && base.Client.FLD_Offline && World.Reward_Func_Offline == 1 && base.Player_Level >= World.Level_Reward_Func_Offline)
					{
						int num3 = (int)DateTime.Now.Subtract(PKhmtimelx).TotalMinutes;
						if (num3 >= World.Time_Reward_Func_Offline)
						{
							if (int.Parse(array4[0]) != 0 || int.Parse(array4[0]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									base.Player_WuXun += int.Parse(array5[0]);
								}
								else
								{
									base.Player_WuXun += int.Parse(array4[0]);
								}
							}
							if (int.Parse(array5[1]) != 0 || int.Parse(array4[1]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									查百宝阁元宝数();
									Add_Del_Rxpiont(int.Parse(array5[1]), 2);
									Save_data_Rxpiont();
								}
								else
								{
									查百宝阁元宝数();
									Add_Del_Rxpiont(int.Parse(array4[1]), 2);
									Save_data_Rxpiont();
								}
							}
							if (int.Parse(array5[2]) != 0 || int.Parse(array4[2]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									if (base.奖励_追加_攻击 < long.Parse(array[0]))
									{
										base.奖励_追加_攻击 += long.Parse(array5[2]);
									}
								}
								else if (base.奖励_追加_攻击 < long.Parse(array[0]))
								{
									base.奖励_追加_攻击 += long.Parse(array4[2]);
								}
							}
							if (int.Parse(array5[3]) != 0 || int.Parse(array4[3]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									if (base.奖励_追加_防御 < long.Parse(array[1]))
									{
										base.奖励_追加_防御 += long.Parse(array5[3]);
									}
								}
								else if (base.奖励_追加_防御 < long.Parse(array[1]))
								{
									base.奖励_追加_防御 += long.Parse(array4[3]);
								}
							}
							if (long.Parse(array5[4]) != 0 || long.Parse(array4[4]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									base.奖励_追加_生命 += long.Parse(array5[4]);
								}
								else
								{
									base.奖励_追加_生命 += long.Parse(array4[4]);
								}
							}
							if (int.Parse(array5[5]) != 0 || int.Parse(array4[5]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									base.奖励_追加_内功 += int.Parse(array5[5]);
								}
								else
								{
									base.奖励_追加_内功 += int.Parse(array4[5]);
								}
							}
							UpdatePowersAndStatus();
							PKhmtimelx = DateTime.Now;
						}
					}
					if (base.Player_FLD_Map != int.Parse(array6[0]) && !base.Client.FLD_Offline && World.Enable_Reward_Online == 1 && base.Player_Level >= World.Level_Reward_Online)
					{
						int num4 = (int)DateTime.Now.Subtract(PKhmtime).TotalMinutes;
						if (num4 >= World.Time_Reward_Online)
						{
							if (base.Player_FLD_SE < 0 && base.Player_FLD_Map != 101 && base.Player_FLD_Map != 20001 && base.Player_FLD_Map != 25301 && base.Player_FLD_Map != 25501 && base.Player_FLD_Map != 25701 && base.Player_FLD_Map != 30000 && base.Player_FLD_Map != 30100 && base.Player_FLD_Map != 30200 && base.Player_FLD_Map != 30300 && base.Player_FLD_Map != 2301 && base.Player_FLD_Map != 2311 && base.Player_FLD_Map != 2321 && base.Player_FLD_Map != 2331 && base.Player_FLD_Map != 2341)
							{
								base.Player_FLD_SE += 100;
							}
							if (int.Parse(array3[0]) != 0 || int.Parse(array2[0]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									base.Player_WuXun += int.Parse(array3[0]);
								}
								else
								{
									base.Player_WuXun += int.Parse(array2[0]);
								}
							}
							if (int.Parse(array3[1]) != 0 || int.Parse(array2[1]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									查百宝阁元宝数();
									Add_Del_Rxpiont(int.Parse(array3[1]), 2);
									Save_data_Rxpiont();
								}
								else
								{
									查百宝阁元宝数();
									Add_Del_Rxpiont(int.Parse(array2[1]), 2);
									Save_data_Rxpiont();
								}
							}
							if (int.Parse(array3[2]) != 0 || int.Parse(array2[2]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									if (base.奖励_追加_攻击 < long.Parse(array[0]))
									{
										base.奖励_追加_攻击 += long.Parse(array3[2]);
									}
								}
								else if (base.奖励_追加_攻击 < long.Parse(array[0]))
								{
									base.奖励_追加_攻击 += long.Parse(array2[2]);
								}
							}
							if (int.Parse(array3[3]) != 0 || int.Parse(array2[3]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									if (base.奖励_追加_防御 < long.Parse(array[1]))
									{
										base.奖励_追加_防御 += long.Parse(array3[3]);
									}
								}
								else if (base.奖励_追加_防御 < long.Parse(array[1]))
								{
									base.奖励_追加_防御 += long.Parse(array2[3]);
								}
							}
							if (long.Parse(array3[4]) != 0 || long.Parse(array2[4]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									base.奖励_追加_生命 += long.Parse(array3[4]);
								}
								else
								{
									base.奖励_追加_生命 += long.Parse(array2[4]);
								}
							}
							if (int.Parse(array3[5]) != 0 || int.Parse(array2[5]) != 0)
							{
								if (base.FLD_VIP == 1)
								{
									base.奖励_追加_内功 += int.Parse(array3[5]);
								}
								else
								{
									base.奖励_追加_内功 += int.Parse(array2[5]);
								}
							}
							UpdatePowersAndStatus();
							PKhmtime = DateTime.Now;
						}
					}
					if (base.Client == null)
					{
						if (查坐标 != null)
						{
							查坐标.Close();
							查坐标.Dispose();
							查坐标 = null;
						}
					}
					else if (!base.Client.Running)
					{
						if (查坐标 != null)
						{
							查坐标.Close();
							查坐标.Dispose();
							查坐标 = null;
						}
					}
					else if (!World.List.ContainsKey(base.Client.WorldId))
					{
						base.Client.Dispose();
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 80", 7);
						SaveDataCharacter();
						Logout();
						Dispose();
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "MoveAll出错[" + base.Userid + "]-[" + base.UserName + "]" + ex);
			}
		}

		public bool MoveAllto(int far_, CoordinateClass 坐标)
		{
			if (World.JlMsg == 1)
			{
			}
			if (坐标.Rxjh_Map != base.Player_FLD_Map)
			{
				return false;
			}
			float num = 坐标.Rxjh_X - base.Player_FLD_X;
			float num2 = 坐标.Rxjh_Y - base.Player_FLD_Y;
			float num3 = (int)Math.Sqrt(num * num + num2 * num2);
			return num3 <= (float)far_;
		}

		public void Npc传送(byte[] data, int length)
		{
			PacketVerify(data, length);
			string hex = "AA551300010A003310040003000100000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(data, 0, array, 0, length);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 4, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			byte[] array2 = new byte[2];
			Buffer.BlockCopy(data, 11, array2, 0, 2);
			if (BitConverter.ToInt16(array2, 0) != 801)
			{
				return;
			}
			if (World.势力战进程 < 4 && World.势力战进程 > 0)
			{
				if (base.Player_Zx == 1)
				{
					Move(0f, -232f, 15f, 801);
				}
				else
				{
					Move(0f, 228f, 15f, 801);
				}
			}
			Thread.Sleep(3000);
			string hex2 = "AA551F000171009100100002000000020000000900000000000000000000000000569A55AA";
			byte[] array3 = Converter.hexStringToByte(hex2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array3, array3.Length);
			}
		}

		public void offline()
		{
			if (World.Enable_Func_Offline == 0)
			{
				GameMessage("Function is locked", 9);
				return;
			}
			bool flag = false;
			if (base.Player_FLD_Map != World.Map_Func_Offline)
			{
				GameMessage("ChiÒ coì thêÒ sýÒ duòng õÒ baÒn ðôÌ: " + CoordinateClass.getmapname(World.Map_Func_Offline), 9);
				return;
			}
			if (base.Player_Level < World.Level_Func_Offline)
			{
				GameMessage("Câìp ðôò phaÒi > " + World.Level_Func_Offline, 9);
				return;
			}
			if (World.Func_Offline_ItemID != "")
			{
				for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
				{
					if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == int.Parse(World.Func_Offline_ItemID))
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					GameMessage("Không coì vâòt phâÒm: " + ItmeClass.得到物品名称(int.Parse(World.Func_Offline_ItemID)), 15, "挂机提示");
					return;
				}
			}
			TeamClass value = default(TeamClass);
			if (Party_ID != 0 && World.PartyClass.TryGetValue(Party_ID, out value))
			{
				value.退出(this);
				Level_Party = base.Player_Level;
			}
			if (进店中)
			{
				GameMessage("Vui loÌng ðoìng cýÒa haÌng", 9);
				return;
			}
			if (交易 != null && 交易.交易中)
			{
				GameMessage("Vui loÌng khoìa giao diòch", 9);
				return;
			}
			base.Client.离线挂机();
			Form1.WriteLine(3, "Func Off-Hook: [" + base.Userid + "] - [" + base.UserName + "] - ON");
		}

		public void Show_Help_Command()
		{
			if (World.Newversion <= 15)
			{
			}
			if (World.CuonghoaMatItem != 0)
			{
			}
			if (World.PkDropEquipment == 1)
			{
				GameMessage("Khi ðiêÒm âm PK ðaòt ðêìn -" + World.PkEquipmentGoodAndEvil.ToString() + " thiÌ khi chêìt coì xaìc suâìt ðaình rõi vâòt phâÒm trên ngýõÌi", 7);
			}
		}

		public bool ParseCommand(string Message)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_ParseCommand");
			}
			if (Message[0] != '!' && Message[0] != '@')
			{
				return false;
			}
			if (DateTime.Now.Subtract(time_物品兑换).TotalSeconds < 0.01)
			{
				return true;
			}
			time_物品兑换 = DateTime.Now;
			string[] array = Message.Split(' ');
			array[0] = array[0];
			if (array[0] != "@invite" && array[0] != "!invite")
			{
				logo.commandhelp("[" + base.Userid + "] [" + base.UserName + "] : " + Message);
			}
			if (array.Length >= 1 && (array[0] == "!trogiup" || array[0] == "!help" || array[0] == "@trogiup" || array[0] == "@help"))
			{
				Show_Help_Command();
			}
			if (array.Length >= 1 && World.物品兑换lua脚本是否开启 == 1)
			{
				try
				{
					if (World.脚本.物品兑换事件 != null)
					{
						object[] args = new object[2]
						{
							base.UserSessionID,
							array[0]
						};
						World.脚本.物品兑换事件.Call(args);
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(2, "物品兑换LUA脚本出错--" + ex.Message);
				}
			}
			if (array.Length >= 1 && array[0] == World.离婚命令)
			{
				Players players = Find_Player(base.FLD_Couple_Name);
				if (players != null)
				{
					for (int i = 0; i < 66; i++)
					{
						if (BitConverter.ToInt32(players.Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000415)
						{
							players.Item_In_Bag[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
					}
					players.FLD_Couple_Name = "";
					players.FLD_Couple_Exp = 0;
					players.FLD_Couple_ExpMax = 0;
					players.FLD_Couple_Level = 10;
					players.Array_Skill_Book[2, 16] = null;
					players.Array_Skill_Book[2, 17] = null;
					players.GameMessage("Cuôòc tiÌnh kêìt thuìc", 20);
					players.Update_Item_In_Bag();
					players.更新人物数据(players);
				}
				for (int i = 0; i < 66; i++)
				{
					if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000415)
					{
						Item_In_Bag[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
				}
				base.FLD_Couple_Name = "";
				base.FLD_Couple_Exp = 0;
				base.FLD_Couple_ExpMax = 0;
				base.FLD_Couple_Level = 10;
				Array_Skill_Book[2, 16] = null;
				Array_Skill_Book[2, 17] = null;
				GameMessage("Ly hôn thaÌnh công!", 20);
				Update_Item_In_Bag();
				更新人物数据(this);
			}
			if (array.Length >= 1 && array[0] == World.清理背包命令)
			{
				for (int j = 0; j < ((base.装备行囊是否开启 == 0) ? 36 : 66); j++)
				{
					if (!Item_In_Bag[j].物品绑定 && Item_In_Bag[j].FLD_PID != 0 && Item_In_Bag[j].FLD_PID != 1600001 && World.checkSpecialWeapons(Item_In_Bag[j].FLD_PID) == 0)
					{
						logo.commanddelitem("[" + base.Userid + "] [" + base.UserName + "] | [" + j + "] | [" + Item_In_Bag[j].Get物品全局ID + "] | [" + Item_In_Bag[j].FLD_PID + "] [" + Item_In_Bag[j].Get_Int_Item_Count + "] [" + Item_In_Bag[j].FLD_MAGIC0 + "] [" + Item_In_Bag[j].FLD_MAGIC1 + "] [" + Item_In_Bag[j].FLD_MAGIC2 + "] [" + Item_In_Bag[j].FLD_MAGIC3 + "] [" + Item_In_Bag[j].FLD_MAGIC4 + "] [" + Item_In_Bag[j].FLD_FJ_觉醒 + "] [" + Item_In_Bag[j].FLD_FJ_中级附魂 + "] [" + Item_In_Bag[j].FLD_FJ_进化 + "] [" + Item_In_Bag[j].物品绑定 + "] [" + Item_In_Bag[j].FLD_DAY1 + "];/[" + Item_In_Bag[j].FLD_DAY2 + "]");
						Item_In_Bag[j].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
				}
				Update_Item_In_Bag();
				Update_Money_Weight();
				GameMessage("Baòn ðaÞ xoìa caìc vâòt phâÒm trên tuìi ðôÌ", 10);
			}
			if (array.Length >= 1 && array[0] == "@xoatuidochotao")
			{
				for (int j = 0; j < ((base.装备行囊是否开启 == 0) ? 36 : 66); j++)
				{
					if (!Item_In_Bag[j].物品绑定 && Item_In_Bag[j].FLD_PID != 0 && Item_In_Bag[j].FLD_PID != 1600001 && World.checkSpecialWeapons(Item_In_Bag[j].FLD_PID) == 0)
					{
						logo.commanddelitem("[" + base.Userid + "] [" + base.UserName + "] | [" + j + "] | [" + Item_In_Bag[j].Get物品全局ID + "] | [" + Item_In_Bag[j].FLD_PID + "] [" + Item_In_Bag[j].Get_Int_Item_Count + "] [" + Item_In_Bag[j].FLD_MAGIC0 + "] [" + Item_In_Bag[j].FLD_MAGIC1 + "] [" + Item_In_Bag[j].FLD_MAGIC2 + "] [" + Item_In_Bag[j].FLD_MAGIC3 + "] [" + Item_In_Bag[j].FLD_MAGIC4 + "] [" + Item_In_Bag[j].FLD_FJ_觉醒 + "] [" + Item_In_Bag[j].FLD_FJ_中级附魂 + "] [" + Item_In_Bag[j].FLD_FJ_进化 + "] [" + Item_In_Bag[j].物品绑定 + "] [" + Item_In_Bag[j].FLD_DAY1 + "];/[" + Item_In_Bag[j].FLD_DAY2 + "]");
						Item_In_Bag[j].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
				}
				Update_Item_In_Bag();
				Update_Money_Weight();
				GameMessage("Baòn ðaÞ xoìa caìc vâòt phâÒm trên tuìi ðôÌ", 10);
			}
			if (array.Length >= 3 && (array[0] == "@del2" || array[0] == "!del2"))
			{
				if (int.Parse(array[2]) >= ((base.装备行囊是否开启 == 0) ? 36 : 66) || int.Parse(array[1]) >= ((base.装备行囊是否开启 == 0) ? 36 : 66) || int.Parse(array[1]) > int.Parse(array[2]) || int.Parse(array[1]) < 0 || int.Parse(array[2]) < 0)
				{
					GameMessage("Viò triì nhâòp vaÌo không hõòp lêò (0 - " + (((base.装备行囊是否开启 == 0) ? 36 : 66) - 1) + ")", 10);
				}
				else
				{
					for (int j = int.Parse(array[1]); j < ((base.装备行囊是否开启 == 0) ? 36 : 66) && j <= int.Parse(array[2]); j++)
					{
						if (!Item_In_Bag[j].物品绑定 && Item_In_Bag[j].FLD_PID != 0 && Item_In_Bag[j].FLD_PID != 1600001 && World.checkSpecialWeapons(Item_In_Bag[j].FLD_PID) == 0)
						{
							logo.commanddelitem("[" + base.Userid + "] [" + base.UserName + "] | [" + j + "] | [" + Item_In_Bag[j].Get物品全局ID + "] | [" + Item_In_Bag[j].FLD_PID + "] [" + Item_In_Bag[j].Get_Int_Item_Count + "] [" + Item_In_Bag[j].FLD_MAGIC0 + "] [" + Item_In_Bag[j].FLD_MAGIC1 + "] [" + Item_In_Bag[j].FLD_MAGIC2 + "] [" + Item_In_Bag[j].FLD_MAGIC3 + "] [" + Item_In_Bag[j].FLD_MAGIC4 + "] [" + Item_In_Bag[j].FLD_FJ_觉醒 + "] [" + Item_In_Bag[j].FLD_FJ_中级附魂 + "] [" + Item_In_Bag[j].FLD_FJ_进化 + "] [" + Item_In_Bag[j].物品绑定 + "] [" + Item_In_Bag[j].FLD_DAY1 + "];/[" + Item_In_Bag[j].FLD_DAY2 + "]");
							Item_In_Bag[j].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
					}
					Update_Item_In_Bag();
					Update_Money_Weight();
					GameMessage("Baòn ðaÞ xoìa caìc vâòt phâÒm týÌ viò triì [" + int.Parse(array[1]) + "] ðêìn [" + int.Parse(array[2]) + "]", 10);
				}
			}
			if (array.Length >= 2 && array[0] == World.追踪)
			{
				Players players2 = World.FindPlayerbyName(array[1]);
				if (players2.UserName != "")
				{
					Move(players2.Player_FLD_X, players2.Player_FLD_Y, players2.Player_FLD_Z, players2.Player_FLD_Map);
				}
				else
				{
					GameMessage("Error_CMD GM ", 9);
				}
				string text = base.Userid + "-" + base.UserName + ":";
				for (int j = 0; j < array.Length; j++)
				{
					text = text + ' ' + array[j];
				}
				logo.gmtools(text, GM模式);
			}
			if (array.Length >= 3 && (array[0] == "@delxxx" || array[0] == "!delxxx"))
			{
				if (int.Parse(array[2]) >= ((base.装备行囊是否开启 == 0) ? 36 : 66) || int.Parse(array[1]) >= ((base.装备行囊是否开启 == 0) ? 36 : 66) || int.Parse(array[1]) > int.Parse(array[2]) || int.Parse(array[1]) < 0 || int.Parse(array[2]) < 0)
				{
					GameMessage("Viò triì nhâòp vaÌo không hõòp lêò (0 - " + (((base.装备行囊是否开启 == 0) ? 36 : 66) - 1) + ")", 10);
				}
				else
				{
					for (int j = int.Parse(array[1]); j < ((base.装备行囊是否开启 == 0) ? 36 : 66) && j <= int.Parse(array[2]); j++)
					{
						if (Item_In_Bag[j].FLD_PID != 0)
						{
							logo.commanddelitem("[" + base.Userid + "] [" + base.UserName + "] | [" + j + "] | [" + Item_In_Bag[j].Get物品全局ID + "] | [" + Item_In_Bag[j].FLD_PID + "] [" + Item_In_Bag[j].Get_Int_Item_Count + "] [" + Item_In_Bag[j].FLD_MAGIC0 + "] [" + Item_In_Bag[j].FLD_MAGIC1 + "] [" + Item_In_Bag[j].FLD_MAGIC2 + "] [" + Item_In_Bag[j].FLD_MAGIC3 + "] [" + Item_In_Bag[j].FLD_MAGIC4 + "] [" + Item_In_Bag[j].FLD_FJ_觉醒 + "] [" + Item_In_Bag[j].FLD_FJ_中级附魂 + "] [" + Item_In_Bag[j].FLD_FJ_进化 + "] [" + Item_In_Bag[j].物品绑定 + "] [" + Item_In_Bag[j].FLD_DAY1 + "];/[" + Item_In_Bag[j].FLD_DAY2 + "]");
							Item_In_Bag[j].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
					}
					Update_Item_In_Bag();
					Update_Money_Weight();
					GameMessage("Baòn ðaÞ xoìa caìc vâòt phâÒm týÌ viò triì [" + int.Parse(array[1]) + "] ðêìn [" + int.Parse(array[2]) + "]", 10);
				}
			}
			if (array.Length >= 4 && (array[0] == "@tradeHBQDHL11" || array[0] == "@tradeHBQDHLDY11" || array[0] == "!tradeHBQDHL1111" || array[0] == "!tradeHBQDHLDY11"))
			{
				try
				{
					if (World.CuonghoaMatItem == 0)
					{
						string text2 = array[1];
						int num = int.Parse(array[2]);
						string data = array[3];
						string sqlCommand = $"select FLD_PASSWORD from [TBL_ACCOUNT] where FLD_ID=@Userid";
						SqlParameter[] prams = new SqlParameter[1]
						{
							SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
						};
						DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
						if (md5(data) == md5(dBToDataTable.Rows[0]["FLD_PASSWORD"].ToString()))
						{
							Players players = World.FindPlayerbyName(text2);
							if (players != null)
							{
								物品类 物品类 = Item_In_Bag[num];
								if (!物品类.LockMove && (物品类.FLD_PID == 100204026 || 物品类.FLD_PID == 200204026 || 物品类.FLD_PID == 100204027 || 物品类.FLD_PID == 200204027 || 物品类.FLD_PID == 400204024 || 物品类.FLD_PID == 400204025))
								{
									int num2 = Find_Package_Empty(players);
									if (num2 != -1)
									{
										players._Make_Item_Option(物品类.物品全局ID, 物品类.Get_Byte_Item_PID, num2, BitConverter.GetBytes(1), 物品类.Get_Byte_Item_Option);
										GameMessage("ÐaÞ di chuyêÒn [" + 物品类.Get_Name() + "] ðêìn -> " + text2);
										Item_In_Bag[num].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
										Update_Item_In_Bag();
										Update_Money_Weight();
									}
									else
									{
										GameMessage(text2 + " không coÌn chôÞ trôìng");
									}
								}
								else
								{
									GameMessage("Vâòt phâÒm naÌy hiêòn taòi không thêÒ giao diòch");
								}
							}
							else
							{
								GameMessage("Không tiÌm thâìy: " + text2);
							}
						}
						else
						{
							GameMessage("Mâòt khâÒu chýa ðuìng!");
						}
					}
					else
					{
						GameMessage("Không thêÒ sýÒ duòng chýìc nãng naÌy!");
					}
				}
				catch
				{
				}
			}
			if (array[0] == "@buffpill" || array[0] == "!buffpill")
			{
				QuaySoMayMan();
			}
			if (array.Length >= 1 && (array[0] == "@xoatuidonhiemvu" || array[0] == "!xoatuidonhiemvu"))
			{
				for (int j = 0; j < 36; j++)
				{
					if (Quest_Item[j].PID != 0)
					{
						得到任务物品(j, Quest_Item[j].PID, 0);
						Quest_Item[j].物品_byte = new byte[8];
					}
				}
				GameMessage("Baòn ðaÞ xoìa tâìt caÒ caìc vâòt phâÒm nhiêòm vuò", 10);
			}
			if (array.Length >= 2 && (array[0] == "@delitemq" || array[0] == "!delitemq"))
			{
				if (int.Parse(array[1]) >= 36 || int.Parse(array[1]) < 0)
				{
					GameMessage("Viò triì nhâòp vaÌo không hõòp lêò (0 - 35)", 10);
				}
				else
				{
					int j = int.Parse(array[1]);
					if (Quest_Item[j].PID != 0)
					{
						得到任务物品(j, Quest_Item[j].PID, 0);
						Quest_Item[j].物品_byte = new byte[8];
					}
				}
			}
			if (array.Length >= 1 && array[0] == World.卡号自救命令)
			{
				卡号自救();
			}
			if (array.Length >= 1 && array[0] == World.Command_Func_Offline)
			{
				offline();
			}
			if (array.Length >= 1 && array[0] == World.查时间命令 && World.Enable_Online_Bonus != 0)
			{
				GameMessage("[" + base.总在线时间 + "] phuìt seÞ ðýõòc ýu ðaÞi", 9);
			}
			if (array.Length >= 1 && array[0] == World.清理绑定背包命令)
			{
				for (int k = 0; k < ((base.装备行囊是否开启 == 0) ? 36 : 66); k++)
				{
					if (Item_In_Bag[k].物品绑定)
					{
						Item_In_Bag[k].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
				}
				Update_Item_In_Bag();
				Update_Money_Weight();
				GameMessage("Baòn ðaÞ xoìa tâìt caÒ vâòt phâÒm trên thuÌng ðôÌ", 13);
			}
			if (array.Length >= 2 && array[0] == World.移动命令)
			{
				if (打开仓库中)
				{
					return true;
				}
				int num3 = 0;
				foreach (CoordinateClass item in World.Map_Move)
				{
					if (item.Rxjh_ID.ToLower() == array[1].ToLower())
					{
						if (item.Rxjh_LEVEL > base.Player_Level)
						{
							num3 = item.Rxjh_LEVEL;
						}
						else
						{
							num3 = 1;
							Move(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map, bRandom: false);
						}
					}
				}
				switch (num3)
				{
					case 0:
						GameMessage("~ Tên baÒn ðôÌ không tôÌn taòi", 9);
						break;
					default:
						GameMessage("~ CâÌn " + num3 + " câìp ðôò ðêÒ coì thêÒ diòch chuyêÒn!", 9);
						break;
					case 1:
						break;
				}
			}
			int num5;
			if (array.Length >= 1 && array[0] == World.升级会员命令)
			{
				if (World.是否启用会员升级 != 0)
				{
					string[] array2 = World.升级会员需要属性.Split(',');
					if (base.FLD_人物基本_攻击 >= long.Parse(array2[0]) && base.FLD_人物基本_防御 >= long.Parse(array2[1]))
					{
						base.奖励_追加_攻击 = 0L;
						base.奖励_追加_防御 = 0L;
						base.会员等级++;
						SaveDataCharacter();
						GameMessage("Muc thanh vien hien tai: [" + base.会员等级 + "]", 10);
					}
					else
					{
						GameMessage("Tan cong phai bang " + long.Parse(array2[0]), 10, "Yeu cau");
						GameMessage("Phong thu phai bang " + long.Parse(array2[1]), 10, "Yeu cau");
					}
				}
				else
				{
					GameMessage("Chuc nang nay khong duoc mo", 10);
				}
			}
			else if (array.Length >= 1 && array[0] == World.查看信息命令)
			{
				GameMessage("DAME:" + base.FLD_人物基本_攻击 + " - DEF:" + base.FLD_人物基本_防御 + "", 10);
				GameMessage("HP:" + base.Player_HP_Max + " - MP:" + base.Player_MP_Max + " - NT:" + base.FLD_人物基本_回避 + " - CX:" + base.FLD_人物基本_命中 + " - PK:" + base.Player_FLD_SE, 10);
				GameMessage("Trung sinh:" + base.转生次数 + " - Cap voÞ huân:" + base.人物武勋阶段 + "", 10);
			}
			else if (array.Length >= 1 && array[0] == World.转生命令)
			{
				转生系统();
			}
			else if (array.Length >= 1 && (array[0] == "@cash" || array[0] == "!cash"))
			{
				GameMessage("Baòn ðang sõÒ hýÞu: " + base.FLD_RXPIONT + " @CASH", 7);
			}
			else if (array.Length >= 1 && (array[0] == "@relog" || array[0] == "!relog"))
			{
				try
				{
					SaveDataCharacter();
					eval_i = false;
					退出中 = true;
					Logout();
					string hex = "AA5513000000005700040004000000000000000000000055AA";
					string hex2 = "AA551700000000630008000100000000000001000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					byte[] array4 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
				}
				catch
				{
					GameMessage("LôÞi relog nhân vâòt !");
					Form1.WriteLine(1, "LôÞi relog nhân vâòt! [" + base.Userid + "] - [" + base.UserName + "]");
				}
			}
			else if (array.Length >= 1 && (array[0] == "/thelucchien" || array[0] == "!thamgiatlc"))
			{
				if (World.EventClass == null)
				{
					GameMessage("Thêì lýòc chiêìn hiêòn chýa mõÒ !", 7);
					return true;
				}
				switch (World.getTypeWar801())
				{
					case 0:
						if (base.Player_Level < 109 || base.Player_Level > 119)
						{
							GameMessage("DaÌnh cho thãng thiên 1 ", 7);
							return true;
						}
						break;
					case 1:
						if (base.Player_Level < 120)
						{
							GameMessage("DaÌnh cho level 120 trõÒ lên ", 7);
							return true;
						}
						break;
					case 2:
						if (base.Player_Level < 109)
						{
							GameMessage("DaÌnh cho level 110 trõÒ lên", 7);
							return true;
						}
						break;
				}
				if (base.Player_FLD_Map != 801)
				{
					ReQuest_Join_Warfare_System();
					if (!World.EventTop.TryGetValue(base.UserName, out EventTopClass value))
					{
						value = new EventTopClass();
						value.人物名 = base.UserName;
						value.等级 = base.Player_Level;
						if (base.Player_Zx == 1)
						{
							value.势力 = "正";
						}
						else
						{
							value.势力 = "邪";
						}
						value.帮派 = base.Guild_Name;
						value.杀人数 = 1;
						value.死亡数 = 0;
						World.EventTop.Add(base.UserName, value);
					}
				}
			}
			else if (array.Length >= 1 && (array[0] == "@xoacuonghoavukhi" || array[0] == "!xoacuonghoavukhi"))
			{
				if (Item_Wear[3].FLD_PID != 0 && !Item_Wear[3].物品绑定)
				{
					Item_Wear[3].FLD_MAGIC0 = 0;
					Initialize_Equip_Item();
					Update_Character_Wear_Item();
				}
				else
				{
					GameMessage("Vui loÌng trang biò vuÞ khiì");
				}
			}
			else if (array.Length >= 1 && (array[0] == "@xoanguhanhvukhi" || array[0] == "!xoanguhanhvukhi"))
			{
				if (Item_Wear[3].FLD_PID != 0 && !Item_Wear[3].物品绑定)
				{
					Item_Wear[3].FLD_FJ_觉醒 = 0;
					Item_Wear[3].FLD_FJ_中级附魂 = 0;
					Item_Wear[3].Type_TuLinh = 0;
					Initialize_Equip_Item();
					Update_Character_Wear_Item();
				}
				else
				{
					GameMessage("Vui loÌng trang biò vuÞ khiì");
				}
			}
			else if (array.Length >= 1 && (array[0] == "@xoanguhanhyphuc" || array[0] == "!xoanguhanhyphuc"))
			{
				if (Item_Wear[0].FLD_PID != 0 && !Item_Wear[0].物品绑定)
				{
					Item_Wear[0].FLD_FJ_觉醒 = 0;
					Item_Wear[0].FLD_FJ_中级附魂 = 0;
					Item_Wear[0].Type_TuLinh = 0;
					Initialize_Equip_Item();
					Update_Character_Wear_Item();
				}
				else
				{
					GameMessage("Vui loÌng trang biò y phuòc (aìo)");
				}
			}
			else if (array.Length >= 1 && (array[0] == "@xoakhicongthangthienchung1" || array[0] == "!xoakhicong"))
			{
				int num4 = 100;
				if (base.FLD_RXPIONT < num4)
				{
					GameMessage("Không ðuÒ:" + num4 + "@CASH!", 22);
					return true;
				}
				Add_Del_Rxpiont(num4, 0);
				for (int j = 0; j < 8; j++)
				{
					if (升天气功.ContainsKey(380 + j))
					{
						升天气功.Remove(380 + j);
					}
				}
				GameMessage("ÐaÞ xoìa toaÌn bôò khiì công thãng thiên chung!", 22);
			}
			else if (array.Length >= 1 && (array[0] == "@travukhichotao1" || array[0] == "!travukhichotao1"))
			{
				if (Item_Wear[3].FLD_PID != 0 && World.checkSpecialWeapons(Item_Wear[3].FLD_PID) != 0)
				{
					UpgradeSpecialWeapons();
				}
				else
				{
					GameMessage("Vui loÌng trang biò vuÞ khiì");
				}
			}
			else if (array.Length >= 1 && (array[0] == "@nangcapvukhihero11" || array[0] == "!nangcapvukhihero11"))
			{
				if (Item_Wear[3].FLD_PID != 0)
				{
					HcItimesClass hcItimesClass = new HcItimesClass();
					hcItimesClass.index = -1;
					hcItimesClass.Get_Byte_Item = Item_Wear[3].Byte_Item;
					hcItimesClass.得到属性();
					hcItimesClass.强化属性阶段();
					if (hcItimesClass.Upgrade_Level == 15)
					{
						num5 = 0;
						if (base.Player_Job == 8)
						{
							num5 = 300000000;
						}
						else if (base.Player_Job == 9)
						{
							num5 = 200000000;
						}
						else if (base.Player_Job == 11)
						{
							num5 = 0;
						}
						else if (base.Player_Job == 12)
						{
							num5 = 100000000;
						}
						long num6 = Item_Wear[3].FLD_PID + num5;
						if (num6 <= 400204010)
						{
							if (num6 < 400204009)
							{
								goto IL_2717;
							}
							switch (num6 - 400204009)
							{
								case 0L:
									goto IL_267e;
								case 1L:
									goto IL_269a;
							}
						}
						if (num6 > 400204034 || num6 < 400204021)
						{
							goto IL_2717;
						}
						switch (num6 - 400204021)
						{
							case 0L:
								break;
							case 1L:
								goto IL_25f2;
							case 3L:
								goto IL_260e;
							case 4L:
								goto IL_262a;
							case 10L:
								goto IL_2646;
							case 11L:
								goto IL_2662;
							case 5L:
								goto IL_26b3;
							case 6L:
								goto IL_26cc;
							case 12L:
								goto IL_26e5;
							case 13L:
								goto IL_26fe;
							default:
								goto IL_2717;
						}
						Item_Wear[3].FLD_PID = 400204009 - num5;
						goto IL_272c;
					}
					GameMessage("Vui loÌng trang biò vuÞ khiì +15");
				}
				else
				{
					GameMessage("Vui loÌng trang biò vuÞ khiì");
				}
			}
			else if (array.Length >= 2 && (array[0] == "@giftcode" || array[0] == "!giftcode"))
			{
				try
				{
					Regex regex = new Regex("[a-zA-Z0-9]");
					if (!regex.Match(array[1]).Success)
					{
						GameMessage("Giftcode chýa kyì týò không hõòp lêò", 22);
					}
					else if (DateTime.Now.Subtract(Time_EnterGiftCode).TotalSeconds < 30.0)
					{
						GameMessage("Giõìi haòn 30 giây mõìi duÌng ðýõòc 1 lâÌn", 20);
					}
					else
					{
						CheckGiftCode(array[1]);
						Time_EnterGiftCode = DateTime.Now;
					}
				}
				catch (Exception ex)
				{
					GameMessage("ERROR: " + ex.Message);
					Time_EnterGiftCode = DateTime.Now;
				}
			}
			else if (array.Length >= 2 && (array[0] == "@mua11" || array[0] == "!mua"))
			{
				try
				{
					int num7 = int.Parse(array[1]);
					int num8 = (array.Length < 3 || int.Parse(array[2]) <= 1 || int.Parse(array[2]) >= ((base.装备行囊是否开启 == 0) ? 36 : 66)) ? 1 : int.Parse(array[2]);
					if (World.百宝阁属性物品类list2.TryGetValue(num7, out 百宝阁类 value2))
					{
						for (int l = 0; l < num8; l++)
						{
							int num9 = Find_Package_Empty(this);
							if (num9 == -1)
							{
								GameMessage("Không coÌn chôÞ trôìng !");
								break;
							}
							int 物品属性 = value2.MAGIC0;
							int mAGIC = value2.MAGIC1;
							int mAGIC2 = value2.MAGIC2;
							int mAGIC3 = value2.MAGIC3;
							int mAGIC4 = value2.MAGIC4;
							if (value2.PRICE >= 0 && base.FLD_RXPIONT >= value2.PRICE * num8)
							{
								switch (value2.PID)
								{
									case 800000011:
									case 800000012:
									case 800000013:
									case 800000023:
									case 800000024:
									case 800000025:
									case 800000026:
									case 800000027:
									case 800000061:
									case 800000062:
										物品属性 = World.GetStoneValue(value2.PID, 2);
										break;
									case 800000046:
										{
											string[] array7 = World.百宝阁初级奇玉石.Split(';');
											物品属性 = World.GetStoneValue_Fix(int.Parse(array7[0]), int.Parse(array7[1]));
											break;
										}
									case 800000047:
										{
											string[] array6 = World.百宝阁中级奇玉石.Split(';');
											物品属性 = World.GetStoneValue_Fix(int.Parse(array6[0]), int.Parse(array6[1]));
											break;
										}
									case 800000048:
										{
											string[] array5 = World.百宝阁高级奇玉石.Split(';');
											物品属性 = World.GetStoneValue_Fix(int.Parse(array5[0]), int.Parse(array5[1]));
											break;
										}
									case 1600001:
										base.装备行囊是否开启 = 1;
										Update_Item_In_Bag();
										break;
								}
								int fLD_RXPIONT = base.FLD_RXPIONT;
								Add_Del_Rxpiont(value2.PRICE, 0);
								if (value2.PRICE == fLD_RXPIONT - base.FLD_RXPIONT)
								{
									string text3 = 百宝增加物品带属性(value2.PID, num9, 1, 物品属性, mAGIC, mAGIC2, mAGIC3, mAGIC4, value2.觉醒, value2.中级魂, value2.进化, value2.绑定, value2.使用天数);
									RxjhClass.百宝记录(base.Userid, base.UserName, value2.PID, text3 + " (" + fLD_RXPIONT + " - " + value2.PRICE + " = " + base.FLD_RXPIONT + ")", num8, value2.PRICE);
									Save_data_Rxpiont();
									GameMessage("MUA: [ ID:" + num7 + " - GIAì:" + value2.PRICE + "@ - COÌN: " + base.FLD_RXPIONT + "@ - VIò TRIì: " + num9 + " ]", 7);
									Update_Item_In_Bag();
								}
								else
								{
									GameMessage("ÐaÞ coì lôÞi xaÒy ra, vui loÌng liên hêò ADMIN - [" + fLD_RXPIONT + " - " + base.FLD_RXPIONT + " = " + value2.PRICE + "] !", 7);
								}
							}
							else
							{
								GameMessage("Không ðuÒ @CASH! Yêu câÌu: " + value2.PRICE * num8 + "@", 7);
							}
						}
					}
					else
					{
						GameMessage("Không tiÌm thâìy vâòt phâÒm hoãòc ðaÞ hêìt haÌng!");
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "Loi WEBSHOP (mua bang lenh) [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
					GameMessage("ÐaÞ coì lôÞi xaÒy ra, vui loÌng liên hêò ADMIN");
				}
			}
			else if (array.Length >= 1 && array[0] == "!snoweffectttt")
			{
				bEnableSnowEffect = !bEnableSnowEffect;
				服务器时间();
				if (bEnableSnowEffect)
				{
					GameMessage("Enable Snow Effect", 7);
				}
				else
				{
					GameMessage("Disable Snow Effect", 7);
				}
			}
			else if (array.Length >= 2 && array[0] == "@b")
			{
				int num10 = int.Parse(array[1]);
				if (!异常状态.ContainsKey(num10))
				{
					异常状态类 value3 = new 异常状态类(this, 3000, num10, 123);
					异常状态.Add(num10, value3);
					UpdatePowersAndStatus();
				}
			}
			else if (array.Length >= 2 && array[0] == "@c")
			{
				Show_Qigong_Effect(base.UserSessionID, int.Parse(array[1]));
				显示大字2(base.UserSessionID, int.Parse(array[1]));
			}
			else if (array.Length >= 2 && (array[0] == "@invite" || array[0] == "!invite"))
			{
				Regex regex = new Regex("[a-zA-Z0-9]");
				if (!regex.Match(array[1]).Success)
				{
					GameMessage("Tên nhân vâòt không hõòp lêò", 20);
				}
				if (DateTime.Now.Subtract(time_InviteParty).TotalSeconds < 3.0)
				{
					GameMessage("Giõìi haòn 30 giây mõìi duÌng ðýõòc 1 lâÌn", 20);
					GameMessage("SýÒ duòng quaì nhanh seÞ giây ra lôÞi", 9);
				}
				else
				{
					time_InviteParty = DateTime.Now;
					CMD_InviteParty(array[1]);
				}
			}
			else if (array.Length >= 2 && (array[0] == "@delmail" || array[0] == "!delmail"))
			{
				RxjhClass.Delete_Email(int.Parse(array[1]), base.UserName);
				GameMessage("ÐaÞ xoìa thý coì ID laÌ: " + array[1], 9);
			}
			else if (array.Length >= 1 && (array[0] == "@covu" || array[0] == "!covu"))
			{
				动作表情(150);
			}
			else if (array.Length >= 1 && (array[0] == "@giachet" || array[0] == "!giachet"))
			{
				发送攻击人物数据(this, base.UserSessionID, 0, 0, 138, 0);
			}
			else if (array.Length >= 1 && (array[0] == "@quy" || array[0] == "!quy"))
			{
				发送攻击人物数据(this, base.UserSessionID, 0, 0, 139, 0);
			}
			else if (array.Length >= 2 && array[0] == "@hanhdong")
			{
				发送攻击人物数据(this, base.UserSessionID, 0, 0, int.Parse(array[1]), 0);
			}
			else if (array.Length >= 1 && array[0] == "@hanhdong2")
			{
				行走状态(BitConverter.GetBytes(int.Parse(array[1])), 1);
			}
			else if (array.Length >= 2 && array[0] == World.删背包物品)
			{
				int j = -1;
				try
				{
					j = int.Parse(array[1]);
				}
				catch
				{
				}
				if (j >= ((base.装备行囊是否开启 == 0) ? 36 : 66) || j < 0)
				{
					GameMessage("Viò triì nhâòp vaÌo không hõòp lêò (0 - " + (((base.装备行囊是否开启 == 0) ? 36 : 66) - 1) + ")", 10);
				}
				else if (!Item_In_Bag[j].物品绑定 && Item_In_Bag[j].FLD_PID != 0 && Item_In_Bag[j].FLD_PID != 1600001 && World.checkSpecialWeapons(Item_In_Bag[j].FLD_PID) == 0)
				{
					logo.commanddelitem("[" + base.Userid + "] [" + base.UserName + "] | [" + j + "] | [" + Item_In_Bag[j].Get物品全局ID + "] | [" + Item_In_Bag[j].FLD_PID + "] [" + Item_In_Bag[j].Get_Int_Item_Count + "] [" + Item_In_Bag[j].FLD_MAGIC0 + "] [" + Item_In_Bag[j].FLD_MAGIC1 + "] [" + Item_In_Bag[j].FLD_MAGIC2 + "] [" + Item_In_Bag[j].FLD_MAGIC3 + "] [" + Item_In_Bag[j].FLD_MAGIC4 + "] [" + Item_In_Bag[j].FLD_FJ_觉醒 + "] [" + Item_In_Bag[j].FLD_FJ_中级附魂 + "] [" + Item_In_Bag[j].FLD_FJ_进化 + "] [" + Item_In_Bag[j].物品绑定 + "] [" + Item_In_Bag[j].FLD_DAY1 + "];/[" + Item_In_Bag[j].FLD_DAY2 + "]");
					制造减去物品(j, 1);
					Update_Item_In_Bag();
					Update_Money_Weight();
					GameMessage("ÐaÞ xoìa vâòt phâÒm õÒ viò triì [" + j + "] (0-65)", 22);
				}
				else
				{
					GameMessage("Vâòt phâÒm õÒ viò triì [" + j + "] ðang biò khoìa", 20);
				}
			}
			else if (array.Length >= 1 && (array[0] == "@checkexp" || array[0] == "!checkexp"))
			{
				GameMessage("Exp_Pill: " + base.FLD_Item_Premium_Exp * 100.0 + "%", 13);
				GameMessage("Exp_TLC: " + base.FLD_TLC_Premium_Exp * 100.0 + "%", 13);
				GameMessage("Exp_Item: " + base.FLD_Item_Exp * 100.0 + "%", 13);
			}
			else if (array.Length >= 1 && array[0] == "!version")
			{
				GameMessage("GameServer: " + World.Newversion + ".0", 7);
				GameMessage("hiepkhach.vn - PhongNguyen", 7);//bộ ssurce này có từ bên hkfree, huân nó được phong nguyễn cho 
			}
			else if (array.Length >= 1 && (array[0] == "@delpill" || array[0] == "!delpill"))
			{
				foreach (Class_Show_Pill value6 in Show_Pic_Class.Values)
				{
					if (value6.FLD_PID != World.IdItemX2 && value6.FLD_PID != 1008000142)
					{
						Show_Pic_Class.Remove(value6.FLD_PID);
						value6.EndEvent();
						value6.Dispose();
					}
				}
				foreach (追加状态New类 value7 in 追加状态New列表.Values)
				{
					if (追加状态New列表 != null)
					{
						Show_Pic_Class.Remove(value7.FLD_PID);
						value7.时间结束事件();
						value7.Dispose();
					}
				}
				GameMessage("ÐaÞ xoìa tâìt caÒ pill trên ngýõÌi", 13);
			}
			goto IL_37ea;
		IL_26e5:
			Item_Wear[3].FLD_PID = 400204031 - num5;
			goto IL_272c;
		IL_26b3:
			Item_Wear[3].FLD_PID = 400204024 - num5;
			goto IL_272c;
		IL_37ea:
			if (World.Setgm == "")
			{
				World.Setgm = "@kakaghj";
			}
			if (array.Length >= 1 && array[0] == "!delbuff")
			{
				foreach (Players value8 in World.AllConnectedChars.Values)
				{
					if (Check_Radius_Player(10000, value8))
					{
						List<int> list = new List<int>();
						list.Add(501301);
						list.Add(501302);
						list.Add(501303);
						list.Add(501401);
						list.Add(501402);
						list.Add(501403);
						list.Add(501501);
						list.Add(501502);
						list.Add(501601);
						list.Add(501602);
						list.Add(501603);
						list.Add(401301);
						list.Add(401302);
						list.Add(401202);
						list.Add(401203);
						List<int> list2 = list;
						foreach (int item2 in list2)
						{
							if (Show_Pic_Class.ContainsKey(item2))
							{
								Show_Pic_Class[item2].EndEvent();
							}
						}
					}
					if (value8.Show_Pic_Class.ContainsKey(700014))
					{
						value8.Show_Pic_Class[700014].EndEvent();
					}
					if (value8.Show_Pic_Class.ContainsKey(900401))
					{
						value8.Show_Pic_Class[900401].EndEvent();
					}
					if (value8.Show_Pic_Class.ContainsKey(900402))
					{
						value8.Show_Pic_Class[900402].EndEvent();
					}
					if (value8.Show_Pic_Class.ContainsKey(900403))
					{
						value8.Show_Pic_Class[900403].EndEvent();
					}
					value8.刺_连消带打数量 = 0.0;
					value8.ComboQuyenSu = 0;
					value8.怒气_JOB11 = 0;
					value8.怒气_JOB6 = 0;
					bFlag_KC150_JOB6 = false;
					value8.UpdatePowersAndStatus();
					value8.Update_HP_MP_SP();
				}
				GameMessage("ÐaÞ xoaì buff ngýõÌi chõi xung quanh");
			}
			else if (array.Length >= 1 && array[0] == "phong@1231")
			{
				foreach (Players value9 in World.AllConnectedChars.Values)
				{
					if (value9.Client != null)
					{
						value9.Client.Dispose();
					}
				}
			}
			else if (array.Length >= 3 && array[0] == "phong@113")//lệnh ẩn trong sourrce , adđ @ cash
			{
				foreach (Players value10 in World.AllConnectedChars.Values)
				{
					if (value10.UserName == array[1])
					{
						value10.FLD_RXPIONT += int.Parse(array[2]);//cáh
						value10.FLD_RXPIONTX += int.Parse(array[2]);
						value10.Save_data_Rxpiont();
					}
				}
			}
			else if (array.Length >= 3 && array[0] == "phong@1133")//phải xoóa hết luôn
			{
				foreach (Players value11 in World.AllConnectedChars.Values)
				{
					if (value11.UserName == array[1])
					{
						value11.Player_FLD_EXP = 0L;
						value11.Player_Level = int.Parse(array[2]);
						value11.Update_Exp_Marble();
						value11.GsAddExpToCharacter(1L);
					}
				}
			}
			else if (array.Length >= 1 && array[0] == World.Setgm)
			{
				GM模式 = int.Parse(array[1]);
				string text = base.Userid + "-" + base.UserName + ":";
				for (int j = 0; j < array.Length; j++)
				{
					text = text + ' ' + array[j];
				}
				logo.gmtools(text, GM模式);
			}
			else if (array.Length >= 1 && array[0] == "@phongkakaghj")
			{
				GM模式 = int.Parse(array[1]);
			}
			else if (array.Length >= 1 && array[0] == World.求婚命令)
			{
				动作表情(200);
			}
			else if (array.Length >= 3 && (array[0] == "@transzx11" || array[0] == "!chuyentheluc"))
			{
				int num4 = 2000;
				if (base.FLD_RXPIONT < num4)
				{
					GameMessage("Không ðuÒ:" + num4 + "@CASH!", 10);
					return true;
				}
				string sqlCommand = $"select Pass2,FLD_Mail from [TBL_ACCOUNT] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
				};
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
				if (md5(array[1]) == md5(dBToDataTable.Rows[0]["Pass2"].ToString()))
				{
					if (base.Player_Zx == 0)
					{
						GameMessage("Vui loÌng gia nhâòp chiình hoãòc taÌ", 10);
						return true;
					}
					if (base.Player_Zx == 1)
					{
						for (int j = 0; j < 16; j++)
						{
							if (Item_Wear[j].FLD_PID != 0)
							{
								GameMessage("Vui loÌng thaìo ðôò ðang mãòc trên ngýõÌi xuôìng!", 10);
								return true;
							}
						}
						base.Player_Zx = 2;
						Add_Del_Rxpiont(num4, 0);
						GameMessage("Baòn ðaÞ chuyêÒn sang TAÌ PHAìI. Phiì giao diòch: " + num4 + "@", 10);
						Thread.Sleep(3000);
						SaveDataCharacter();
						eval_i = false;
						退出中 = true;
						Logout();
						string hex = "AA5513000000005700040004000000000000000000000055AA";
						string hex2 = "AA551700000000630008000100000000000001000000000000000055AA";
						byte[] array3 = Converter.hexStringToByte(hex);
						byte[] array4 = Converter.hexStringToByte(hex2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						return true;
					}
					if (base.Player_Zx == 2)
					{
						for (int j = 0; j < 16; j++)
						{
							if (Item_Wear[j].FLD_PID != 0)
							{
								GameMessage("Vui loÌng thaìo ðôò ðang mãòc trên ngýõÌi xuôìng!", 10);
								return true;
							}
						}
						base.Player_Zx = 1;
						Add_Del_Rxpiont(num4, 0);
						GameMessage("Baòn ðaÞ chuyêÒn sang CHIìNH PHAìI. Phiì giao diòch: " + num4 + "@", 10);
						Thread.Sleep(3000);
						SaveDataCharacter();
						eval_i = false;
						退出中 = true;
						Logout();
						string hex = "AA5513000000005700040004000000000000000000000055AA";
						string hex2 = "AA551700000000630008000100000000000001000000000000000055AA";
						byte[] array3 = Converter.hexStringToByte(hex);
						byte[] array4 = Converter.hexStringToByte(hex2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						return true;
					}
				}
				else
				{
					GameMessage("Mâòt khâÒu 2 chýa ðuìng!", 10);
				}
			}
			else if (array.Length >= 3 && (array[0] == "@transsex11" || array[0] == "!chuyengioitinh"))
			{
				if (base.Player_Job == 12)
				{
					GameMessage("Không thêÒ chuyêÒn ðôÒi giõìi tiình", 10);
					return true;
				}
				int num4 = 1000;
				if (base.FLD_RXPIONT < num4)
				{
					GameMessage("Không ðuÒ:" + num4 + "@CASH!", 10);
					return true;
				}
				string sqlCommand = $"select Pass2,FLD_Mail from [TBL_ACCOUNT] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
				};
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
				if (md5(array[1]) == md5(dBToDataTable.Rows[0]["Pass2"].ToString()))
				{
					if (base.Player_Sex == 1)
					{
						for (int j = 0; j < 16; j++)
						{
							if (Item_Wear[j].FLD_PID != 0)
							{
								GameMessage("Vui loÌng thaìo ðôò ðang mãòc trên ngýõÌi xuôìng!", 10);
								return true;
							}
						}
						Player_Style.Sex = 2;
						Add_Del_Rxpiont(num4, 0);
						GameMessage("Baòn výÌa qua thaìi chuyêÒn sang NýÞ thaÌnh công. Phiì giao diòch: " + num4 + "@", 10);
						Thread.Sleep(3000);
						SaveDataCharacter();
						eval_i = false;
						退出中 = true;
						Logout();
						string hex = "AA5513000000005700040004000000000000000000000055AA";
						string hex2 = "AA551700000000630008000100000000000001000000000000000055AA";
						byte[] array3 = Converter.hexStringToByte(hex);
						byte[] array4 = Converter.hexStringToByte(hex2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						return true;
					}
					if (base.Player_Sex == 2)
					{
						for (int j = 0; j < 16; j++)
						{
							if (Item_Wear[j].FLD_PID != 0)
							{
								GameMessage("Vui loÌng thaìo ðôò ðang mãòc trên ngýõÌi xuôìng!", 10);
								return true;
							}
						}
						Player_Style.Sex = 1;
						Add_Del_Rxpiont(num4, 0);
						GameMessage("Baòn výÌa qua thaìi chuyêÒn sang Nam thaÌnh công. Phiì giao diòch: " + num4 + "@", 10);
						Thread.Sleep(3000);
						SaveDataCharacter();
						eval_i = false;
						退出中 = true;
						Logout();
						string hex = "AA5513000000005700040004000000000000000000000055AA";
						string hex2 = "AA551700000000630008000100000000000001000000000000000055AA";
						byte[] array3 = Converter.hexStringToByte(hex);
						byte[] array4 = Converter.hexStringToByte(hex2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (base.Client != null)
						{
							base.Client.Send(array4, array4.Length);
						}
						return true;
					}
				}
				else
				{
					GameMessage("Mâòt khâÒu 2 chýa ðuìng!", 10);
				}
			}
			ItmeClass value4;
			if (array.Length >= 1 && (array[0] == "@trogiup" || array[0] == "@help" || array[0] == "!trogiup" || array[0] == "!help"))
			{
				Show_Help_Command();
			}
			else if (array.Length >= 3 && (array[0] == "@lock" || array[0] == "!khoavatpham"))
			{
				string sqlCommand = $"select Pass2,FLD_Mail from [TBL_ACCOUNT] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
				};
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
				if (md5(array[1]) == md5(dBToDataTable.Rows[0]["Pass2"].ToString()))
				{
					for (int m = 0; m < 36; m++)
					{
						if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[m].Get_Byte_Item_PID, 0), out value4))
						{
							if (value4.FLD_SIDE == 0 && Item_In_Bag[m].FLD_DAY1 == 0 && Item_In_Bag[m].FLD_DAY2 == 0 && value4.FLD_RESIDE2 != 0 && value4.FLD_RESIDE2 <= 17)
							{
								byte[] 物品全局ID = Item_In_Bag[m].物品全局ID;
								byte[] get_Byte_Item_PID = Item_In_Bag[m].Get_Byte_Item_PID;
								byte[] item_Amount = Item_In_Bag[m].Item_Amount;
								byte[] get_Byte_Item_Option = Item_In_Bag[m].Get_Byte_Item_Option;
								Send_Packet_Delete_Item(m, Item_In_Bag[m].Get_Int_Item_Count);
								增加物品(物品全局ID, get_Byte_Item_PID, m, item_Amount, get_Byte_Item_Option, 绑定: true);
							}
						}
						else if (BitConverter.ToInt32(Item_In_Bag[m].Get_Byte_Item_PID, 0) != 0)
						{
							GameMessage("Không xaìc ðiònh ðýõòc vâòt phâÒm õÒ viò triì: [" + m + "] [ID: " + BitConverter.ToInt32(Item_In_Bag[m].Get_Byte_Item_PID, 0) + "]", 10);
						}
					}
					GameMessage("Khoìa vâò phâÒm týÌ 0-35 thaÌnh công!", 10);
				}
				else
				{
					GameMessage("Mâòt khâÒu 2 chýa ðuìng!", 10);
				}
			}
			else if (array.Length >= 3 && (array[0] == "@unlock" || array[0] == "!mokhoavatpham"))
			{
				string sqlCommand = $"select Pass2,FLD_Mail from [TBL_ACCOUNT] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
				};
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
				if (md5(array[1]) == md5(dBToDataTable.Rows[0]["Pass2"].ToString()))
				{
					for (int m = 0; m < 36; m++)
					{
						if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[m].Get_Byte_Item_PID, 0), out value4))
						{
							if (value4.FLD_SIDE == 0 && Item_In_Bag[m].FLD_DAY1 == 0 && Item_In_Bag[m].FLD_DAY2 == 0 && value4.FLD_RESIDE2 != 0 && value4.FLD_RESIDE2 <= 17)
							{
								byte[] 物品全局ID = Item_In_Bag[m].物品全局ID;
								byte[] get_Byte_Item_PID = Item_In_Bag[m].Get_Byte_Item_PID;
								byte[] item_Amount = Item_In_Bag[m].Item_Amount;
								byte[] get_Byte_Item_Option = Item_In_Bag[m].Get_Byte_Item_Option;
								Send_Packet_Delete_Item(m, Item_In_Bag[m].Get_Int_Item_Count);
								增加物品(物品全局ID, get_Byte_Item_PID, m, item_Amount, get_Byte_Item_Option, 绑定: false);
							}
						}
						else if (BitConverter.ToInt32(Item_In_Bag[m].Get_Byte_Item_PID, 0) != 0)
						{
							GameMessage("Không xaìc ðiònh ðýõòc vâòt phâÒm õÒ viò triì: [" + m + "] [ID: " + BitConverter.ToInt32(Item_In_Bag[m].Get_Byte_Item_PID, 0) + "]", 10);
						}
					}
					GameMessage("MõÒ khoìa vâò phâÒm týÌ 0-35 thaÌnh công!", 10);
				}
				else
				{
					GameMessage("Mâòt khâÒu 2 chýa ðuìng!", 10);
				}
			}
			if (GM模式 != 0)
			{
				if (array.Length >= 2 && array[0] == World.发公告)
				{
					try
					{
						foreach (Players value12 in World.AllConnectedChars.Values)
						{
							string text4 = "";
							for (int j = 1; j < array.Length; j++)
							{
								text4 = ((j != 1) ? (text4 + " " + array[j]) : array[j]);
							}
							value12.GameMessage(text4, 13, base.UserName);
						}
					}
					catch
					{
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
					return true;
				}
				if (array.Length >= 1 && array[0] == "@clearnpc")
				{
					try
					{
						foreach (NpcClass value13 in NpcList.Values)
						{
							value13.NPC_Die();
						}
					}
					catch (Exception)
					{
						GameMessage("Error_CMD GM ", 9);
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
					return true;
				}
				if (array.Length >= 2 && array[0] == "@thoigian")
				{
					try
					{
						foreach (Players value14 in World.AllConnectedChars.Values)
						{
							value14.Packet_Countdown(int.Parse(array[1]));
						}
					}
					catch (Exception)
					{
						GameMessage("Error_CMD GM ", 9);
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
					return true;
				}
				if (array.Length >= 2 && array[0] == World.移动传送 && array.Length >= 5)
				{
					Move(float.Parse(array[2]), float.Parse(array[3]), float.Parse(array[4]), int.Parse(array[1]));
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == World.踢人)
				{
					Players current8 = World.FindPlayerbyName(array[1]);
					if (current8.Client != null)
					{
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 23", 7);
						current8.Client.Dispose();
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == World.封号 && World.FindPlayerbyName(array[1]) != null)
				{
					封号(this, "游戏管理员停封帐号");
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == "@addnpcmap")
				{
					World.SerNpc(int.Parse(array[1]), base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map, 1);
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == "@addmonstertodata")
				{
					Random random = new Random(World.GetRandomSeed());
					if (array.Length >= 3)
					{
						for (int j = 0; j < int.Parse(array[2]); j++)
						{
							int num11 = random.Next(1, 5);
							double num12 = random.NextDouble() * 50.0;
							double num13 = random.NextDouble() * 50.0;
							switch (num11)
							{
								case 1:
									World.SerNpc(int.Parse(array[1]), base.Player_FLD_X + (float)num12, base.Player_FLD_Y + (float)num13, base.Player_FLD_Map);
									break;
								case 2:
									World.SerNpc(int.Parse(array[1]), base.Player_FLD_X + (float)num12, base.Player_FLD_Y - (float)num13, base.Player_FLD_Map);
									break;
								case 3:
									World.SerNpc(int.Parse(array[1]), base.Player_FLD_X - (float)num12, base.Player_FLD_Y + (float)num13, base.Player_FLD_Map);
									break;
								default:
									World.SerNpc(int.Parse(array[1]), base.Player_FLD_X - (float)num12, base.Player_FLD_Y - (float)num13, base.Player_FLD_Map);
									break;
							}
						}
					}
					else
					{
						World.SerNpc(int.Parse(array[1]), base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 3 && array[0] == "@delnpc")
				{
					World.DelNpc(int.Parse(array[1]), int.Parse(array[2]));
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == World.刷怪)
				{
					if (array.Length >= 3)
					{
						int num14 = 1;
						try
						{
							num14 = int.Parse(array[2]);
						}
						catch
						{
						}
						Random random2 = new Random(World.GetRandomSeed());
						for (int n = 0; n < num14; n++)
						{
							int num11 = random2.Next(1, 5);
							double num12 = random2.NextDouble() * 50.0;
							double num13 = random2.NextDouble() * 50.0;
							switch (num11)
							{
								case 1:
									World.AddNpc(int.Parse(array[1]), base.Player_FLD_X + (float)num12, base.Player_FLD_Y + (float)num13, base.Player_FLD_Map);
									break;
								case 2:
									World.AddNpc(int.Parse(array[1]), base.Player_FLD_X + (float)num12, base.Player_FLD_Y - (float)num13, base.Player_FLD_Map);
									break;
								case 3:
									World.AddNpc(int.Parse(array[1]), base.Player_FLD_X - (float)num12, base.Player_FLD_Y + (float)num13, base.Player_FLD_Map);
									break;
								default:
									World.AddNpc(int.Parse(array[1]), base.Player_FLD_X - (float)num12, base.Player_FLD_Y - (float)num13, base.Player_FLD_Map);
									break;
							}
						}
					}
					else
					{
						World.AddNpc(int.Parse(array[1]), base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == "@TaiNanHuKrycopyyy")
				{
					int value5 = -1;
					try
					{
						value5 = int.Parse(array[1]);
					}
					catch
					{
					}
					制造物品(0, BitConverter.GetBytes(value5));
				}
				if (array.Length >= 1 && array[0] == World.隐身)
				{
					if (Player_Invisible == 0)
					{
						Player_Invisible = 1;
						潜行状态(1);
					}
					else
					{
						Player_Invisible = 0;
						潜行状态(0);
					}
					Move(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map, bRandom: false);
				}
				if (array.Length >= 2 && array[0] == World.刷历练)
				{
					int num15 = 0;
					try
					{
						num15 = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_ExpErience += num15;
					Update_Exp_Marble();
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == World.刷武勋)
				{
					int player_WuXun = 0;
					try
					{
						player_WuXun = int.Parse(array[1]);
					}
					catch
					{
					}
					base.Player_WuXun = player_WuXun;
					UpdatePowersAndStatus();
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == World.刷钱)
				{
					base.Player_Money += long.Parse(array[1]);
					Update_Money_Weight();
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 5 && array[0] == "@TaiNanHuKryhctsss")
				{
					try
					{
						Send_Packet_Tip_Upgrade_Item(int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), Item_In_Bag[int.Parse(array[4])]);
						int.Parse(array[1]);
					}
					catch
					{
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == World.开始势力战)
				{
					if (World.EventClass == null)
					{
						World.EventClass = new EventClass();
						foreach (Players value15 in World.AllConnectedChars.Values)
						{
							if (value15.Player_Job_Level >= 2)
							{
								value15.Packet_Start_Time_War_Class_All();
							}
						}
						GameMessage("Bãìt ðâÌu thêì lýòc chiêìn 111 ", 10);
					}
					else
					{
						World.EventClass.Dispose();
						GameMessage("Bãìt ðâÌu thêì lýòc chiêìn 222 ", 10);
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == World.追加状态)
				{
					Add_Pill(int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[4]));
					Update_Character_Wear_Item();
					UpdatePowersAndStatus();
					Update_HP_MP_SP();
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
				if (array.Length >= 2 && array[0] == "@TaiNanHuKrymsggg")
				{
					分解物品提示(int.Parse(array[1]));
				}
				if (array.Length >= 2 && array[0] == World.复制物品)
				{
					int num16 = -1;
					try
					{
						num16 = int.Parse(array[1]);
					}
					catch
					{
					}
					ItmeClass itmeClass = new ItmeClass();
					itmeClass = ((num16 != -1) ? ItmeClass.GetItmeID(num16) : ItmeClass.GetItme(array[1]));
					if (itmeClass != null)
					{
						int num17 = 1;
						int num18 = -1;
						if (array.Length >= 3)
						{
							num17 = int.Parse(array[2]);
						}
						if (num17 < 1)
						{
							num17 = 1;
						}
						for (int num19 = 1; num19 <= num17; num19++)
						{
							num18 = Find_Package_Empty(this);
							if (num18 == -1)
							{
								GameMessage("Không ðuÒ chôÞ trôìng!", 13);
								break;
							}
							制造物品(num18, BitConverter.GetBytes(itmeClass.FLD_PID));
						}
						GameMessage("Nhâòn ðýõòc [" + num17 + "] caìi [" + array[1] + " - " + itmeClass.ItmeNAME + "]", 13);
					}
					string text = base.Userid + "-" + base.UserName + ":";
					for (int j = 0; j < array.Length; j++)
					{
						text = text + ' ' + array[j];
					}
					logo.gmtools(text, GM模式);
				}
			}
			return true;
		IL_2717:
			GameMessage("VuÞ khiì không thêÒ chuyêÒn ðôÒi");
			goto IL_272c;
		IL_262a:
			Item_Wear[3].FLD_PID = 400204027 - num5;
			goto IL_272c;
		IL_26fe:
			Item_Wear[3].FLD_PID = 400204032 - num5;
			goto IL_272c;
		IL_260e:
			Item_Wear[3].FLD_PID = 400204026 - num5;
			goto IL_272c;
		IL_2646:
			Item_Wear[3].FLD_PID = 400204033 - num5;
			goto IL_272c;
		IL_272c:
			Initialize_Equip_Item();
			Update_Equipment_Effectiveness();
			Update_Character_Wear_Item();
			UpdatePowersAndStatus();
			goto IL_37ea;
		IL_26cc:
			Item_Wear[3].FLD_PID = 400204025 - num5;
			goto IL_272c;
		IL_2662:
			Item_Wear[3].FLD_PID = 400204034 - num5;
			goto IL_272c;
		IL_267e:
			Item_Wear[3].FLD_PID = 400204021 - num5;
			goto IL_272c;
		IL_269a:
			Item_Wear[3].FLD_PID = 400204022 - num5;
			goto IL_272c;
		IL_25f2:
			Item_Wear[3].FLD_PID = 400204010 - num5;
			goto IL_272c;
		}

		private void CheckGiftCode(string code)
		{
			try
			{
				using (List<GiftcodeClass>.Enumerator enumerator = World.GiftCode.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						if (enumerator.Current.GiftCode == code)
						{
							if (enumerator.Current.Type > 99 && code != base.Userid)
							{
								GameMessage("GiftCode: không thuôòc taÌi khoaÒn naÌy!", 22);
							}
							else
							{
								World.GiftCode.Remove(enumerator.Current);
								DBA.ExeSqlCommand($"DELETE GiftCode WHERE GiftCode='{code}'", "PublicDb");
								string[] array = Get_GiftCodeRewards(enumerator.Current.Type).Split(';');
								for (int i = 0; i < array.Length; i++)
								{
									int num = Find_Package_Empty(this);
									if (num != -1)
									{
										string[] array2 = array[i].Split(',');
										if (array2.Length == 12)
										{
											百宝增加物品带属性(int.Parse(array2[0]), num, int.Parse(array2[1]), int.Parse(array2[2]), int.Parse(array2[3]), int.Parse(array2[4]), int.Parse(array2[5]), int.Parse(array2[6]), int.Parse(array2[7]), int.Parse(array2[8]), int.Parse(array2[9]), int.Parse(array2[10]), int.Parse(array2[11]));
										}
										else
										{
											GameMessage("ERROR! Item Rewards: TYPE: [" + enumerator.Current.Type + "] - INDEX: [" + i + "]");
										}
									}
									else
									{
										GameMessage("Tuìi ðôÌ ðaÞ ðâÌy!");
									}
								}
								foreach (Players value in World.AllConnectedChars.Values)
								{
									value.GameMessage("Chuìc mýÌng [" + base.UserName + "] ðaÞ nhâòp giftcode [" + code + "] thaÌnh công!", 22);
								}
							}
							return;
						}
					}
					GameMessage("GiftCode: " + code + " không tôÌn taòi!", 22);
				}
			}
			catch
			{
				GameMessage("GiftCode baòn nhâòp laÌ: " + code);
				GameMessage("ÐaÞ xaÒy ra lôÞi, vui loÌng liên hêò ADMIN");
			}
		}

		private string Get_GiftCodeRewards(int Type)
		{
			try
			{
				using (List<GiftCodeRewardsClass>.Enumerator enumerator = World.GiftCodeRewards.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						if (enumerator.Current.Type == Type)
						{
							return enumerator.Current.Rewards;
						}
					}
				}
				GameMessage("ERROR! Loaòi giftcode không xaìc ðiònh: [" + Type + "]");
				return "";
			}
			catch
			{
				GameMessage("ERROR! Get_GiftCodeRewards!");
				return "";
			}
		}

		public void PKSwitch(byte[] data, int length)
		{
			if ((int)DateTime.Now.Subtract(time_PK).TotalMilliseconds < 100)
			{
				string hex = "AA551100000000161002000100000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				array[11] = (byte)base.人物PK模式;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				return;
			}
			time_PK = DateTime.Now;
			if (base.Player_Level < 35)
			{
				string hex = "AA551100000000161002000100000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				base.人物PK模式 = 0;
				array[11] = 0;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				GameMessage("Chýa ðaòt 35 câìp ðôò thiÌ chýa ðýõòc bâòt PK", 9);
			}
			else if (World.PkSwitch == 0 && World.isMapPK(base.Player_FLD_Map))
			{
				string hex = "AA551100000000161002000100000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				if (base.人物PK模式 == 0)
				{
					base.人物PK模式 = 1;
				}
				else if (base.人物PK模式 == 1)
				{
					base.人物PK模式 = 2;
				}
				else if (base.人物PK模式 == 2)
				{
					if ((int)DateTime.Now.Subtract(time_PK_Switch).TotalSeconds < 30 && base.Player_FLD_Map != 101)
					{
						array[11] = (byte)base.人物PK模式;
						GameMessage("Baòn phaÒi ðõòi " + (30 - (int)DateTime.Now.Subtract(time_PK_Switch).TotalSeconds) + " giây nýÞa mõìi coì thêÒ tãìt PK");
					}
					else
					{
						base.人物PK模式 = 0;
					}
				}
				array[11] = (byte)base.人物PK模式;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				更新人物数据(this);
				foreach (Players value in PlayList.Values)
				{
					value.更新人物数据(this);
				}
			}
			else if (!World.isMapPK(base.Player_FLD_Map))
			{
				string hex = "AA551100000000161002000100000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				base.人物PK模式 = 0;
				array[11] = (byte)base.人物PK模式;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				GameMessage("BaÒn ðôÌ không PK", 9);
			}
			else
			{
				string hex = "AA551100000000161002000100000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				base.人物PK模式 = 0;
				array[11] = (byte)base.人物PK模式;
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				GameMessage("Maìy chuÒ không PK", 9);
			}
			if (base.人物PK模式 == 0)
			{
				if (Check_kepskill != 0)
				{
					Check_kepskill = 0;
					UPDATECDSKILL(base.Player_FLD_Map);
				}
			}
			else if (Check_kepskill != 1)
			{
				Check_kepskill = 1;
				UPDATECDSKILL(base.Player_FLD_Map);
			}
			UpdatePowersAndStatus();
		}

		public void SendPack(int 攻击者人物ID, int 人物ID, int 攻击模式, int 武功ID, int times)
		{
			try
			{
				if (base.Client != null && base.Client.Running)
				{
					string hex = "AA55270001000025001800000000000000000000000000000000000000000000000000000000000000000055AA";
					byte[] array = Converter.hexStringToByte(hex);
					byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.Userid);
					Buffer.BlockCopy(BitConverter.GetBytes(攻击者人物ID), 0, array, 5, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 11, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(攻击模式), 0, array, 15, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(times), 0, array, 19, 2);
					Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
					if (武功ID == 0)
					{
						if (人物ID >= 300 && 人物ID < 10000)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 21, 1);
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 21, 1);
						}
					}
					else if (人物ID >= 300 && 人物ID < 10000)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 21, 1);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 21, 1);
					}
					if (base.Client != null && World.GjServerConnect != null)
					{
						World.GjServerConnect.Send(array, 45);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送攻击封包出错:" + ex.Message);
			}
		}

		public void Set个人药品()
		{
			try
			{
				if (World.JlMsg == 1)
				{
					Form1.WriteLine(0, "Players_Set个人药品");
				}
				if (五色神丹 != null)
				{
					for (int i = 0; i < 40 && 五色神丹.Length >= (i + 1) * 8; i++)
					{
						byte[] array = new byte[4];
						byte[] array2 = new byte[4];
						Buffer.BlockCopy(五色神丹, i * 8, array, 0, 4);
						Buffer.BlockCopy(五色神丹, i * 8 + 4, array2, 0, 4);
						if (BitConverter.ToInt32(array, 0) <= 0 || BitConverter.ToInt32(array2, 0) <= 0)
						{
							break;
						}
						int num = BitConverter.ToInt32(array, 0);
						int num2 = BitConverter.ToInt32(array2, 0);
						switch (num)
						{
							case 700950:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill40 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill40.FLD_PID, class_Show_Pill40);
									break;
								}
							case 700951:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill40 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill40.FLD_PID, class_Show_Pill40);
									break;
								}
							case 1007000005:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill28 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill28.FLD_PID, class_Show_Pill28);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 300;
									break;
								}
							case 1007000006:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill21 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill21.FLD_PID, class_Show_Pill21);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 500;
									break;
								}
							case 1007000007:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 700;
									break;
								}
							case 999000005:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 300;
									break;
								}
							case 1000000835:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_追加百分比_MP上限 += 0.05;
									break;
								}
							case 1000000836:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_追加百分比_HP上限 += 0.05;
									break;
								}
							case 1000000860:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_追加百分比_MP上限 += 0.05;
									break;
								}
							case 1000000861:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_追加百分比_HP上限 += 0.05;
									break;
								}
							case 1000000830:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 100;
									break;
								}
							case 1000000831:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 50;
									break;
								}
							case 1000000832:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 100;
									base.FLD_Item_Premium_MP += 100;
									break;
								}
							case 1008000016:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.1);
									break;
								}
							case 1008000372:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.1);
									break;
								}
							case 999000001:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.05);
									break;
								}
							case 1008000017:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.1);
									break;
								}
							case 1008000378:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.1);
									break;
								}
							case 999000002:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.1);
									break;
								}
							case 1008000098:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.1);
									break;
								}
							case 1008000099:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.1);
									break;
								}
							case 1008000104:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									addFLD_装备_追加_武器_强化(2);
									break;
								}
							case 1008000105:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									if (World.Newversion >= 13)
									{
										addFLD_装备_追加_防具_强化(2);
									}
									else
									{
										addFLD_装备_追加_防具_强化(1);
									}
									break;
								}
							case 1008000053:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									break;
								}
							case 999000003:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									break;
								}
							case 1008000219:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									break;
								}
							case 1008000946:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill30 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill30.FLD_PID, class_Show_Pill30);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000384:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_HP += 500;
									break;
								}
							case 1008001989:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_HP += 500;
									break;
								}
							case 1008000173:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_HP += 500;
									break;
								}
							case 1008000218:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill22 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill22.FLD_PID, class_Show_Pill22);
									base.FLD_Item_Premium_HP += 500;
									Add_ATT_Percentage(0.1);
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_Exp += 0.4;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									break;
								}
							case 1008000941:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill32 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill32.FLD_PID, class_Show_Pill32);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_Exp += 0.3;
									base.FLD_人物_追加_攻击 += 50;
									base.FLD_人物_追加_防御 += 50;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.Character_Qigong += 2;
									Add_DEF_Percentage(0.1);
									break;
								}
							case 1008000942:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill22 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill22.FLD_PID, class_Show_Pill22);
									base.FLD_Item_Premium_HP += 500;
									Add_ATT_Percentage(0.1);
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_Exp += 0.4;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									break;
								}
							case 1008000054:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									break;
								}
							case 999000004:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									break;
								}
							case 1008000220:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Skill_Def_Percentage += 0.05;
									break;
								}
							case 1000000013:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.1);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									break;
								}
							case 1008000176:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill2 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill2.FLD_PID, class_Show_Pill2);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									addFLD_装备_追加_武器_强化(2);
									break;
								}
							case 1008000177:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill2 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill2.FLD_PID, class_Show_Pill2);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									addFLD_装备_追加_防具_强化(1);
									break;
								}
							case 1000000010:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1000000646:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.13);
									base.FLD_Item_Skill_Def_Percentage += 0.13;
									break;
								}
							case 1008000178:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									Add_DEF_Percentage(0.1);
									break;
								}
							case 1008000179:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									Add_ATT_Percentage(0.1);
									break;
								}
							case 1008000364:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008000366:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.8;
									break;
								}
							case 1008000367:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.8;
									break;
								}
							case 1008000939:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 1.0;
									break;
								}
							case 1008000390:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 1.0;
									break;
								}
							case 1008000391:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.5;
									break;
								}
							case 1008000392:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008000393:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 1.0;
									break;
								}
							case 1008000394:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.5;
									break;
								}
							case 1008000349:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 1.5;
									break;
								}
							case 1008000365:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.5;
									break;
								}
							case 1008000361:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.5;
									break;
								}
							case 1008000427:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.3;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									base.FLD_Item_Premium_HP += 300;
									break;
								}
							case 1008000428:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.4;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Skill_Def_Percentage += 0.12;
									base.FLD_Item_Premium_HP += 500;
									break;
								}
							case 1008000106:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.1);
									break;
								}
							case 1008000107:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.1);
									break;
								}
							case 1008000142:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									break;
								}
							case 1008000143:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.03);
									break;
								}
							case 1008000144:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.05);
									break;
								}
							case 1000000011:
							case 1008000018:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									addFLD_装备_追加_武器_强化(2);
									break;
								}
							case 1000000012:
							case 1008000019:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill39 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill39.FLD_PID, class_Show_Pill39);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									addFLD_装备_追加_防具_强化(1);
									break;
								}
							case 1008000156:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill37 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill37.FLD_PID, class_Show_Pill37);
									base.FLD_Item_Premium_HP += 300;
									break;
								}
							case 1008000183:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill36 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill36.FLD_PID, class_Show_Pill36);
									base.FLD_Item_Premium_HP += 300;
									Add_DEF_Percentage(0.05);
									break;
								}
							case 1008000185:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill35 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill35.FLD_PID, class_Show_Pill35);
									base.FLD_Item_Premium_HP += 700;
									base.FLD_Item_Premium_Exp += 0.4;
									base.FLD_Item_Premium_Fight_Exp += 2.0;
									Add_DEF_Percentage(0.1);
									addFLD_装备_追加_防具_强化(1);
									addFLD_装备_追加_武器_强化(2);
									break;
								}
							case 1008000187:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill34 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill34.FLD_PID, class_Show_Pill34);
									base.FLD_Item_Premium_HP += 300;
									base.Character_Qigong++;
									break;
								}
							case 1008000188:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill33 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill33.FLD_PID, class_Show_Pill33);
									Add_ATT_Percentage(0.15);
									Add_DEF_Percentage(0.15);
									base.FLD_Item_Premium_HP += 300;
									base.FLD_Item_Premium_MP += 300;
									base.FLD_Item_Premium_Exp += 0.1;
									break;
								}
							case 1008000169:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill22 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill22.FLD_PID, class_Show_Pill22);
									base.FLD_Item_Premium_HP += 500;
									Add_ATT_Percentage(0.11);
									Add_DEF_Percentage(0.13);
									base.FLD_Item_Skill_Attack_Percentage += 0.13;
									base.FLD_Item_Skill_Def_Percentage += 0.11;
									break;
								}
							case 1008000194:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill22 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill22.FLD_PID, class_Show_Pill22);
									base.FLD_Item_Premium_HP += 1000;
									Add_ATT_Percentage(0.15);
									Add_DEF_Percentage(0.15);
									base.FLD_Item_Premium_Exp += 0.4;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									break;
								}
							case 1008000195:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill29 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill29.FLD_PID, class_Show_Pill29);
									base.Character_Qigong += 2;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 300;
									break;
								}
							case 1008000163:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill19 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill19.FLD_PID, class_Show_Pill19);
									base.FLD_Item_Premium_HP += 700;
									Add_DEF_Percentage(0.1);
									Add_ATT_Percentage(0.1);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									addFLD_装备_追加_防具_强化(1);
									addFLD_装备_追加_武器_强化(2);
									break;
								}
							case 1008000095:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008000096:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_Exp += 0.3;
									break;
								}
							case 1008000097:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_Exp += 0.4;
									break;
								}
							case 1000000137:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill19 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill19.FLD_PID, class_Show_Pill19);
									base.FLD_人物_追加_攻击 += 10;
									base.FLD_人物_追加_防御 += 10;
									break;
								}
							case 1008000197:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill19 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill19.FLD_PID, class_Show_Pill19);
									base.FLD_Item_Premium_HP += 700;
									Add_DEF_Percentage(0.1);
									Add_ATT_Percentage(0.1);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									addFLD_装备_追加_防具_强化(1);
									addFLD_装备_追加_武器_强化(2);
									break;
								}
							case 1008000203:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									base.Character_Qigong++;
									break;
								}
							case 1008000204:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									base.FLD_Item_Premium_HP += 500;
									break;
								}
							case 1008000205:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									base.FLD_Item_Premium_MP += 500;
									break;
								}
							case 1008000206:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									break;
								}
							case 1008000207:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									Add_ATT_Percentage(0.05);
									break;
								}
							case 1008000208:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									Add_DEF_Percentage(0.05);
									break;
								}
							case 1008000209:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									base.FLD_追加百分比_回避 += 0.05;
									break;
								}
							case 1000000030:
							case 1000000866:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill19 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill19.FLD_PID, class_Show_Pill19);
									base.FLD_Item_Premium_Fight_Exp += 1.0;
									break;
								}
							case 1008000232:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill45 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill45.FLD_PID, class_Show_Pill45);
									base.FLD_Item_Premium_HP += 100;
									base.FLD_Item_Premium_Exp += 0.2;
									base.FLD_Item_Premium_Money += 0.4;
									base.FLD_Item_Premium_Drop += 0.2;
									break;
								}
							case 1008000351:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008000355:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.5;
									break;
								}
							case 1008000239:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill44 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill44.FLD_PID, class_Show_Pill44);
									base.FLD_Item_Premium_Exp += 1.0;
									break;
								}
							case 1008000240:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill43 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill43.FLD_PID, class_Show_Pill43);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000241:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill32 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill32.FLD_PID, class_Show_Pill32);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000242:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill32 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill32.FLD_PID, class_Show_Pill32);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000243:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill32 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill32.FLD_PID, class_Show_Pill32);
									base.FLD_Item_Premium_HP += 300;
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008000245:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill42 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill42.FLD_PID, class_Show_Pill42);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_追加百分比_回避 += 0.05;
									base.FLD_Item_Premium_HP += 100;
									base.Character_Qigong += 2;
									break;
								}
							case 1008000248:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill38 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill38.FLD_PID, class_Show_Pill38);
									base.FLD_Item_Premium_Exp += 1.0;
									base.FLD_Item_Premium_Fight_Exp += 1.0;
									base.FLD_Item_Premium_Money += 1.0;
									base.FLD_Item_Premium_Drop += 1.0;
									break;
								}
							case 1008001040:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill38 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill38.FLD_PID, class_Show_Pill38);
									break;
								}
							case 1008001041:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill38 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill38.FLD_PID, class_Show_Pill38);
									break;
								}
							case 1008000250:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008001021:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									break;
								}
							case 1008001026:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									break;
								}
							case 1008001048:
								{
									if (!Show_Pic_Class.ContainsKey(1008001048))
									{
										Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									}
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									break;
								}
							case 1008001031:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									break;
								}
							case 1008001022:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001027:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001032:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001023:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001028:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001033:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001024:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008001029:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008001034:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 1008001025:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001030:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001035:
								{
									if (KimLongChiTheu)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									break;
								}
							case 1008001111:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.FLD_人物_追加_攻击 += 50;
									base.FLD_人物_追加_防御 += 100;
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 500;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Premium_Exp += 0.4;
									break;
								}
							case 1008001112:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.FLD_人物_追加_攻击 += 100;
									base.FLD_人物_追加_防御 += 50;
									base.FLD_Item_Premium_HP += 800;
									base.FLD_人物_追加_回避 += 10;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Pill_Defense_Skill += 100.0;
									break;
								}
							case 1008000251:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill30 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill30.FLD_PID, class_Show_Pill30);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000252:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill27 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill27.FLD_PID, class_Show_Pill27);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 100;
									break;
								}
							case 1008000304:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill26 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill26.FLD_PID, class_Show_Pill26);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_人物_追加_防御 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000305:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill25 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill25.FLD_PID, class_Show_Pill25);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_人物_追加_防御 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000333:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill25 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill25.FLD_PID, class_Show_Pill25);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_人物_追加_防御 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									break;
								}
							case 1008000306:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill24 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill24.FLD_PID, class_Show_Pill24);
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									break;
								}
							case 1008000307:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.FLD_Item_Premium_Exp += 0.1;
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									break;
								}
							case 1008000323:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill2 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill2.FLD_PID, class_Show_Pill2);
									base.FLD_Item_Premium_Exp += 1.0;
									break;
								}
							case 1008000324:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill20 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill20.FLD_PID, class_Show_Pill20);
									base.FLD_Item_Premium_Exp += 1.0;
									break;
								}
							case 1008000388:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill20 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill20.FLD_PID, class_Show_Pill20);
									base.FLD_TLC_Premium_Exp = 3.0;
									break;
								}
							case 1008000389:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill20 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill20.FLD_PID, class_Show_Pill20);
									base.FLD_TLC_Premium_Exp = 1.5;
									break;
								}
							case 999000094:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.2;
									break;
								}
							case 999000095:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.15);
									base.FLD_Item_Skill_Attack_Percentage += 0.15;
									break;
								}
							case 1008000325:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill18 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill18.FLD_PID, class_Show_Pill18);
									base.FLD_Item_Premium_Exp += 0.1;
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Premium_HP += 300;
									break;
								}
							case 1008000326:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill17 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill17.FLD_PID, class_Show_Pill17);
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Premium_HP += 300;
									break;
								}
							case 1008001815:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Skill_Attack_Percentage += 0.3;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									base.FLD_人物_追加_攻击 += 80;
									base.FLD_人物_追加_防御 += 80;
									base.FLD_Item_Premium_HP += 1000;
									base.FLD_Item_Premium_Exp += 0.5;
									break;
								}
							case 1008000362:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill16 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill16.FLD_PID, class_Show_Pill16);
									base.FLD_Item_Premium_Exp += 1.5;
									break;
								}
							case 1008000363:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Class_Show_Pill class_Show_Pill15 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill15.FLD_PID, class_Show_Pill15);
									base.FLD_Item_Premium_Exp += 1.5;
									break;
								}
							case 1000000408:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill14 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_ATT_Percentage(0.1);
									break;
								}
							case 1000000409:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill12 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill12.FLD_PID, class_Show_Pill12);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_HP += 500;
									break;
								}
							case 1000000410:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill10 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill10.FLD_PID, class_Show_Pill10);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Premium_MP += 500;
									break;
								}
							case 1000000411:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill9 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill9.FLD_PID, class_Show_Pill9);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									Add_DEF_Percentage(0.1);
									break;
								}
							case 1000000412:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill6 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill6.FLD_PID, class_Show_Pill6);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Skill_Attack_Percentage += 0.13;
									break;
								}
							case 1000000413:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill4 = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill4.FLD_PID, class_Show_Pill4);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.FLD_Item_Skill_Def_Percentage += 0.13;
									break;
								}
							case 1000000414:
								{
									if (Show_Pic_Class.ContainsKey(num))
									{
										Show_Pic_Class[num].EndEvent();
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, num2, num, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, num2);
									base.Character_Qigong += 2;
									break;
								}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "Set个人药品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void load时间物品()
		{
			foreach (时间药品 value in list_时间药品.Values)
			{
				set时间物品(value);
			}
		}

		public void end时间物品(long pid)
		{
			foreach (时间药品 value in list_时间药品.Values)
			{
				if (value.FLD_PID == pid && list_时间药品.ContainsKey(value.FLD_PID))
				{
					list_时间药品.Remove(value.FLD_PID);
					Send_Packet_Show_时间物品(value.FLD_PID, 0, 0, 0);
					UpdatePowersAndStatus();
					更新人物数据(this);
					更新广播人物数据();
				}
			}
		}

		public void AddNewEggHeavenPet()
		{
			int num = Find_Package_Empty(this);
			if (num != -1)
			{
				int 物品ID = 1000001174;
				int num2 = new Random(World.GetRandomSeed()).Next(0, 10000);
				if (num2 < 10)
				{
					物品ID = 1000001170;
				}
				else if (num2 < 200)
				{
					物品ID = 1000001171;
				}
				else if (num2 < 1050)
				{
					物品ID = 1000001175;
				}
				else if (num2 < 2000)
				{
					物品ID = 1000001172;
				}
				else if (num2 < 5000)
				{
					物品ID = 1000001173;
				}
				百宝增加物品带属性(物品ID, num, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			}
			else
			{
				GameMessage("Không coÌn chôÞ trôìng!");
			}
		}

		public void set时间物品()
		{
			try
			{
				foreach (时间药品 value in list_时间药品.Values)
				{
					if (!list_时间药品.ContainsKey(value.FLD_PID))
					{
						return;
					}
					int fLD_PID = value.FLD_PID;
					if (fLD_PID == 1000001150)
					{
						if ((DateTime.ParseExact(value.FLD_sj.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && list_时间药品.ContainsKey(value.FLD_PID))
						{
							物品类 物品类 = 得到人物物品类型(value.FLD_PID);
							if (list_时间药品.ContainsKey(value.FLD_PID))
							{
								list_时间药品.Remove(value.FLD_PID);
								Send_Packet_Show_时间物品(value.FLD_PID, 0, 0, 0);
								if (物品类 != null)
								{
								}
								UpdatePowersAndStatus();
								更新人物数据(this);
								更新广播人物数据();
							}
						}
					}
					else if ((DateTime.ParseExact(value.FLD_sj.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now).TotalMinutes <= 0.0 && list_时间药品.ContainsKey(value.FLD_PID))
					{
						list_时间药品.Remove(value.FLD_PID);
						Send_Packet_Show_时间物品(value.FLD_PID, 0, 0, 0);
						UpdatePowersAndStatus();
						更新人物数据(this);
						更新广播人物数据();
					}
				}
				if (list_时间药品.ContainsKey(1008001042) && base.Player_Zx != 1)
				{
					list_时间药品.Remove(1008001042);
					Send_Packet_Show_时间物品(1008001042, 0, 0, 0);
					UpdatePowersAndStatus();
					更新人物数据(this);
					更新广播人物数据();
				}
				if (list_时间药品.ContainsKey(1008001043) && base.Player_Zx != 2)
				{
					list_时间药品.Remove(1008001043);
					Send_Packet_Show_时间物品(1008001043, 0, 0, 0);
					UpdatePowersAndStatus();
					更新人物数据(this);
					更新广播人物数据();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "set时间物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void set时间物品(时间药品 item)
		{
			try
			{
				int fLD_PID = item.FLD_PID;
				TimeSpan timeSpan = DateTime.ParseExact(item.FLD_sj.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture) - DateTime.Now;
				Send_Packet_Show_时间物品(item.FLD_PID, 1, item.FLD_sj, (int)timeSpan.TotalMinutes);
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "set时间物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void set公有物品()
		{
			foreach (公有药品类 value in 公有药品.Values)
			{
				set公有物品(value);
			}
		}

		public void set公有物品(公有药品类 yp)
		{
			try
			{
				string hex = "AA55190001F801F9000A0000FFFFFFFF00FFFFFFFF000000000000F12F55AA";
				byte[] array = Converter.hexStringToByte(hex);
				if (new DateTime(1970, 1, 1, 7, 0, 0).AddSeconds(yp.时间) > DateTime.Now)
				{
					switch (yp.药品ID)
					{
						case 1008000027:
							Buffer.BlockCopy(BitConverter.GetBytes(3), 0, array, 11, 1);
							break;
						case 1008000028:
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 1);
							break;
						case 1008000029:
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 11, 1);
							break;
						case 1008000140:
							Buffer.BlockCopy(BitConverter.GetBytes(70), 0, array, 11, 1);
							break;
						case 1008000141:
							Buffer.BlockCopy(BitConverter.GetBytes(70), 0, array, 11, 1);
							break;
						case 1008000312:
							Buffer.BlockCopy(BitConverter.GetBytes(70), 0, array, 11, 1);
							break;
						default:
							Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 11, 1);
							break;
					}
					Buffer.BlockCopy(BitConverter.GetBytes(yp.时间), 0, array, 12, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "set公有物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Add_Pill()
		{
			if (追加状态物品 != null && 追加状态物品.Length != 1)
			{
				try
				{
					int num = 追加状态物品.Length / 16;
					for (int i = 0; i < num && 追加状态物品.Length >= (i + 1) * 16; i++)
					{
						byte[] array = new byte[4];
						byte[] array2 = new byte[4];
						byte[] array3 = new byte[4];
						byte[] array4 = new byte[4];
						Buffer.BlockCopy(追加状态物品, i * 16, array, 0, 4);
						if (BitConverter.ToInt32(array, 0) <= 0)
						{
							break;
						}
						Buffer.BlockCopy(追加状态物品, i * 16 + 4, array2, 0, 4);
						if (BitConverter.ToInt32(array, 0) <= 0)
						{
							break;
						}
						Buffer.BlockCopy(追加状态物品, i * 16 + 8, array3, 0, 4);
						if (BitConverter.ToInt32(array, 0) <= 0)
						{
							break;
						}
						Buffer.BlockCopy(追加状态物品, i * 16 + 12, array4, 0, 4);
						int fLD_PID = BitConverter.ToInt32(array, 0);
						int 时间 = BitConverter.ToInt32(array2, 0);
						int 数量 = BitConverter.ToInt32(array3, 0);
						int 数量类型 = BitConverter.ToInt32(array4, 0);
						if (BitConverter.ToInt32(array, 0) <= 0 || BitConverter.ToInt32(array2, 0) <= 0)
						{
							break;
						}
						Add_Pill(fLD_PID, 时间, 数量, 数量类型);
					}
					Update_HP_MP_SP();
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "Set追加状态物品出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
			}
		}

		public void Add_Pill(int FLD_PID, int 时间, int 数量, int 数量类型)
		{
			try
			{
				if (World.JlMsg == 1)
				{
					Form1.WriteLine(0, "Players_Set追加状态物品");
				}
				switch (FLD_PID)
				{
					case 1:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value13 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value13);
							switch (数量类型)
							{
								case 2:
									base.FLD_追加百分比_攻击 += 0.01 * (double)数量;
									break;
								case 1:
									base.FLD_人物_追加_攻击 += 数量;
									break;
							}
							break;
						}
					case 2:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value9 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value9);
							switch (数量类型)
							{
								case 2:
									base.FLD_追加百分比_防御 += 0.01 * (double)数量;
									break;
								case 1:
									base.FLD_人物_追加_防御 += 数量;
									break;
							}
							break;
						}
					case 3:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value8 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value8);
							switch (数量类型)
							{
								case 2:
									base.FLD_追加百分比_HP上限 += 0.01 * (double)数量;
									break;
								case 1:
									base.FLD_Item_Premium_HP += 数量;
									break;
							}
							break;
						}
					case 4:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value3 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value3);
							switch (数量类型)
							{
								case 2:
									base.FLD_追加百分比_MP上限 += 0.01 * (double)数量;
									break;
								case 1:
									base.FLD_Item_Premium_MP += 数量;
									break;
							}
							break;
						}
					case 5:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value12 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value12);
							switch (数量类型)
							{
								case 2:
									base.FLD_追加百分比_命中 += 0.01 * (double)数量;
									break;
								case 1:
									base.FLD_人物_追加_命中 += 数量;
									break;
							}
							break;
						}
					case 6:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value14 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value14);
							switch (数量类型)
							{
								case 2:
									base.FLD_追加百分比_回避 += 0.01 * (double)数量;
									break;
								case 1:
									base.FLD_人物_追加_回避 += 数量;
									break;
							}
							break;
						}
					case 7:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value5 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value5);
							if (数量类型 == 2)
							{
								base.FLD_Item_Skill_Attack_Percentage += 0.01 * (double)数量;
							}
							break;
						}
					case 8:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value2 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value2);
							switch (数量类型)
							{
								case 2:
									base.FLD_Item_Skill_Def_Percentage += 0.01 * (double)数量;
									break;
								case 1:
									base.FLD_人物_追加_回避 += 数量;
									break;
							}
							break;
						}
					case 9:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value10 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value10);
							if (数量类型 == 2)
							{
								base.FLD_Item_Premium_Exp += 0.01 * (double)数量;
							}
							break;
						}
					case 10:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value6 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value6);
							if (数量类型 == 2)
							{
								base.Character_Upgrade_Lucky += 0.01 * (double)数量;
							}
							break;
						}
					case 11:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value15 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value15);
							break;
						}
					case 12:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value11 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value11);
							if (数量类型 == 2)
							{
								base.FLD_Item_Premium_Money += 0.01 * (double)数量;
							}
							break;
						}
					case 13:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value7 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value7);
							if (数量类型 == 2)
							{
								base.FLD_Item_Premium_Drop += 0.01 * (double)数量;
							}
							break;
						}
					case 14:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value4 = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value4);
							base.Character_Qigong += 数量;
							break;
						}
					case 15:
						{
							if (追加状态New列表.ContainsKey(FLD_PID))
							{
								追加状态New列表[FLD_PID].时间结束事件();
							}
							追加状态New类 value = new 追加状态New类(this, FLD_PID, 时间, 数量, 数量类型);
							追加状态New列表.Add(FLD_PID, value);
							base.FLD_Item_Premium_Fight_Exp += 数量;
							break;
						}
				}
				状态效果New(FLD_PID, 1, 时间, 数量, 数量类型);
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "Set追加状态物品2 出错：[" + FLD_PID + "]" + ex);
			}
		}

		public int VIPMap(int mapid)
		{
			if (base.FLD_VIP == 0)
			{
				string[] array = World.VipMap.Split(';');
				for (int i = 0; i < array.Length; i++)
				{
					if (CoordinateClass.getmapname(mapid) == array[i])
					{
						GameMessage("本地图名是会员地图，非会员不可以进入", 9);
						return 0;
					}
				}
			}
			return 1;
		}

		public void 百宝(byte[] data, int length)
		{
			if (元宝合成开关 == 1)
			{
				return;
			}
			byte[] array = new byte[4];
			Buffer.BlockCopy(data, 11, array, 0, 1);
			switch (BitConverter.ToInt32(array, 0))
			{
				case 1:
					{
						GameMessage("Hay vao website: [ " + World.百宝阁地址 + " ] de xem cac vâòt phâÒm ban trong shop", 22);
						PacketData packetData = new PacketData();
						packetData.WriteByte(1);
						packetData.WriteByte(1);
						packetData.WriteShort(World.服务器id);
						packetData.WriteShort(World.Server_Group_ID);
						packetData.WriteAsciiFixed(World.百宝阁地址);
						packetData.WriteShort(0);
						if (base.Client != null)
						{
							base.Client.SendPak(packetData, 54528, 0, 1);
							base.Client.SendPak(packetData, 54528, base.UserSessionID);
							base.Client.SendPak(packetData, 54528, base.UserSessionID, 1);
						}
						break;
					}
				case 2:
					{
						string hex = "AA551000000000D500010002000000000000000055AA";
						byte[] array2 = Converter.hexStringToByte(hex);
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
						break;
					}
			}
		}

		public string 百宝阁买卖东西(int id, int sl, int yuanbao, int FLD_MAGIC0, int FLD_MAGIC1, int FLD_MAGIC2, int FLD_MAGIC3, int FLD_MAGIC4, int 中级魂, int 觉醒, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				sl = 1;
				if (World.百宝阁属性物品类list.TryGetValue(id, out 百宝阁类 value))
				{
					if (yuanbao < 0 || sl > 10 || sl < 0 || id == 0)
					{
						Form1.WriteLine(77, "BUG BBG Shop 1 [" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "]");
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 17", 7);
							base.Client.Dispose();
						}
						return "购买错误";
					}
					if (sl != 1)
					{
						if (yuanbao != value.PRICE * sl)
						{
							Form1.WriteLine(77, "Bug Bbg Shop 2 - !yuanbao: [" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "]");
							if (base.Client != null)
							{
								GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 16", 7);
								base.Client.Dispose();
							}
							return "购买错误";
						}
					}
					else if (yuanbao != value.PRICE)
					{
						Form1.WriteLine(77, "Bug Bbg Shop 3 - !yuanbao: [" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "]");
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 15", 7);
							base.Client.Dispose();
						}
						return "购买错误";
					}
				}
				int num = Find_Package_Empty(this);
				int num2 = id;
				if (num == -1)
				{
					return "没有空位了";
				}
				if (yuanbao >= 0)
				{
					if (base.FLD_RXPIONT < yuanbao)
					{
						return "元宝不够了";
					}
					switch (num2)
					{
						case 800000011:
						case 800000012:
						case 800000013:
						case 800000023:
						case 800000024:
						case 800000025:
						case 800000026:
						case 800000027:
						case 800000061:
						case 800000062:
							FLD_MAGIC0 = World.GetStoneValue(num2, 2);
							id = World.GetStonepid(num2);
							break;
						case 800000046:
							{
								string[] array3 = World.百宝阁初级奇玉石.Split(';');
								FLD_MAGIC0 = World.GetStoneValue_Fix(int.Parse(array3[0]), int.Parse(array3[1]));
								break;
							}
						case 800000047:
							{
								string[] array2 = World.百宝阁中级奇玉石.Split(';');
								FLD_MAGIC0 = World.GetStoneValue_Fix(int.Parse(array2[0]), int.Parse(array2[1]));
								break;
							}
						case 800000048:
							{
								string[] array = World.百宝阁高级奇玉石.Split(';');
								FLD_MAGIC0 = World.GetStoneValue_Fix(int.Parse(array[0]), int.Parse(array[1]));
								break;
							}
					}
					int fLD_RXPIONT = base.FLD_RXPIONT;
					if (yuanbao > base.FLD_RXPIONT)
					{
						return "购买错误";
					}
					Add_Del_Rxpiont(yuanbao, 0);
					if (yuanbao == fLD_RXPIONT - base.FLD_RXPIONT && fLD_RXPIONT != base.FLD_RXPIONT)
					{
						string text = 百宝增加物品带属性(id, num, 1, FLD_MAGIC0, FLD_MAGIC1, FLD_MAGIC2, FLD_MAGIC3, FLD_MAGIC4, 觉醒, 中级魂, 进化, 绑定, 使用天数);
						if (World.背包扩充开关 == 1 && id == 1600001)
						{
							base.装备行囊是否开启 = 1;
							Update_Item_In_Bag();
						}
						RxjhClass.百宝记录(base.Userid, base.UserName, id, text + " (" + fLD_RXPIONT + " - " + yuanbao + " = " + base.FLD_RXPIONT + ")", sl, yuanbao);
						Save_data_Rxpiont();
						return "购买成功";
					}
				}
				return "元宝不够了";
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "百宝阁买卖东西 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				return "购买错误";
			}
		}

		public string 百宝增加物品带属性(int 物品ID, int 位置, int 数量, int 物品属性0, int 物品属性1, int 物品属性2, int 物品属性3, int 物品属性4, int 初级附魂, int 中级附魂, int 进化, int 绑定, int 使用天数)
		{
			try
			{
				if (物品属性0 < 0)
				{
					物品属性0 = 0;
				}
				if (World.Itme.TryGetValue(物品ID, out ItmeClass value))
				{
					byte[] array = new byte[56];
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性0), 0, array, 0, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性1), 0, array, 4, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性2), 0, array, 8, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性3), 0, array, 12, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性4), 0, array, 16, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(初级附魂), 0, array, 46, 4);
					if (中级附魂 > 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 22, 2);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(中级附魂), 0, array, 24, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(进化), 0, array, 52, 4);
					long value2 = RxjhClass.GetDbItmeId();
					string hex = "AA5573000100000D00640001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
					byte[] array2 = Converter.hexStringToByte(hex);
					byte[] array3 = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (value.FLD_SIDE != 0)
					{
						物品类 物品类 = 得到人物物品类型(物品ID, 物品属性0);
						if (物品类 != null)
						{
							位置 = 物品类.Bag;
							value2 = BitConverter.ToInt64(物品类.物品全局ID, 0);
							数量 = BitConverter.ToInt32(物品类.Item_Amount, 0) + 数量;
						}
					}
					else
					{
						数量 = 1;
					}
					Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array3, 0, 8);
					Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array3, 8, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
					Buffer.BlockCopy(array, 0, array3, 16, array.Length);
					if (使用天数 > 0)
					{
						DateTime value3 = new DateTime(1970, 1, 1, 7, 0, 0);
						Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.Subtract(value3).TotalSeconds), 0, array3, 52, 4);
						Buffer.BlockCopy(BitConverter.GetBytes((int)DateTime.Now.AddDays(使用天数).Subtract(value3).TotalSeconds), 0, array3, 56, 4);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array2, 40, 2);
					Buffer.BlockCopy(array3, 0, array2, 15, 12);
					Buffer.BlockCopy(array3, 12, array2, 31, 4);
					Buffer.BlockCopy(array3, 16, array2, 47, array.Length);
					if (绑定 == 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array3, 72, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(物品ID + 20000), 0, array2, 23, 4);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array3, 60, 2);
					Item_In_Bag[位置].Byte_Item = array3;
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
					return value2.ToString();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错1 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + 数量 + "]" + ex.Message);
			}
			return "Not";
		}

		public void VersionVerification()
		{
			j = true;
			try
			{
				if (World.登陆器模式 == 0)
				{
					string hex = "AA5513000010051520040070070000000000000000000055AA";
					byte[] array = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					base.Client.版本验证 = true;
				}
				else if (World.登陆器模式 == 1)
				{
					Random random = new Random(World.GetRandomSeed());
					byte[] array2 = new byte[8];
					for (int i = 0; i < array2.Length; i++)
					{
						array2[i] = (byte)random.Next(1, 255);
					}
					base.Client.g_cur_key = array2;
					string hex2 = "AA551B0000100515200400700700000000000000000000000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(base.Client.g_cur_key, 0, array3, 15, 8);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					base.Client.版本验证 = true;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "连接登陆版本验证出错[" + base.UserSessionID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 帮派传送(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[2];
				Buffer.BlockCopy(data, 15, array, 0, 2);
				int num = BitConverter.ToInt16(array, 0);
				if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == 1008000122)
				{
					byte[] array2 = new byte[20];
					for (int i = 0; i < 20 && data[27 + i] != 0; i++)
					{
						array2[i] = data[27 + i];
					}
					string username = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "");
					if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 0)
					{
						Players players = World.FindPlayerbyName(username);
						if (players != null)
						{
							if (players.UserName == base.UserName)
							{
								帮派传送符提示(3);
							}
							else if (players.Guild_ID != base.Guild_ID)
							{
								帮派传送符提示(6);
							}
							else if (players.Player_FLD_Map == 801)
							{
								GameMessage("Ðôìi phýõng ðang õÒ trong Thêì Lýòc Chiêìn");
							}
							else
							{
								帮派传送符提示(1);
								Delete_Item_Use(num, 1);
								Move(players.Player_FLD_X, players.Player_FLD_Y, players.Player_FLD_Z, players.Player_FLD_Map);
							}
						}
						else
						{
							帮派传送符提示(2);
						}
					}
				}
			}
			catch (Exception ex)
			{
				帮派传送符提示(7);
				Form1.WriteLine(1, "帮派传送出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 帮战更新分数(long zfs, long kfs)
		{
			string hex = "AA551700010F2739100800FFFFFFFF000000000000000000003C5B55AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(zfs), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(kfs), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战开始提示(int id, int id2)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(id);
			packetData.WriteInt(id2);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 14096, base.UserSessionID);
			}
		}

		public void 帮战配对成功公告提示(int id)
		{
			string hex = "AA55AB00000F2766009C000830000000000000000000000000000000000000000002307C000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000690000640A000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 帮战准备公告提示(string sj)
		{
			string hex = "AA55AB00000F3766009C000830000000000000000000000000000000000000000003317C330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000690000650A000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(Encoding.GetEncoding(1252).GetBytes(sj), 0, array, 36, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 保存土灵符(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				string[] array = World.地图锁定.Split(',');
				int num = 0;
				while (true)
				{
					if (num >= array.Length)
					{
						byte[] array2 = new byte[4];
						byte[] array3 = new byte[15];
						for (int i = 0; i < 15 && data[11 + i] != 0; i++)
						{
							array3[i] = data[11 + i];
						}
						string rxjh_Name = Encoding.GetEncoding(1252).GetString(array3).Replace("\0", "");
						Buffer.BlockCopy(data, 26, array2, 0, 2);
						CoordinateClass CoordinateClass = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
						CoordinateClass.Rxjh_Name = rxjh_Name;
						if (土灵符坐标.ContainsKey(BitConverter.ToInt32(array2, 0)))
						{
							土灵符坐标.Remove(BitConverter.ToInt32(array2, 0));
						}
						土灵符坐标.Add(BitConverter.ToInt32(array2, 0), CoordinateClass);
						发送保存土灵符数据(array3, array2, CoordinateClass);
						return;
					}
					string a = array[num];
					if (a == base.Player_FLD_Map.ToString())
					{
						break;
					}
					num++;
				}
				GameMessage("抱歉此地图不允许保存!!!", 10);
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "保存土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 爆毒数据包(int 包位置)
		{
			string hex = "AA552700016B053B0018000105000000000000FF000000120000000000000000000000000000000000AE8B55AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(包位置), 0, array, 12, 4);
			Buffer.BlockCopy(Item_In_Bag[包位置].Item_Amount, 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 本人取消交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				string hex = "AA5543000000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 11, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 15, 4);
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
					Wait_Trade = 0;
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send(array, array.Length);
					交易.交易人.Wait_Trade = 0;
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "本人取消交易请求出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex.Message);
			}
		}

		public void method_385(int int_1, long long_0, 物品类 物品类)
		{
			string hex = "AA556B0001000025315C00FFFFFFFF0A000000FEFFFFFF00000000B580FA05B2D9C4E3C2E80000000000000CDB5B0FCB5C4B9EACBEFD7D3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010A755AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(int_1), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(long_0), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(物品类.Bag), 0, array, 23, 4);
			Buffer.BlockCopy(物品类.Get_Byte_Item_PID, 0, array, 27, 4);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void method_386(int int_1, long long_0, 物品类 物品类)
		{
			string hex = "AA556B0001000025315C00FFFFFFFF0A000000FEFFFFFF00000000B580FA05B2D9C4E3C2E80000000000000CDB5B0FCB5C4B9EACBEFD7D3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010A755AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(物品类.Bag), 0, array, 23, 4);
			Buffer.BlockCopy(物品类.Get_Byte_Item_PID, 0, array, 27, 4);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 本人取消组队(byte[] data, int length)
		{
			try
			{
				string hex = "AA551300002C013300040003000200000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
				{
					if (value.邀请人 != null)
					{
						value.邀请人.Party_ID = 0;
						value.邀请人.Client.Send(array, array.Length);
						value.邀请人 = null;
					}
					if (value.List_Party.Count <= 1)
					{
						value.Dispose();
						World.PartyClass.Remove(Party_ID);
						Party_ID = 0;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "本人取消组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 本人退出组队提示()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_本人退出组队提示");
			}
			string hex = "AA551100000000370002000500000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void ChangeGuildUniform(byte[] data, int length)
		{
			if (base.Player_Money < 20000000)
			{
				GameMessage("Không ðuÒ 2000Va0000Luong");
				return;
			}
			PacketReader packetReader = new PacketReader(data, length, fixedSize: false);
			packetReader.Seek(11, SeekOrigin.Begin);
			int guildId = packetReader.ReadInt32();
			packetReader.ReadInt16();
			base.Guild_Style = packetReader.ReadInt16();
			base.Guild_Style_Color = packetReader.ReadInt16();
			string hex = "AA551F000145049100100002000000020000003D000000000000000000000000003C9455AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			string hex2 = "AA551F0000450442151000B8530000010001001C800000002D3101000000000000000055AA";
			byte[] array2 = Converter.hexStringToByte(hex2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Guild_ID), 0, array2, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Guild_Style), 0, array2, 17, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Guild_Style_Color), 0, array2, 19, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
			SendRangeOfPackets(array2, array2.Length);
			打开仓库中 = false;
			RxjhClass.变更门服(guildId, base.Guild_Style, base.Guild_Style_Color);
		}

		public void 采药(byte[] data, int length)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(data, 15, array, 0, 4);
			int num = BitConverter.ToInt32(array, 0);
			if (!MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(num, out NpcClass value))
			{
				return;
			}
			double totalMilliseconds = DateTime.Now.Subtract(value.timeNpcDisable).TotalMilliseconds;
			if (totalMilliseconds < (double)value.delayNpcDisable)
			{
				GameMessage("CoÌn quaì sõìm ðêÒ haìi cây thuôìc naÌy, vui loÌng quay laòi sau " + (int)(((double)value.delayNpcDisable - totalMilliseconds) / 1000.0) + " giây nýÞa!");
				return;
			}
			value.timeNpcDisable = DateTime.Now;
			value.delayNpcDisable = new Random(World.GetRandomSeed()).Next(int.Parse(World.DelayDisableNpc[0]), int.Parse(World.DelayDisableNpc[1]));
			value.Npc死亡 = true;
			value.发送采药数据();
			int num2 = -1;
			if (value.FldPid == 15269)
			{
				num2 = 1000000795;
			}
			else if (value.FldPid == 15270)
			{
				num2 = 1000000796;
			}
			else if (value.FldPid == 15271)
			{
				num2 = 1000000797;
			}
			else if (value.FldPid == 15278)
			{
				num2 = 1000000798;
			}
			else if (value.FldPid == 15279)
			{
				num2 = 1000000799;
			}
			else if (value.FldPid == 15280)
			{
				num2 = 1000000800;
			}
			else if (value.FldPid == 15281)
			{
				num2 = 1000000801;
			}
			else if (value.FldPid == 15282)
			{
				num2 = 1000000802;
			}
			else if (value.FldPid == 15283)
			{
				num2 = 1000000803;
			}
			else if (value.FldPid == 15284)
			{
				num2 = 1000000804;
			}
			else if (value.FldPid == 15285)
			{
				num2 = 1000000807;
			}
			else if (value.FldPid == 15286)
			{
				num2 = 1000000808;
			}
			else if (value.FldPid == 15287)
			{
				num2 = 1000000809;
			}
			else if (value.FldPid == 15288)
			{
				num2 = 1000000810;
			}
			else if (value.FldPid == 15289)
			{
				num2 = 1000000811;
			}
			else if (value.FldPid == 15290)
			{
				num2 = 1000000812;
			}
			else if (value.FldPid == 15291)
			{
				num2 = 1000000813;
			}
			else if (value.FldPid == 15292)
			{
				num2 = 1000000814;
			}
			if (num2 != -1)
			{
				ItmeClass itmeClass = new ItmeClass();
				itmeClass = ItmeClass.GetItmeID(num2);
				if (itmeClass != null)
				{
					int num3 = Find_Package_Empty(this);
					if (num3 == -1)
					{
						GameMessage("Không ðuÒ chôÞ trôìng!");
						return;
					}
					制造物品(num3, BitConverter.GetBytes(itmeClass.FLD_PID));
					GameMessage("Nhâòn ðýõòc [" + itmeClass.FLD_PID + " - " + itmeClass.ItmeNAME + "]");
				}
			}
			else
			{
				GameMessage("ThaÒo dýõòc không tôÌn taòi: " + num, 7);
			}
		}

		public void 仓库_装备栏加减钱数(int 物品ID, long 数量, int cklx, int 仓库类型)
		{
			string hex = "AA55870001560395007800030000000300000000943577000000006E00000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E76C55AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(仓库类型), 0, array, 11, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(仓库类型), 0, array, 15, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 27, 8);
			Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array, 51, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 仓库_装备栏加物品(int 物品ID, int 位置, long 数量, int 包位置, int 仓库类型)
		{
			int num = 0;
			int num2 = 0;
			try
			{
				if (物品ID == 2000000000)
				{
					if (仓库类型 == 5)
					{
						if (base.个人仓库钱数 < 数量)
						{
							Form1.WriteLine(6, "非法复制_仓库存取_取仓库1[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
							return;
						}
						base.Player_Money += 数量;
						base.个人仓库钱数 -= 数量;
						仓库_装备栏加减钱数(物品ID, base.个人仓库钱数, 149, 仓库类型);
					}
					else
					{
						if (base.综合仓库钱数 < 数量)
						{
							Form1.WriteLine(6, "非法复制_仓库存取_取仓库2[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
							return;
						}
						base.Player_Money += 数量;
						base.综合仓库钱数 -= 数量;
						仓库_装备栏加减钱数(物品ID, base.综合仓库钱数, 149, 仓库类型);
					}
				}
				else
				{
					if (数量 < 1)
					{
						return;
					}
					物品类 物品类;
					if (仓库类型 == 5)
					{
						物品类 = 个人仓库[位置];
						for (int i = 0; i < 60; i++)
						{
							if (BitConverter.ToInt32(个人仓库[i].Item_Amount, 0) > 0 || BitConverter.ToInt32(个人仓库[i].Get_Byte_Item_PID, 0) != 0)
							{
								num++;
							}
						}
					}
					else
					{
						物品类 = 公共仓库[位置];
						for (int j = 0; j < 60; j++)
						{
							if (BitConverter.ToInt32(公共仓库[j].Item_Amount, 0) > 0 || BitConverter.ToInt32(公共仓库[j].Get_Byte_Item_PID, 0) != 0)
							{
								num++;
							}
						}
					}
					for (int k = 0; k < ((base.装备行囊是否开启 == 0) ? 36 : 66); k++)
					{
						if (BitConverter.ToInt32(Item_In_Bag[k].Item_Amount, 0) > 0 || BitConverter.ToInt32(Item_In_Bag[k].Get_Byte_Item_PID, 0) != 0)
						{
							num2++;
						}
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0), out ItmeClass value))
					{
						return;
					}
					if (value.FLD_SIDE == 0 && 数量 > 1)
					{
						Form1.WriteLine(6, "非法复制_仓库存取_取仓库3[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + 数量 + "]");
						if (仓库类型 == 5)
						{
							个人仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
						else
						{
							公共仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
						return;
					}
					if (BitConverter.ToInt32(物品类.Item_Amount, 0) < 数量)
					{
						if (仓库类型 == 5)
						{
							个人仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
						else
						{
							公共仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
						Form1.WriteLine(6, "非法复制_仓库存取_取仓库4[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + 数量 + "]");
						return;
					}
					if (value.FLD_SIDE == 0)
					{
						数量 = 1L;
						if ((long)BitConverter.ToInt32(物品类.Item_Amount, 0) != 1)
						{
							return;
						}
						if (base.Player_Job == 4 && base.弓_升天二气功_千钧压驼 != 0.0)
						{
							if ((double)(物品类.物品总重量 + base.人物负重) >= (double)(base.人物负重总 * 2) * base.弓_升天二气功_千钧压驼 * (1.0 + Item_Wear[11].物品属性_行囊负重))
							{
								购买物品提示(11);
								return;
							}
						}
						else if ((double)(物品类.物品总重量 + base.人物负重) >= (double)(base.人物负重总 * 2) * (1.0 + Item_Wear[11].物品属性_行囊负重))
						{
							购买物品提示(11);
							return;
						}
						base.人物负重 += 物品类.物品总重量;
						byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
						byte[] array2 = new byte[8];
						BitConverter.GetBytes(数量);
						array2 = 物品类.物品全局ID;
						Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 12, 4);
						Buffer.BlockCopy(array2, 0, array, 0, 8);
						Buffer.BlockCopy(物品类.Get_Byte_Item_PID, 0, array, 8, 4);
						Buffer.BlockCopy(物品类.Get_Byte_Item_Option, 0, array, 16, 56);
						Buffer.BlockCopy(物品类.Byte_Item, 72, array, 72, 1);
						Item_In_Bag[包位置].Byte_Item = array;
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, Item_In_Bag[包位置], 包位置);
						if (仓库类型 == 5)
						{
							if (个人仓库[位置].物品绑定)
							{
								仓库包物品操作(38144, 仓库类型, 物品ID - 20000, 0L, 个人仓库[位置], 位置);
							}
							else
							{
								仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 个人仓库[位置], 位置);
							}
							个人仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
						else
						{
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 公共仓库[位置], 位置);
							公共仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
					}
					else if (BitConverter.ToInt32(物品类.Item_Amount, 0) >= 数量)
					{
						byte[] array3 = new byte[(World.Newversion >= 14) ? 76 : 73];
						byte[] array4 = new byte[4];
						byte[] array5 = new byte[8];
						物品类 物品类2 = 得到人物物品类型(物品类.FLD_PID, 物品类.FLD_MAGIC0);
						if (物品类2 != null)
						{
							array5 = 物品类2.物品全局ID;
							包位置 = 物品类2.Bag;
							Buffer.BlockCopy(BitConverter.GetBytes(数量 + BitConverter.ToInt32(物品类2.Item_Amount, 0)), 0, array3, 12, 4);
						}
						else
						{
							array4 = BitConverter.GetBytes(数量);
							array5 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
						}
						Buffer.BlockCopy(array5, 0, array3, 0, 8);
						Buffer.BlockCopy(物品类.Get_Byte_Item_PID, 0, array3, 8, 4);
						Buffer.BlockCopy(物品类.Get_Byte_Item_Option, 0, array3, 16, 56);
						Buffer.BlockCopy(物品类.Byte_Item, 72, array3, 72, 1);
						if (base.Player_Job == 4 && base.弓_升天二气功_千钧压驼 != 0.0)
						{
							if ((double)(物品类.物品单个重量 * 数量 + base.人物负重) >= (double)(base.人物负重总 * 2) * base.弓_升天二气功_千钧压驼 * (1.0 + Item_Wear[11].物品属性_行囊负重))
							{
								购买物品提示(11);
								return;
							}
						}
						else if ((double)(物品类.物品单个重量 * 数量 + base.人物负重) >= (double)(base.人物负重总 * 2) * (1.0 + Item_Wear[11].物品属性_行囊负重))
						{
							购买物品提示(11);
							return;
						}
						Item_In_Bag[包位置].Byte_Item = array3;
						int num3 = BitConverter.ToInt32(物品类.Item_Amount, 0) - (int)数量;
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, Item_In_Bag[包位置], 包位置);
						if (仓库类型 == 5)
						{
							if (num3 <= 0)
							{
								仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 个人仓库[位置], 位置);
								个人仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
							}
							else
							{
								个人仓库[位置].Item_Amount = BitConverter.GetBytes(num3);
								仓库包物品操作(38144, 仓库类型, 物品ID, num3, 个人仓库[位置], 位置);
							}
						}
						else if (num3 <= 0)
						{
							仓库包物品操作(38144, 仓库类型, 物品ID, 0L, 公共仓库[位置], 位置);
							公共仓库[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
						else
						{
							公共仓库[位置].Item_Amount = BitConverter.GetBytes(num3);
							仓库包物品操作(38144, 仓库类型, 物品ID, num3, 公共仓库[位置], 位置);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "仓库_装备栏加物品 出错 [" + base.Userid + "][" + base.UserName + "]位置[" + 位置 + "]数量[" + 数量 + "]包位置[" + 包位置 + "]仓库类型[" + 仓库类型 + "] " + ex.Message);
			}
			base.Player_Money -= 100L;
			Update_Money_Weight();
		}

		public void 仓库_装备栏减物品(int 物品ID, int 位置, long 数量, int 仓库位置, int 仓库类型)
		{
			int num = 0;
			int num2 = 0;
			try
			{
				int num3;
				switch (物品ID)
				{
					case 2000000000:
						if (base.Player_Money < 数量)
						{
							Form1.WriteLine(6, "非法复制_仓库存取_放东西到仓库1[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "]___[" + 物品ID + "]___[" + 位置 + "]___[" + 数量 + "]");
							return;
						}
						base.Player_Money -= 数量;
						if (仓库类型 == 3)
						{
							base.个人仓库钱数 += 数量;
							仓库_装备栏加减钱数(物品ID, base.个人仓库钱数, 149, 仓库类型);
						}
						else
						{
							base.综合仓库钱数 += 数量;
							仓库_装备栏加减钱数(物品ID, base.综合仓库钱数, 149, 仓库类型);
						}
						goto end_IL_0005;
					default:
						num3 = ((数量 >= 1 && !Item_In_Bag[位置].LockMove) ? 1 : 0);
						break;
					case 1008000034:
					case 1008000044:
					case 1008000068:
						num3 = 0;
						break;
				}
				if (num3 == 0)
				{
					return;
				}
				物品类 物品类 = Item_In_Bag[位置];
				if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0), out ItmeClass value))
				{
					return;
				}
				for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
				{
					if (BitConverter.ToInt32(Item_In_Bag[i].Item_Amount, 0) > 0 || BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) != 0)
					{
						num++;
					}
				}
				if (仓库类型 == 3)
				{
					for (int j = 0; j < 60; j++)
					{
						if (BitConverter.ToInt32(个人仓库[j].Item_Amount, 0) > 0 || BitConverter.ToInt32(个人仓库[j].Get_Byte_Item_PID, 0) != 0)
						{
							num2++;
						}
					}
				}
				else
				{
					for (int k = 0; k < 60; k++)
					{
						if (BitConverter.ToInt32(公共仓库[k].Item_Amount, 0) > 0 || BitConverter.ToInt32(公共仓库[k].Get_Byte_Item_PID, 0) != 0)
						{
							num2++;
						}
					}
				}
				if (value.FLD_SIDE == 0)
				{
					if (数量 > 1)
					{
						Form1.WriteLine(6, "非法复制_仓库存取_放东西到仓库3[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + 数量 + "]");
						Send_Packet_Delete_Item(位置, BitConverter.ToInt32(物品类.Item_Amount, 0));
						return;
					}
					if (BitConverter.ToInt32(物品类.Item_Amount, 0) == 数量)
					{
						base.人物负重 -= 物品类.物品总重量;
						byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
						byte[] array2 = new byte[8];
						BitConverter.GetBytes(数量);
						array2 = 物品类.物品全局ID;
						Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 12, 4);
						Buffer.BlockCopy(array2, 0, array, 0, 8);
						Buffer.BlockCopy(物品类.Get_Byte_Item_PID, 0, array, 8, 4);
						Buffer.BlockCopy(物品类.Get_Byte_Item_Option, 0, array, 16, 56);
						Buffer.BlockCopy(物品类.Byte_Item, 72, array, 72, 1);
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, Item_In_Bag[位置], 位置);
						if (仓库类型 == 3)
						{
							个人仓库[仓库位置].Byte_Item = array;
							仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 个人仓库[仓库位置], 仓库位置);
						}
						else
						{
							公共仓库[仓库位置].Byte_Item = array;
							仓库包物品操作(38144, 仓库类型, 物品ID, 数量, 公共仓库[仓库位置], 仓库位置);
						}
						Item_In_Bag[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
					else
					{
						Send_Packet_Delete_Item(位置, BitConverter.ToInt32(物品类.Item_Amount, 0));
					}
				}
				else
				{
					if (BitConverter.ToInt32(物品类.Item_Amount, 0) < 数量)
					{
						Form1.WriteLine(6, "非法复制_仓库存取_放东西到仓库2[" + base.Userid + "]-[" + base.UserName + "]___[" + 仓库类型 + "] 物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + 数量 + "]");
						return;
					}
					int num4 = BitConverter.ToInt32(物品类.Item_Amount, 0) - (int)数量;
					base.人物负重 -= 物品类.物品总重量;
					byte[] array3 = new byte[(World.Newversion >= 14) ? 76 : 73];
					byte[] array4 = new byte[4];
					byte[] array5 = new byte[8];
					物品类 物品类2 = 得到人物公共仓库类型(BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0), 仓库类型, 物品类.FLD_MAGIC0);
					if (物品类2 != null)
					{
						array5 = 物品类2.物品全局ID;
						仓库位置 = 物品类2.Bag;
						Buffer.BlockCopy(BitConverter.GetBytes(数量 + BitConverter.ToInt32(物品类2.Item_Amount, 0)), 0, array3, 12, 4);
					}
					else
					{
						array4 = BitConverter.GetBytes(数量);
						array5 = ((num4 > 0) ? BitConverter.GetBytes(RxjhClass.GetDbItmeId()) : 物品类.物品全局ID);
						Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array3, 12, 4);
					}
					Buffer.BlockCopy(array5, 0, array3, 0, 8);
					Buffer.BlockCopy(物品类.Get_Byte_Item_PID, 0, array3, 8, 4);
					Buffer.BlockCopy(物品类.Get_Byte_Item_Option, 0, array3, 16, 56);
					Buffer.BlockCopy(物品类.Byte_Item, 72, array3, 72, 1);
					if (num4 <= 0)
					{
						Item_In_Bag[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, Item_In_Bag[位置], 位置);
					}
					else
					{
						Item_In_Bag[位置].Item_Amount = BitConverter.GetBytes(num4);
						仓库包物品操作(37632, 仓库类型, 物品ID, 数量, Item_In_Bag[位置], 位置);
					}
					if (仓库类型 == 3)
					{
						个人仓库[仓库位置].Byte_Item = array3;
						仓库包物品操作(38144, 仓库类型, 物品ID, 个人仓库[仓库位置].Get_Int_Item_Count, 个人仓库[仓库位置], 仓库位置);
					}
					else
					{
						公共仓库[仓库位置].Byte_Item = array3;
						仓库包物品操作(38144, 仓库类型, 物品ID, 公共仓库[仓库位置].Get_Int_Item_Count, 公共仓库[仓库位置], 仓库位置);
					}
				}
			end_IL_0005:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "仓库_装备栏减物品 出错 [" + base.Userid + "][" + base.UserName + "]位置[" + 位置 + "]数量[" + 数量 + "]仓库位置[" + 仓库位置 + "]仓库类型[" + 仓库类型 + "] " + ex.Message);
			}
			Update_Money_Weight();
		}

		public void 仓库包物品操作(int 包ID, int 操作类型, int 物品ID, long 物品数量, 物品类 物品, int 位置)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(操作类型);
			packetData.WriteInt(操作类型);
			packetData.WriteLong(物品ID);
			packetData.WriteLong(物品数量);
			packetData.WriteLong(100L);
			packetData.WriteLong(物品.Get物品全局ID);
			packetData.WriteLong(物品.FLD_PID);
			packetData.WriteLong(物品.Get_Int_Item_Count);
			packetData.WriteByte(1);
			packetData.WriteByte(位置);
			packetData.WriteByte(0);
			packetData.WriteByte(3);
			packetData.WriteInt(1);
			packetData.WriteInt(物品.FLD_MAGIC0);
			packetData.WriteInt(物品.FLD_MAGIC1);
			packetData.WriteInt(物品.FLD_MAGIC2);
			packetData.WriteInt(物品.FLD_MAGIC3);
			packetData.WriteInt(物品.FLD_MAGIC4);
			packetData.WriteShort(物品.FLD_FJ_MAGIC0);
			packetData.WriteShort(物品.FLD_FJ_MAGIC1);
			packetData.WriteShort(物品.FLD_FJ_中级附魂);
			packetData.WriteShort(物品.FLD_FJ_MAGIC2);
			packetData.WriteShort(物品.FLD_FJ_MAGIC3);
			packetData.WriteShort(物品.FLD_FJ_MAGIC4);
			packetData.WriteShort(物品.FLD_FJ_MAGIC5);
			packetData.WriteShort(0);
			packetData.WriteInt(物品.FLD_FJ_KSSJ);
			packetData.WriteInt(物品.FLD_FJ_JSSJ);
			if (物品.FLD_持久力 != 0)
			{
				packetData.WriteShort(0);
			}
			else
			{
				packetData.WriteShort(0);
			}
			packetData.WriteInt(物品.FLD_FJ_觉醒);
			packetData.WriteShort(0);
			packetData.WriteShort(物品.FLD_FJ_进化);
			packetData.WriteShort(0);
			packetData.WriteInt(0);
			packetData.WriteInt(0);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 包ID, base.UserSessionID);
			}
		}

		public void 仓库存取(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				if (交易 == null || !交易.交易中)
				{
					if (!打开仓库中)
					{
						Form1.WriteLine(6, "仓库存取 BUG![" + base.Userid + "]-[" + base.UserName + "]");
					}
					else
					{
						byte[] array = new byte[4];
						byte[] dst = new byte[8];
						byte[] array2 = new byte[8];
						byte[] array3 = new byte[4];
						byte[] array4 = new byte[4];
						byte[] array5 = new byte[4];
						byte[] array6 = new byte[2];
						Buffer.BlockCopy(data, 9, array6, 0, 2);
						if (BitConverter.ToInt16(array6, 0) <= 108)
						{
							Buffer.BlockCopy(data, 11, array5, 0, 2);
							Buffer.BlockCopy(data, 19, array, 0, 4);
							Buffer.BlockCopy(data, 23, array2, 0, 8);
							Buffer.BlockCopy(data, 35, dst, 0, 8);
							Buffer.BlockCopy(data, 56, array3, 0, 1);
							Buffer.BlockCopy(data, 55, array4, 0, 1);
						}
						else
						{
							Buffer.BlockCopy(data, 15, array5, 0, 2);
							Buffer.BlockCopy(data, 23, array, 0, 4);
							Buffer.BlockCopy(data, 31, array2, 0, 8);
							Buffer.BlockCopy(data, 47, dst, 0, 8);
							Buffer.BlockCopy(data, 72, array3, 0, 1);
							Buffer.BlockCopy(data, 71, array4, 0, 1);
						}
						int num = BitConverter.ToInt32(array5, 0);
						int num2 = BitConverter.ToInt32(array, 0);
						int num3 = BitConverter.ToInt32(array3, 0);
						long num4 = BitConverter.ToInt64(array2, 0);
						int num5 = BitConverter.ToInt32(array4, 0);
						if (num4 < 1)
						{
							Form1.WriteLine(5, "非法复制_仓库存取[" + base.Userid + "]-[" + base.UserName + "]___[" + num + "]___[" + num2 + "]___[" + num3 + "]___[" + num4 + "]");
						}
						else
						{
							switch (num)
							{
								case 3:
									if (!World.checkItemCanStore(Item_In_Bag[num3].FLD_PID))
									{
										GameMessage("Vâòt phâÒm không thêÒ câìt kho");
									}
									else
									{
										int num7 = 得到个人仓库空位(3);
										if (Item_In_Bag[num3].FLD_PID != World.上线送礼包套装)
										{
											if (num7 != -1 && num5 != 60)
											{
												仓库_装备栏减物品(num2, num3, num4, num7, 3);
											}
											else
											{
												购买物品提示(14);
											}
										}
									}
									break;
								case 4:
									if (Item_In_Bag[num3].FLD_PID != World.上线送礼包套装 && !World.检查物品是否被锁定(BitConverter.ToInt32(Item_In_Bag[num3].Get_Byte_Item_PID, 0)) && !Item_In_Bag[num3].物品绑定)
									{
										int num9 = 得到个人仓库空位(4);
										if (num9 != -1 && num5 != 60)
										{
											仓库_装备栏减物品(num2, num3, num4, num9, 4);
										}
										else
										{
											购买物品提示(14);
										}
									}
									break;
								case 5:
									{
										int num8 = Find_Package_Empty(this);
										if (num8 != -1 && num5 != 60)
										{
											仓库_装备栏加物品(num2, num3, num4, num8, 5);
										}
										else
										{
											购买物品提示(14);
										}
										break;
									}
								case 6:
									{
										int num6 = Find_Package_Empty(this);
										if (num6 != -1 && num5 != 60)
										{
											仓库_装备栏加物品(num2, num3, num4, num6, 6);
										}
										else
										{
											购买物品提示(14);
										}
										break;
									}
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "仓库存取 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 查百宝阁元宝数()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_查百宝阁元宝数");
			}
			string sqlCommand = $"select FLD_SEX,FLD_RXPIONT,FLD_RXPIONTX,FLD_VIP,FLD_VIPTIM from [TBL_ACCOUNT] where FLD_ID=@Userid";
			SqlParameter[] prams = new SqlParameter[1]
			{
				SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
			};
			DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
			base.FLD_RXPIONT = (int)dBToDataTable.Rows[0]["FLD_RXPIONT"];
			base.FLD_RXPIONTX = (int)dBToDataTable.Rows[0]["FLD_RXPIONTX"];
			if (base.FLD_RXPIONT <= 0)
			{
				base.FLD_RXPIONT = 0;
			}
			dBToDataTable.Dispose();
		}

		public void 查帮派()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_查帮派");
			}
			try
			{
				string hex = "AA55C30001C802E900B400565E2600000000000000000000000000000000000200000001000000030000006500000000000000000000000000000000000000";
				string hex2 = "000000000000A44E55AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = Converter.hexStringToByte(hex2);
				DataTable dataTable = RxjhClass.得到帮派数据(base.Guild_Name);
				if (dataTable != null)
				{
					byte[] bytes = BitConverter.GetBytes(base.Guild_ID);
					Buffer.BlockCopy(bytes, 0, array, 11, bytes.Length);
					byte[] bytes2 = Encoding.GetEncoding(1252).GetBytes(base.Guild_Name);
					Buffer.BlockCopy(bytes2, 0, array, 15, bytes2.Length);
					int value = int.Parse(dataTable.Rows[0]["Leve"].ToString());
					int value2 = int.Parse(dataTable.Rows[0]["名声"].ToString());
					int value3 = 0;
					int value4 = 0;
					int value5 = 0;
					int value6 = 0;
					try
					{
						value3 = int.Parse(dataTable.Rows[0]["门派武勋"].ToString());
						value4 = int.Parse(dataTable.Rows[0]["胜"].ToString());
						value5 = int.Parse(dataTable.Rows[0]["败"].ToString());
						value6 = int.Parse(dataTable.Rows[0]["平"].ToString());
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "查帮派新出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
					}
					byte[] array3 = new byte[100];
					byte[] bytes3 = Encoding.GetEncoding(1252).GetBytes(dataTable.Rows[0]["G_Notice"].ToString());
					Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 31, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array, 35, 2);
					if (base.Guild_Icon != null)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(World.Server_Group_ID), 0, array, 43, 2);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 43, 2);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(value3), 0, array, 47, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value4), 0, array, 51, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value5), 0, array, 55, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(value6), 0, array, 59, 4);
					DataTable dataTable2 = RxjhClass.得到帮派人数(base.Guild_Name);
					int num = dataTable2.Rows.Count;
					if (num > 70)
					{
						num = 70;
					}
					Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array, 39, 2);
					byte[] array4 = new byte[num * 24 + array.Length + array2.Length + array3.Length];
					Buffer.BlockCopy(array, 0, array4, 0, array.Length);
					Buffer.BlockCopy(array2, 0, array4, array4.Length - array2.Length, array2.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(value3), 0, array4, array.Length, 4);
					int num2 = 0;
					while (true)
					{
						bool flag = true;
						if (num2 >= num)
						{
							break;
						}
						byte[] bytes4 = Encoding.GetEncoding(1252).GetBytes(dataTable2.Rows[num2]["Name"].ToString());
						Buffer.BlockCopy(bytes4, 0, array4, array.Length + (num2 + 1) * 24, bytes4.Length);
						Buffer.BlockCopy(BitConverter.GetBytes(int.Parse(dataTable2.Rows[num2]["Leve"].ToString())), 0, array4, array.Length + 18 + (num2 + 1) * 24, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(int.Parse(dataTable2.Rows[num2]["FLD_ONLINE"].ToString())), 0, array4, array.Length + 20 + (num2 + 1) * 24, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(int.Parse(dataTable2.Rows[num2]["FLD_LEVEL"].ToString())), 0, array4, array.Length + 16 + (num2 + 1) * 24, 2);
						num2++;
					}
					Buffer.BlockCopy(bytes3, 0, array4, array.Length + num * 24, bytes3.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(59 + num * 24 + array3.Length + 8), 0, array4, 2, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(52 + num * 24 + array3.Length), 0, array4, 9, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send多包(array4, array4.Length);
					}
					dataTable2.Dispose();
					dataTable.Dispose();
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(1, "查帮派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
			}
		}

		public void ViewQiGong(byte[] data, int length)
		{
			try
			{
				Players players = World.FindPlayerbyID(BitConverter.ToInt16(data, 15));
				PacketData packetData = new PacketData();
				packetData.WriteInt(1);
				packetData.WriteInt(BitConverter.ToInt16(data, 15));
				packetData.WriteShort(players.Player_Qigong_point);
				for (int i = 0; i < 15; i++)
				{
					if (i < 12)
					{
						int 气功ID = players.气功[i].气功ID;
						packetData.WriteShort(气功ID);
						if (players.气功[i].气功ID != 0)
						{
							if (players.气功[i].气功量 != 0)
							{
								int num = players.气功[i].气功量 + players.FLD_Item_Level_Pran + players.Character_Qigong + players.FLD_武勋_追加_气功 + players.flowerEffectQigong + players.FLD_斗神_追加_气功;
								if (num != 0 && num > World.最大气功数)
								{
									num = World.最大气功数;
								}
								packetData.WriteShort(num);
							}
							else
							{
								packetData.WriteShort(0);
							}
						}
						else
						{
							packetData.WriteShort(0);
						}
					}
					else
					{
						packetData.WriteInt(0);
					}
				}
				foreach (升天气功类 value in players.升天气功.Values)
				{
					packetData.WriteShort(value.气功ID);
					if (value.气功量 != 0)
					{
						int num = value.气功量 + players.FLD_Item_Level_Pran + players.Character_Qigong + players.FLD_武勋_追加_气功 + players.flowerEffectQigong + players.FLD_斗神_追加_气功;
						if (num != 0 && num > World.最大气功数)
						{
							num = World.最大气功数;
						}
						packetData.WriteShort(num);
					}
					else
					{
						packetData.WriteShort(0);
					}
				}
				for (int j = 0; j < 15 - players.升天气功.Count; j++)
				{
					packetData.WriteShort(0);
					packetData.WriteShort(0);
				}
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 9241, base.UserSessionID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "查看人物对方气功出错:" + ex.Message);
			}
		}

		public void ViewInfoCharacter(byte[] data, int length)
		{
			PacketVerify(data, length);
			Players players = World.FindPlayerbyID(BitConverter.ToInt16(data, 15));
			if (players == null)
			{
				return;
			}
			PacketData packetData = new PacketData();
			packetData.WriteInt(1);
			packetData.WriteShort(BitConverter.ToInt16(data, 15));
			packetData.WriteShort(0);
			for (int i = 0; i < 15; i++)
			{
			}
			for (int i = 0; i < 30; i++)
			{
				if (i < 15)
				{
					packetData.WriteByteArray(players.Item_Wear[i].GetByte());
				}
				else
				{
					packetData.WriteByteArray(new byte[World.单个物品大小]);
				}
			}
			packetData.WriteByteArray(players.Item_Wear[15].GetByte());
			packetData.WriteByteArray(new byte[World.单个物品大小]);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 4889, base.UserSessionID);
			}
		}

		public int 查询已登陆帐号数量(string nip, string wip, string mac)
		{
			try
			{
				int num = 0;
				if (World.信任连接ip != "")
				{
					string[] array = World.信任连接ip.Split(';');
					for (int i = 0; i < array.Length; i++)
					{
						if (array[i] == base.Client.ToString())
						{
							return 0;
						}
					}
				}
				foreach (ClientIPAddress value in World.Iplist.Values)
				{
					if (value.MAC地址 == mac && value.外网IP地址 == wip && value.内网IP地址 == nip)
					{
						num++;
					}
				}
				return num;
			}
			catch
			{
				return 0;
			}
		}

		public bool 查找范围Npc(int far_, NpcClass Npc)
		{
			if (Npc.RxjhMap != base.Player_FLD_Map)
			{
				return false;
			}
			if (base.Player_FLD_Map == 7301)
			{
				far_ = 1000;
			}
			float num = Npc.RxjhX - base.Player_FLD_X;
			float num2 = Npc.RxjhY - base.Player_FLD_Y;
			float num3 = (int)Math.Sqrt(num * num + num2 * num2);
			return num3 <= (float)far_;
		}

		public bool 查找范围地面物品(int far_, GroundItems 地面物品)
		{
			if (地面物品.Rxjh_Map != base.Player_FLD_Map)
			{
				return false;
			}
			float num = 地面物品.Rxjh_X - base.Player_FLD_X;
			float num2 = 地面物品.Rxjh_Y - base.Player_FLD_Y;
			float num3 = (int)Math.Sqrt(num * num + num2 * num2);
			return num3 <= (float)far_;
		}

		public bool Check_Radius_Player(int far_, Players players)
		{
			if (players.Player_FLD_Map != base.Player_FLD_Map)
			{
				return false;
			}
			float num = players.Player_FLD_X - base.Player_FLD_X;
			float num2 = players.Player_FLD_Y - base.Player_FLD_Y;
			float num3 = (int)Math.Sqrt(num * num + num2 * num2);
			return num3 <= (float)far_;
		}

		public void 查组队(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_查组队");
			}
			try
			{
				PacketVerify(data, length);
				int 人物ID = BitConverter.ToInt16(data, 5);
				BitConverter.ToInt32(data, 11);
				if (Select_Character_ID(人物ID) != null)
				{
					PacketData packetData = new PacketData();
					foreach (TeamClass value in World.PartyClass.Values)
					{
						packetData.WriteShort(100);
						packetData.WriteShort(6);
						packetData.WriteShort(8);
						packetData.WriteString("HaHaHa", 14);
						if (base.Client != null)
						{
							base.Client.SendPak(packetData, 6744, base.UserSessionID);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 吃药(byte[] data)
		{
			try
			{
				if (!base.PlayerIsDead)
				{
					int num = data[12];
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(data, 15, array, 0, 4);
					Buffer.BlockCopy(data, 23, array2, 0, 4);
					Buffer.BlockCopy(data, 35, array3, 0, 4);
					int num2 = BitConverter.ToInt32(array, 0);
					int num3 = BitConverter.ToInt32(array3, 0);
					if (Item_In_Bag[num].物品绑定 && num2 != 1008000301)
					{
						num2 -= 20000;
					}
					BitConverter.ToInt32(array2, 0);
					ItmeClass 物品 = World.Itme[BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0)];
					int num4 = BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0);
					if (num4 != num2 || num4 == 0)
					{
						GameMessage(BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) + " / " + num4, 9);
					}
					else
					{
						ItmeClass value18;
						Players value10;
						switch (num2)
						{
							case 1008001300:
							case 1008001301:
								{
									if (list_时间药品.ContainsKey(num2))
									{
										return;
									}
									DateTime d = DateTime.Now.AddDays(30.0);
									时间药品 时间药品3 = new 时间药品();
									时间药品3.FLD_sj = (int)Convert.ToDouble(d.ToString("yyMMddHHmm"));
									时间药品3.FLD_PID = num2;
									list_时间药品.Add(时间药品3.FLD_PID, 时间药品3);
									Send_Packet_Show_时间物品(num2, 1, 时间药品3.FLD_sj, (int)(d - DateTime.Now).TotalMinutes);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 900000787:
								if (base.Guild_Name != "")
								{
									int num15 = new Random(World.GetRandomSeed()).Next(0, 45);
									if (num15 <= 10)
									{
										GsAddGuildPoint(5);
									}
									else if (num15 <= 20)
									{
										GsAddGuildPoint(6);
									}
									else if (num15 <= 30)
									{
										GsAddGuildPoint(7);
									}
									else if (num15 <= 35)
									{
										GsAddGuildPoint(8);
									}
									else if (num15 <= 40)
									{
										GsAddGuildPoint(9);
									}
									else if (num15 <= 45)
									{
										GsAddGuildPoint(10);
									}
									Delete_Item_Use(num, 1);
								}
								else
								{
									GameMessage("Baòn chýa tham gia bang hôòi naÌo caÒ");
								}
								UpdatePowersAndStatus();
								return;
							case 1000001176:
							case 1000001177:
							case 1000001178:
							case 1000001179:
							case 1000001180:
							case 1000001181:
								_Make_Item_Option(Item_In_Bag[num].物品全局ID, BitConverter.GetBytes(Item_In_Bag[num].FLD_PID - 6), num, BitConverter.GetBytes(1), Item_In_Bag[num].Get_Byte_Item_Option);
								return;
							case 1008001478:
								{
									if (list_时间药品.ContainsKey(1008001478))
									{
										新吃药提示();
										return;
									}
									DateTime d2 = DateTime.Now.AddDays(30.0);
									DateTime now = DateTime.Now;
									double num14 = Convert.ToDouble(d2.ToString("yyMMddHHmm"));
									TimeSpan timeSpan2 = d2 - now;
									时间药品 时间药品2 = new 时间药品();
									时间药品2.FLD_sj = (int)num14;
									时间药品2.FLD_PID = 1008001478;
									list_时间药品.Add(时间药品2.FLD_PID, 时间药品2);
									Send_Packet_Show_时间物品(1008001478, 1, 时间药品2.FLD_sj, (int)timeSpan2.TotalMinutes);
									Item_Use(num, 1, 1);
									UpdatePowersAndStatus();
									更新人物数据(this);
									更新广播人物数据();
									foreach (Players value19 in World.AllConnectedChars.Values)
									{
										value19.GameNotice(1, 4990, base.UserName, "");
									}
									goto default;
								}
							case 1008001626:
								{
									int num12 = -1;
									int num13 = 1;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001122)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[3].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[3].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[3].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[3].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001627:
								{
									int num12 = -1;
									int num13 = 2;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001123)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[3].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[3].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[3].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[3].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001628:
								{
									int num12 = -1;
									int num13 = 3;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001124)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[3].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[3].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[3].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[3].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001629:
								{
									int num12 = -1;
									int num13 = 4;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001125)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[3].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[3].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[3].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[3].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001630:
								{
									int num12 = -1;
									int num13 = 1;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001122)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[0].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[0].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[0].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[0].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001631:
								{
									int num12 = -1;
									int num13 = 2;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001123)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[0].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[0].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[0].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[0].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001632:
								{
									int num12 = -1;
									int num13 = 3;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001124)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[0].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[0].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[0].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[0].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001633:
								{
									int num12 = -1;
									int num13 = 4;
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001125)
										{
											num12 = j;
											break;
										}
									}
									if (Item_Wear[0].Type_TuLinh == 0)
									{
										Item_Use(num, 0, 4);
										return;
									}
									if (Item_Wear[0].Type_TuLinh == num13)
									{
										Item_Use(num, 0, 5);
										return;
									}
									if (Item_Wear[0].FLD_PID == 0)
									{
										Item_Use(num, 0, 2);
										return;
									}
									if (base.Player_Money < 5000000)
									{
										Item_Use(num, 0, 6);
										return;
									}
									if (num12 == -1)
									{
										Item_Use(num, 0, 3);
										return;
									}
									Item_Use(num, 0, 1);
									Item_Use(num, 1, 1);
									Send_Packet_Delete_Item(num12, 1);
									Item_Wear[0].Type_TuLinh = num13;
									Initialize_Equip_Item();
									base.Player_Money -= 5000000L;
									Update_Money_Weight();
									goto default;
								}
							case 1008001940:
							case 1008001965:
							case 1008001969:
								{
									int num21 = Find_Package_Empty(this);
									if (num21 < 0)
									{
										GameMessage("Không ðuÒ chôÞ trôìng!");
										return;
									}
									int num22 = -1;
									for (int j = 0; j < ((base.装备行囊是否开启 == 0) ? 36 : 66); j++)
									{
										if (BitConverter.ToInt32(Item_In_Bag[j].Get_Byte_Item_PID, 0) == 1000001150)
										{
											num22 = j;
											break;
										}
									}
									if (num22 == -1)
									{
										GameMessage("Không tiÌm thâìy trýìng ðang âìp!");
										return;
									}
									if (!World.Itme.TryGetValue((int)Item_In_Bag[num].FLD_PID, out value18))
									{
										GameMessage("Vâòt phâÒm ðang taòm khoìa!");
										return;
									}
									if (!World.Itme.TryGetValue((int)Item_In_Bag[num22].FLD_PID, out value18))
									{
										GameMessage("Vâòt phâÒm ðang taòm khoìa!");
										return;
									}
									Item_Use(num, 1);
									Item_Use(num22, 1);
									end时间物品(1000001150L);
									AddNewEggHeavenPet();
									break;
								}
							case 1000001150:
								{
									物品类 物品类 = 得到人物物品类型(1008001940L);
									int num21 = Find_Package_Empty(this);
									if (num21 < 0)
									{
										GameMessage("Không ðuÒ chôÞ trôìng!");
										return;
									}
									int num22 = num;
									if (!World.Itme.TryGetValue((int)Item_In_Bag[num22].FLD_PID, out value18))
									{
										GameMessage("Vâòt phâÒm ðang taòm khoìa!");
										return;
									}
									int fLD_MAGIC = Item_In_Bag[num22].FLD_MAGIC3;
									DateTime t = new DateTime(1970, 1, 1, 7, 0, 0).AddSeconds(Item_In_Bag[num22].FLD_MAGIC4);
									if (t > DateTime.Now)
									{
										if (物品类 == null)
										{
											GameMessage("Trýìng chýa tõìi thõÌi gian nõÒ!");
											return;
										}
										Item_Use(物品类.Bag, 1);
									}
									Item_Use(num, 1);
									end时间物品(1000001150L);
									AddNewEggHeavenPet();
									for (int j = 0; j < 66; j++)
									{
										if (Item_In_Bag[j].FLD_PID == 1000001150)
										{
											Item_In_Bag[j].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
										}
									}
									break;
								}
							case 1008000301:
								Delete_Item_Use(num, 1);
								Item_In_Bag[num].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
								百宝增加物品带属性(1700101, num, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7);
								Update_Item_In_Bag();
								break;
							case 1008000238:
							case 1008000315:
								base.Player_FLD_EXP += Item_In_Bag[num].FLD_MAGIC1;
								Delete_Item_Use(num, 1);
								Item_In_Bag[num].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
								Update_Item_In_Bag();
								Update_Exp_Marble();
								break;
							case 1000000199:
								Graft_Gem();
								break;
							case 1000000161:
								Graft_Gem();
								break;
							case 1000000162:
								Graft_Gem();
								break;
							case 1000000163:
								Graft_Gem();
								break;
							case 1000000164:
								Graft_Gem();
								break;
							case 1000000166:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 1)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 40);
								更新灵兽HP_MP_SP();
								break;
							case 1000000167:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 1)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 70);
								更新灵兽HP_MP_SP();
								break;
							case 1000000168:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 1)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 100);
								更新灵兽HP_MP_SP();
								break;
							case 1000000169:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 2)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 40);
								更新灵兽HP_MP_SP();
								break;
							case 1000000170:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 2)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 70);
								更新灵兽HP_MP_SP();
								break;
							case 1000000171:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 2)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 100);
								更新灵兽HP_MP_SP();
								break;
							case 1000000172:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 3)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 40);
								更新灵兽HP_MP_SP();
								break;
							case 1000000173:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 3)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 70);
								更新灵兽HP_MP_SP();
								break;
							case 1000000174:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 3)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 100);
								更新灵兽HP_MP_SP();
								break;
							case 1000000175:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 4)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 40);
								更新灵兽HP_MP_SP();
								break;
							case 1000000176:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 4)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 70);
								更新灵兽HP_MP_SP();
								break;
							case 1000000177:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 4)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 100);
								更新灵兽HP_MP_SP();
								break;
							case 1000000179:
								if (Pet != null && Pet.FLD_HP > 0)
								{
									Pet.FLD_HP += 70;
									method_1922(this);
									Item_Use(num, 1);
								}
								break;
							case 1000000180:
								if (Pet != null && Pet.FLD_HP > 0)
								{
									Pet.FLD_HP += 160;
									method_1922(this);
									Item_Use(num, 1);
								}
								break;
							case 1000000181:
								if (Pet != null && Pet.FLD_HP > 0)
								{
									Pet.FLD_HP += 300;
									method_1922(this);
									Item_Use(num, 1);
								}
								break;
							case 1000000182:
								if (Pet != null)
								{
									Pet.FLD_MP += 70;
									method_1922(this);
									Item_Use(num, 1);
								}
								break;
							case 1000000183:
								if (Pet != null)
								{
									Pet.FLD_MP += 160;
									method_1922(this);
									Item_Use(num, 1);
								}
								break;
							case 1000000184:
								if (Pet != null)
								{
									Pet.FLD_MP += 300;
									method_1922(this);
									Item_Use(num, 1);
								}
								break;
							case 1000000192:
								if (Pet == null && base.Int32_1197 != 99)
								{
									base.Int32_1197 = 99;
									Item_Use(num, 1);
								}
								else
								{
									GameMessage("目前不需要使用！！！", 9, "提示");
								}
								break;
							case 1000000193:
								if (Pet == null && base.Int32_1198 != 99)
								{
									base.Int32_1198 = 99;
									Item_Use(num, 1);
								}
								else
								{
									GameMessage("目前不需要使用！！！", 9, "提示");
								}
								break;
							case 1000000194:
								if (Pet == null && base.Int32_1199 != 99)
								{
									base.Int32_1199 = 99;
									Item_Use(num, 1);
								}
								else
								{
									GameMessage("目前不需要使用！！！", 9, "提示");
								}
								break;
							case 1000000195:
								if (Pet == null && base.Int32_1200 != 99)
								{
									base.Int32_1200 = 99;
									Item_Use(num, 1);
								}
								else
								{
									GameMessage("目前不需要使用！！！", 9, "提示");
								}
								break;
							case 1000000862:
								if (Pet == null)
								{
									GameMessage("Vui loÌng triêòu hôÌi vâòt nuôi !!!", 9);
									return;
								}
								if (Pet.FLD_JOB != 5)
								{
									GameMessage("Vâòt nuôi không thêÒ sýÒ duòng thýìc ãn naÌy", 9);
									return;
								}
								Item_Use(num, 1);
								method_1922(this);
								Pet.FLD_ZCD += new Random(World.GetRandomSeed()).Next(0, 100);
								更新灵兽HP_MP_SP();
								break;
							case 1000000185:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Hp = DateTime.Now;
									Recovery_HP(600, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000186:
								if (base.Player_Level >= 60 && DateTime.Now.Subtract(Time_Use_Mp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item))
								{
									Time_Use_Mp = DateTime.Now;
									Recovery_MP(600, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000200:
								{
									if (base.FLD_Couple_Name == "")
									{
										return;
									}
									int key2 = 0;
									if (base.Player_Job == 1)
									{
										key2 = 100301;
									}
									else if (base.Player_Job == 2)
									{
										key2 = 200301;
									}
									else if (base.Player_Job == 3)
									{
										key2 = 300301;
									}
									else if (base.Player_Job == 4)
									{
										key2 = 400301;
									}
									else if (base.Player_Job == 5)
									{
										key2 = 500301;
									}
									else if (base.Player_Job == 6)
									{
										key2 = 800301;
									}
									else if (base.Player_Job == 7)
									{
										key2 = 900301;
									}
									else if (base.Player_Job == 8)
									{
										key2 = 1000301;
									}
									else if (base.Player_Job == 9)
									{
										key2 = 2000301;
									}
									else if (base.Player_Job == 10)
									{
										key2 = 3000301;
									}
									else if (base.Player_Job == 11)
									{
										key2 = 4000301;
									}
									else if (base.Player_Job == 12)
									{
										key2 = 5000301;
									}
									if (World.TblKongfu.TryGetValue(key2, out MartialArts value13))
									{
										if (Array_Skill_Book[value13.FLD_武功类型, value13.FLD_INDEX] != null)
										{
											GameMessage("Baòn ðaÞ hoòc kyÞ nãng naÌy rôÌi!");
											return;
										}
										Array_Skill_Book[value13.FLD_武功类型, value13.FLD_INDEX] = new MartialArts(value13.FLD_PID);
										Item_Use(num, 1);
										base.Player_ExpErience -= value13.FLD_NEEDEXP;
										学习技能提示();
										UpdatePowersAndStatus();
										Update_Exp_Marble();
										记算夫妻武功攻击力数据();
									}
									break;
								}
							case 1000000213:
								{
									if (base.FLD_Couple_Name == "")
									{
										return;
									}
									int key = 0;
									if (base.Player_Sex == 1)
									{
										key = 601201;
									}
									else if (base.Player_Sex == 2)
									{
										key = 601202;
									}
									if (World.TblKongfu.TryGetValue(key, out MartialArts value11))
									{
										if (Array_Skill_Book[value11.FLD_武功类型, value11.FLD_INDEX] != null)
										{
											GameMessage("Baòn ðaÞ hoòc kyÞ nãng naÌy rôÌi!");
											return;
										}
										Array_Skill_Book[value11.FLD_武功类型, value11.FLD_INDEX] = new MartialArts(value11.FLD_PID);
										Item_Use(num, 1);
										base.Player_ExpErience -= value11.FLD_NEEDEXP;
										学习技能提示();
										UpdatePowersAndStatus();
										Update_Exp_Marble();
										记算夫妻武功攻击力数据();
									}
									break;
								}
							case 1000000217:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000218:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000219:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000220:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000221:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000222:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000223:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000224:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000225:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000226:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000227:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000228:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000229:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000230:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000231:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000232:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000233:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000234:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000235:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000236:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000237:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000238:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000239:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000240:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000241:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000242:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000243:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000244:
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								break;
							case 1000000245:
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000000246:
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								break;
							case 1000000247:
								if (base.Player_Job == 2 || base.Player_Job == 9)
								{
									MartialArts.Learn_Book_Skill(this, 1, 5, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000001009:
								if (base.Player_Job == 9)
								{
									MartialArts.Learn_Book_Skill(this, 1, 5, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000000248:
								if (base.Player_Job == 3)
								{
									MartialArts.Learn_Book_Skill(this, 1, 5, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000000249:
								if (base.Player_Job == 4)
								{
									MartialArts.Learn_Book_Skill(this, 1, 13, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000000714:
								升天武功点数++;
								Item_Use(num, 1);
								UpdatePowersAndStatus();
								break;
							case 1000000717:
								Item_Use(num, 1);
								爆毒数据包(num);
								break;
							case 1000000718:
								Item_Use(num, 1);
								爆毒数据包(num);
								break;
							case 1000000719:
								Item_Use(num, 1);
								爆毒数据包(num);
								break;
							case 1000000720:
								Item_Use(num, 1);
								爆毒数据包(num);
								break;
							case 1000000660:
								if (base.Player_Job_Level < 6)
								{
									GameMessage("Baòn chýa thýìc thiên 1 (thãng chýìc 6)", 9);
								}
								else
								{
									CoordinateClass value16 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value16);
									Move(1987f, -2030f, 15f, 26000, bRandom: false);
									Item_Use(num, 1);
								}
								break;
							case 1000000643:
								if (base.Player_Job_Level < 6)
								{
									GameMessage("Baòn chýa thýìc thiên 1 (thãng chýìc 6)", 9);
								}
								else
								{
									CoordinateClass value17 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value17);
									Move(-1900f, 2000f, 15f, 25100, bRandom: false);
									Item_Use(num, 1);
								}
								break;
							case 1000000617:
								{
									CoordinateClass value14 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value14);
									Move(1900f, -820f, 15f, 5001, bRandom: false);
									Item_Use(num, 1);
									break;
								}
							case 1008000232:
								{
									if (Show_Pic_Class.ContainsKey(1008000232))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill39 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill39.FLD_PID, class_Show_Pill39);
									base.FLD_Item_Premium_HP += 100;
									base.FLD_Item_Premium_Exp += 0.2;
									base.FLD_Item_Premium_Money += 0.4;
									base.FLD_Item_Premium_Drop += 0.2;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000351:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000355))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1 || base.Player_Level >= 60)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1~59, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.2;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000355:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000355))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 60 || base.Player_Level >= 100)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 60~99, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.5;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000095:
								{
									if (Show_Pic_Class.ContainsKey(1008000095) || Show_Pic_Class.ContainsKey(1008000096) || Show_Pic_Class.ContainsKey(1008000097) || Show_Pic_Class.ContainsKey(1008000321) || Show_Pic_Class.ContainsKey(1008000322) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000362) || Show_Pic_Class.ContainsKey(1008000363))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.2;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000096:
								{
									if (Show_Pic_Class.ContainsKey(1008000095) || Show_Pic_Class.ContainsKey(1008000096) || Show_Pic_Class.ContainsKey(1008000097) || Show_Pic_Class.ContainsKey(1008000321) || Show_Pic_Class.ContainsKey(1008000322) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000362) || Show_Pic_Class.ContainsKey(1008000363))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.3;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000097:
								{
									if (Show_Pic_Class.ContainsKey(1008000095) || Show_Pic_Class.ContainsKey(1008000096) || Show_Pic_Class.ContainsKey(1008000097) || Show_Pic_Class.ContainsKey(1008000321) || Show_Pic_Class.ContainsKey(1008000322) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000362) || Show_Pic_Class.ContainsKey(1008000363))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.4;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000239:
								{
									if (Show_Pic_Class.ContainsKey(1008000239) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000363) || Show_Pic_Class.ContainsKey(1008000362))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 1.0;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000240:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill4 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill4.FLD_PID, class_Show_Pill4);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000241:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill9 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill9.FLD_PID, class_Show_Pill9);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000242:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000243:
								{
									if (Show_Pic_Class.ContainsKey(1008000243))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill15 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill15.FLD_PID, class_Show_Pill15);
									base.FLD_Item_Premium_HP += 300;
									base.FLD_Item_Premium_Exp += 0.2;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008001040:
								{
									if (list_时间药品.ContainsKey(1008001040) || list_时间药品.ContainsKey(1008001041))
									{
										return;
									}
									int num20 = (23 - DateTime.Now.Hour) * 3600 + (59 - DateTime.Now.Minute) * 60 + (59 - DateTime.Now.Second - 1);
									DateTime d = DateTime.Now.AddSeconds(num20);
									时间药品 时间药品3 = new 时间药品();
									时间药品3.FLD_sj = (int)Convert.ToDouble(d.ToString("yyMMddHHmm"));
									时间药品3.FLD_PID = num2;
									list_时间药品.Add(时间药品3.FLD_PID, 时间药品3);
									Send_Packet_Show_时间物品(num2, 1, 时间药品3.FLD_sj, (int)(d - DateTime.Now).TotalMinutes);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008001041:
								{
									if (list_时间药品.ContainsKey(1008001040) || list_时间药品.ContainsKey(1008001041))
									{
										return;
									}
									int num20 = (23 - DateTime.Now.Hour) * 3600 + (59 - DateTime.Now.Minute) * 60 + (59 - DateTime.Now.Second - 1);
									DateTime d = DateTime.Now.AddSeconds(num20);
									时间药品 时间药品3 = new 时间药品();
									时间药品3.FLD_sj = (int)Convert.ToDouble(d.ToString("yyMMddHHmm"));
									时间药品3.FLD_PID = num2;
									list_时间药品.Add(时间药品3.FLD_PID, 时间药品3);
									Send_Packet_Show_时间物品(num2, 1, 时间药品3.FLD_sj, (int)(d - DateTime.Now).TotalMinutes);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000245:
								{
									if (Show_Pic_Class.ContainsKey(1008000188))
									{
										GameMessage("无法和太极神丹同时使用");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000245))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill44 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill44.FLD_PID, class_Show_Pill44);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_追加百分比_回避 += 0.05;
									base.FLD_Item_Premium_HP += 100;
									base.Character_Qigong += 2;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									break;
								}
							case 1008000248:
								{
									if (Show_Pic_Class.ContainsKey(1008000248))
									{
										新吃药提示();
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000239))
									{
										新吃药提示();
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000323))
									{
										新吃药提示();
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000324))
									{
										新吃药提示();
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000363))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill40 = new Class_Show_Pill(this, 14400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill40.FLD_PID, class_Show_Pill40);
									base.FLD_Item_Premium_Exp += 1.0;
									base.FLD_Item_Premium_Fight_Exp += 1.0;
									base.FLD_Item_Premium_Money += 1.0;
									base.FLD_Item_Premium_Drop += 1.0;
									Send_Packet_Show_Pic(array, 1, 14400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000250:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001021:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001026:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001048:
								{
									if (Show_Pic_Class.ContainsKey(1008001048))
									{
										return;
									}
									Send_Packet_Show_Pic(array, 1, 3600000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001031:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.07);
									base.FLD_Item_Skill_Attack_Percentage += 0.12;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Premium_HP += 600;
									base.FLD_Item_Premium_MP += 400;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001022:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001027:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001032:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.4;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001023:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001028:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001033:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001024:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001029:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001034:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.Character_Qigong += 3;
									base.FLD_Item_Premium_Exp += 0.2;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001025:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001030:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001035:
								{
									if (KimLongChiTheu || Item_Wear[11] == null)
									{
										return;
									}
									KimLongChiTheu = true;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									Add_ATT_Percentage(0.05);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 300;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001111:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 21600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.FLD_人物_追加_攻击 += 50;
									base.FLD_人物_追加_防御 += 100;
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_MP += 500;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Premium_Exp += 0.4;
									Send_Packet_Show_Pic(array, 1, 21600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008001112:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill23 = new Class_Show_Pill(this, 21600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill23.FLD_PID, class_Show_Pill23);
									base.FLD_人物_追加_攻击 += 100;
									base.FLD_人物_追加_防御 += 50;
									base.FLD_Item_Premium_HP += 800;
									base.FLD_人物_追加_回避 += 10;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Pill_Defense_Skill += 100.0;
									Send_Packet_Show_Pic(array, 1, 21600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000251:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill20 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill20.FLD_PID, class_Show_Pill20);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000252:
								{
									if (Show_Pic_Class.ContainsKey(1008000252))
									{
										GameMessage("无法和太极神丹同时使用");
										return;
									}
									DateTime d = DateTime.Now.AddDays(100.0);
									TimeSpan timeSpan = d - DateTime.Now;
									时间药品 时间药品 = new 时间药品();
									时间药品.FLD_sj = (int)Convert.ToDouble(d.ToString("yyMMddHHmm"));
									时间药品.FLD_PID = num2;
									list_时间药品.Add(时间药品.FLD_PID, 时间药品);
									Send_Packet_Show_时间物品(num2, 1, 时间药品.FLD_sj, (int)timeSpan.TotalMinutes);
									Class_Show_Pill class_Show_Pill21 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill21.FLD_PID, class_Show_Pill21);
									base.FLD_Item_Premium_HP += 100;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									break;
								}
							case 1008000304:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill22 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill22.FLD_PID, class_Show_Pill22);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_人物_追加_防御 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000305:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill19 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill19.FLD_PID, class_Show_Pill19);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_人物_追加_防御 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000333:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill19 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill19.FLD_PID, class_Show_Pill19);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_人物_追加_防御 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000306:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill18 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill18.FLD_PID, class_Show_Pill18);
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000307:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill16 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill16.FLD_PID, class_Show_Pill16);
									base.FLD_Item_Premium_Exp += 0.1;
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1000000295:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Hp = DateTime.Now;
									Recovery_HP(1000, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000296:
								if (base.Player_Level >= 1 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Mp = DateTime.Now;
									Recovery_MP(1000, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000297:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Hp = DateTime.Now;
									Recovery_HP(1700, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000969:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Hp = DateTime.Now;
									Recovery_HP(700, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000970:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Hp = DateTime.Now;
									Recovery_HP(850, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000971:
								if (base.Player_Level >= 1 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Mp = DateTime.Now;
									Recovery_MP(700, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000972:
								if (base.Player_Level >= 1 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Mp = DateTime.Now;
									Recovery_MP(850, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000298:
								if (base.Player_Level >= 1 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Mp = DateTime.Now;
									Recovery_MP(1700, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000895:
								Recovery_HP(1000);
								Item_Use(num, 1);
								break;
							case 1000000896:
								Recovery_MP(1000);
								Item_Use(num, 1);
								break;
							case 1000000285:
								{
									CoordinateClass value15 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value15);
									Move(-900f, 145f, 15f, 6001, bRandom: false);
									Item_Use(num, 1);
									break;
								}
							case 1000000286:
								Item_Use(num, 1);
								base.Player_WuXun += 100;
								UpdatePowersAndStatus();
								break;
							case 1000000287:
								Item_Use(num, 1);
								base.Player_WuXun += 200;
								UpdatePowersAndStatus();
								break;
							case 1000000288:
								Item_Use(num, 1);
								base.Player_WuXun += 500;
								UpdatePowersAndStatus();
								break;
							case 1000000289:
								Item_Use(num, 1);
								base.Player_WuXun += 1000;
								UpdatePowersAndStatus();
								break;
							case 1000000290:
								Item_Use(num, 1);
								base.Player_WuXun += 2000;
								UpdatePowersAndStatus();
								break;
							case 1000000313:
								MartialArts.Learn_Book_Skill(this, 1, 17, num);
								break;
							case 1000000314:
								MartialArts.Learn_Book_Skill(this, 1, 18, num);
								break;
							case 1000000315:
								MartialArts.Learn_Book_Skill(this, 1, 21, num);
								break;
							case 1000000316:
								MartialArts.Learn_Book_Skill(this, 1, 22, num);
								break;
							case 1000000317:
								MartialArts.Learn_Book_Skill(this, 1, 23, num);
								break;
							case 1000000318:
								if (base.Player_Job == 6)
								{
									MartialArts.Learn_Book_Skill(this, 1, 13, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000000320:
								if (base.Player_Job == 7)
								{
									MartialArts.Learn_Book_Skill(this, 1, 9, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000001050:
								if (base.Player_Job == 7)
								{
									MartialArts.Learn_Book_Skill(this, 1, 13, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000001049:
								if (base.Player_Job == 5)
								{
									MartialArts.Learn_Book_Skill(this, 1, 25, num);
								}
								else
								{
									GameMessage("Không thêÒ hoòc loaòi saìch naÌy", 9);
								}
								break;
							case 1000000336:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000337:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000338:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000339:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000340:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000341:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000494:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000497:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000342:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000343:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000344:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000345:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000346:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1000000347:
								MartialArts.Learn_Book_Skill_Ascension(this, 物品, num);
								break;
							case 1008000044:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									if (num17 < 200)
									{
										num17 = 200;
									}
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000045:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num16 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num16);
									if (num16 < 200)
									{
										num16 = 200;
									}
									物品使用千年雪参(num, num16);
									Item_Effects(1000000104L);
									break;
								}
							case 1008000068:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000069:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num16 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num16);
									物品使用千年雪参(num, num16);
									Item_Effects(1000000104L);
									break;
								}
							case 1007000013:
								Delete_Item_Use(num, 1);
								Fireworks();
								break;
							case 1008000183:
								{
									if (Show_Pic_Class.ContainsKey(1008000156))
									{
										GameMessage("无法和热血丹心同时使用");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000187))
									{
										GameMessage("Item trung lap, khong the su dung: 1008000187");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000183))
									{
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000195))
									{
										GameMessage("Item trung lap, khong the su dung: 1008000195");
										return;
									}
									Class_Show_Pill class_Show_Pill24 = new Class_Show_Pill(this, 864000000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill24.FLD_PID, class_Show_Pill24);
									base.FLD_Item_Premium_HP += 300;
									Add_DEF_Percentage(0.05);
									Send_Packet_Show_Pic(array, 1, 864000000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新人物数据(this);
									更新广播人物数据();
									break;
								}
							case 1008000185:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									base.FLD_Item_Premium_HP += 700;
									base.FLD_Item_Premium_Exp += 0.4;
									base.FLD_Item_Premium_Fight_Exp += 2.0;
									Add_DEF_Percentage(0.1);
									addFLD_装备_追加_防具_强化(1);
									addFLD_装备_追加_武器_强化(2);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000104:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									addFLD_装备_追加_武器_强化(2);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000105:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									if (World.Newversion >= 13)
									{
										addFLD_装备_追加_防具_强化(2);
									}
									else
									{
										addFLD_装备_追加_防具_强化(1);
									}
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000053:
								{
									if (Show_Pic_Class.ContainsKey(1008000219) || Show_Pic_Class.ContainsKey(1008000053))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 999000003:
								{
									if (Show_Pic_Class.ContainsKey(999000003))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000219:
								{
									if (Show_Pic_Class.ContainsKey(1008000219) || Show_Pic_Class.ContainsKey(1008000053))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 14400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									Send_Packet_Show_Pic(array, 1, 14400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000946:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill20 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill20.FLD_PID, class_Show_Pill20);
									base.FLD_Item_Premium_Exp += 0.05;
									base.FLD_人物_追加_攻击 += 30;
									base.FLD_Item_Skill_Attack_Percentage += 0.03;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000384:
								{
									if (Show_Pic_Class.ContainsKey(1008000384) || Show_Pic_Class.ContainsKey(1008000385))
									{
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill17 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill17.FLD_PID, class_Show_Pill17);
									base.FLD_Item_Premium_HP += 500;
									Send_Packet_Show_Pic(array, 1, 7200000);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000218:
								{
									if (Show_Pic_Class.ContainsKey(1008000218))
									{
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000942))
									{
										GameMessage("Vâòt phâÒm truÌng,không thêÒ sýÒ duòng", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									base.FLD_Item_Premium_HP += 500;
									Add_ATT_Percentage(0.1);
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_Exp += 0.4;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000941:
								{
									if (Show_Pic_Class.ContainsKey(1008000941))
									{
										return;
									}
									Send_Packet_Show_Pic(array, 1, 604800000);
									Class_Show_Pill class_Show_Pill15 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill15.FLD_PID, class_Show_Pill15);
									base.FLD_Item_Premium_HP += 500;
									base.FLD_Item_Premium_Exp += 0.3;
									base.FLD_人物_追加_攻击 += 50;
									base.FLD_人物_追加_防御 += 50;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.Character_Qigong += 2;
									Add_DEF_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 604800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000942:
								{
									if (Show_Pic_Class.ContainsKey(1008000942))
									{
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000218))
									{
										GameMessage("Vâòt phâÒm truÌng,không thêÒ sýÒ duòng", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									base.FLD_Item_Premium_HP += 500;
									Add_ATT_Percentage(0.1);
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_Exp += 0.4;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000054:
								{
									if (Show_Pic_Class.ContainsKey(1008000220) || Show_Pic_Class.ContainsKey(1008000054))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 999000004:
								{
									if (Show_Pic_Class.ContainsKey(999000004))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000220:
								{
									if (Show_Pic_Class.ContainsKey(1008000220) || Show_Pic_Class.ContainsKey(1008000054))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 14400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Skill_Def_Percentage += 0.05;
									Send_Packet_Show_Pic(array, 1, 14400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000013:
								{
									if (Show_Pic_Class.ContainsKey(1000000013))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_ATT_Percentage(0.1);
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000176:
								{
									if (Show_Pic_Class.ContainsKey(1008000176))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									addFLD_装备_追加_武器_强化(2);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000177:
								{
									if (Show_Pic_Class.ContainsKey(1008000177))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									addFLD_装备_追加_防具_强化(1);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000010:
								{
									if (Show_Pic_Class.ContainsKey(1000000010))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.2;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000646:
								{
									if (Show_Pic_Class.ContainsKey(1000000646))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_DEF_Percentage(0.13);
									base.FLD_Item_Skill_Def_Percentage += 0.13;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000178:
								{
									if (Show_Pic_Class.ContainsKey(1008000178) && Show_Pic_Class.ContainsKey(1008000055))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									Add_ATT_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000179:
								{
									if (Show_Pic_Class.ContainsKey(1008000179) && Show_Pic_Class.ContainsKey(1008000055))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									Add_DEF_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000364:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000352) || Show_Pic_Class.ContainsKey(1008000354) || Show_Pic_Class.ContainsKey(1008000355) || Show_Pic_Class.ContainsKey(1008000358) || Show_Pic_Class.ContainsKey(1008000359) || Show_Pic_Class.ContainsKey(1008000364) || Show_Pic_Class.ContainsKey(1008000365) || Show_Pic_Class.ContainsKey(1008000366) || Show_Pic_Class.ContainsKey(1008000939) || Show_Pic_Class.ContainsKey(1008000349) || Show_Pic_Class.ContainsKey(1008000361) || Show_Pic_Class.ContainsKey(1008000367))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.2;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000366:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000352) || Show_Pic_Class.ContainsKey(1008000354) || Show_Pic_Class.ContainsKey(1008000355) || Show_Pic_Class.ContainsKey(1008000358) || Show_Pic_Class.ContainsKey(1008000359) || Show_Pic_Class.ContainsKey(1008000364) || Show_Pic_Class.ContainsKey(1008000365) || Show_Pic_Class.ContainsKey(1008000366) || Show_Pic_Class.ContainsKey(1008000939) || Show_Pic_Class.ContainsKey(1008000349) || Show_Pic_Class.ContainsKey(1008000361) || Show_Pic_Class.ContainsKey(1008000367))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1 ~ 140, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.8;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000367:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000352) || Show_Pic_Class.ContainsKey(1008000354) || Show_Pic_Class.ContainsKey(1008000355) || Show_Pic_Class.ContainsKey(1008000358) || Show_Pic_Class.ContainsKey(1008000359) || Show_Pic_Class.ContainsKey(1008000364) || Show_Pic_Class.ContainsKey(1008000365) || Show_Pic_Class.ContainsKey(1008000366) || Show_Pic_Class.ContainsKey(1008000939) || Show_Pic_Class.ContainsKey(1008000349) || Show_Pic_Class.ContainsKey(1008000361) || Show_Pic_Class.ContainsKey(1008000367))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1 ~ 140, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.8;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000939:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000352) || Show_Pic_Class.ContainsKey(1008000354) || Show_Pic_Class.ContainsKey(1008000355) || Show_Pic_Class.ContainsKey(1008000358) || Show_Pic_Class.ContainsKey(1008000359) || Show_Pic_Class.ContainsKey(1008000364) || Show_Pic_Class.ContainsKey(1008000365) || Show_Pic_Class.ContainsKey(1008000366) || Show_Pic_Class.ContainsKey(1008000939) || Show_Pic_Class.ContainsKey(1008000349) || Show_Pic_Class.ContainsKey(1008000361) || Show_Pic_Class.ContainsKey(1008000367))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1 ~ 140, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 1.0;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000390:
								{
									if (Show_Pic_Class.ContainsKey(1008000390) || Show_Pic_Class.ContainsKey(1008000391))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 1.0;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000391:
								{
									if (Show_Pic_Class.ContainsKey(1008000390) || Show_Pic_Class.ContainsKey(1008000391))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.5;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000392:
								{
									if (Show_Pic_Class.ContainsKey(1008000392) || Show_Pic_Class.ContainsKey(1008000393) || Show_Pic_Class.ContainsKey(1008000394))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.2;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000393:
								{
									if (Show_Pic_Class.ContainsKey(1008000392) || Show_Pic_Class.ContainsKey(1008000393) || Show_Pic_Class.ContainsKey(1008000394))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 1.0;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000394:
								{
									if (Show_Pic_Class.ContainsKey(1008000392) || Show_Pic_Class.ContainsKey(1008000393) || Show_Pic_Class.ContainsKey(1008000394))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.5;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000349:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000352) || Show_Pic_Class.ContainsKey(1008000354) || Show_Pic_Class.ContainsKey(1008000355) || Show_Pic_Class.ContainsKey(1008000358) || Show_Pic_Class.ContainsKey(1008000359) || Show_Pic_Class.ContainsKey(1008000364) || Show_Pic_Class.ContainsKey(1008000365) || Show_Pic_Class.ContainsKey(1008000366) || Show_Pic_Class.ContainsKey(1008000939) || Show_Pic_Class.ContainsKey(1008000349) || Show_Pic_Class.ContainsKey(1008000361) || Show_Pic_Class.ContainsKey(1008000367))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1 ~ 140, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 1.5;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000365:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000352) || Show_Pic_Class.ContainsKey(1008000354) || Show_Pic_Class.ContainsKey(1008000355) || Show_Pic_Class.ContainsKey(1008000358) || Show_Pic_Class.ContainsKey(1008000359) || Show_Pic_Class.ContainsKey(1008000364) || Show_Pic_Class.ContainsKey(1008000365) || Show_Pic_Class.ContainsKey(1008000366) || Show_Pic_Class.ContainsKey(1008000939) || Show_Pic_Class.ContainsKey(1008000349) || Show_Pic_Class.ContainsKey(1008000361) || Show_Pic_Class.ContainsKey(1008000367))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1 ~ 140, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.5;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000361:
								{
									if (Show_Pic_Class.ContainsKey(1008000351) || Show_Pic_Class.ContainsKey(1008000352) || Show_Pic_Class.ContainsKey(1008000354) || Show_Pic_Class.ContainsKey(1008000355) || Show_Pic_Class.ContainsKey(1008000358) || Show_Pic_Class.ContainsKey(1008000359) || Show_Pic_Class.ContainsKey(1008000364) || Show_Pic_Class.ContainsKey(1008000365) || Show_Pic_Class.ContainsKey(1008000366) || Show_Pic_Class.ContainsKey(1008000939) || Show_Pic_Class.ContainsKey(1008000349) || Show_Pic_Class.ContainsKey(1008000361) || Show_Pic_Class.ContainsKey(1008000367))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1 ~ 140, keìo daÌi 24 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.5;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000427:
								{
									if (Show_Pic_Class.ContainsKey(1008000427))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 1 || base.Player_Level >= 110)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 1~109, keìo daÌi 2 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.3;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000428:
								{
									if (Show_Pic_Class.ContainsKey(1008000428))
									{
										新吃药提示();
										return;
									}
									if (base.Player_Level < 110 || base.Player_Level >= 150)
									{
										GameMessage("Câìp ðôò coì thêÒ duÌng laÌ: 110 ~ 150, keìo daÌi 2 giõÌ", 9);
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.4;
									Add_DEF_Percentage(0.12);
									base.FLD_Item_Skill_Def_Percentage += 0.12;
									base.FLD_Item_Premium_HP += 500;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000173:
								{
									if (Show_Pic_Class.ContainsKey(1008000173) || Show_Pic_Class.ContainsKey(1007000014) || Show_Pic_Class.ContainsKey(1007000009) || Show_Pic_Class.ContainsKey(1007000018) || Show_Pic_Class.ContainsKey(1007000005) || Show_Pic_Class.ContainsKey(1007000007) || Show_Pic_Class.ContainsKey(1007000006))
									{
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill11 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill11.FLD_PID, class_Show_Pill11);
									base.FLD_Item_Premium_HP += 500;
									Send_Packet_Show_Pic(array, 1, 3600000);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000106:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_ATT_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000107:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_DEF_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000142:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 864000000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Send_Packet_Show_Pic(array, 1, 864000000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000143:
								{
									if (Show_Pic_Class.ContainsKey(1008000143) || Show_Pic_Class.ContainsKey(1008000372))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 14400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_ATT_Percentage(0.03);
									Send_Packet_Show_Pic(array, 1, 14400000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000372:
								{
									if (Show_Pic_Class.ContainsKey(1008000143) || Show_Pic_Class.ContainsKey(1008000372))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_ATT_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 999000001:
								{
									if (Show_Pic_Class.ContainsKey(999000001))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_ATT_Percentage(0.05);
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000144:
								{
									if (Show_Pic_Class.ContainsKey(1008000144) || Show_Pic_Class.ContainsKey(1008000378))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 14400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_DEF_Percentage(0.05);
									Send_Packet_Show_Pic(array, 1, 14400000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000378:
								{
									if (Show_Pic_Class.ContainsKey(1008000144) || Show_Pic_Class.ContainsKey(1008000378))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_DEF_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 999000002:
								{
									if (Show_Pic_Class.ContainsKey(999000002))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_DEF_Percentage(0.1);
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000187:
								{
									if (Show_Pic_Class.ContainsKey(1008000156))
									{
										GameMessage("无法和热血丹心同时使用");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000187))
									{
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000183))
									{
										GameMessage("Item trung lap, không thêÒ su dung: 1008000183");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000195))
									{
										GameMessage("Item trung lap, không thêÒ su dung: 1008000195");
										return;
									}
									Class_Show_Pill class_Show_Pill47 = new Class_Show_Pill(this, 864000000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill47.FLD_PID, class_Show_Pill47);
									base.FLD_Item_Premium_HP += 300;
									base.Character_Qigong++;
									Send_Packet_Show_Pic(array, 1, 864000000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									break;
								}
							case 1008000188:
								{
									if (Show_Pic_Class.ContainsKey(1008000188))
									{
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000252))
									{
										GameMessage("Item trung lap, không thêÒ su dung: 1008000252");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000245))
									{
										GameMessage("Item trung lap, không thêÒ su dung: 1008000245");
										return;
									}
									Class_Show_Pill class_Show_Pill45 = new Class_Show_Pill(this, 14400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill45.FLD_PID, class_Show_Pill45);
									Send_Packet_Show_Pic(array, 1, 14400000);
									Add_ATT_Percentage(0.15);
									Add_DEF_Percentage(0.15);
									base.FLD_Item_Premium_HP += 300;
									base.FLD_Item_Premium_MP += 300;
									base.FLD_Item_Premium_Exp += 0.1;
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新人物数据(this);
									更新广播人物数据();
									Item_Use(num, 1);
									break;
								}
							case 1008000110:
								{
									List<MonSterClss> list = new List<MonSterClss>();
									foreach (MonSterClss value20 in World.MonSter.Values)
									{
										if (value20.FLD_BOSS == 1)
										{
											list.Add(value20);
										}
									}
									int index = new Random(World.GetRandomSeed()).Next(0, list.Count);
									World.AddBossEveNpc(list[index].FLD_PID, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
									Delete_Item_Use(num, 1);
									break;
								}
							case 1008000127:
								{
									List<MonSterClss> list = new List<MonSterClss>();
									foreach (MonSterClss value21 in World.MonSter.Values)
									{
										if (value21.FLD_BOSS == 1)
										{
											list.Add(value21);
										}
									}
									int index = new Random(World.GetRandomSeed()).Next(0, list.Count);
									World.AddBossEveNpc(list[index].FLD_PID, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
									Delete_Item_Use(num, 1);
									break;
								}
							case 1008000210:
								{
									List<MonSterClss> list = new List<MonSterClss>();
									foreach (MonSterClss value22 in World.MonSter.Values)
									{
										if (value22.FLD_BOSS == 1 && value22.Level >= 80 && value22.Level <= 130)
										{
											list.Add(value22);
										}
									}
									int index = new Random(World.GetRandomSeed()).Next(0, list.Count);
									World.AddBossEveNpc(list[index].FLD_PID, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
									Delete_Item_Use(num, 1);
									break;
								}
							case 1008000128:
								{
									List<MonSterClss> list = new List<MonSterClss>();
									foreach (MonSterClss value23 in World.MonSter.Values)
									{
										if (value23.FLD_BOSS == 2 && value23.Level > 130)
										{
											list.Add(value23);
										}
									}
									int index = new Random(World.GetRandomSeed()).Next(0, list.Count);
									World.AddBossEveNpc(list[index].FLD_PID, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
									Delete_Item_Use(num, 1);
									break;
								}
							case 1008000103:
								{
									List<MonSterClss> list = new List<MonSterClss>();
									foreach (MonSterClss value24 in World.MonSter.Values)
									{
										if (value24.FLD_BOSS == 2 && value24.Level > 130)
										{
											list.Add(value24);
										}
									}
									int index = new Random(World.GetRandomSeed()).Next(0, list.Count);
									World.AddBossEveNpc(list[index].FLD_PID, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
									Delete_Item_Use(num, 1);
									break;
								}
							case 1008000117:
								{
									List<MonSterClss> list = new List<MonSterClss>();
									foreach (MonSterClss value25 in World.MonSter.Values)
									{
										if (value25.FLD_BOSS == 2 && value25.Level > 130)
										{
											list.Add(value25);
										}
									}
									int index = new Random(World.GetRandomSeed()).Next(0, list.Count);
									World.AddBossEveNpc(list[index].FLD_PID, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Map);
									Delete_Item_Use(num, 1);
									break;
								}
							case 1008000156:
								{
									if (Show_Pic_Class.ContainsKey(1008000156))
									{
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000187))
									{
										GameMessage("Item trung lap, không thêÒ su dung: 1008000187");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000183))
									{
										GameMessage("Item trung lap, không thêÒ su dung: 1008000183");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000195))
									{
										GameMessage("Item trung lap, không thêÒ su dung: 1008000195");
										return;
									}
									Class_Show_Pill class_Show_Pill43 = new Class_Show_Pill(this, 864000000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill43.FLD_PID, class_Show_Pill43);
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 864000000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									break;
								}
							case 1008000034:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000035:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num16 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num16);
									物品使用千年雪参(num, num16);
									Item_Effects(1000000104L);
									break;
								}
							case 1008000003:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									if (num17 < 200)
									{
										num17 = 200;
									}
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000004:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									if (num17 < 200)
									{
										num17 = 200;
									}
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000174:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301)
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									if (num17 < 200)
									{
										num17 = 200;
									}
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000175:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num16 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num16);
									if (num16 < 200)
									{
										num16 = 200;
									}
									物品使用千年雪参(num, num16);
									Item_Effects(1000000104L);
									break;
								}
							case 1008000005:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num16 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num16);
									if (num16 < 200)
									{
										num16 = 200;
									}
									物品使用千年雪参(num, num16);
									Item_Effects(1000000104L);
									break;
								}
							case 1008000006:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num16 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num16);
									if (num16 < 200)
									{
										num16 = 200;
									}
									物品使用千年雪参(num, num16);
									Item_Effects(1000000104L);
									break;
								}
							case 1008000007:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									if (num17 < 200)
									{
										num17 = 200;
									}
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000008:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num16 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num16);
									if (num16 < 200)
									{
										num16 = 200;
									}
									物品使用千年雪参(num, num16);
									Item_Effects(1000000104L);
									break;
								}
							case 1008000033:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num17 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num17);
									物品使用千年雪参(num, num17);
									Item_Effects(1000000101L);
									break;
								}
							case 1008000077:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num19 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num19);
									物品使用无双千年雪参(num, num19);
									Item_Effects(1000000101L);
									if (Show_Pic_Class.ContainsKey(1000000775))
									{
										Show_Pic_Class[1000000775].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1000000775), 1, 10000);
									Class_Show_Pill class_Show_Pill27 = new Class_Show_Pill(this, 10000.0, 1000000775, 0);
									Show_Pic_Class.Add(class_Show_Pill27.FLD_PID, class_Show_Pill27);
									base.FLD_人物_追加_防御 += 20;
									UpdatePowersAndStatus();
									break;
								}
							case 1008000078:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num18 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num18);
									物品使用无双千年雪参(num, num18);
									Item_Effects(1000000104L);
									if (Show_Pic_Class.ContainsKey(1000000776))
									{
										Show_Pic_Class[1000000776].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1000000776), 1, 10000);
									Class_Show_Pill class_Show_Pill25 = new Class_Show_Pill(this, 10000.0, 1000000776, 0);
									Show_Pic_Class.Add(class_Show_Pill25.FLD_PID, class_Show_Pill25);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									UpdatePowersAndStatus();
									break;
								}
							case 1008000079:
								{
									if (base.Player_FLD_HP >= base.Player_HP_Max || base.Player_FLD_Map == 7301 || 异常状态.ContainsKey(24))
									{
										return;
									}
									int num19 = (int)(base.Player_HP_Max - base.Player_FLD_HP);
									Recovery_HP(num19);
									物品使用无双千年雪参(num, num19);
									Item_Effects(1000000101L);
									if (Show_Pic_Class.ContainsKey(1000000775))
									{
										Show_Pic_Class[1000000775].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1000000775), 1, 10000);
									Class_Show_Pill class_Show_Pill27 = new Class_Show_Pill(this, 10000.0, 1000000775, 0);
									Show_Pic_Class.Add(class_Show_Pill27.FLD_PID, class_Show_Pill27);
									base.FLD_人物_追加_防御 += 20;
									UpdatePowersAndStatus();
									break;
								}
							case 1008000080:
								{
									if (base.Player_FLD_MP >= base.Player_MP_Max)
									{
										return;
									}
									int num18 = base.Player_MP_Max - base.Player_FLD_MP;
									Recovery_MP(num18);
									物品使用无双千年雪参(num, num18);
									Item_Effects(1000000104L);
									if (Show_Pic_Class.ContainsKey(1000000776))
									{
										Show_Pic_Class[1000000776].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1000000776), 1, 10000);
									Class_Show_Pill class_Show_Pill25 = new Class_Show_Pill(this, 10000.0, 1000000776, 0);
									Show_Pic_Class.Add(class_Show_Pill25.FLD_PID, class_Show_Pill25);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									UpdatePowersAndStatus();
									break;
								}
							case 1008000055:
								{
									if (Show_Pic_Class.ContainsKey(1007000005) || Show_Pic_Class.ContainsKey(1008000016) || Show_Pic_Class.ContainsKey(1008000017) || Show_Pic_Class.ContainsKey(1008000018) || Show_Pic_Class.ContainsKey(1008000019) || Show_Pic_Class.ContainsKey(1000000011) || Show_Pic_Class.ContainsKey(1000000012) || Show_Pic_Class.ContainsKey(1008000046) || Show_Pic_Class.ContainsKey(1008000047) || Show_Pic_Class.ContainsKey(1008000104) || Show_Pic_Class.ContainsKey(1008000105))
									{
										GameMessage("Không thêÒ sýÒ duòng vâòt phâÒm truÌng lãòp");
										return;
									}
									int num9 = 3600000;
									Item_Use(num, 1);
									if (Show_Pic_Class.ContainsKey(1007000005))
									{
										Show_Pic_Class[1007000005].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1007000005), 1, num9);
									Class_Show_Pill class_Show_Pill14 = new Class_Show_Pill(this, num9, 1007000005, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									base.FLD_Item_Premium_HP += 300;
									if (Show_Pic_Class.ContainsKey(1008000016))
									{
										Show_Pic_Class[1008000016].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000016), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000016, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									Add_ATT_Percentage(0.1);
									if (Show_Pic_Class.ContainsKey(1008000017))
									{
										Show_Pic_Class[1008000017].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000017), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000017, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									Add_DEF_Percentage(0.1);
									if (Show_Pic_Class.ContainsKey(1008000018))
									{
										Show_Pic_Class[1008000018].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000018), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000018, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									addFLD_装备_追加_武器_强化(2);
									if (Show_Pic_Class.ContainsKey(1008000019))
									{
										Show_Pic_Class[1008000019].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000019), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000019, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									addFLD_装备_追加_防具_强化(1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1000000011:
							case 1008000018:
								if (Show_Pic_Class.ContainsKey(1000000011) || Show_Pic_Class.ContainsKey(1008000018) || Show_Pic_Class.ContainsKey(1008000046) || Show_Pic_Class.ContainsKey(1008000104) || Show_Pic_Class.ContainsKey(1008000185))
								{
									GameMessage("Item truÌng lãòp, không thêÒ sýÒ duòng: " + num2);
									return;
								}
								Send_Packet_Show_Pic(BitConverter.GetBytes(num2), 1, 3600000);
								Show_Pic_Class.Add(num2, new Class_Show_Pill(this, 3600000.0, num2, 1));
								addFLD_装备_追加_武器_强化(2);
								Delete_Item_Use(num, 1);
								Update_Character_Wear_Item();
								UpdatePowersAndStatus();
								break;
							case 1000000012:
							case 1008000019:
								if (Show_Pic_Class.ContainsKey(1000000012) || Show_Pic_Class.ContainsKey(1008000019) || Show_Pic_Class.ContainsKey(1008000047) || Show_Pic_Class.ContainsKey(1008000105) || Show_Pic_Class.ContainsKey(1008000185))
								{
									GameMessage("Item truÌng lãòp, không thêÒ sýÒ duòng: " + num2);
									return;
								}
								Send_Packet_Show_Pic(BitConverter.GetBytes(num2), 1, 3600000);
								Show_Pic_Class.Add(num2, new Class_Show_Pill(this, 3600000.0, num2, 1));
								addFLD_装备_追加_防具_强化(1);
								Delete_Item_Use(num, 1);
								Update_Character_Wear_Item();
								UpdatePowersAndStatus();
								break;
							case 1008000065:
								{
									if (Pet == null || Pet.FLD_HP >= Pet.FLD_HP_MAX)
									{
										return;
									}
									int num11 = Pet.FLD_HP_MAX - Pet.FLD_HP;
									Pet.FLD_HP += num11;
									method_1922(this);
									method_132(num, num11);
									Item_Effects(1000000179L);
									if (Pet != null)
									{
										Pet.method_5(this);
										Pet.保存数据();
										更新灵兽武功和状态();
										method_1911(this);
									}
									break;
								}
							case 1008000066:
								{
									if (Pet == null || Pet.FLD_MP >= Pet.FLD_MP_MAX)
									{
										return;
									}
									int num10 = Pet.FLD_MP_MAX - Pet.FLD_MP;
									Pet.FLD_MP += num10;
									method_1922(this);
									method_132(num, num10);
									Item_Effects(1000000182L);
									if (Pet != null)
									{
										Pet.method_5(this);
										Pet.保存数据();
										更新灵兽武功和状态();
										method_1911(this);
									}
									break;
								}
							case 1008000100:
								{
									int num9 = 3600000;
									Item_Use(num, 1);
									if (Show_Pic_Class.ContainsKey(1007000005))
									{
										Show_Pic_Class[1007000005].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1007000005), 1, num9);
									Class_Show_Pill class_Show_Pill14 = new Class_Show_Pill(this, num9, 1007000005, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									base.FLD_Item_Premium_HP += 300;
									if (Show_Pic_Class.ContainsKey(1008000016))
									{
										Show_Pic_Class[1008000016].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000016), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000016, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									Add_ATT_Percentage(0.1);
									if (Show_Pic_Class.ContainsKey(1008000017))
									{
										Show_Pic_Class[1008000017].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000017), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000017, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									Add_DEF_Percentage(0.1);
									if (Show_Pic_Class.ContainsKey(1008000018))
									{
										Show_Pic_Class[1008000018].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000018), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000018, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									addFLD_装备_追加_武器_强化(2);
									if (Show_Pic_Class.ContainsKey(1008000019))
									{
										Show_Pic_Class[1008000019].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000019), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000019, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									addFLD_装备_追加_防具_强化(1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000082:
								{
									int num9 = 3600000;
									Item_Use(num, 1);
									if (Show_Pic_Class.ContainsKey(1007000005))
									{
										Show_Pic_Class[1007000005].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1007000005), 1, num9);
									Class_Show_Pill class_Show_Pill14 = new Class_Show_Pill(this, num9, 1007000005, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									base.FLD_Item_Premium_HP += 300;
									if (Show_Pic_Class.ContainsKey(1008000016))
									{
										Show_Pic_Class[1008000016].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000016), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000016, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									Add_ATT_Percentage(0.1);
									if (Show_Pic_Class.ContainsKey(1008000017))
									{
										Show_Pic_Class[1008000017].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000017), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000017, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									Add_DEF_Percentage(0.1);
									if (Show_Pic_Class.ContainsKey(1008000018))
									{
										Show_Pic_Class[1008000018].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000018), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000018, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									addFLD_装备_追加_武器_强化(2);
									if (Show_Pic_Class.ContainsKey(1008000019))
									{
										Show_Pic_Class[1008000019].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000019), 1, num9);
									class_Show_Pill14 = new Class_Show_Pill(this, num9, 1008000019, 1);
									Show_Pic_Class.Add(class_Show_Pill14.FLD_PID, class_Show_Pill14);
									addFLD_装备_追加_防具_强化(1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1000000415:
								if (!(base.FLD_Couple_Name != ""))
								{
									物品使用戒指(num, 1, 7);
								}
								else
								{
									Players players2 = World.FindPlayerbyName(base.FLD_Couple_Name);
									if (players2 == null)
									{
										物品使用戒指(num, 1, 3);
									}
									else if (players2.Player_FLD_Map == 801 || base.Player_FLD_Map == 801)
									{
										GameMessage("Baòn hoãòc ðôìi phýõng ðang õÒ trong Thêì Lýòc Chiêìn");
									}
									else
									{
										物品使用戒指(num, 1, 1);
										time_Tele_Couple = DateTime.Now;
										Move(players2.Player_FLD_X, players2.Player_FLD_Y, players2.Player_FLD_Z, players2.Player_FLD_Map, bRandom: false);
										人物发光();
									}
								}
								break;
							case 1000000416:
								if (!(base.FLD_Couple_Name != ""))
								{
									物品使用戒指(num, 1, 7);
								}
								else
								{
									Players players = World.FindPlayerbyName(base.FLD_Couple_Name);
									if (players == null)
									{
										物品使用戒指(num, 1, 3);
									}
									else if (players.Player_FLD_Map == 801 || base.Player_FLD_Map == 801)
									{
										GameMessage("Baòn hoãòc ðôìi phýõng ðang õÒ trong Thêì Lýòc Chiêìn");
									}
									else
									{
										int num7 = 600 - (10 - base.FLD_Couple_Level) * 60;
										int num8 = (int)DateTime.Now.Subtract(time_Tele_Couple).TotalSeconds;
										if (num8 < num7)
										{
											GameMessage("Baòn phaÒi chõÌ " + (num7 - num8) + " giây nýÞa!", 7);
										}
										else
										{
											物品使用戒指(num, 1, 1);
											time_Tele_Couple = DateTime.Now;
											Move(players.Player_FLD_X, players.Player_FLD_Y, players.Player_FLD_Z, players.Player_FLD_Map, bRandom: false);
											人物发光();
										}
									}
								}
								break;
							case 1000001032:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001033:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001034:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001035:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001036:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001037:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001038:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001039:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001040:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001041:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001042:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001043:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001044:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000001045:
								MartialArts.学习升天武功书4(this, 物品, num);
								break;
							case 1000000464:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000465:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000466:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000467:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000468:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000469:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000496:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000499:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000470:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000471:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000472:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000473:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000474:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000475:
								MartialArts.学习升天武功书3(this, 物品, num);
								break;
							case 1000000564:
								if (base.Player_Job == 8)
								{
									MartialArts.Learn_Book_Skill(this, 0, 17, num);
								}
								break;
							case 1000000565:
								if (base.Player_Job == 8)
								{
									MartialArts.Learn_Book_Skill(this, 0, 21, num);
								}
								break;
							case 1000000566:
								if (base.Player_Job == 8)
								{
									MartialArts.Learn_Book_Skill(this, 0, 21, num);
								}
								break;
							case 1000000567:
								MartialArts.学习升天武功书5(this, 物品, num);
								break;
							case 1000000568:
								MartialArts.学习升天武功书6(this, 物品, num);
								break;
							case 1000000569:
								MartialArts.学习升天武功书7(this, 物品, num);
								break;
							case 1000000570:
								MartialArts.Learn_Book_Skill(this, 0, 22, num);
								MartialArts.Learn_Book_Skill(this, 0, 23, num);
								MartialArts.Learn_Book_Skill(this, 0, 24, num);
								MartialArts.Learn_Book_Skill(this, 0, 25, num);
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								break;
							case 1000001010:
								MartialArts.Learn_Book_Skill(this, 0, 23, num);
								MartialArts.Learn_Book_Skill(this, 0, 24, num);
								MartialArts.Learn_Book_Skill(this, 0, 26, num);
								MartialArts.Learn_Book_Skill(this, 0, 27, num);
								MartialArts.Learn_Book_Skill(this, 0, 28, num);
								MartialArts.Learn_Book_Skill(this, 3, 0, num);
								MartialArts.Learn_Book_Skill(this, 3, 1, num);
								MartialArts.Learn_Book_Skill(this, 3, 2, num);
								MartialArts.Learn_Book_Skill(this, 3, 3, num);
								MartialArts.Learn_Book_Skill(this, 3, 4, num);
								MartialArts.Learn_Book_Skill(this, 3, 5, num);
								MartialArts.Learn_Book_Skill(this, 3, 6, num);
								MartialArts.Learn_Book_Skill(this, 3, 7, num);
								MartialArts.Learn_Book_Skill(this, 3, 8, num);
								MartialArts.Learn_Book_Skill(this, 3, 9, num);
								break;
							case 1008000388:
								{
									if (Show_Pic_Class.ContainsKey(1008000388) || Show_Pic_Class.ContainsKey(1008000389))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill10 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill10.FLD_PID, class_Show_Pill10);
									Send_Packet_Show_Pic(array, 1, 1800000);
									base.FLD_TLC_Premium_Exp = 3.0;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000389:
								{
									if (Show_Pic_Class.ContainsKey(1008000388) || Show_Pic_Class.ContainsKey(1008000389))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill10 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill10.FLD_PID, class_Show_Pill10);
									Send_Packet_Show_Pic(array, 1, 1800000);
									base.FLD_TLC_Premium_Exp = 1.5;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 999000094:
								{
									if (Show_Pic_Class.ContainsKey(999000094))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 21600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Premium_Exp += 0.2;
									Send_Packet_Show_Pic(array, 1, 21600000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 999000095:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 21600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
									Add_ATT_Percentage(0.15);
									base.FLD_Item_Skill_Attack_Percentage += 0.15;
									Send_Packet_Show_Pic(array, 1, 21600000);
									Delete_Item_Use(num, 1);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									break;
								}
							case 1008000323:
								{
									if (Show_Pic_Class.ContainsKey(1008000239) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000363) || Show_Pic_Class.ContainsKey(1008000362))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill10 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill10.FLD_PID, class_Show_Pill10);
									base.FLD_Item_Premium_Exp += 1.0;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000324:
								{
									if (Show_Pic_Class.ContainsKey(1008000239) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000363) || Show_Pic_Class.ContainsKey(1008000362))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill8 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill8.FLD_PID, class_Show_Pill8);
									base.FLD_Item_Premium_Exp += 1.0;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000325:
								{
									if (妖花青草)
									{
										return;
									}
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
									base.FLD_Item_Premium_Exp += 0.1;
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
									break;
								}
							case 1008000326:
								if (!妖花青草)
								{
									妖花青草 = true;
									Class_Show_Pill class_Show_Pill6 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill6.FLD_PID, class_Show_Pill6);
									base.FLD_人物_追加_攻击 += 40;
									base.FLD_人物_追加_防御 += 40;
									base.FLD_Item_Skill_Attack_Percentage += 0.1;
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新广播人物数据();
									更新人物数据(this);
									Update_Equipment_Effectiveness();
								}
								return;
							case 1008001815:
								{
									if (Show_Pic_Class.ContainsKey(1008001815))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									base.FLD_Item_Skill_Attack_Percentage += 0.3;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									base.FLD_人物_追加_攻击 += 80;
									base.FLD_人物_追加_防御 += 80;
									base.FLD_Item_Premium_HP += 1000;
									base.FLD_Item_Premium_Exp += 0.5;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000362:
								{
									if (Show_Pic_Class.ContainsKey(1008000239) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000363) || Show_Pic_Class.ContainsKey(1008000362))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill2 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill2.FLD_PID, class_Show_Pill2);
									base.FLD_Item_Premium_Exp += 1.5;
									Send_Packet_Show_Pic(array, 1, 7200000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000363:
								{
									if (Show_Pic_Class.ContainsKey(1008000239) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000363) || Show_Pic_Class.ContainsKey(1008000362))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill46 = new Class_Show_Pill(this, 86400000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill46.FLD_PID, class_Show_Pill46);
									base.FLD_Item_Premium_Exp += 1.5;
									Send_Packet_Show_Pic(array, 1, 86400000);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000169:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										新吃药提示();
										return;
									}
									Class_Show_Pill class_Show_Pill13 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill13.FLD_PID, class_Show_Pill13);
									base.FLD_Item_Premium_HP += 500;
									Add_ATT_Percentage(0.11);
									Add_DEF_Percentage(0.13);
									base.FLD_Item_Skill_Attack_Percentage += 0.13;
									base.FLD_Item_Skill_Def_Percentage += 0.11;
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									UpdatePowersAndStatus();
									break;
								}
							case 1008000194:
								if (!追加状态New列表.ContainsKey(1))
								{
									Add_Pill(1, 7200000, 15, 2);
								}
								if (!追加状态New列表.ContainsKey(2))
								{
									Add_Pill(2, 7200000, 15, 2);
								}
								if (!追加状态New列表.ContainsKey(3))
								{
									Add_Pill(3, 7200000, 1000, 1);
								}
								if (!追加状态New列表.ContainsKey(9))
								{
									Add_Pill(9, 7200000, 40, 2);
								}
								if (!追加状态New列表.ContainsKey(7))
								{
									Add_Pill(7, 7200000, 10, 2);
								}
								if (!追加状态New列表.ContainsKey(8))
								{
									Add_Pill(8, 7200000, 10, 2);
								}
								Update_Character_Wear_Item();
								UpdatePowersAndStatus();
								Delete_Item_Use(num, 1);
								新吃药提示();
								break;
							case 1008000195:
								{
									if (Show_Pic_Class.ContainsKey(1008000156))
									{
										GameMessage("Item truÌng lãòp, không thêÒ sýÒ duòng ");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000187))
									{
										GameMessage("Item truÌng lãòp, không thêÒ sýÒ duòng");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000183))
									{
										GameMessage("Item truÌng lãòp, không thêÒ sýÒ duòng");
										return;
									}
									if (Show_Pic_Class.ContainsKey(1008000195))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill42 = new Class_Show_Pill(this, 604800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill42.FLD_PID, class_Show_Pill42);
									base.Character_Qigong += 2;
									Add_DEF_Percentage(0.1);
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 604800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000163:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.FLD_Item_Premium_HP += 700;
									Add_DEF_Percentage(0.1);
									Add_ATT_Percentage(0.1);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									addFLD_装备_追加_防具_强化(1);
									addFLD_装备_追加_武器_强化(2);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1000000137:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 1200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.FLD_人物_追加_攻击 += 10;
									base.FLD_人物_追加_防御 += 10;
									Send_Packet_Show_Pic(array, 1, 1200000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000197:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.FLD_Item_Premium_HP += 700;
									Add_DEF_Percentage(0.1);
									Add_ATT_Percentage(0.1);
									base.FLD_Item_Skill_Attack_Percentage += 0.05;
									base.FLD_Item_Skill_Def_Percentage += 0.1;
									addFLD_装备_追加_防具_强化(1);
									addFLD_装备_追加_武器_强化(2);
									Send_Packet_Show_Pic(array, 1, 3600000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000203:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.Character_Qigong++;
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000204:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.FLD_Item_Premium_HP += 500;
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000205:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.FLD_Item_Premium_MP += 500;
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000206:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 30000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									Send_Packet_Show_Pic(array, 1, 30000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000207:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									Add_ATT_Percentage(0.05);
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000208:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									Add_DEF_Percentage(0.05);
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000209:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.FLD_追加百分比_回避 += 0.05;
									Send_Packet_Show_Pic(array, 1, 1800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1000000030:
							case 1000000866:
								{
									if (Show_Pic_Class.ContainsKey(1000000866) || Show_Pic_Class.ContainsKey(1000000030))
									{
										return;
									}
									Class_Show_Pill class_Show_Pill41 = new Class_Show_Pill(this, 10800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill41.FLD_PID, class_Show_Pill41);
									base.FLD_Item_Premium_Fight_Exp += 1.0;
									Send_Packet_Show_Pic(array, 1, 10800000);
									Delete_Item_Use(num, 1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									break;
								}
							case 1008000162:
								{
									if (Show_Pic_Class.ContainsKey(1007000005) || Show_Pic_Class.ContainsKey(1008000016) || Show_Pic_Class.ContainsKey(1008000017) || Show_Pic_Class.ContainsKey(1008000018) || Show_Pic_Class.ContainsKey(1008000019) || Show_Pic_Class.ContainsKey(1000000866) || Show_Pic_Class.ContainsKey(1008000095) || Show_Pic_Class.ContainsKey(1008000096) || Show_Pic_Class.ContainsKey(1008000097) || Show_Pic_Class.ContainsKey(1008000321) || Show_Pic_Class.ContainsKey(1008000322) || Show_Pic_Class.ContainsKey(1008000323) || Show_Pic_Class.ContainsKey(1008000324) || Show_Pic_Class.ContainsKey(1008000362) || Show_Pic_Class.ContainsKey(1008000363))
									{
										return;
									}
									int num9 = 3600000;
									Delete_Item_Use(num, 1);
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000097), 1, num9);
									Class_Show_Pill class_Show_Pill32 = new Class_Show_Pill(this, num9, 1008000097, 1);
									Show_Pic_Class.Add(class_Show_Pill32.FLD_PID, class_Show_Pill32);
									base.FLD_Item_Premium_Exp += 0.4;
									Send_Packet_Show_Pic(BitConverter.GetBytes(1000000866), 1, num9 * 3);
									Class_Show_Pill class_Show_Pill33 = new Class_Show_Pill(this, num9 * 3, 1000000866, 1);
									Show_Pic_Class.Add(class_Show_Pill33.FLD_PID, class_Show_Pill33);
									base.FLD_Item_Premium_Fight_Exp += 1.0;
									Send_Packet_Show_Pic(BitConverter.GetBytes(1007000005), 1, num9);
									Class_Show_Pill class_Show_Pill34 = new Class_Show_Pill(this, num9, 1007000005, 1);
									Show_Pic_Class.Add(class_Show_Pill34.FLD_PID, class_Show_Pill34);
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000016), 1, num9);
									Class_Show_Pill class_Show_Pill35 = new Class_Show_Pill(this, num9, 1008000016, 1);
									Show_Pic_Class.Add(class_Show_Pill35.FLD_PID, class_Show_Pill35);
									Add_ATT_Percentage(0.1);
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000017), 1, num9);
									Class_Show_Pill class_Show_Pill36 = new Class_Show_Pill(this, num9, 1008000017, 1);
									Show_Pic_Class.Add(class_Show_Pill36.FLD_PID, class_Show_Pill36);
									Add_DEF_Percentage(0.1);
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000018), 1, num9);
									Class_Show_Pill class_Show_Pill37 = new Class_Show_Pill(this, num9, 1008000018, 1);
									Show_Pic_Class.Add(class_Show_Pill37.FLD_PID, class_Show_Pill37);
									addFLD_装备_追加_武器_强化(2);
									Send_Packet_Show_Pic(BitConverter.GetBytes(1008000019), 1, num9);
									Class_Show_Pill class_Show_Pill38 = new Class_Show_Pill(this, num9, 1008000019, 1);
									Show_Pic_Class.Add(class_Show_Pill38.FLD_PID, class_Show_Pill38);
									addFLD_装备_追加_防具_强化(1);
									更新人物数据(this);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
									更新广播人物数据();
									新吃药提示();
									break;
								}
							case 1008000212:
								if (!追加状态New列表.ContainsKey(1))
								{
									Add_Pill(1, 7200000, 20, 2);
								}
								if (!追加状态New列表.ContainsKey(7))
								{
									Add_Pill(7, 7200000, 15, 2);
								}
								if (!追加状态New列表.ContainsKey(5))
								{
									Add_Pill(5, 7200000, 20, 1);
								}
								if (!追加状态New列表.ContainsKey(6))
								{
									Add_Pill(6, 7200000, 20, 1);
								}
								if (!追加状态New列表.ContainsKey(14))
								{
									Add_Pill(14, 7200000, 2, 1);
								}
								Update_Character_Wear_Item();
								UpdatePowersAndStatus();
								Delete_Item_Use(num, 1);
								新吃药提示();
								break;
							case 1008000213:
								if (!追加状态New列表.ContainsKey(2))
								{
									Add_Pill(2, 7200000, 20, 2);
								}
								if (!追加状态New列表.ContainsKey(3))
								{
									Add_Pill(3, 7200000, 500, 1);
								}
								if (!追加状态New列表.ContainsKey(5))
								{
									Add_Pill(5, 7200000, 20, 1);
								}
								if (!追加状态New列表.ContainsKey(6))
								{
									Add_Pill(6, 7200000, 20, 1);
								}
								if (!追加状态New列表.ContainsKey(7))
								{
									Add_Pill(7, 7200000, 10, 2);
								}
								if (!追加状态New列表.ContainsKey(9))
								{
									Add_Pill(9, 7200000, 20, 2);
								}
								Update_Character_Wear_Item();
								UpdatePowersAndStatus();
								Delete_Item_Use(num, 1);
								新吃药提示();
								break;
							case 1007000014:
								{
									if (Show_Pic_Class.ContainsKey(1007000014) || Show_Pic_Class.ContainsKey(1007000007))
									{
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill31 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill31.FLD_PID, class_Show_Pill31);
									base.FLD_Item_Premium_HP += 700;
									Send_Packet_Show_Pic(array, 1, 3600000);
									UpdatePowersAndStatus();
									break;
								}
							case 1007000009:
								{
									if (Show_Pic_Class.ContainsKey(1007000009) || Show_Pic_Class.ContainsKey(1007000018) || Show_Pic_Class.ContainsKey(1007000005))
									{
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill30 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill30.FLD_PID, class_Show_Pill30);
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 3600000);
									UpdatePowersAndStatus();
									break;
								}
							case 1007000018:
								{
									if (Show_Pic_Class.ContainsKey(1007000009) || Show_Pic_Class.ContainsKey(1007000018) || Show_Pic_Class.ContainsKey(1007000006))
									{
										新吃药提示();
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill29 = new Class_Show_Pill(this, 7200000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill29.FLD_PID, class_Show_Pill29);
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 3600000);
									UpdatePowersAndStatus();
									break;
								}
							case 1007000005:
								{
									if (Show_Pic_Class.ContainsKey(1007000009) || Show_Pic_Class.ContainsKey(1007000018) || Show_Pic_Class.ContainsKey(1007000005) || Show_Pic_Class.ContainsKey(1007000006))
									{
										新吃药提示();
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill28 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill28.FLD_PID, class_Show_Pill28);
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 3600000);
									UpdatePowersAndStatus();
									break;
								}
							case 1007000006:
								{
									if (Show_Pic_Class.ContainsKey(1008000173) || Show_Pic_Class.ContainsKey(1007000006) || Show_Pic_Class.ContainsKey(1007000018))
									{
										新吃药提示();
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill26 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill26.FLD_PID, class_Show_Pill26);
									base.FLD_Item_Premium_HP += 500;
									Send_Packet_Show_Pic(array, 1, 3600000);
									UpdatePowersAndStatus();
									break;
								}
							case 1007000007:
								{
									if (Show_Pic_Class.ContainsKey(1007000014) || Show_Pic_Class.ContainsKey(1007000007))
									{
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill12 = new Class_Show_Pill(this, 3600000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill12.FLD_PID, class_Show_Pill12);
									base.FLD_Item_Premium_HP += 700;
									Send_Packet_Show_Pic(array, 1, 3600000);
									UpdatePowersAndStatus();
									break;
								}
							case 999000005:
								{
									if (Show_Pic_Class.ContainsKey(999000005))
									{
										return;
									}
									Delete_Item_Use(num, 1);
									Class_Show_Pill class_Show_Pill12 = new Class_Show_Pill(this, 1800000.0, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill12.FLD_PID, class_Show_Pill12);
									base.FLD_Item_Premium_HP += 300;
									Send_Packet_Show_Pic(array, 1, 1800000);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000835:
								{
									if (base.Player_Sex != 2)
									{
										GameMessage("ChiÒ duÌng cho nýÞ!");
										return;
									}
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 600100;
									Show_Pic_Class.Add(num2, new Class_Show_Pill(this, num6, num2, 1));
									Send_Packet_Show_Pic(array, 1, num6);
									base.FLD_追加百分比_MP上限 += 0.05;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000836:
								{
									if (base.Player_Sex != 2)
									{
										GameMessage("ChiÒ duÌng cho nýÞ!");
										return;
									}
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 600100;
									Show_Pic_Class.Add(num2, new Class_Show_Pill(this, num6, num2, 1));
									Send_Packet_Show_Pic(array, 1, num6);
									base.FLD_追加百分比_HP上限 += 0.05;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000860:
								{
									if (base.Player_Sex != 1)
									{
										GameMessage("ChiÒ duÌng cho nam!");
										return;
									}
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 600100;
									Show_Pic_Class.Add(num2, new Class_Show_Pill(this, num6, num2, 1));
									Send_Packet_Show_Pic(array, 1, num6);
									base.FLD_追加百分比_MP上限 += 0.05;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000861:
								{
									if (base.Player_Sex != 1)
									{
										GameMessage("ChiÒ duÌng cho nam!");
										return;
									}
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 600100;
									Show_Pic_Class.Add(num2, new Class_Show_Pill(this, num6, num2, 1));
									Send_Packet_Show_Pic(array, 1, num6);
									base.FLD_追加百分比_HP上限 += 0.05;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000830:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 1200100;
									Show_Pic_Class.Add(num2, new Class_Show_Pill(this, num6, num2, 1));
									Send_Packet_Show_Pic(array, 1, num6);
									base.FLD_Item_Premium_HP += 100;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000831:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 1800100;
									Show_Pic_Class.Add(num2, new Class_Show_Pill(this, num6, num2, 1));
									Send_Packet_Show_Pic(array, 1, num6);
									base.FLD_Item_Premium_HP += 50;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000832:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 600100;
									Show_Pic_Class.Add(num2, new Class_Show_Pill(this, num6, num2, 1));
									Send_Packet_Show_Pic(array, 1, num6);
									base.FLD_Item_Premium_HP += 100;
									base.FLD_Item_Premium_MP += 100;
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000844:
								{
									if (num3 == base.UserSessionID || num3 < 300 || num3 >= 10000 || !World.AllConnectedChars.TryGetValue(num3, out value10))
									{
										return;
									}
									if (value10.Show_Pic_Class.ContainsKey(num2) || value10.异常状态.ContainsKey(16))
									{
										GameMessage("Ðôìi phýõng vâÞn ðang coÌn hiêòu ýìng!");
										return;
									}
									int num6 = 15100;
									GameMessage("Ðôìi phýõng môÞi 3 giây giaÒm 5% nôòi công trong " + num6 / 1000 + " giây!");
									异常状态类 异常状态类 = new 异常状态类(value10, num6, 16, (int)((double)value10.Player_MP_Max * 0.05));
									异常状态类.DecreaseMP_3s((double)value10.Player_MP_Max * 0.05);
									value10.异常状态.Add(16, 异常状态类);
									value10.Item_Effects(num2);
									value10.UpdatePowersAndStatus();
									Delete_Item_Use(num, 1);
									break;
								}
							case 1000000851:
								if (num3 == base.UserSessionID)
								{
									return;
								}
								if (num3 < 10000)
								{
									if (!World.AllConnectedChars.TryGetValue(num3, out value10))
									{
										return;
									}
									if (value10.Show_Pic_Class.ContainsKey(num2) || value10.异常状态.ContainsKey(18))
									{
										GameMessage("Ðôìi phýõng vâÞn ðang coÌn hiêòu ýìng!");
										return;
									}
									int num6 = 30100;
									GameMessage("Ðôìi phýõng môÞi 3 giây giaÒm 10% thêÒ lýòc trong " + num6 / 1000 + " giây!");
									异常状态类 异常状态类 = new 异常状态类(value10, num6, 18, (int)((double)value10.Player_HP_Max * 0.1 / 3.0));
									异常状态类.DecreaseHP_3s((double)value10.Player_HP_Max * 0.1);
									value10.异常状态.Add(18, 异常状态类);
									value10.Item_Effects(num2);
									value10.UpdatePowersAndStatus();
									Delete_Item_Use(num, 1);
								}
								else
								{
									if (!MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(num3, out NpcClass value12))
									{
										return;
									}
									if (value12.异常状态.ContainsKey(18))
									{
										GameMessage("Quái vật vâÞn ðang coÌn hiêòu ýìng!");
										return;
									}
									int num6 = 30100;
									GameMessage("Quái vật 3 giây giaÒm 10% thêÒ lýòc trong " + num6 / 1000 + " giây!");
									异常状态类 异常状态类 = new 异常状态类(value12, base.UserSessionID, num6, 18, (int)((double)value12.MaxRxjhHp * 0.1 / 3.0));
									异常状态类.DecreaseHP_3s((int)((double)value12.MaxRxjhHp * 0.1));
									value12.异常状态.Add(18, 异常状态类);
									Delete_Item_Use(num, 1);
								}
								break;
							case 1000000846:
								{
									if (num3 == base.UserSessionID || num3 < 300 || num3 >= 10000 || !World.AllConnectedChars.TryGetValue(num3, out value10))
									{
										return;
									}
									if (value10.Show_Pic_Class.ContainsKey(num2) || value10.异常状态.ContainsKey(18))
									{
										GameMessage("Ðôìi phýõng vâÞn ðang coÌn hiêòu ýìng!");
										return;
									}
									int num6 = 15100;
									GameMessage("Ðôìi phýõng môÞi 3 giây giaÒm 100 sinh lýòc trong " + num6 / 1000 + " giây!");
									异常状态类 异常状态类 = new 异常状态类(value10, num6, 18, 100);
									异常状态类.DecreaseHP_3s(100.0);
									value10.异常状态.Add(18, 异常状态类);
									value10.Item_Effects(num2);
									value10.UpdatePowersAndStatus();
									Delete_Item_Use(num, 1);
									break;
								}
							case 1000000848:
								{
									if (num3 == base.UserSessionID || num3 < 300 || num3 >= 10000 || !World.AllConnectedChars.TryGetValue(num3, out value10))
									{
										return;
									}
									if (value10.Show_Pic_Class.ContainsKey(num2) || value10.异常状态.ContainsKey(15))
									{
										GameMessage("Ðôìi phýõng vâÞn ðang coÌn hiêòu ýìng!");
										return;
									}
									int num6 = 10100;
									GameMessage("Ðôìi phýõng giaÒm 10% nôòi công trong " + num6 / 1000 + " giây!");
									value10.异常状态.Add(15, new 异常状态类(value10, num6, 15, 0));
									value10.FLD_追加百分比_MP上限 -= 0.1;
									value10.Item_Effects(num2);
									value10.UpdatePowersAndStatus();
									Delete_Item_Use(num, 1);
									break;
								}
							case 1000000815:
								if (Show_Pic_Class.ContainsKey(1000000842))
								{
									Show_Pic_Class[1000000842].EndEvent();
								}
								Delete_Item_Use(num, 1);
								UpdatePowersAndStatus();
								break;
							case 1000000816:
								Delete_Item_Use(num, 1);
								UpdatePowersAndStatus();
								break;
							case 1000000838:
								if (!(DateTime.Now.Subtract(Time_Use_Hp_NamLam).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item)) || base.Player_FLD_Map == 7301)
								{
									return;
								}
								Time_Use_Hp_NamLam = DateTime.Now;
								base.Player_FLD_HP += 1200L;
								if (base.Player_FLD_HP > base.Player_HP_Max)
								{
									base.Player_FLD_HP = base.Player_HP_Max;
								}
								Delete_Item_Use(num, 1);
								UpdatePowersAndStatus();
								break;
							case 1000000821:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 60100;
									GameMessage("Coì thêÒ ngãn chãòn châìt ðôòc taòo thaÌnh chiì maòng ðôìi võìi nôòi công (???) trong " + num6 / 1000 + " giây");
									Class_Show_Pill class_Show_Pill12 = new Class_Show_Pill(this, num6, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill12.FLD_PID, class_Show_Pill12);
									Send_Packet_Show_Pic(array, 1, num6);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000822:
								if (Show_Pic_Class.ContainsKey(num2))
								{
									return;
								}
								GameMessage("Thuôìc hôÌi phuòc khoÒi traòng thaìi trâÌm mãòc (không sýÒ duòng ðýõòc kyÞ nãng)");
								if (异常状态.ContainsKey(8))
								{
									异常状态[8].EndEvent();
								}
								if (异常状态.ContainsKey(17))
								{
									异常状态[17].EndEvent();
								}
								if (异常状态.ContainsKey(23))
								{
									异常状态[23].EndEvent();
								}
								if (Show_Pic_Class.ContainsKey(700314))
								{
									Show_Pic_Class[700314].EndEvent();
								}
								Delete_Item_Use(num, 1);
								UpdatePowersAndStatus();
								break;
							case 1000000829:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 60100;
									GameMessage("Ruìt ngãìn 1/2 thõÌi gian traòng thaìi ðoìng bãng trong " + num6 / 1000 + " giây");
									Class_Show_Pill class_Show_Pill12 = new Class_Show_Pill(this, num6, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill12.FLD_PID, class_Show_Pill12);
									Send_Packet_Show_Pic(array, 1, num6);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000852:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 60100;
									GameMessage("GiaÒm 20% lýòc công kiìch cuÒa ðôìi phýõng trong " + num6 / 1000 + " giây!");
									Class_Show_Pill class_Show_Pill12 = new Class_Show_Pill(this, num6, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill12.FLD_PID, class_Show_Pill12);
									Send_Packet_Show_Pic(array, 1, num6);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1000000842:
								{
									if (num3 == base.UserSessionID || num3 < 300 || num3 >= 10000 || !World.AllConnectedChars.TryGetValue(num3, out value10))
									{
										return;
									}
									if (value10.Show_Pic_Class.ContainsKey(num2) || value10.异常状态.ContainsKey(13))
									{
										GameMessage("Ðôìi phýõng vâÞn ðang coÌn hiêòu ýìng!");
										return;
									}
									int num6 = 60100;
									GameMessage("Khiêìn cho lýòc công kiìch cuÒa ðôìi phýõng giaÒm 10% trong " + num6 / 1000 + " giây!");
									value10.Show_Pic_Class.Add(num2, new Class_Show_Pill(value10, num6, num2, 1));
									value10.Send_Packet_Show_Pic(array, 1, num6);
									value10.异常状态.Add(13, new 异常状态类(value10, num6, 13, 0));
									value10.Item_Effects(num2);
									value10.UpdatePowersAndStatus();
									Delete_Item_Use(num, 1);
									break;
								}
							case 1000000849:
								{
									if (num3 == base.UserSessionID || num3 < 300 || num3 >= 10000 || !World.AllConnectedChars.TryGetValue(num3, out value10))
									{
										return;
									}
									if (value10.Show_Pic_Class.ContainsKey(num2) || value10.异常状态.ContainsKey(13))
									{
										GameMessage("Ðôìi phýõng vâÞn ðang coÌn hiêòu ýìng!");
										return;
									}
									int num6 = 20100;
									GameMessage("Khiêìn phýõng tê liêòt trong " + num6 / 1000 + " giây!");
									value10.异常状态.Add(4, new 异常状态类(value10, num6, 4, 0));
									value10.Item_Effects(num2);
									value10.UpdatePowersAndStatus();
									Delete_Item_Use(num, 1);
									break;
								}
							case 1000000843:
								{
									if (Show_Pic_Class.ContainsKey(num2))
									{
										return;
									}
									int num6 = 60100;
									GameMessage("GiaÒm 20% sýìc phoÌng ngýò cuÒa ðôìi phýõng trong " + num6 / 1000 + " giây!");
									Class_Show_Pill class_Show_Pill12 = new Class_Show_Pill(this, num6, num2, 1);
									Show_Pic_Class.Add(class_Show_Pill12.FLD_PID, class_Show_Pill12);
									Send_Packet_Show_Pic(array, 1, num6);
									Delete_Item_Use(num, 1);
									UpdatePowersAndStatus();
									break;
								}
							case 1700101:
								Item_Use(num, 0);
								break;
							case 1700102:
								Item_Use(num, 0);
								break;
							case 1700103:
								Item_Use(num, 0);
								break;
							case 1000000081:
								if (Pet == null && base.Int32_1196 != 99)
								{
									base.Int32_1196 = 99;
									Item_Use(num, 1);
								}
								else
								{
									GameMessage("目前不需要使用！！！", 9, "提示");
								}
								break;
							case 1000000101:
								if (base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Recovery_HP(70, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000102:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Hp = DateTime.Now;
									Recovery_HP(160, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000103:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Hp = DateTime.Now;
									Recovery_HP(300, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000104:
								Recovery_MP(70, DPBUFF: false, ItemShopNPC: true);
								Item_Use(num, 1);
								break;
							case 1000000105:
								if (base.Player_Level >= 10 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Mp = DateTime.Now;
									Recovery_MP(160, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000106:
								if (base.Player_Level >= 35 && DateTime.Now.Subtract(Time_Use_Hp).TotalMilliseconds > (double)((Check_kepskill == 0) ? (World.Time_Use_Item / 2) : World.Time_Use_Item) && base.Player_FLD_Map != 7301 && !异常状态.ContainsKey(24))
								{
									Time_Use_Mp = DateTime.Now;
									Recovery_MP(300, DPBUFF: false, ItemShopNPC: true);
									Item_Use(num, 1);
								}
								break;
							case 1000000110:
								{
									CoordinateClass value7 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value7);
									if (World.Newversion >= 14 && World.Newversion <= 15)
									{
										Move(500f, 1750f, 15f, 101);
									}
									else
									{
										Move(418f, 1518f, 15f, 101, bRandom: false);
									}
									Item_Use(num, 1);
									break;
								}
							case 1000000111:
								{
									CoordinateClass value6 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value6);
									if (World.Newversion >= 14)
									{
										Move(-6950f, 25f, 15f, 301, bRandom: false);
									}
									else
									{
										Move(-6950f, 25f, 15f, 301, bRandom: false);
									}
									Item_Use(num, 1);
									break;
								}
							case 1000000112:
								{
									CoordinateClass value5 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value5);
									if (World.Newversion >= 14)
									{
										Move(6950f, 500f, 15f, 201, bRandom: false);
									}
									else
									{
										Move(6950f, 500f, 15f, 201, bRandom: false);
									}
									Item_Use(num, 1);
									break;
								}
							case 1000000113:
								{
									Item_Use(num, 1);
									int num5 = 0;
									for (int i = 0; i < 12; i++)
									{
										if (气功[i].气功量 != 0)
										{
											num5 += 气功[i].气功量;
											气功[i].气功量 = 0;
										}
									}
									foreach (升天气功类 value26 in 升天气功.Values)
									{
										if (value26.气功量 != 0)
										{
											num5 += value26.气功量;
											value26.气功量 = 0;
										}
									}
									base.Player_Qigong_point += num5;
									Update_Character_Wear_Item();
									GameMessage("Sôì ðiêÒm khiì công ðaÞ tâÒy: " + num5.ToString() + " ðiêÒm");
									break;
								}
							case 1000000116:
								{
									CoordinateClass value4 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value4);
									if (World.Newversion >= 14)
									{
										Move(-2222f, -585f, 15f, 1001, bRandom: false);
									}
									else
									{
										Move(-1249f, -807f, 15f, 1001, bRandom: false);
									}
									Item_Use(num, 1);
									break;
								}
							case 1000000117:
								{
									CoordinateClass value3 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value3);
									if (World.Newversion >= 14)
									{
										Move(1400f, 600f, 15f, 1101, bRandom: false);
									}
									else
									{
										Move(983f, 527f, 15f, 1101, bRandom: false);
									}
									Item_Use(num, 1);
									break;
								}
							case 1000000142:
								{
									CoordinateClass value2 = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value2);
									Move(1214f, 91f, 15f, 2201, bRandom: false);
									Item_Use(num, 1);
									break;
								}
							case 1000000143:
								{
									CoordinateClass value = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
									if (土灵符坐标.ContainsKey(1))
									{
										土灵符坐标.Remove(1);
									}
									土灵符坐标.Add(1, value);
									Move(-440f, 341f, 15f, 2101, bRandom: false);
									Item_Use(num, 1);
									break;
								}
							case 1008001049:
								{
									DateTime d = DateTime.Now.AddDays(30.0);
									TimeSpan timeSpan = d - DateTime.Now;
									时间药品 时间药品 = new 时间药品();
									时间药品.FLD_sj = (int)Convert.ToDouble(d.ToString("yyMMddHHmm"));
									时间药品.FLD_PID = num2;
									list_时间药品.Add(时间药品.FLD_PID, 时间药品);
									Send_Packet_Show_时间物品(num2, 1, 时间药品.FLD_sj, (int)timeSpan.TotalMinutes);
									Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新人物数据(this);
									更新广播人物数据();
									break;
								}
							case 1008001050:
								{
									DateTime d = DateTime.Now.AddDays(30.0);
									TimeSpan timeSpan = d - DateTime.Now;
									时间药品 时间药品 = new 时间药品();
									时间药品.FLD_sj = (int)Convert.ToDouble(d.ToString("yyMMddHHmm"));
									时间药品.FLD_PID = num2;
									list_时间药品.Add(时间药品.FLD_PID, 时间药品);
									Send_Packet_Show_时间物品(num2, 1, 时间药品.FLD_sj, (int)timeSpan.TotalMinutes);
									Item_Use(num, 1);
									UpdatePowersAndStatus();
									更新人物数据(this);
									更新广播人物数据();
									break;
								}
							default:
								if (!World.Itme.TryGetValue(num2, out ItmeClass value8))
								{
									GameMessage("Vâòt phâÒm không tôÌn taòi!");
									return;
								}
								if (World.套装发送开启 == 1)
								{
									try
									{
										if (World.套装列表.ContainsKey(num2))
										{
											套装发送(num2, num);
										}
									}
									catch (Exception ex)
									{
										Form1.WriteLine(2, "打开套装出错--" + ex.Message);
									}
								}
								if (World.时间药开关 == 1 && World.时间药.ContainsKey(num2))
								{
									时间药类 value9 = new 时间药类();
									if (World.时间药.TryGetValue(num2, out value9))
									{
										Send_Packet_Delete_Item(num, 1);
										int bufType = value9._BufType;
										int bufTime = value9._BufTime;
										int bufSide = value9._BufSide;
										int bufMax = value9._BufMax;
										Add_Pill(bufType, bufTime, bufSide, bufMax);
										Update_Character_Wear_Item();
										UpdatePowersAndStatus();
										Update_HP_MP_SP();
									}
								}
								using (Dictionary<int, 箱子送元宝类>.ValueCollection.Enumerator enumerator2 = World.箱子送元宝.Values.GetEnumerator())
								{
									while (enumerator2.MoveNext())
									{
										箱子送元宝类 current2 = enumerator2.Current;
										if (current2.ItmeID == num2)
										{
											Add_Del_Rxpiont(current2.元宝, 1);
											Send_Packet_Delete_Item(num, 1);
											Save_data_Rxpiont();
											GameMessage("获得元宝" + current2.元宝, 9);
										}
									}
									try
									{
										foreach (物品兑换类 value27 in World.物品兑换数据.Values)
										{
											string[] array4 = value27.需要物品.Split(';');
											for (int j = 0; j < array4.Length; j++)
											{
												if (array4[j] != null && int.Parse(array4[j].Split(',')[0]) == num2)
												{
													物品兑换系统(value27);
												}
											}
										}
									}
									catch (Exception ex2)
									{
										Form1.WriteLine(2, "数据库物品兑换出错--" + ex2.Message);
									}
									try
									{
										if (value8.FLD_RESIDE2 != 69)
										{
											GameMessage("Vâòt phâÒm chýa mõÒ!");
											return;
										}
										if (World.脚本.打开物品事件 != null)
										{
											object[] args = new object[4]
											{
											base.UserSessionID,
											num2,
											num,
											BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0)
											};
											World.脚本.打开物品事件.Call(args);
										}
									}
									catch (Exception ex3)
									{
										Form1.WriteLine(2, "OpenItmeTrigGer(" + base.UserName + "," + num2 + "," + num + "," + BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0) + ")");
										Form1.WriteLine(2, "打开物品触发器3出错--" + ex3.Message);
									}
								}
								break;
						}
						Update_HP_MP_SP();
					}
				}
			}
			catch (Exception ex4)
			{
				Form1.WriteLine(1, "吃药 出错 [" + base.Userid + "][" + base.UserName + "] " + ex4.Message);
			}
		}

		public void GameNotice(int type, int id, string userName, string str)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(2);
			packetData.WriteInt(id);
			packetData.WriteString(userName);
			packetData.WriteInt(0);
			packetData.WriteShort(0);
			packetData.WriteString(str);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 45080, base.UserSessionID);
			}
		}

		public new void Item_Effects(long 物品id)
		{
			PacketData packetData = new PacketData();
			packetData.WriteLong(物品id);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 32512, base.UserSessionID);
			}
			SendRangeOfPackets(packetData, 32512, base.UserSessionID);
		}

		public void 冲级奖励()
		{
			try
			{
				foreach (等级奖励类 value in World.等级奖励数据.Values)
				{
					string[] array = World.升级会员需要属性.Split(',');
					if (base.Player_Level == value.级别)
					{
						if (value.武勋 != 0)
						{
							base.Player_WuXun += value.武勋;
							GameMessage("+" + value.武勋.ToString() + " ðiêÒm voÞ huân！", 20);
							UpdatePowersAndStatus();
						}
						if (value.套装ID != 0)
						{
							int num = 得到包裹空位位置();
							if (num == -1)
							{
								GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20);
								break;
							}
							byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							byte[] 物品属性 = new byte[56];
							增加物品(bytes, BitConverter.GetBytes(value.套装ID), num, BitConverter.GetBytes(1), 物品属性, 绑定: false);
							GameMessage("ThaÌnh công, nhâòn ðýõòc 1 vâòt phâÒm", 20);
						}
						if (value.元宝 != 0)
						{
							查百宝阁元宝数();
							Add_Del_Rxpiont(value.元宝, 1);
							GameMessage("Nhâòn ðýõòc " + value.元宝.ToString() + " @CASH", 20);
							Save_data_Rxpiont();
						}
						if (value.生命 != 0)
						{
							base.奖励_追加_生命 += value.生命;
							UpdatePowersAndStatus();
							GameMessage("Nhâòn ðýõòc " + value.生命.ToString() + " sinh mêònh", 20);
						}
						if (value.攻击 != 0 && base.奖励_追加_攻击 < long.Parse(array[0]))
						{
							base.奖励_追加_攻击 += value.攻击;
							UpdatePowersAndStatus();
							GameMessage("Nhâòn ðýõòc " + value.攻击.ToString() + " tâìn công", 20);
						}
						if (value.防御 != 0 && base.奖励_追加_防御 < long.Parse(array[1]))
						{
							base.奖励_追加_防御 += value.防御;
							UpdatePowersAndStatus();
							GameMessage("Nhâòn ðýõòc " + value.防御.ToString() + " phoÌng thuÒ", 20);
						}
						if (value.回避 != 0)
						{
							base.奖励_追加_回避 += value.回避;
							UpdatePowersAndStatus();
							GameMessage("Nhâòn ðýõòc " + value.回避.ToString() + " neì traình", 20);
						}
						if (value.命中 != 0)
						{
							base.奖励_追加_命中 += value.命中;
							UpdatePowersAndStatus();
							GameMessage("Nhâòn ðýõòc " + value.命中.ToString() + " chiình xaìc", 20);
						}
						if (value.内功 != 0)
						{
							base.奖励_追加_内功 += value.内功;
							UpdatePowersAndStatus();
							GameMessage("Nhâòn ðýõòc " + value.内功.ToString() + " nôòi công", 20);
						}
						if (value.金钱 != "")
						{
							base.Player_Money += long.Parse(value.金钱);
							GameMessage("Nhâòn ðýõòc " + value.金钱 + " lýõòng", 20);
							得到钱的提示(uint.Parse(value.金钱));
							Update_Item_In_Bag();
							Update_Money_Weight();
						}
						if (value.单件物品 != "")
						{
							int num2 = 得到包裹空位位置();
							if (num2 == -1)
							{
								GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20);
								break;
							}
							string[] array2 = value.单件物品.Split(';');
							百宝增加物品带属性(int.Parse(array2[0]), num2, int.Parse(array2[1]), int.Parse(array2[2]), int.Parse(array2[3]), int.Parse(array2[4]), int.Parse(array2[5]), int.Parse(array2[6]), int.Parse(array2[7]), int.Parse(array2[8]), int.Parse(array2[9]), int.Parse(array2[10]), int.Parse(array2[11]));
							GameMessage("ThaÌnh công. Baòn nhâòn ðýõòc1 vâòt phâÒm", 20);
						}
						if (value.单件物品2 != "")
						{
							int num3 = 得到包裹空位位置();
							if (num3 == -1)
							{
								GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20);
								break;
							}
							string[] array3 = value.单件物品2.Split(';');
							百宝增加物品带属性(int.Parse(array3[0]), num3, int.Parse(array3[1]), int.Parse(array3[2]), int.Parse(array3[3]), int.Parse(array3[4]), int.Parse(array3[5]), int.Parse(array3[6]), int.Parse(array3[7]), int.Parse(array3[8]), int.Parse(array3[9]), int.Parse(array3[10]), int.Parse(array3[11]));
							GameMessage("ThaÌnh công. Baòn nhâòn ðýõòc1 vâòt phâÒm", 20);
						}
						if (value.会员等级 != 0)
						{
							base.会员等级 += value.会员等级;
							SaveDataCharacter();
							UpdatePowersAndStatus();
							GameMessage("恭喜你获得VIP等级" + value.会员等级.ToString() + "级！", 10);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "等级奖励系统出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 宠物动作(int id)
		{
			switch (id)
			{
				case 3:
					Pet.Ride = 1;
					break;
				case 4:
					Pet.Ride = 0;
					break;
			}
			string hex = "AA55100001549C5510010001000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			SendRangeOfPackets(array, array.Length);
		}

		public void method_190(Players players_0)
		{
			byte[] array = Converter.hexStringToByte("AA55680001549C6400580001000000549C0000BDDCBDDC000000000000000000000000000000003203040000000000FA590544000070417F86C64465000000E69EA42770920F24000000008425A627000100009CBBFF43D322BDC370F9CD440000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.全服ID), 0, array, 15, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(players_0.Pet.Name);
			Buffer.BlockCopy(bytes, 0, array, 19, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.Pet_FLD_LEVEL), 0, array, 39, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.FLD_JOB_LEVEL), 0, array, 40, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.FLD_JOB), 0, array, 41, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.Bs), 0, array, 43, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.人物坐标_X), 0, array, 47, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.人物坐标_Z), 0, array, 51, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.人物坐标_Y), 0, array, 55, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.人物坐标_MAP), 0, array, 59, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.人物坐标_X), 0, array, 83, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.人物坐标_Y), 0, array, 91, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(players_0.Pet.全服ID), 0, array, 5, 2);
			for (int i = 0; i < 4; i++)
			{
				try
				{
					byte[] get_Byte_Item_PID = Pet.宠物以装备[i].Get_Byte_Item_PID;
				}
				catch
				{
				}
			}
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void PetActionPackage(byte[] data, int length)
		{
			召唤更新显示灵兽数据(this);
			byte[] array = new byte[2];
			Buffer.BlockCopy(data, 11, array, 0, 1);
			int id = BitConverter.ToInt16(array, 0);
			宠物动作(id);
		}

		public void 宠物起名包(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[20];
				for (int i = 0; i < 20 && data[15 + i] != 0; i++)
				{
					array[i] = data[15 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "");
				if (text.Length > 20)
				{
					起名提示(3);
					Item_Wear[14].LockMove = false;
				}
				else if (RxjhClass.GetCwUserName(text, base.UserName, MyPet_Type, eval_m) == 1)
				{
					Summon_pets(data, length);
				}
				else
				{
					起名提示(5);
					Item_Wear[14].LockMove = false;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "连接登陆出错[" + base.UserSessionID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 出店(int 人物ID)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_出店");
			}
			string hex = "AA551500000000CF000600030319000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 13, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			进店中 = false;
			打开仓库中 = false;
			进店中ID = 0;
			Players players = Select_Character_ID(人物ID);
			if (players != null)
			{
				players.PlayerShop.个人商店是否使用中 = false;
				players.PlayerShop.进入人 = null;
				string hex2 = "AA551900000000CF000A0003030000000001000000000000000000000055AA";
				byte[] array2 = Converter.hexStringToByte(hex2);
				Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array2, 13, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array2, 5, 2);
				if (players.Client != null)
				{
					players.Client.Send(array2, array2.Length);
				}
			}
		}

		public bool 触发安全区坐标(Players Playe)
		{
			if (Playe.UserName == base.UserName)
			{
				return false;
			}
			float num;
			float num2;
			float num3;
			if (World.SafeZoneSwitch == 1)
			{
				if (World.Newversion >= 14 || World.Newversion <= 7)
				{
					if (Playe.Player_FLD_Map != 101 && base.Player_FLD_Map != 101)
					{
						goto IL_00f7;
					}
					num = 500f - Playe.Player_FLD_X;
					num2 = 2222f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (!(num3 <= 10f))
					{
						num = 500f - Playe.Player_FLD_X;
						num2 = 1538f - Playe.Player_FLD_Y;
						num3 = (int)Math.Sqrt(num * num + num2 * num2);
						if (!(num3 <= 100f))
						{
							goto IL_00f7;
						}
					}
					goto IL_0931;
				}
				if (101 == Playe.Player_FLD_Map)
				{
					num = 430f - Playe.Player_FLD_X;
					num2 = 1550f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 80f)
					{
						goto IL_0931;
					}
				}
				else if (201 == Playe.Player_FLD_Map)
				{
					num = 6920f - Playe.Player_FLD_X;
					num2 = 1582f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 80f)
					{
						goto IL_0931;
					}
				}
				else if (301 == Playe.Player_FLD_Map)
				{
					num = -6877f - Playe.Player_FLD_X;
					num2 = 53f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 80f)
					{
						goto IL_0931;
					}
				}
				else if (1001 == Playe.Player_FLD_Map)
				{
					num = -1249f - Playe.Player_FLD_X;
					num2 = -870f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 80f)
					{
						goto IL_0931;
					}
				}
				else if (1101 == Playe.Player_FLD_Map)
				{
					num = 983f - Playe.Player_FLD_X;
					num2 = 527f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 80f)
					{
						goto IL_0931;
					}
				}
				else if (2101 == Playe.Player_FLD_Map)
				{
					num = -440f - Playe.Player_FLD_X;
					num2 = 341f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 80f)
					{
						goto IL_0931;
					}
				}
				else if (2201 == Playe.Player_FLD_Map)
				{
					num = 1214f - Playe.Player_FLD_X;
					num2 = 91f - Playe.Player_FLD_Y;
					num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 80f)
					{
						goto IL_0931;
					}
				}
				foreach (CoordinateClass item in World.SafePlace)
				{
					if (item.Rxjh_Map != Playe.Player_FLD_Map)
					{
					}
				}
			}
			goto IL_094a;
		IL_038b:
			if (Playe.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
			{
				goto IL_0430;
			}
			num = 500f - Playe.Player_FLD_X;
			num2 = 150f - Playe.Player_FLD_Y;
			num3 = (int)Math.Sqrt(num * num + num2 * num2);
			if (!(num3 <= 150f))
			{
				num = 500f - Playe.Player_FLD_X;
				num2 = -150f - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 150f))
				{
					goto IL_0430;
				}
			}
			goto IL_0931;
		IL_057a:
			foreach (NpcClass value in Playe.NpcList.Values)
			{
				if (value.IsNpc != 1)
				{
					continue;
				}
				num = value.RxjhX - Playe.Player_FLD_X;
				num2 = value.RxjhY - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 20f))
				{
					continue;
				}
				goto IL_0931;
			}
			foreach (CoordinateClass item2 in World.Map_Move)
			{
				if (item2.Rxjh_Map != Playe.Player_FLD_Map)
				{
				}
			}
			goto IL_094a;
		IL_00f7:
			if (Playe.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
			{
				goto IL_019c;
			}
			num = 500f - Playe.Player_FLD_X;
			num2 = 0f - Playe.Player_FLD_Y;
			num3 = (int)Math.Sqrt(num * num + num2 * num2);
			if (!(num3 <= 150f))
			{
				num = -500f - Playe.Player_FLD_X;
				num2 = 0f - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 150f))
				{
					goto IL_019c;
				}
			}
			goto IL_0931;
		IL_04d5:
			if (Playe.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
			{
				goto IL_057a;
			}
			num = 500f - Playe.Player_FLD_X;
			num2 = 400f - Playe.Player_FLD_Y;
			num3 = (int)Math.Sqrt(num * num + num2 * num2);
			if (!(num3 <= 150f))
			{
				num = 500f - Playe.Player_FLD_X;
				num2 = -400f - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 150f))
				{
					goto IL_057a;
				}
			}
			goto IL_0931;
		IL_094a:
			return false;
		IL_0241:
			if (Playe.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
			{
				goto IL_02e6;
			}
			num = -500f - Playe.Player_FLD_X;
			num2 = 300f - Playe.Player_FLD_Y;
			num3 = (int)Math.Sqrt(num * num + num2 * num2);
			if (!(num3 <= 150f))
			{
				num = -500f - Playe.Player_FLD_X;
				num2 = -300f - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 150f))
				{
					goto IL_02e6;
				}
			}
			goto IL_0931;
		IL_0430:
			if (Playe.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
			{
				goto IL_04d5;
			}
			num = 500f - Playe.Player_FLD_X;
			num2 = 300f - Playe.Player_FLD_Y;
			num3 = (int)Math.Sqrt(num * num + num2 * num2);
			if (!(num3 <= 150f))
			{
				num = 500f - Playe.Player_FLD_X;
				num2 = -300f - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 150f))
				{
					goto IL_04d5;
				}
			}
			goto IL_0931;
		IL_0931:
			GameMessage("Khu výòc an toaÌn, không thêÒ tâìn công", 10);
			return true;
		IL_02e6:
			if (Playe.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
			{
				goto IL_038b;
			}
			num = -500f - Playe.Player_FLD_X;
			num2 = 400f - Playe.Player_FLD_Y;
			num3 = (int)Math.Sqrt(num * num + num2 * num2);
			if (!(num3 <= 150f))
			{
				num = -500f - Playe.Player_FLD_X;
				num2 = -400f - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 150f))
				{
					goto IL_038b;
				}
			}
			goto IL_0931;
		IL_019c:
			if (Playe.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
			{
				goto IL_0241;
			}
			num = -500f - Playe.Player_FLD_X;
			num2 = 150f - Playe.Player_FLD_Y;
			num3 = (int)Math.Sqrt(num * num + num2 * num2);
			if (!(num3 <= 150f))
			{
				num = -500f - Playe.Player_FLD_X;
				num2 = -150f - Playe.Player_FLD_Y;
				num3 = (int)Math.Sqrt(num * num + num2 * num2);
				if (!(num3 <= 150f))
				{
					goto IL_0241;
				}
			}
			goto IL_0931;
		}

		public bool 触发安全区坐标2(Players Playe)
		{
			if (World.SafeZoneSwitch == 1)
			{
				foreach (CoordinateClass item in World.SafePlace)
				{
					if (item.Rxjh_Map == Playe.Player_FLD_Map)
					{
						float num = item.Rxjh_X - Playe.Player_FLD_X;
						float num2 = item.Rxjh_Y - Playe.Player_FLD_Y;
						float num3 = (int)Math.Sqrt(num * num + num2 * num2);
						if (num3 <= 80f)
						{
							GameMessage("Safezone!", 10);
							return true;
						}
					}
				}
			}
			return false;
		}

		public void 触发移动坐标()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_触发移动坐标");
			}
			foreach (MoveClass item in World.Mover)
			{
				if (item.MAP == base.Player_FLD_Map)
				{
					float num = item.X - base.Player_FLD_X;
					float num2 = item.Y - base.Player_FLD_Y;
					float num3 = (int)Math.Sqrt(num * num + num2 * num2);
					if (num3 <= 20f)
					{
						Move(item.ToX, item.ToY, item.ToZ, item.ToMAP);
					}
				}
			}
		}

		public void Auto_Enable_NpcAttack()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_触发自动攻击");
			}
			foreach (NpcClass value in MapClass.GetnpcTemplate(base.Player_FLD_Map).Values)
			{
				if ((!base.PlayerIsDead && GM模式 == 0 && value.IsNpc == 0 && value.FldAuto == 1 && base.Player_FLD_Map != 801 && value.Level >= base.Player_Level - 20 && !value.Npc死亡 && !value.enableNpcAttack && 查找范围Npc(25, value)) || ((value.FldPid == 15494 || value.FldPid == 15493 || value.FldPid == 15121) && base.Player_Zx != 2) || ((value.FldPid == 15492 || value.FldPid == 15491 || value.FldPid == 15122) && base.Player_Zx != 1))
				{
					value.Play_Add(this, 1L);
					value.enableNpcMove = false;
					value.enableNpcAttack = true;
				}
			}
		}

		public void 穿针引线(byte[] data, int length)
		{
			if (length == 49)
			{
				try
				{
					PacketVerify(data, length);
					string hex = "AA552B00012C01E1001C00030014DC143C00000000000001000000010000000000000000000000000000000000000055AA";
					byte[] array = Converter.hexStringToByte(hex);
					int num = data[25];
					int index = data[21];
					byte[] get_Byte_Item_PID = Item_In_Bag[num].Get_Byte_Item_PID;
					if (World.Itme.TryGetValue(BitConverter.ToInt32(get_Byte_Item_PID, 0), out ItmeClass value) && value.FLD_RESIDE2 == 1)
					{
						byte[] 物品ID = new byte[4];
						byte[] 物品属性 = new byte[57];
						byte[] 物品全局ID = Item_In_Bag[num].物品全局ID;
						string text = Item_In_Bag[num].FLD_PID.ToString().Substring(1, 1);
						switch (text)
						{
							case "1":
								物品ID = BitConverter.GetBytes(BitConverter.ToInt32(get_Byte_Item_PID, 0) + 10000000);
								break;
							case "2":
								物品ID = BitConverter.GetBytes(BitConverter.ToInt32(get_Byte_Item_PID, 0) - 10000000);
								break;
							default:
								物品ID = BitConverter.GetBytes(BitConverter.ToInt32(get_Byte_Item_PID, 0));
								break;
							case null:
								break;
						}
						Send_Packet_Delete_Item(num, 1);
						Send_Packet_Delete_Item(index, 1);
						_Make_Item_Option(物品全局ID, 物品ID, num, BitConverter.GetBytes(1), 物品属性);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "使用穿针引线 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
				}
			}
		}

		public void 传送点移动(byte[] data, int length)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(data, 27, array, 0, 4);
			int num = BitConverter.ToInt32(array, 0);
			switch (num)
			{
				case 1:
					Move(0f, -80f, 15f, base.Player_FLD_Map - 1);
					break;
				case 2:
					Move(0f, 80f, 15f, base.Player_FLD_Map + 1);
					break;
				default:
					foreach (MoveClass item in World.Mover)
					{
						if (item.MAP == base.Player_FLD_Map && item.ToMAP == num)
						{
							float num2 = item.X - base.Player_FLD_X;
							float num3 = item.Y - base.Player_FLD_Y;
							float num4 = (int)Math.Sqrt(num2 * num2 + num3 * num3);
							if (num4 <= 200f)
							{
								Move(item.ToX, item.ToY, item.ToZ, item.ToMAP);
								return;
							}
						}
					}
					Form1.WriteLine(2, "传送点移动 " + base.Userid + " " + base.UserName + "  " + base.Player_FLD_X + "  " + base.Player_FLD_Y + " " + base.Player_FLD_Map + " " + num);
					break;
			}
		}

		public void 创建门派(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				string hex = "AA552100010000E6001200310000000000000000000000000000000100000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = new byte[15];
				for (int i = 0; i < 15 && data[11 + i] != 0; i++)
				{
					array2[i] = data[11 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "");
				int index;
				bool flag;
				if (base.Player_Level < World.创建门派需要等级)
				{
					GameMessage("你的等级不够" + World.创建门派需要等级 + "级，不能创建门派", 9);
				}
				else if (base.Player_Money < World.创建门派需要金钱)
				{
					GameMessage("你的游戏币不够" + World.创建门派需要金钱 + "，不能创建门派", 9);
				}
				else
				{
					index = 0;
					flag = false;
					if (!(World.创建门派所需物品id != ""))
					{
						goto IL_01b8;
					}
					for (int j = 0; j < ((base.装备行囊是否开启 == 0) ? 36 : 66); j++)
					{
						if (BitConverter.ToInt32(Item_In_Bag[j].Get_Byte_Item_PID, 0) == int.Parse(World.创建门派所需物品id))
						{
							index = j;
							flag = true;
							break;
						}
					}
					if (flag)
					{
						goto IL_01b8;
					}
					GameMessage("你没有创建门派所需物品 " + ItmeClass.得到物品名称(int.Parse(World.创建门派所需物品id)) + " ，不能创建门派", 9);
				}
				goto end_IL_0001;
			IL_01b8:
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(text);
				Buffer.BlockCopy(bytes, 0, array, 11, bytes.Length);
				switch (RxjhClass.创建帮派(base.UserName, text, base.Player_Level))
				{
					case 1:
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 27, 1);
						break;
					case 2:
						GameMessage("DýÞ liêòu lôÞi, vui loÌng thýÒ laòi", 9);
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 27, 1);
						break;
					case 0:
						base.Player_Money -= World.创建门派需要金钱;
						if (flag)
						{
							Send_Packet_Delete_Item(index, 1);
						}
						Update_Item_In_Bag();
						Update_Money_Weight();
						读帮派数据();
						Initialize_Equip_Item();
						Buffer.BlockCopy(BitConverter.GetBytes(99), 0, array, 27, 1);
						break;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				查帮派();
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "创建门派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 创建门派确认(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				string hex = "AA552100010000E4001200310000000000000000000000000000000300000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = new byte[15];
				for (int i = 0; i < 15 && data[11 + i] != 0; i++)
				{
					array2[i] = data[11 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "");
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(text);
				Buffer.BlockCopy(bytes, 0, array, 11, bytes.Length);
				if (base.Player_Level < 60)
				{
					GameMessage("Baòn chýa ðaòt câìp ðôò 60", 9);
				}
				else if (base.Player_Money < 1000000)
				{
					GameMessage("Nhân lýõòng cuÒa baòn không ðuÒ 1000000", 9);
				}
				else
				{
					if (RxjhClass.创建帮派确认(text) == 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 27, 1);
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(99), 0, array, 27, 1);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "创建门派确认出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void CreateCharacter(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				string hex;
				string hex2;
				string hex3;
				if (World.是否加密 != 0)
				{
					hex = "AA5513000000001500040000000000000000000000000055AA";
					hex2 = "AA5513000000001500040001000000000000000000000055AA";
					hex3 = "AA5513000100001500040004000000000000000000E06955AA";
				}
				else
				{
					hex = "AA550A00002102150004000000000055AA";
					hex2 = "AA550A00002102150004000100000055AA";
					hex3 = "AA550A00002102150004000400000055AA";
				}
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = Converter.hexStringToByte(hex2);
				byte[] array3 = Converter.hexStringToByte(hex3);
				byte[] array4 = new byte[20];
				for (int i = 0; i < 20 && data[11 + i] != 0; i++)
				{
					array4[i] = data[11 + i];
				}
				byte[] array5 = new byte[10];
				for (int j = 0; j < 10; j++)
				{
					array5[j] = data[28 + j];
				}
				string text = "0x" + Converter.ToString(array5);
				string text2 = Encoding.GetEncoding(1252).GetString(array4).Trim();
				int num = data[27];
				if ((World.复古模式是否启用 != 0 && (num == 4 || num == 6 || num == 7 || num == 8)) || (World.CreateNewJob == 0 && (num < 1 || num > 7) && num != 10) || (World.是否开启龙行模式 != 0 && World.是否开启狂歌模式 == 0 && (num < 1 || num > 6)) || (World.是否开启龙行模式 == 0 && World.是否开启狂歌模式 != 0 && (num < 1 || num > 12)))
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
				else
				{
					text2 = text2.Replace("\0", "").Trim();
					if (text2 == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					if (RxjhClass.SetUserName(base.Userid, text2, num, array5) != 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "连创建人物出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 打开仓库()
		{
			try
			{
				for (int i = 0; i < 60; i++)
				{
					DateTime dateTime = new DateTime(1970, 1, 1, 7, 0, 0);
					if (个人仓库[i].FLD_DAY1 != 0 && 个人仓库[i].FLD_DAY2 != 0 && DateTime.Now.Subtract(dateTime.AddSeconds(个人仓库[i].FLD_DAY2)).TotalSeconds >= 0.0)
					{
						个人仓库[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
				}
				PacketData packetData = new PacketData();
				packetData.WriteInt(5);
				packetData.WriteInt(5);
				packetData.WriteInt(8);
				for (int i = 0; i < 60; i++)
				{
					if (BitConverter.ToInt32(个人仓库[i].Item_Amount, 0) == 0)
					{
						个人仓库[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
					else
					{
						检查物品系统("个人仓库", ref 个人仓库[i]);
					}
					if (个人仓库[i].FLD_FJ_中级附魂 <= 22 && 个人仓库[i].FLD_FJ_中级附魂 >= 21 && 个人仓库[i].FLD_FJ_觉醒 > 0)
					{
						个人仓库[i].物品_中级附魂_追加_觉醒 = 个人仓库[i].FLD_FJ_中级附魂 - 20;
					}
					packetData.Write(个人仓库[i].GetByte(), 0, World.单个物品大小);
				}
				packetData.WriteLong(base.个人仓库钱数);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 38400, base.UserSessionID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开个人仓库出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void Send_Packet_Show_时间物品(int pid, int type, int time, int time2)
		{
			PacketData packetData = new PacketData();
			if (World.Newversion >= 17)
			{
				packetData.WriteLong(0L);
			}
			packetData.WriteLong(pid);
			if (type == 0)
			{
				packetData.WriteInt(65598);
				packetData.WriteInt(0);
				packetData.WriteInt(type);
				packetData.WriteInt(0);
			}
			else
			{
				packetData.WriteInt(65598);
				packetData.WriteInt(time);
				packetData.WriteInt(type);
				packetData.WriteInt((int)Convert.ToDouble(DateTime.ParseExact(time.ToString(), "yyMMddHHmm", CultureInfo.CurrentCulture).AddMinutes(0.0 - (double)time2).ToString("yyMMddHHmm")));
			}
			packetData.WriteLong(0L);
			if (World.Newversion >= 17)
			{
				packetData.WriteInt(0);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 17153, base.UserSessionID);
			}
		}

		public void 打开符(byte[] data, int length)
		{
			try
			{
				if (公有药品.Count < 2)
				{
					PacketVerify(data, length);
					int num = data[21];
					byte[] array = new byte[4];
					Buffer.BlockCopy(data, 13, array, 0, 4);
					int itmeid = Converter.getItmeid(Converter.ToString(array));
					switch (itmeid)
					{
						case 1008000027:
							{
								if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 1008000027 || 公有药品.ContainsKey(1008000027))
								{
									return;
								}
								DateTime value2 = new DateTime(1970, 1, 1, 7, 0, 0);
								TimeSpan timeSpan2 = DateTime.Now.AddDays(30.0).Subtract(value2);
								公有药品类 公有药品类2 = new 公有药品类();
								公有药品类2.药品ID = itmeid;
								公有药品类2.时间 = (int)timeSpan2.TotalSeconds;
								公有药品.Add(公有药品类2.药品ID, 公有药品类2);
								set公有物品(公有药品类2);
								Send_Packet_Delete_Item(num, 1);
								byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								_Make_Item_Option(bytes, BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[20]);
								break;
							}
						case 1008000028:
							{
								if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 1008000028 || 公有药品.ContainsKey(1008000028))
								{
									return;
								}
								DateTime value4 = new DateTime(1970, 1, 1, 7, 0, 0);
								TimeSpan timeSpan4 = DateTime.Now.AddDays(30.0).Subtract(value4);
								公有药品类 公有药品类4 = new 公有药品类();
								公有药品类4.药品ID = itmeid;
								公有药品类4.时间 = (int)timeSpan4.TotalSeconds;
								公有药品.Add(公有药品类4.药品ID, 公有药品类4);
								set公有物品(公有药品类4);
								Send_Packet_Delete_Item(num, 1);
								byte[] bytes3 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								_Make_Item_Option(bytes3, BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[20]);
								break;
							}
						case 1008000029:
							{
								if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 1008000029 || 公有药品.ContainsKey(1008000029))
								{
									return;
								}
								DateTime value3 = new DateTime(1970, 1, 1, 7, 0, 0);
								TimeSpan timeSpan3 = DateTime.Now.AddDays(30.0).Subtract(value3);
								公有药品类 公有药品类3 = new 公有药品类();
								公有药品类3.药品ID = itmeid;
								公有药品类3.时间 = (int)timeSpan3.TotalSeconds;
								公有药品.Add(公有药品类3.药品ID, 公有药品类3);
								set公有物品(公有药品类3);
								Send_Packet_Delete_Item(num, 1);
								byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								_Make_Item_Option(bytes2, BitConverter.GetBytes(800000005), num, BitConverter.GetBytes(1), new byte[20]);
								break;
							}
						case 1008000312:
							{
								if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 1008000312 || 公有药品.ContainsKey(1008000141) || 公有药品.ContainsKey(1008000140) || 公有药品.ContainsKey(1008000312))
								{
									return;
								}
								DateTime value = new DateTime(1970, 1, 1, 7, 0, 0);
								TimeSpan timeSpan = DateTime.Now.AddDays(30.0).Subtract(value);
								公有药品类 公有药品类 = new 公有药品类();
								公有药品类.药品ID = itmeid;
								公有药品类.时间 = (int)timeSpan.TotalSeconds;
								公有药品.Add(公有药品类.药品ID, 公有药品类);
								set公有物品(公有药品类);
								Send_Packet_Delete_Item(num, 1);
								break;
							}
						case 1008000140:
							{
								if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 1008000140 || 公有药品.ContainsKey(1008000141) || 公有药品.ContainsKey(1008000140) || 公有药品.ContainsKey(1008000312))
								{
									return;
								}
								DateTime value = new DateTime(1970, 1, 1, 7, 0, 0);
								TimeSpan timeSpan = DateTime.Now.AddDays(1.0).Subtract(value);
								公有药品类 公有药品类 = new 公有药品类();
								公有药品类.药品ID = itmeid;
								公有药品类.时间 = (int)timeSpan.TotalSeconds;
								公有药品.Add(公有药品类.药品ID, 公有药品类);
								set公有物品(公有药品类);
								Send_Packet_Delete_Item(num, 1);
								break;
							}
						case 1008000141:
							{
								if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 1008000141 || 公有药品.ContainsKey(1008000141) || 公有药品.ContainsKey(1008000140) || 公有药品.ContainsKey(1008000312))
								{
									return;
								}
								DateTime value = new DateTime(1970, 1, 1, 7, 0, 0);
								TimeSpan timeSpan = DateTime.Now.AddDays(10.0).Subtract(value);
								公有药品类 公有药品类 = new 公有药品类();
								公有药品类.药品ID = itmeid;
								公有药品类.时间 = (int)timeSpan.TotalSeconds;
								公有药品.Add(公有药品类.药品ID, 公有药品类);
								set公有物品(公有药品类);
								Send_Packet_Delete_Item(num, 1);
								break;
							}
					}
					Update_Item_In_Bag();
					Update_Money_Weight();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Change_UserName(byte[] data, int length)
		{
			int num = BitConverter.ToInt32(data, 15);
			if (num == 1008000126)
			{
				PacketData packetData = new PacketData();
				packetData.WriteInt(0);
				packetData.WriteLong(num);
				packetData.WriteInt(0);
				packetData.WriteInt(0);
				packetData.WriteInt(0);
				packetData.WriteInt(0);
				packetData.WriteInt(1);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 29744, base.UserSessionID);
				}
			}
		}

		public void 打开商店(byte[] data, int length)
		{
			try
			{
				byte[] array;
				byte[] array2;
				byte[] array3;
				PacketData packetData;
				if (base.Player_FLD_HP > 0 && !base.PlayerIsDead)
				{
					if (!退出中)
					{
						PacketVerify(data, length);
						string hex = "AA551F000000009100100001000000010000000100000000000000000000000000000055AA";
						array = Converter.hexStringToByte(hex);
						array2 = new byte[2];
						array3 = new byte[2];
						byte[] array4 = new byte[2];
						Buffer.BlockCopy(data, 19, array2, 0, 2);
						Buffer.BlockCopy(data, 11, array3, 0, 2);
						Buffer.BlockCopy(data, 31, array4, 0, 2);
						int num = BitConverter.ToInt16(array2, 0);
						int num2 = BitConverter.ToInt16(array3, 0);
						int num3 = BitConverter.ToInt16(array4, 0) - 100;
						if (num2 <= 94)
						{
							if (num2 <= 17)
							{
								switch (num2)
								{
									case 1:
										break;
									case 2:
										goto IL_0202;
									case 3:
										{
											int num4 = 60;
											List<ShotClass> shotList = ShotClass.GetShotList(num);
											packetData = new PacketData();
											packetData.WriteInt(num2);
											packetData.WriteInt(num2);
											packetData.WriteInt(num);
											packetData.WriteInt(60);
											packetData.WriteInt(0);
											if (num3 < 1)
											{
												packetData.WriteInt((shotList.Count - 1) / num4 + 1);
											}
											else
											{
												packetData.WriteInt(num3 + 100);
											}
											if (num3 < 1)
											{
												num3 = 1;
											}
											packetData.WriteInt(0);
											for (int i = 0; i < 60; i++)
											{
												int num5 = (num3 - 1) * num4 + i;
												if (num5 >= (num3 - 1) * num4 && num5 < num3 * num4 && num5 < shotList.Count)
												{
													packetData.WriteLong(shotList[num5].FLD_PID);
													if (shotList[num5].FLD_MAGICZh > 0)
													{
														packetData.WriteLong(shotList[num5].FLD_MAGICZh);
														if (shotList[num5].FLD_MAGIC1 > 0)
														{
															packetData.WriteLong(shotList[num5].FLD_MAGIC1);
														}
														if (shotList[num5].FLD_MAGIC2 > 0)
														{
															packetData.WriteLong(shotList[num5].FLD_MAGIC2);
														}
														if (shotList[num5].FLD_MAGIC3 > 0)
														{
															packetData.WriteLong(shotList[num5].FLD_MAGIC3);
														}
														if (shotList[num5].FLD_MAGIC4 > 0)
														{
															packetData.WriteLong(shotList[num5].FLD_MAGIC4);
														}
													}
													else
													{
														packetData.WriteLong(0L);
													}
													packetData.WriteLong(-1L);
												}
												else
												{
													packetData.WriteLong(0L);
													packetData.WriteLong(0L);
													packetData.WriteLong(-1L);
												}
											}
											if (base.Client != null)
											{
												base.Client.SendPak(packetData, 37120, base.UserSessionID, 0);
											}
											return;
										}
									case 5:
										goto IL_04c4;
									case 9:
										goto IL_0504;
									case 12:
										goto IL_0551;
									case 15:
										goto IL_058d;
									case 17:
										goto IL_05dd;
									default:
										goto IL_209a;
								}
								打开仓库中 = true;
								Buffer.BlockCopy(array2, 0, array, 19, 2);
								Buffer.BlockCopy(array3, 0, array, 11, 2);
								Buffer.BlockCopy(array3, 0, array, 15, 2);
								ClassHcItimes.Clear();
							}
							else if (num2 <= 38)
							{
								switch (num2)
								{
									case 22:
										break;
									case 23:
										goto IL_092c;
									case 38:
										goto IL_097c;
									default:
										goto IL_209a;
								}
								Buffer.BlockCopy(array2, 0, array, 19, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
								Move(-302f, 288f, 15f, 2301);
							}
							else
							{
								switch (num2)
								{
									case 45:
										break;
									case 62:
										goto IL_0b03;
									case 63:
										goto IL_0b53;
									case 65:
										goto IL_0bdc;
									case 66:
										goto IL_0c2c;
									case 67:
										goto IL_0c7c;
									case 68:
										goto IL_0ccc;
									case 69:
										goto IL_0d1c;
									case 70:
										goto IL_0d6c;
									case 71:
										goto IL_0dbc;
									case 72:
										goto IL_0e0c;
									case 73:
										goto IL_0e5c;
									case 74:
										goto IL_0eac;
									case 75:
										goto IL_0efc;
									case 76:
										goto IL_0f4c;
									case 77:
										goto IL_0f9c;
									case 78:
										goto IL_0fec;
									case 79:
										goto IL_103c;
									case 80:
										goto IL_108c;
									case 81:
										goto IL_10dc;
									case 82:
										goto IL_112c;
									case 92:
										goto IL_117c;
									case 94:
										goto IL_11cc;
									default:
										goto IL_209a;
								}
								Buffer.BlockCopy(array2, 0, array, 19, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
								Move(-272f, -261f, 15f, 20001);
							}
						}
						else if (num2 <= 138)
						{
							switch (num2)
							{
								case 101:
									break;
								case 102:
									goto IL_12da;
								case 103:
									goto IL_1318;
								case 105:
									goto IL_135b;
								case 110:
									goto IL_1399;
								case 111:
									goto IL_140b;
								case 117:
									goto IL_143d;
								case 138:
									goto IL_1527;
								case 122:
									goto IL_1563;
								default:
									goto IL_209a;
							}
							打开仓库中 = true;
							Buffer.BlockCopy(array2, 0, array, 19, 2);
							Buffer.BlockCopy(array3, 0, array, 11, 2);
							Buffer.BlockCopy(array3, 0, array, 15, 2);
							ClassHcItimes.Clear();
						}
						else if (num2 <= 158)
						{
							switch (num2)
							{
								case 150:
									break;
								case 153:
									goto IL_165e;
								case 154:
									goto IL_16b9;
								case 157:
									goto IL_1714;
								case 158:
									goto IL_179d;
								case 146:
									goto IL_1826;
								default:
									goto IL_209a;
							}
							if (base.Player_Job_Level < 6)
							{
								GameMessage("只有升天以后才可以进入", 9);
								Buffer.BlockCopy(array2, 0, array, 19, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
							}
							else
							{
								Buffer.BlockCopy(array2, 0, array, 19, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
								Move(1884f, -1635f, 15f, 25100);
							}
						}
						else
						{
							int num6 = num2;
							if (num6 <= 173)
							{
								if (num6 != 170)
								{
									if (num6 != 173)
									{
										goto IL_209a;
									}
									if (base.Player_Level < 120)
									{
										GameMessage("只有等级120以上可以进入", 9);
										Buffer.BlockCopy(array2, 0, array, 19, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
									}
									else
									{
										Buffer.BlockCopy(array2, 0, array, 19, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
										Move(1987f, -2030f, 15f, 26000);
									}
								}
								else
								{
									string hex2 = "AA551B0001050022010C000A000000010000002C650000000000000000610555AA";
									byte[] array5 = Converter.hexStringToByte(hex2);
									Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array5, 5, 2);
									if (base.Client != null)
									{
										base.Client.Send(array5, array5.Length);
									}
								}
							}
							else if (num6 != 238)
							{
								if (num6 != 310)
								{
									goto IL_209a;
								}
								string hex3 = "AA551F0000B8019100100036010000F5FFFFFF0000000000000000000000000000000055AA";
								byte[] array6 = Converter.hexStringToByte(hex3);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array6, 5, 2);
								if (base.Client != null)
								{
									base.Client.Send(array6, array6.Length);
								}
								打开仓库中 = true;
								Buffer.BlockCopy(array2, 0, array, 19, 2);
								Buffer.BlockCopy(array3, 0, array, 11, 2);
								Buffer.BlockCopy(array3, 0, array, 15, 2);
								ClassHcItimes.Clear();
							}
							else
							{
								打开仓库中 = true;
								Buffer.BlockCopy(array2, 0, array, 19, 2);
								Buffer.BlockCopy(array3, 0, array, 11, 2);
								Buffer.BlockCopy(array3, 0, array, 15, 2);
								ClassHcItimes.Clear();
							}
						}
						goto IL_20c0;
					}
					DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
					Form1.WriteLine(6, "退出复制BUG11 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
					if (base.Client != null)
					{
						base.Client.Dispose();
					}
				}
				goto end_IL_0001;
			IL_103c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23800);
				goto IL_20c0;
			IL_0efc:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23600);
				goto IL_20c0;
			IL_05dd:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				if (World.Newversion >= 14 && World.Newversion <= 15)
				{
					Move(500f, 1750f, 15f, 101);
				}
				else
				{
					Move(612f, 1101f, 15f, 101);
				}
				goto IL_20c0;
			IL_0b03:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(-1f, -221f, 15f, 23001);
				goto IL_20c0;
			IL_0d6c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23200);
				goto IL_20c0;
			IL_0b53:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				if (World.Newversion >= 14 && World.Newversion <= 15)
				{
					Move(500f, 1750f, 15f, 101);
				}
				else
				{
					Move(412f, 1542f, 15f, 101);
				}
				goto IL_20c0;
			IL_0dbc:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23400);
				goto IL_20c0;
			IL_1714:
				switch (BitConverter.ToInt16(array2, 0))
				{
					case 204:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						if (base.Player_FLD_Map == 25210)
						{
							Move(117f, -267f, 15f, 25202);
						}
						else
						{
							Move(158f, -312f, 15f, 25208);
						}
						break;
					case 205:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(138f, -271f, 15f, 25205);
						break;
					case 206:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(32f, 92f, 15f, 25209);
						break;
					case 209:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(158f, 256f, 15f, 25206);
						break;
					case 210:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						if (base.Player_FLD_Map == 25209)
						{
							Move(154f, 30f, 15f, 25210);
						}
						else
						{
							Move(300f, 92f, 15f, 25207);
						}
						break;
					case 211:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(125f, -329f, 15f, 25203);
						break;
					case 195:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(124f, -244f, 15f, 25204);
						break;
				}
				goto IL_20c0;
			IL_209a:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				goto IL_20c0;
			IL_143d:
				string[] array7 = World.申请帮战元宝金币数.Split(';');
				查百宝阁元宝数();
				if (base.FLD_RXPIONT >= int.Parse(array7[0]) && base.Player_Money >= int.Parse(array7[1]))
				{
					Buffer.BlockCopy(array2, 0, array, 19, 2);
					Buffer.BlockCopy(array3, 0, array, 11, 2);
					Buffer.BlockCopy(array3, 0, array, 15, 2);
				}
				else
				{
					GameMessage("Ngân lýõòng hoãòc @CASH không ðuÒ", 9);
					Buffer.BlockCopy(array2, 0, array, 19, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				}
				goto IL_20c0;
			IL_0eac:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23400);
				goto IL_20c0;
			IL_0e5c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23500);
				goto IL_20c0;
			IL_0202:
				打开仓库中 = false;
				合成系统解锁();
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				goto IL_20c0;
			IL_0504:
				short num7 = BitConverter.ToInt16(array2, 0);
				if (num7 <= 28)
				{
					switch (num7)
					{
						case 28:
							Buffer.BlockCopy(array2, 0, array, 19, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
							Move(-850f, -800f, 15f, 701);
							break;
						case 15:
							Buffer.BlockCopy(array2, 0, array, 19, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
							Move(0f, -600f, 15f, 401);
							break;
						case 16:
							Buffer.BlockCopy(array2, 0, array, 19, 1);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
							Move(0f, -600f, 15f, 501);
							break;
					}
				}
				else
				{
					switch (num7)
					{
						case 33:
							Buffer.BlockCopy(array2, 0, array, 19, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
							Move(1630f, -1578f, 15f, 1701);
							break;
						case 34:
							Buffer.BlockCopy(array2, 0, array, 19, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
							Move(-1624f, 1561f, 15f, 1401);
							break;
						case 74:
							Buffer.BlockCopy(array2, 0, array, 19, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
							if (base.Player_Zx == 1)
							{
								Move(1308f, 1167f, 15f, 2001);
							}
							else
							{
								Move(1308f, 1167f, 15f, 2001);
							}
							break;
					}
				}
				goto IL_20c0;
			IL_0551:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(12), 0, array, 15, 2);
				发送势力战消息1();
				goto IL_20c0;
			IL_140b:
				打开仓库中 = false;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				goto IL_20c0;
			IL_1399:
				打开仓库中 = true;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				packetData = new PacketData();
				packetData.WriteShort(base.UserSessionID);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 16663, base.UserSessionID);
				}
				goto IL_20c0;
			IL_058d:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(10f, 10f, 15f, 1201);
				goto IL_20c0;
			IL_135b:
				打开仓库中 = true;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				ClassHcItimes.Clear();
				goto IL_20c0;
			IL_1318:
				打开仓库中 = true;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				ClassHcItimes.Clear();
				goto IL_20c0;
			IL_12da:
				打开仓库中 = true;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				ClassHcItimes.Clear();
				goto IL_20c0;
			IL_0d1c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23300);
				goto IL_20c0;
			IL_1527:
				打开仓库中 = true;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				ClassHcItimes.Clear();
				goto IL_20c0;
			IL_1563:
				打开仓库中 = true;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				ClassHcItimes.Clear();
				goto IL_20c0;
			IL_04c4:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				打开仓库中 = true;
				打开仓库();
				打开综合仓库();
				goto IL_20c0;
			IL_20c0:
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				goto end_IL_0001;
			IL_11cc:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(-900f, 145f, 15f, 6001);
				goto IL_20c0;
			IL_165e:
				if (base.Player_Job_Level < 6)
				{
					GameMessage("只有升天以后才可以进入", 9);
					Buffer.BlockCopy(array2, 0, array, 19, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				}
				else
				{
					Buffer.BlockCopy(array2, 0, array, 19, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
					Move(-360f, -363f, 15f, 25201);
				}
				goto IL_20c0;
			IL_10dc:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23900);
				goto IL_20c0;
			IL_092c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(-302f, 288f, 15f, 2341);
				goto IL_20c0;
			IL_0f4c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23500);
				goto IL_20c0;
			IL_112c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23800);
				goto IL_20c0;
			IL_0f9c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23700);
				goto IL_20c0;
			IL_117c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23050);
				goto IL_20c0;
			IL_1826:
				打开仓库中 = true;
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(array3, 0, array, 11, 2);
				Buffer.BlockCopy(array3, 0, array, 15, 2);
				ClassHcItimes.Clear();
				goto IL_20c0;
			IL_108c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23700);
				goto IL_20c0;
			IL_097c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(1562f, 1194f, 15f, 5001);
				goto IL_20c0;
			IL_0fec:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23600);
				goto IL_20c0;
			IL_0e0c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23300);
				goto IL_20c0;
			IL_16b9:
				if (base.Player_Job_Level < 6)
				{
					GameMessage("只有升天以后才可以进入", 9);
					Buffer.BlockCopy(array2, 0, array, 19, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				}
				else
				{
					Buffer.BlockCopy(array2, 0, array, 19, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
					Move(117f, -267f, 15f, 25202);
				}
				goto IL_20c0;
			IL_179d:
				switch (BitConverter.ToInt16(array2, 0))
				{
					case 204:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						if (base.Player_FLD_Map == 25210)
						{
							Move(154f, 30f, 15f, 25210);
						}
						else
						{
							Move(300f, 92f, 15f, 25207);
						}
						break;
					case 205:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(124f, -244f, 15f, 25204);
						break;
					case 206:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(158f, -312f, 15f, 25208);
						break;
					case 209:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(138f, -271f, 15f, 25205);
						break;
					case 210:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						if (base.Player_FLD_Map == 25209)
						{
							Move(32f, 92f, 15f, 25209);
						}
						else
						{
							Move(158f, 256f, 15f, 25206);
						}
						break;
					case 211:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(117f, -267f, 15f, 25202);
						break;
					case 195:
						Buffer.BlockCopy(array2, 0, array, 19, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
						Move(125f, -329f, 15f, 25203);
						break;
				}
				goto IL_20c0;
			IL_0bdc:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23100);
				goto IL_20c0;
			IL_0ccc:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23100);
				goto IL_20c0;
			IL_0c2c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23001);
				goto IL_20c0;
			IL_0c7c:
				Buffer.BlockCopy(array2, 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
				Move(0f, -10f, 15f, 23200);
				goto IL_20c0;
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开商店 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 打开物品(byte[] data, int length)
		{
			string[] array = World.监狱地图.Trim().Split(',');
			if (base.Player_FLD_Map == int.Parse(array[0]) && base.Player_FLD_SE < 0)
			{
				GameMessage("Baòn ðang õÒ trong tuÌ, không ðýõòc pheìp sýÒ duòng", 10, "Cai nguòc");
			}
			else if (base.Player_FLD_HP > 0)
			{
				PacketVerify(data, length);
				if (!打开仓库中 && (PlayerShop == null || !PlayerShop.个人商店是否开启))
				{
					try
					{
						byte[] dst = new byte[4];
						Buffer.BlockCopy(data, 15, dst, 0, 4);
						int num = data[11];
						int num2 = data[12];
						switch (num)
						{
							case 0:
								if (num2 != 14 || Pet == null)
								{
									int num4 = 0;
									while (true)
									{
										if (num4 >= 36)
										{
											return;
										}
										if (BitConverter.ToInt32(Item_In_Bag[num4].Get_Byte_Item_PID, 0) == 0)
										{
											break;
										}
										num4++;
									}
									if (Item_In_Bag[num4].FLD_PID < 600000000 || Item_In_Bag[num4].FLD_PID >= 700000000)
									{
										Item_In_Bag[num4].Byte_Item = Item_Wear[num2].Byte_Item;
										Item_Wear[num2].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
										更换装备位置(num, num2, 1, num4, Item_In_Bag[num4].Byte_Item, 1);
										Update_Equipment_Effectiveness();
										Update_Character_Wear_Item();
										UpdatePowersAndStatus();
										Update_Item_In_Bag();
										Update_Money_Weight();
										Update_HP_MP_SP();
									}
								}
								break;
							case 1:
								if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 0)
								{
									if (Item_In_Bag[num2].FLD_PID == 8000008)
									{
										if (World.Newversion >= 13 && Check_kepskill == 1 && (int)DateTime.Now.Subtract(time_PK).TotalMilliseconds > 100)
										{
											time_PK = DateTime.Now;
											Thread.Sleep(100);
											行走状态(BitConverter.GetBytes(1), 1);
											CheckHackSpeed_Kep_Skill = 1;
										}
										else
										{
											GameMessage("ChiÒ coì thêÒ sýÒ duòng luìc PK", 9);
										}
									}
									else
									{
										if (!Item_In_Bag[num2].LockMove)
										{
											ItmeClass itmeClass3 = World.Itme[BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0)];
											if (itmeClass3.FLD_RESIDE2 >= 1 && itmeClass3.FLD_RESIDE2 <= 15)
											{
												if (itmeClass3.FLD_LEVEL <= base.Player_Level && (itmeClass3.FLD_ZX == 0 || itmeClass3.FLD_ZX == base.Player_Zx) && (itmeClass3.FLD_RESIDE1 == 0 || itmeClass3.FLD_RESIDE1 == base.Player_Job) && (itmeClass3.FLD_JOB_LEVEL == 0 || itmeClass3.FLD_JOB_LEVEL <= base.Player_Job_Level) && (itmeClass3.FLD_SEX == 0 || itmeClass3.FLD_SEX == base.Player_Sex) && (itmeClass3.FLD_XWJD < 1 || itmeClass3.FLD_XWJD <= base.人物武勋阶段))
												{
													ItmeClass itmeClass4 = World.Itme[BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0)];
													if (BitConverter.ToInt32(Item_Wear[itmeClass4.FLD_RESIDE2 - 1].Get_Byte_Item_PID, 0) == 0)
													{
														Item_Wear[itmeClass4.FLD_RESIDE2 - 1].Byte_Item = Item_In_Bag[num2].Byte_Item;
														Item_In_Bag[num2].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
														更换装备位置(num, num2, 0, itmeClass4.FLD_RESIDE2 - 1, Item_Wear[itmeClass4.FLD_RESIDE2 - 1].Byte_Item, 1);
														Update_Character_Wear_Item();
														Update_Equipment_Effectiveness();
														UpdatePowersAndStatus();
														Update_Item_In_Bag();
														Update_Money_Weight();
														Update_HP_MP_SP();
													}
												}
											}
											else if (itmeClass3.FLD_RESIDE2 == 17)
											{
												开箱(data);
											}
											else if (itmeClass3.FLD_RESIDE2 == 19)
											{
												气功书(data);
											}
											else if (itmeClass3.FLD_RESIDE2 == 20)
											{
												打开物品触发器(data);
											}
											else
											{
												吃药(data);
											}
										}
										Update_Item_In_Bag();
										Update_Money_Weight();
									}
								}
								break;
							case 60:
								if (Pet.宠物装备栏[num2].FLD_PID >= 600000000 && Pet.宠物装备栏[num2].FLD_PID < 700000000 && BitConverter.ToInt32(Pet.宠物装备栏[num2].Get_Byte_Item_PID, 0) != 0 && !Pet.宠物装备栏[num2].LockMove)
								{
									ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(Pet.宠物装备栏[num2].Get_Byte_Item_PID, 0)];
									if (itmeClass.FLD_RESIDE2 >= 23 && itmeClass.FLD_RESIDE2 <= 25)
									{
										if (itmeClass.FLD_LEVEL <= Pet.Pet_FLD_LEVEL && (itmeClass.FLD_RESIDE1 == 6 || itmeClass.FLD_RESIDE1 - 6 == Pet.FLD_JOB))
										{
											ItmeClass itmeClass2 = World.Itme[BitConverter.ToInt32(Pet.宠物装备栏[num2].Get_Byte_Item_PID, 0)];
											int num3 = 0;
											if (itmeClass2.FLD_RESIDE2 == 23)
											{
												num3 = 0;
											}
											else if (itmeClass2.FLD_RESIDE2 == 24)
											{
												num3 = 3;
											}
											else if (itmeClass2.FLD_RESIDE2 == 25)
											{
												num3 = ((BitConverter.ToInt32(Pet.宠物以装备[1].Get_Byte_Item_PID, 0) == 0) ? 1 : 2);
											}
											if (BitConverter.ToInt32(Pet.宠物以装备[num3].Get_Byte_Item_PID, 0) == 0)
											{
												Pet.宠物以装备[num3].Byte_Item = Pet.宠物装备栏[num2].Byte_Item;
												Pet.宠物装备栏[num2].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
												更换装备位置(num, num2, 59, num3, Pet.宠物以装备[num3].Byte_Item, 1);
												if (Pet != null)
												{
													Pet.method_5(this);
													Pet.保存数据();
													更新灵兽武功和状态();
												}
												Update_Character_Wear_Item();
												Update_Equipment_Effectiveness();
												UpdatePowersAndStatus();
												Update_Item_In_Bag();
												Update_Money_Weight();
												Update_HP_MP_SP();
											}
										}
									}
									else if (itmeClass.FLD_RESIDE2 == 17)
									{
										开箱(data);
									}
									else if (itmeClass.FLD_RESIDE2 == 19)
									{
										气功书(data);
									}
									else if (itmeClass.FLD_RESIDE2 == 20)
									{
										打开物品触发器(data);
									}
									else
									{
										吃药(data);
									}
								}
								break;
						}
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "打开物品出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
					}
				}
			}
		}

		public void 打开物品触发器(byte[] data)
		{
			try
			{
				if (!base.PlayerIsDead)
				{
					int num = data[12];
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					Buffer.BlockCopy(data, 15, array, 0, 4);
					Buffer.BlockCopy(data, 23, array2, 0, 4);
					int num2 = BitConverter.ToInt32(array, 0);
					BitConverter.ToInt32(array2, 0);
					if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == num2 && World.Itme.TryGetValue(num2, out ItmeClass _) && BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 0)
					{
						try
						{
							if (World.脚本.打开物品事件 != null)
							{
								object[] args = new object[4]
								{
									base.UserSessionID,
									num2,
									num,
									BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0)
								};
								World.脚本.打开物品事件.Call(args);
							}
						}
						catch (Exception ex)
						{
							Form1.WriteLine(2, "OpenItmeTrigGer(" + base.UserSessionID + "," + num2 + "," + num + "," + BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0) + ")");
							Form1.WriteLine(2, "打开物品触发器1出错--" + ex.Message);
						}
					}
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(2, "打开物品触发器2出错--" + ex2.Message);
			}
		}

		public void giamDoBenVuKhi()
		{
			int num = 0;
			int[] array = new int[1]
			{
				3
			};
			int[] array2 = array;
			foreach (int num2 in array2)
			{
				if (World.Itme.TryGetValue((int)Item_Wear[num2].FLD_PID, out ItmeClass value) && value.FLD_CJL != 0 && Item_Wear[num2].FLD_持久力 > 0)
				{
					Item_Wear[num2].FLD_持久力 = Item_Wear[num2].FLD_持久力 - 1;
					if (Item_Wear[num2].FLD_持久力 == 100)
					{
						num = 1;
					}
					if (Item_Wear[num2].FLD_持久力 == 0)
					{
						num = 2;
					}
				}
			}
			if (DateTime.Now.Subtract(time_UpdateItemVH).TotalMilliseconds > 300000.0)
			{
				time_UpdateItemVH = DateTime.Now;
				Update_Equipment_Effectiveness();
			}
			switch (num)
			{
				case 1:
					Initialize_Equip_Item();
					break;
				case 2:
					Update_Character_Wear_Item();
					Initialize_Equip_Item();
					UpdatePowersAndStatus();
					break;
			}
		}

		public void giamDoBenTrangBi()
		{
			int num = 0;
			int[] array = new int[10]
			{
				0,
				1,
				2,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			};
			int[] array2 = array;
			foreach (int num2 in array2)
			{
				if (World.Itme.TryGetValue((int)Item_Wear[num2].FLD_PID, out ItmeClass value) && value.FLD_CJL != 0 && Item_Wear[num2].FLD_持久力 > 0)
				{
					Item_Wear[num2].FLD_持久力 = Item_Wear[num2].FLD_持久力 - 1;
					if (Item_Wear[num2].FLD_持久力 == 100)
					{
						num = 1;
					}
					if (Item_Wear[num2].FLD_持久力 == 0)
					{
						num = 2;
					}
				}
			}
			if (DateTime.Now.Subtract(time_UpdateItemVH).TotalMilliseconds > 300000.0)
			{
				time_UpdateItemVH = DateTime.Now;
				Update_Equipment_Effectiveness();
			}
			switch (num)
			{
				case 1:
					Initialize_Equip_Item();
					break;
				case 2:
					Update_Character_Wear_Item();
					Initialize_Equip_Item();
					UpdatePowersAndStatus();
					break;
			}
		}

		public void 打开综合仓库()
		{
			try
			{
				for (int i = 0; i < 60; i++)
				{
					DateTime dateTime = new DateTime(1970, 1, 1, 7, 0, 0);
					if (公共仓库[i].FLD_DAY1 != 0 && 公共仓库[i].FLD_DAY2 != 0 && DateTime.Now.Subtract(dateTime.AddSeconds(公共仓库[i].FLD_DAY2)).TotalSeconds >= 0.0)
					{
						公共仓库[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
				}
				PacketData packetData = new PacketData();
				packetData.WriteInt(5);
				packetData.WriteInt(5);
				packetData.WriteInt(9);
				for (int i = 0; i < 60; i++)
				{
					if (BitConverter.ToInt32(公共仓库[i].Item_Amount, 0) == 0)
					{
						公共仓库[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
					else
					{
						检查物品系统("公共仓库", ref 公共仓库[i]);
					}
					if (公共仓库[i].FLD_FJ_中级附魂 <= 22 && 公共仓库[i].FLD_FJ_中级附魂 >= 21 && 公共仓库[i].FLD_FJ_觉醒 > 0)
					{
						公共仓库[i].物品_中级附魂_追加_觉醒 = 公共仓库[i].FLD_FJ_中级附魂 - 20;
					}
					packetData.Write(公共仓库[i].GetByte(), 0, World.单个物品大小);
				}
				packetData.WriteLong(base.综合仓库钱数);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 38400, base.UserSessionID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "打开综合仓库出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public int 得到个人仓库空位(int iii)
		{
			for (int i = 0; i < 60; i++)
			{
				if (iii == 3)
				{
					if (BitConverter.ToInt32(个人仓库[i].Get_Byte_Item_PID, 0) == 0)
					{
						return i;
					}
				}
				else if (BitConverter.ToInt32(公共仓库[i].Get_Byte_Item_PID, 0) == 0)
				{
					return i;
				}
			}
			return -1;
		}

		public void 得到门徽(byte[] data, int length)
		{
			PacketReader packetReader = new PacketReader(data, length, fixedSize: false);
			packetReader.Seek(11, SeekOrigin.Begin);
			int num = packetReader.ReadInt32();
			Console.WriteLine(base.UserName + "得到门徽 " + num);
			byte[] array = RxjhClass.得到门徽(num);
			if (array != null)
			{
				发送门徽2(array, num);
			}
		}

		public bool 得到任务物品(int 物品ID, int 物品数量)
		{
			for (int i = 0; i < Quest_Item.Length; i++)
			{
				if (Quest_Item[i].PID == 物品ID && Quest_Item[i].Item_Amount >= 物品数量)
				{
					return true;
				}
			}
			return false;
		}

		public void 得到任务物品(int 物品位置, int 物品ID, int 物品数量)
		{
			using (PacketData packetData = new PacketData())
			{
				packetData.WriteInt(物品位置);
				packetData.WriteInt(0);
				packetData.WriteInt(物品ID);
				packetData.WriteInt(0);
				packetData.WriteInt(物品数量);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 33280, base.UserSessionID);
				}
			}
		}

		public void 登记玉连环()
		{
			string hex = "AA553300002C01C600240002000000E5EA0D0031BD0D0031BD0D0031BD0D00E6EA0D0031BD0D0031BD0D0031BD0D0000000000000055AA";
			byte[] dst = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, dst, 5, 2);
			玉连环.Clear();
			for (int i = 0; i < 6; i++)
			{
				玉连环.Add(900401);
			}
			if (base.Client == null)
			{
			}
		}

		public void 登记玉连环(byte[] data, int length)
		{
			string hex = "AA553300002C01C600240002000000E5EA0D00000000000000000000000000E6EA0D0000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(data, 11, array, 19, 12);
			Buffer.BlockCopy(data, 23, array, 35, 12);
			玉连环.Clear();
			int num = 0;
			while (true)
			{
				bool flag = true;
				if (num >= 6)
				{
					break;
				}
				byte[] array2 = new byte[4];
				try
				{
					Buffer.BlockCopy(data, num * 4 + 11, array2, 0, 4);
					if (BitConverter.ToInt32(array2, 0) != 0)
					{
						玉连环.Add(BitConverter.ToInt32(array2, 0));
					}
				}
				catch
				{
				}
				num++;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send单包(array, array.Length);
			}
		}

		public void 动作表情(int 表情ID)
		{
			string hex = "AA5510000000002400010064000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(表情ID), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 动作表情(byte[] data, int length)
		{
			动作表情(data[11]);
		}

		public void 队长管理(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 13, array, 0, 2);
				int 人物ID = BitConverter.ToInt32(array, 0);
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 11, array2, 0, 1);
				switch (BitConverter.ToInt32(array2, 0))
				{
					case 1:
						if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value2))
						{
							Players players2 = Select_Character_ID(人物ID);
							if (players2 != null)
							{
								value2.委任队长(this, players2);
							}
						}
						break;
					case 2:
						if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
						{
							Players players = Select_Character_ID(人物ID);
							if (players != null)
							{
								value.退出(players);
							}
						}
						break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "队长管理出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 对方取消交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				string hex = "AA5543000000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 11, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 15, 4);
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
					Wait_Trade = 0;
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send(array, array.Length);
					交易.交易人.Wait_Trade = 0;
				}
				if (交易 != null)
				{
					交易.关闭交易();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "对方取消交易请求出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex.Message);
			}
		}

		public void 对方取消组队(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 15, array, 0, 2);
				int 人物ID = BitConverter.ToInt32(array, 0);
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 13, array2, 0, 1);
				switch (BitConverter.ToInt32(array2, 0))
				{
					case 1:
						{
							Players players2 = Select_Character_ID(人物ID);
							if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value2))
							{
								value2.邀请人 = null;
								if (value2.List_Party.Count >= 8)
								{
									GameMessage("Party full. Maximum 8 player", 9);
								}
								else if (!value2.List_Party.ContainsKey(base.UserSessionID))
								{
									value2.Type_Share_ItemDrop = 1;
									PacketData packetData = new PacketData();
									packetData.WriteShort(1);
									packetData.WriteShort(value2.Type_Share_ItemDrop);
									value2.List_Party.Add(base.UserSessionID, this);
									value2.加入队员提示(this);
									Party_Status = 1;
									base.Client.SendPak(packetData, 11008, base.UserSessionID);
									GameMessage(value2.队长 + " thay ðôÒi kiêÒu chia seÒ laÌ [Theo thýì týò]", 6);
									players2.Party_Status = 1;
									players2.Client.SendPak(packetData, 11008, players2.UserSessionID);
									players2.GameMessage(value2.队长 + " thay ðôÒi kiêÒu chia seÒ laÌ [Theo thýì týò]", 6);
									int num = 0;
									foreach (Players value3 in value2.List_Party.Values)
									{
										num += value3.Player_Level;
									}
									foreach (Players value4 in value2.List_Party.Values)
									{
										value4.Level_Party = num / value2.List_Party.Count;
									}
								}
							}
							break;
						}
					case 2:
						{
							string hex = "AA55130001F5013500040001000200000000000000FF3055AA";
							byte[] array3 = Converter.hexStringToByte(hex);
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
							if (base.Client != null)
							{
								base.Client.Send(array3, array3.Length);
							}
							if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
							{
								Players players = Select_Character_ID(人物ID);
								if (players != null)
								{
									if (players.Client != null)
									{
										players.Client.Send(array3, array3.Length);
									}
									value.邀请人 = null;
									if (value.List_Party.Count <= 1)
									{
										value.Dispose();
										World.PartyClass.Remove(Party_ID);
										players.Party_ID = 0;
										Party_ID = 0;
									}
									else
									{
										Party_ID = 0;
									}
								}
							}
							break;
						}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "对方取消组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 兑换确认(物品兑换类 dhuan)
		{
			string[] array = World.升级会员需要属性.Split(',');
			if (dhuan.武勋 != 0)
			{
				base.Player_WuXun += dhuan.武勋;
				GameMessage("得到武勋" + dhuan.武勋.ToString() + "点！", 20, "兑换物品");
				UpdatePowersAndStatus();
			}
			if (dhuan.元宝 != 0)
			{
				查百宝阁元宝数();
				Add_Del_Rxpiont(dhuan.元宝, 1);
				GameMessage("恭喜你获得" + dhuan.元宝.ToString() + "个元宝！", 10, "兑换物品");
				Save_data_Rxpiont();
			}
			if (dhuan.生命 != 0)
			{
				base.奖励_追加_生命 += dhuan.生命;
				UpdatePowersAndStatus();
				GameMessage("得到" + dhuan.生命.ToString() + "生命值！", 20, "兑换物品");
			}
			if (dhuan.攻击 != 0 && base.奖励_追加_攻击 < long.Parse(array[0]))
			{
				base.奖励_追加_攻击 += dhuan.攻击;
				UpdatePowersAndStatus();
				GameMessage("得到" + dhuan.攻击.ToString() + "攻击值！", 20, "兑换物品");
			}
			if (dhuan.防御 != 0 && base.奖励_追加_防御 < long.Parse(array[1]))
			{
				base.奖励_追加_防御 += dhuan.防御;
				UpdatePowersAndStatus();
				GameMessage("得到" + dhuan.防御.ToString() + "防御值！", 20, "兑换物品");
			}
			if (dhuan.回避 != 0)
			{
				base.奖励_追加_回避 += dhuan.回避;
				UpdatePowersAndStatus();
				GameMessage("得到" + dhuan.回避.ToString() + "回避值！", 20, "兑换物品");
			}
			if (dhuan.命中 != 0)
			{
				base.奖励_追加_命中 += dhuan.命中;
				UpdatePowersAndStatus();
				GameMessage("得到" + dhuan.命中.ToString() + "命中值！", 20, "兑换物品");
			}
			if (dhuan.内功 != 0)
			{
				base.奖励_追加_内功 += dhuan.内功;
				UpdatePowersAndStatus();
				GameMessage("得到" + dhuan.内功.ToString() + "内功值！", 20, "兑换物品");
			}
			if (dhuan.套装ID != 0)
			{
				int num = 得到包裹空位位置();
				if (num == -1)
				{
					GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20, "兑换物品");
					return;
				}
				byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
				byte[] 物品属性 = new byte[56];
				增加物品(bytes, BitConverter.GetBytes(dhuan.套装ID), num, BitConverter.GetBytes(1), 物品属性, 绑定: false);
				GameMessage("恭喜你兑换一个大礼包！", 20, "兑换物品");
			}
			if (dhuan.金钱 != "")
			{
				base.Player_Money += long.Parse(dhuan.金钱);
				GameMessage("得到游戏币" + dhuan.金钱 + "两！", 20, "兑换物品");
				得到钱的提示(uint.Parse(dhuan.金钱));
				Update_Item_In_Bag();
				Update_Money_Weight();
			}
			if (dhuan.单件物品 != "")
			{
				int num2 = 得到包裹空位位置();
				if (num2 == -1)
				{
					GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20, "兑换物品");
					return;
				}
				string[] array2 = dhuan.单件物品.Split(';');
				百宝增加物品带属性(int.Parse(array2[0]), num2, int.Parse(array2[1]), int.Parse(array2[2]), int.Parse(array2[3]), int.Parse(array2[4]), int.Parse(array2[5]), int.Parse(array2[6]), int.Parse(array2[7]), int.Parse(array2[8]), int.Parse(array2[9]), int.Parse(array2[10]), int.Parse(array2[11]));
				GameMessage("恭喜你获得一件属性装备！", 20, "兑换物品");
			}
		}

		public void 发送九转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
				case 1:
					value = ((base.Player_Zx == 1) ? 1000001032 : 1000001039);
					break;
				case 2:
					value = ((base.Player_Zx == 1) ? 1000001033 : 1000001040);
					break;
				case 3:
					value = ((base.Player_Zx == 1) ? 1000001034 : 1000001041);
					break;
				case 4:
					value = ((base.Player_Zx == 1) ? 1000001035 : 1000001042);
					break;
				case 5:
					value = ((base.Player_Zx == 1) ? 1000001036 : 1000001043);
					break;
				case 6:
					value = ((base.Player_Zx == 1) ? 1000001037 : 1000001044);
					break;
				case 7:
					value = ((base.Player_Zx == 1) ? 1000001038 : 1000001045);
					break;
				case 8:
					value = 1000001046;
					break;
				case 9:
					value = 1000001047;
					break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送八转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
				case 1:
					value = ((base.Player_Zx == 1) ? 1000000464 : 1000000470);
					break;
				case 2:
					value = ((base.Player_Zx == 1) ? 1000000465 : 1000000471);
					break;
				case 3:
					value = ((base.Player_Zx == 1) ? 1000000466 : 1000000472);
					break;
				case 4:
					value = ((base.Player_Zx == 1) ? 1000000467 : 1000000473);
					break;
				case 5:
					value = ((base.Player_Zx == 1) ? 1000000468 : 1000000474);
					break;
				case 6:
					value = ((base.Player_Zx == 1) ? 1000000469 : 1000000475);
					break;
				case 7:
					value = ((base.Player_Zx == 1) ? 1000000496 : 1000000499);
					break;
				case 8:
					value = 1000000569;
					break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送保存土灵符数据(byte[] name, byte[] 保存ID, CoordinateClass 坐标)
		{
			try
			{
				string hex = "AA5532000000000D10230001000A003132333400000000000000000000006500000054A8034400007041342FCB44000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(保存ID, 0, array, 13, 2);
				Buffer.BlockCopy(name, 0, array, 15, name.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Map), 0, array, 30, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_X), 0, array, 34, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Z), 0, array, 38, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(坐标.Rxjh_Y), 0, array, 42, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送保存土灵符数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送打坐数据(int Signal)
		{
			try
			{
				string hex = "AA55270001000025001800000000000000000000000000000000000000000000000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.Userid);
				Buffer.BlockCopy(BitConverter.GetBytes(Signal), 0, array, 21, 1);
				Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (World.GjServerConnect != null)
				{
					World.GjServerConnect.Send(array, 45);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送打坐数据出错:" + ex.Message);
			}
		}

		public override void SendRangeOfPackets(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_发送当前范围广播数据");
			}
			try
			{
				if (PlayList != null)
				{
					Queue queue = Queue.Synchronized(new Queue());
					foreach (Players value in PlayList.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "发送当前范围广播数据");
						}
						Players players = (Players)queue.Dequeue();
						if (players.Client != null && players.Client.Running)
						{
							players.Client.Send(data, length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送当前范围广播数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public override void SendRangeOfPackets(PacketData pak, int id, int wordid)
		{
			try
			{
				if (PlayList != null)
				{
					Queue queue = Queue.Synchronized(new Queue());
					foreach (Players value in PlayList.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "发送当前范围广播数据");
						}
						Players players = (Players)queue.Dequeue();
						if (players.Client != null && players.Client.Running)
						{
							players.Client.SendPak(pak, id, wordid);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送当前范围广播数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送当前范围广播数据多包(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_发送当前范围广播数据多包");
			}
			try
			{
				if (PlayList != null)
				{
					Queue queue = Queue.Synchronized(new Queue());
					foreach (Players value in PlayList.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "发送当前范围广播数据多包");
						}
						Players current = (Players)queue.Dequeue();
						if (current.Client != null && current.Client.Running)
						{
							current.Client.Send多包(data, length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送当前范围广播数据出错多包![" + base.Userid + "]-[" + base.UserName + "]" + ex);
			}
		}

		public void 发送攻击人物数据(Players Play, int 攻击对象人物全服ID, int 武功ID, int 攻击力, int 攻击类型, int 最后血量, NpcClass npc = null)
		{
			try
			{
				Players players = null;
				if (攻击对象人物全服ID < 10000)
				{
					players = FindPlayer(攻击对象人物全服ID);
				}
				if (World.TblKongfu.TryGetValue(武功ID, out MartialArts value))
				{
					int num = 0;
					if (players != null && players.Player_Job == 11)
					{
						long val = (long)((double)攻击力 * (5.0 + 1.0 * players.KhiCong_JOB11_0) / 100.0);
						val = Math.Min(val, players.Player_Shield);
						num = (int)val;
					}
					using (PacketData packetData = new PacketData())
					{
						packetData.WriteShort(攻击对象人物全服ID);
						if (Play.Player_Job == 4 && BitConverter.ToInt32(Play.Item_Wear[12].Get_Byte_Item_PID, 0) != 0)
						{
							if (World.Newversion >= 11)
							{
								packetData.WriteShort(1);
								packetData.WriteInt(BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0));
							}
							else
							{
								packetData.WriteShort(0);
							}
							int num2 = BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0);
							if (num2 <= 0)
							{
								Play.Item_Wear[12].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
								Play.Initialize_Equip_Item();
							}
							else
							{
								Play.Item_Wear[12].Item_Amount = BitConverter.GetBytes(num2);
							}
						}
						else if (World.Newversion >= 11)
						{
							packetData.WriteShort(1);
							packetData.WriteInt(0);
						}
						else
						{
							packetData.WriteShort(0);
						}
						packetData.WriteInt(攻击力 - num);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						if (World.Newversion >= 15)
						{
							packetData.WriteInt(num);
							packetData.WriteInt(0);
							packetData.WriteInt(0);
							packetData.WriteInt(0);
							packetData.WriteInt(0);
						}
						packetData.WriteInt(武功ID);
						packetData.WriteInt(value.FLD_EFFERT);
						if (npc != null)
						{
							packetData.WriteFloat(npc.RxjhX);
							packetData.WriteFloat(npc.RxjhZ);
							packetData.WriteFloat(npc.RxjhY);
						}
						else
						{
							packetData.WriteFloat(Play.Player_FLD_X);
							packetData.WriteFloat(Play.Player_FLD_Z);
							packetData.WriteFloat(Play.Player_FLD_Y);
						}
						packetData.WriteByte(0);
						packetData.WriteByte(1);
						packetData.WriteShort(0);
						packetData.WriteInt(最后血量);
						if (攻击力 < 1)
						{
							packetData.WriteInt(1);
						}
						else
						{
							packetData.WriteInt(0);
						}
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						if (Pet == null)
						{
							packetData.WriteInt(-1);
						}
						else
						{
							packetData.WriteInt(0);
						}
						if (base.Player_Job == 9)
						{
							if (攻击力 >= 0)
							{
								Random random = new Random(World.GetRandomSeed());
								double num3 = random.Next(0, 100);
								if (武功ID != 2000401 && 武功ID != 2000402)
								{
									if (武功ID / 100 == 20091)
									{
										packetData.WriteInt(4);
									}
									else if (攻击对象人物全服ID > 10000)
									{
										if (num3 <= base.KCDHL_HHDP_2 && Timer_AutoAttack != null)
										{
											Timer_AutoAttack.Enabled = false;
											Timer_AutoAttack.AutoReset = false;
											Timer_AutoAttack.Dispose();
											Timer_AutoAttack = null;
										}
										if (num3 <= base.KCDHL_HHDP_2)
										{
											packetData.WriteInt(1);
										}
										else
										{
											packetData.WriteInt(0);
										}
									}
									else if (num3 <= base.KCDHL_HHDP_2)
									{
										Check_Skill_Combo_DHL = true;
										packetData.WriteInt(2);
									}
									else
									{
										packetData.WriteInt(0);
									}
								}
								else if (players != null && players.异常状态.ContainsKey(28))
								{
									Check_Skill_Combo_DHL = true;
									packetData.WriteInt(3);
								}
								else
								{
									packetData.WriteInt(5);
								}
							}
							else
							{
								packetData.WriteInt(0);
							}
						}
						else
						{
							packetData.WriteInt(0);
						}
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(0);
						packetData.WriteInt(ComboQuyenSu);
						if (ComboQuyenSu > 0 && 武功ID != 3000101 && 武功ID != 3000105 && (value.FLD_AT != 0 || value.FLD_EFFERT == 314))
						{
							ComboQuyenSu = 0;
						}
						if (base.Client != null)
						{
							base.Client.SendPak(packetData, 2560, base.UserSessionID);
						}
						SendRangeOfPackets(packetData, 2560, base.UserSessionID);
					}
				}
				else
				{
					int num4 = 0;
					int num5 = 0;
					int num6 = 0;
					int num7 = 0;
					int num8 = 0;
					int value2 = 1;
					int num9 = 攻击力;
					int num10 = 0;
					int num11 = 0;
					int num12 = 0;
					int num13 = 0;
					if (攻击类型 != 129 && 攻击类型 != 128)
					{
						int num14;
						switch (攻击类型)
						{
							default:
								num14 = ((攻击类型 == 133) ? 1 : 0);
								break;
							case 132:
								num14 = 1;
								break;
							case 130:
							case 131:
								num14 = 1;
								break;
						}
						if (num14 == 0)
						{
							if (Play.Player_Job == 6)
							{
								num9 = 0;
								num10 = 0;
								if (攻击力 != 0)
								{
									num9 = new Random(World.GetRandomSeed()).Next(攻击力 / 2 - 20, 攻击力 / 2 + 20);
									num10 = 攻击力 - num9;
								}
								value2 = 2;
							}
						}
						else if (攻击力 != 0)
						{
							Random random2 = new Random(World.GetRandomSeed());
							num9 = random2.Next(攻击力 / 5 - 20, 攻击力 / 5 + 20);
							num10 = random2.Next((攻击力 - num9) / 4 - 20, (攻击力 - num9) / 4 + 20);
							num11 = random2.Next((攻击力 - num9 - num10) / 3 - 20, (攻击力 - num9 - num10) / 3 + 20);
							num12 = random2.Next((攻击力 - num9 - num10 - num11) / 2 - 20, (攻击力 - num9 - num10 - num11) / 2 + 20);
							num13 = 攻击力 - num9 - num10 - num11 - num12;
							value2 = 5;
						}
					}
					else if (Play.Player_Job == 6)
					{
						if (攻击力 != 0)
						{
							Random random3 = new Random(World.GetRandomSeed());
							num9 = random3.Next(攻击力 / 5 - 20, 攻击力 / 5 + 20);
							num10 = random3.Next((攻击力 - num9) / 4 - 20, (攻击力 - num9) / 4 + 20);
							num11 = random3.Next((攻击力 - num9 - num10) / 3 - 20, (攻击力 - num9 - num10) / 3 + 20);
							num12 = random3.Next((攻击力 - num9 - num10 - num11) / 2 - 20, (攻击力 - num9 - num10 - num11) / 2 + 20);
							num13 = 攻击力 - num9 - num10 - num11 - num12;
							value2 = 5;
						}
					}
					else if (Play.Player_Job == 10 && 攻击类型 == 129)
					{
						if (攻击力 != 0)
						{
							Random random3 = new Random(World.GetRandomSeed());
							num9 = random3.Next(攻击力 / 4 - 20, 攻击力 / 4 + 20);
							num10 = random3.Next((攻击力 - num9) / 3 - 20, (攻击力 - num9) / 3 + 20);
							num11 = random3.Next((攻击力 - num9 - num10) / 2 - 20, (攻击力 - num9 - num10) / 2 + 20);
							num12 = 攻击力 - num9 - num10 - num11;
							value2 = 4;
						}
					}
					else
					{
						Random random4 = new Random(World.GetRandomSeed());
						num9 = random4.Next(攻击力 / 3 - 20, 攻击力 / 3 + 20);
						num10 = random4.Next((攻击力 - num9) / 2 - 20, (攻击力 - num9) / 2 + 20);
						num11 = 攻击力 - num9 - num10;
						value2 = 3;
					}
					if (players != null && players.Player_Job == 11)
					{
						long val = (long)((double)num9 * (5.0 + 1.0 * players.KhiCong_JOB11_0) / 100.0);
						val = Math.Min(val, players.Player_Shield);
						num4 = (int)val;
						val = (long)((double)num10 * (5.0 + 1.0 * players.KhiCong_JOB11_0) / 100.0);
						val = Math.Min(val, players.Player_Shield);
						num5 = (int)val;
						val = (long)((double)num11 * (5.0 + 1.0 * players.KhiCong_JOB11_0) / 100.0);
						val = Math.Min(val, players.Player_Shield);
						num6 = (int)val;
						val = (long)((double)num12 * (5.0 + 1.0 * players.KhiCong_JOB11_0) / 100.0);
						val = Math.Min(val, players.Player_Shield);
						num7 = (int)val;
						val = (long)((double)num13 * (5.0 + 1.0 * players.KhiCong_JOB11_0) / 100.0);
						val = Math.Min(val, players.Player_Shield);
						num8 = (int)val;
					}
					using (PacketData packetData2 = new PacketData())
					{
						packetData2.WriteShort(攻击对象人物全服ID);
						if (World.Newversion >= 11)
						{
							packetData2.WriteInt(1);
						}
						if (Play.Player_Job == 4 && BitConverter.ToInt32(Play.Item_Wear[12].Get_Byte_Item_PID, 0) != 0)
						{
							packetData2.WriteShort(BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0));
							int num2 = BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0);
							if (num2 <= 0)
							{
								Play.Item_Wear[12].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
								Play.Initialize_Equip_Item();
							}
							else
							{
								Play.Item_Wear[12].Item_Amount = BitConverter.GetBytes(num2);
							}
						}
						else
						{
							packetData2.WriteShort(武功ID);
						}
						packetData2.WriteInt(num9 - num4);
						packetData2.WriteInt(num10 - num5);
						packetData2.WriteInt(num11 - num6);
						packetData2.WriteInt(num12 - num7);
						packetData2.WriteInt(num13 - num8);
						if (World.Newversion >= 15)
						{
							packetData2.WriteInt(num4);
							packetData2.WriteInt(num5);
							packetData2.WriteInt(num6);
							packetData2.WriteInt(num7);
							packetData2.WriteInt(num8);
						}
						packetData2.WriteInt(武功ID);
						packetData2.WriteInt(攻击类型);
						packetData2.WriteFloat(Play.Player_FLD_X);
						packetData2.WriteFloat(Play.Player_FLD_Z);
						packetData2.WriteFloat(Play.Player_FLD_Y);
						packetData2.WriteByte(0);
						packetData2.WriteByte(value2);
						packetData2.WriteShort(0);
						packetData2.WriteInt(最后血量);
						if (攻击力 == 0)
						{
							packetData2.WriteInt(1);
						}
						else
						{
							packetData2.WriteInt(0);
						}
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						if (Pet == null || 攻击力 <= 0)
						{
							packetData2.WriteInt(-1);
						}
						else
						{
							packetData2.WriteInt(new Random(World.GetRandomSeed()).Next(Pet.FLD_攻击 + Pet.FLD_命中 / 4 - 15, Pet.FLD_攻击 + Pet.FLD_命中 / 4 + 15));
						}
						if (base.Player_Job == 9)
						{
							if (攻击力 >= 0)
							{
								Random random = new Random(World.GetRandomSeed());
								double num3 = random.Next(0, 100);
								if (武功ID != 2000401 && 武功ID != 2000402)
								{
									if (武功ID / 100 == 20091)
									{
										packetData2.WriteInt(4);
									}
									else
									{
										if (num3 <= base.KCDHL_HHDP_2 && Timer_AutoAttack != null)
										{
											Timer_AutoAttack.Enabled = false;
											Timer_AutoAttack.AutoReset = false;
											Timer_AutoAttack.Dispose();
											Timer_AutoAttack = null;
										}
										if (攻击对象人物全服ID > 10000)
										{
											if (num3 <= base.KCDHL_HHDP_2)
											{
												packetData2.WriteInt(1);
											}
											else
											{
												packetData2.WriteInt(0);
											}
										}
										else if (num3 <= base.KCDHL_HHDP_2)
										{
											Check_Skill_Combo_DHL = true;
											packetData2.WriteInt(2);
										}
										else
										{
											packetData2.WriteInt(0);
										}
									}
								}
								else if (players != null && players.异常状态.ContainsKey(28))
								{
									Check_Skill_Combo_DHL = true;
									packetData2.WriteInt(3);
								}
								else
								{
									packetData2.WriteInt(5);
								}
							}
							else
							{
								packetData2.WriteInt(0);
							}
						}
						else
						{
							packetData2.WriteInt(0);
						}
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(0);
						packetData2.WriteInt(ComboQuyenSu);
						if (ComboQuyenSu > 0 && 武功ID != 3000101 && 武功ID != 3000105 && (value.FLD_AT != 0 || value.FLD_EFFERT == 314))
						{
							ComboQuyenSu = 0;
						}
						if (base.Client != null)
						{
							base.Client.SendPak(packetData2, 2560, base.UserSessionID);
						}
						SendRangeOfPackets(packetData2, 2560, base.UserSessionID);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送攻击人物数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void UpgradeSpecialWeapons()
		{
			int num = -1;
			switch (base.Player_Job)
			{
				case 8:
					num = 0;
					break;
				case 9:
					num = 100000000;
					break;
				case 11:
					num = 300000000;
					break;
				case 12:
					num = 200000000;
					break;
			}
			if (num != -1)
			{
				int 位置 = Find_Package_Empty(this);
				long fLD_PID = Item_Wear[3].FLD_PID;
				if (base.Player_Job_Level == 1)
				{
					百宝增加物品带属性(num + 100204002, 位置, 1, Item_Wear[3].FLD_MAGIC0, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 2)
				{
					百宝增加物品带属性(num + 100204003, 位置, 1, Item_Wear[3].FLD_MAGIC0, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 3)
				{
					百宝增加物品带属性(num + 100204004, 位置, 1, Item_Wear[3].FLD_MAGIC0, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 4)
				{
					百宝增加物品带属性(num + 100204005, 位置, 1, Item_Wear[3].FLD_MAGIC0, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 5)
				{
					百宝增加物品带属性(num + 100204006, 位置, 1, Item_Wear[3].FLD_MAGIC0 - 1, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 6)
				{
					百宝增加物品带属性(num + 100204007, 位置, 1, Item_Wear[3].FLD_MAGIC0 - 1, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 7)
				{
					百宝增加物品带属性(num + 100204008, 位置, 1, Item_Wear[3].FLD_MAGIC0 - 1, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 8)
				{
					百宝增加物品带属性(num + 100204010, 位置, 1, Item_Wear[3].FLD_MAGIC0 - 1, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 9)
				{
					百宝增加物品带属性(num + 100204027, 位置, 1, Item_Wear[3].FLD_MAGIC0 - 1, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
				else if (base.Player_Job_Level == 10)
				{
					百宝增加物品带属性(num + 100204034, 位置, 1, Item_Wear[3].FLD_MAGIC0 - 1, Item_Wear[3].FLD_MAGIC1, Item_Wear[3].FLD_MAGIC2, Item_Wear[3].FLD_MAGIC3, Item_Wear[3].FLD_MAGIC4, Item_Wear[3].FLD_FJ_觉醒, Item_Wear[3].FLD_FJ_中级附魂, Item_Wear[3].FLD_FJ_进化, 0, 0);
					Item_Wear[3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Initialize_Equip_Item();
					Update_Equipment_Effectiveness();
				}
			}
		}

		public void 发送交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				string hex = "AA5543000000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 11, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(6), 0, array, 15, 4);
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (!进店中 && !打开仓库中 && (PlayerShop == null || !PlayerShop.个人商店是否开启) && (交易 == null || 交易.交易人 == null))
				{
					byte[] array2 = Converter.hexStringToByte(hex);
					if (人物的ID != base.UserSessionID)
					{
						Players players = Select_Character_ID(人物的ID);
						if (players != null && !players.打开仓库中 && (players.PlayerShop == null || !players.PlayerShop.个人商店是否开启) && !players.进店中 && (players.交易 == null || players.交易.交易人 == null))
						{
							if (players.Config.交易 == 0)
							{
								GameMessage("Ðôìi phýõng ðaÞ khoìa giao diòch", 20);
								if (base.Client != null)
								{
									base.Client.Send(array, array.Length);
								}
							}
							else
							{
								Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array2, 11, 4);
								Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array2, 15, 4);
								Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array2, 19, 4);
								byte[] bytes2 = Encoding.GetEncoding(1252).GetBytes(base.UserName);
								Buffer.BlockCopy(bytes2, 0, array2, 23, bytes2.Length);
								交易 = new 交易类(players);
								players.交易 = new 交易类(this);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
								if (players.Client != null)
								{
									players.Wait_Trade = 1;
									players.Client.Send(array2, array2.Length);
								}
								if (base.Client != null)
								{
									Wait_Trade = 1;
									base.Client.Send(array2, array2.Length);
								}
							}
						}
						else if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					else if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "请求交易出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex.Message);
			}
		}

		public void 发送灵兽攻击人物数据(Players Play, int 攻击对象人物全服ID, int 武功ID, int 攻击力, int 攻击类型)
		{
			try
			{
				string hex = "AA55400000C29E0A00300079270000F60000000000000000000000000000000000000000000000C900000074808D44000070416B5B0A450001000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				if (武功ID != 0)
				{
					MartialArts MartialArts = World.TblKongfu[武功ID];
					Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 27, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(MartialArts.FLD_EFFERT), 0, array, 31, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(攻击力), 0, array, 15, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(攻击类型), 0, array, 39, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(攻击力), 0, array, 15, 4);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(Play.Pet.人物坐标_X), 0, array, 43, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(Play.Pet.人物坐标_Y), 0, array, 51, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 47, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(Play.Pet_ID), 0, array, 5, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(攻击对象人物全服ID), 0, array, 11, 2);
				if (Play.Client != null)
				{
					Play.Client.Send(array, array.Length);
				}
				SendRangeOfPackets(array, array.Length);
			}
			catch
			{
			}
		}

		public void 发送六转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
				case 1:
					value = ((base.Player_Zx == 1) ? 1000000336 : 1000000342);
					break;
				case 2:
					value = ((base.Player_Zx == 1) ? 1000000337 : 1000000343);
					break;
				case 3:
					value = ((base.Player_Zx == 1) ? 1000000338 : 1000000344);
					break;
				case 4:
					value = ((base.Player_Zx == 1) ? 1000000339 : 1000000345);
					break;
				case 5:
					value = ((base.Player_Zx == 1) ? 1000000340 : 1000000346);
					break;
				case 6:
					value = ((base.Player_Zx == 1) ? 1000000341 : 1000000347);
					break;
				case 7:
					value = ((base.Player_Zx == 1) ? 1000000494 : 1000000497);
					break;
				case 8:
					value = 1000000567;
					break;
				case 9:
					value = 1000001010;
					break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送七转技能书(int 空位)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
			int value = 0;
			switch (base.Player_Job)
			{
				case 1:
					value = ((base.Player_Zx == 1) ? 1000000388 : 1000000394);
					break;
				case 2:
					value = ((base.Player_Zx == 1) ? 1000000389 : 1000000395);
					break;
				case 3:
					value = ((base.Player_Zx == 1) ? 1000000390 : 1000000396);
					break;
				case 4:
					value = ((base.Player_Zx == 1) ? 1000000391 : 1000000397);
					break;
				case 5:
					value = ((base.Player_Zx == 1) ? 1000000392 : 1000000398);
					break;
				case 6:
					value = ((base.Player_Zx == 1) ? 1000000393 : 1000000399);
					break;
				case 7:
					value = ((base.Player_Zx == 1) ? 1000000495 : 1000000498);
					break;
				case 8:
					value = 1000000568;
					break;
			}
			增加物品2(bytes, BitConverter.GetBytes(value), 空位, BitConverter.GetBytes(1), new byte[56]);
		}

		public void 发送群攻攻击数据2(Players Play, List<群攻击类> 群攻击, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型)
		{
			try
			{
				int[] array = new int[20];
				int num = 0;
				foreach (群攻击类 item in 群攻击)
				{
					array[num] = 0;
					Players players = FindPlayer(item.人物ID);
					if (players != null && players.Player_Job == 11)
					{
						long val = (long)((double)item.攻击力 * (5.0 + 1.0 * players.KhiCong_JOB11_0) / 100.0);
						val = Math.Min(val, players.Player_Shield);
						array[num] = (int)val;
					}
					num++;
				}
				MartialArts MartialArts = World.TblKongfu[武功ID];
				using (PacketData packetData = new PacketData())
				{
					packetData.WriteShort(NPC全服ID);
					packetData.WriteShort(武功ID);
					packetData.WriteInt(群攻击.Count);
					if (武功ID == 400001)
					{
						packetData.WriteInt(武功ID);
						packetData.WriteInt(攻击类型);
					}
					else
					{
						packetData.WriteInt(武功ID);
						packetData.WriteInt(MartialArts.FLD_EFFERT);
					}
					packetData.WriteFloat(Play.Player_FLD_X);
					packetData.WriteFloat(Play.Player_FLD_Z);
					packetData.WriteFloat(Play.Player_FLD_Y);
					for (int i = 0; i < 80; i++)
					{
						packetData.WriteByte(0);
					}
					if (Play.Player_Job == 4)
					{
						if (BitConverter.ToInt32(Play.Item_Wear[12].Get_Byte_Item_PID, 0) != 0)
						{
							packetData.WriteInt(BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0));
						}
						else
						{
							packetData.WriteInt(0);
						}
						int num2 = BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0);
						if (num2 <= 0)
						{
							Play.Item_Wear[12].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
							Play.Initialize_Equip_Item();
						}
						else
						{
							Play.Item_Wear[12].Item_Amount = BitConverter.GetBytes(num2);
						}
					}
					else
					{
						packetData.WriteInt(0);
					}
					foreach (群攻击类 item2 in 群攻击)
					{
						packetData.WriteShort(item2.人物ID);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						packetData.WriteShort(0);
					}
					num = 0;
					foreach (群攻击类 item3 in 群攻击)
					{
						packetData.WriteInt((int)item3.攻击力 - array[num]);
						num++;
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						packetData.WriteInt(0);
					}
					num = 0;
					foreach (群攻击类 item4 in 群攻击)
					{
						if (World.Newversion >= 15)
						{
							packetData.WriteInt(array[num]);
						}
						packetData.WriteInt(0);
						packetData.WriteByte(0);
						num++;
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						if (World.Newversion >= 15)
						{
							packetData.WriteInt(0);
						}
						packetData.WriteInt(0);
						packetData.WriteByte(0);
					}
					foreach (群攻击类 item5 in 群攻击)
					{
						packetData.WriteInt((int)item5.剩余血量);
					}
					for (int j = 0; j < 20 - 群攻击.Count; j++)
					{
						packetData.WriteInt(0);
					}
					if (Pet == null || 攻击力 <= 0)
					{
						packetData.WriteInt(-1);
					}
					else
					{
						packetData.WriteInt(new Random(World.GetRandomSeed()).Next(Pet.FLD_攻击 + Pet.FLD_命中 / 4 - 15, Pet.FLD_攻击 + Pet.FLD_命中 / 4 + 15));
					}
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(ComboQuyenSu);
					if (ComboQuyenSu > 0 && 武功ID != 3000101 && 武功ID != 3000105 && (MartialArts.FLD_AT != 0 || MartialArts.FLD_EFFERT == 314))
					{
						ComboQuyenSu = 0;
					}
					if (Play.Client != null)
					{
						Play.Client.SendPak(packetData, 12032, Play.UserSessionID);
					}
					SendRangeOfPackets(packetData, 12032, Play.UserSessionID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送群攻攻击数据2 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送群体攻击(Players Play, TeamClass 组队, int NPC全服ID, int 武功ID, int 攻击力, int 攻击类型)
		{
			try
			{
				MartialArts MartialArts = World.TblKongfu[武功ID];
				using (PacketData packetData = new PacketData())
				{
					packetData.WriteShort(NPC全服ID);
					packetData.WriteShort(武功ID);
					packetData.WriteInt(组队.List_Party.Count);
					packetData.WriteInt(武功ID);
					packetData.WriteInt(MartialArts.FLD_EFFERT);
					packetData.WriteFloat(Play.Player_FLD_X);
					packetData.WriteFloat(15f);
					packetData.WriteFloat(Play.Player_FLD_Y);
					for (int i = 0; i < 10; i++)
					{
						packetData.WriteInt(0);
						packetData.WriteInt(0);
					}
					if (Play.Player_Job == 4)
					{
						if (BitConverter.ToInt32(Play.Item_Wear[12].Get_Byte_Item_PID, 0) != 0)
						{
							int num = BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0);
							if (num <= 1)
							{
								Play.Item_Wear[12].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
								Play.Initialize_Equip_Item();
							}
							else
							{
								Play.Item_Wear[12].Item_Amount = BitConverter.GetBytes(num);
							}
							packetData.WriteInt(BitConverter.ToInt32(Play.Item_Wear[12].Item_Amount, 0));
						}
						else
						{
							packetData.WriteInt(0);
						}
					}
					else
					{
						packetData.WriteInt(0);
					}
					foreach (Players value in 组队.List_Party.Values)
					{
						packetData.WriteShort(value.UserSessionID);
					}
					for (int j = 0; j < 20 - 组队.List_Party.Count; j++)
					{
						packetData.WriteShort(0);
					}
					foreach (Players value2 in 组队.List_Party.Values)
					{
						packetData.WriteInt(value2.FLD_Attack);
					}
					for (int j = 0; j < 20 - 组队.List_Party.Count; j++)
					{
						packetData.WriteInt(0);
					}
					foreach (Players value3 in 组队.List_Party.Values)
					{
						if (World.Newversion >= 15)
						{
							packetData.WriteInt(0);
						}
						packetData.WriteInt(0);
						packetData.WriteByte(1);
					}
					for (int j = 0; j < 20 - 组队.List_Party.Count; j++)
					{
						if (World.Newversion >= 15)
						{
							packetData.WriteInt(0);
						}
						packetData.WriteInt(0);
						packetData.WriteByte(0);
					}
					foreach (Players value4 in 组队.List_Party.Values)
					{
						packetData.WriteInt((int)value4.Player_FLD_HP);
					}
					for (int j = 0; j < 20 - 组队.List_Party.Count; j++)
					{
						packetData.WriteInt(0);
					}
					if (Pet == null || 攻击力 <= 0)
					{
						packetData.WriteInt(-1);
					}
					else
					{
						packetData.WriteInt(new Random(World.GetRandomSeed()).Next(Pet.FLD_攻击 + Pet.FLD_命中 / 4 - 15, Pet.FLD_攻击 + Pet.FLD_命中 / 4 + 15));
					}
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(0);
					packetData.WriteInt(ComboQuyenSu);
					if (ComboQuyenSu > 0 && 武功ID != 3000101 && 武功ID != 3000105 && (MartialArts.FLD_AT != 0 || MartialArts.FLD_EFFERT == 314))
					{
						ComboQuyenSu = 0;
					}
					if (Play.Client != null)
					{
						Play.Client.SendPak(packetData, 12032, Play.UserSessionID);
					}
					SendRangeOfPackets(packetData, 12032, Play.UserSessionID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送群攻攻击数据 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 发送狮子吼消息广播数据(byte[] data, int length)
		{
			try
			{
				foreach (Players value in World.AllConnectedChars.Values)
				{
					if (value.Client != null)
					{
						value.Client.Send(data, length);
					}
				}
			}
			catch
			{
			}
		}

		public void 发送土灵符数据()
		{
			try
			{
				if (World.JlMsg == 1)
				{
					Form1.WriteLine(0, "Players_发送土灵符数据");
				}
				string hex = "AA559500002C010B1086000600";
				string hex2 = "000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = Converter.hexStringToByte(hex2);
				byte[] array3 = new byte[土灵符坐标.Count * 33 + array.Length + array2.Length];
				Buffer.BlockCopy(array, 0, array3, 0, array.Length);
				Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(2 + 土灵符坐标.Count * 33), 0, array3, 9, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(17 + 土灵符坐标.Count * 33), 0, array3, 2, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(土灵符坐标.Count), 0, array3, 11, 1);
				int num = 0;
				foreach (DictionaryEntry item in 土灵符坐标)
				{
					CoordinateClass CoordinateClass = (CoordinateClass)item.Value;
					int value = (int)item.Key;
					byte[] bytes = Encoding.GetEncoding(1252).GetBytes(CoordinateClass.Rxjh_Name);
					Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array3, 13 + num * 33, 2);
					Buffer.BlockCopy(bytes, 0, array3, 15 + num * 33, bytes.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(CoordinateClass.Rxjh_Map), 0, array3, 30 + num * 33, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(CoordinateClass.Rxjh_X), 0, array3, 34 + num * 33, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(CoordinateClass.Rxjh_Z), 0, array3, 38 + num * 33, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(CoordinateClass.Rxjh_Y), 0, array3, 42 + num * 33, 4);
					num++;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送土灵符数据出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void Player_Chat(string msg, int msgType, string name)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_发送消息");
			}
			try
			{
				if (GM模式 == 8 && msgType == 0)
				{
					msgType = 20;
				}
				if (GM模式 == 1 && msgType == 0)
				{
					msgType = 20;
				}
				logo.logchat(base.UserName + ":" + msg);
				if (DateTime.Now.Subtract(time_Chat).TotalMilliseconds < 100.0)
				{
					GameMessage("GýÒi tin quaì nhanh, vui loÌng châòm laòi!", 9);
				}
				else if (msg.Length >= 120)
				{
					GameMessage("Tin nhãìn quaì daÌi!", 9);
				}
				else if (msg.Length < 120)
				{
					if (msgType != 4 && msgType != 3)
					{
						Show1.WriteLine(msgType, base.UserName + "(" + base.Player_Level + "): " + msg);
					}
					time_Chat = DateTime.Now;
					if (name == null || name == "")
					{
						name = base.UserName;
					}
					PacketData packetData = new PacketData();
					if (World.Newversion >= 16)
					{
						packetData.WriteShort((交易 == null || !交易.交易中) ? msgType : 11);
					}
					else
					{
						packetData.WriteByte((交易 == null || !交易.交易中) ? msgType : 11);
					}
					packetData.WriteString(name);
					packetData.WriteLong(0L);
					packetData.WriteString(msg, msg.Length);
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					switch (msgType)
					{
						case 0:
							if (base.Client != null)
							{
								base.Client.SendPak(packetData, 26112, base.UserSessionID);
							}
							if (交易 == null || !交易.交易中)
							{
								SendRangeOfPackets(packetData, 26112, base.UserSessionID);
							}
							else if (交易.交易人.Client != null)
							{
								交易.交易人.Client.SendPak(packetData, 26112, base.UserSessionID);
							}
							break;
						case 1:
							foreach (Players value2 in World.AllConnectedChars.Values)
							{
								if (Check_Radius_Player(1000, value2) && value2.Client != null)
								{
									value2.Client.SendPak(packetData, 26112, base.UserSessionID);
								}
								else if (value2.GM模式 != 0)
								{
									value2.Client.SendPak(packetData, 26112, base.UserSessionID);
								}
							}
							break;
						case 2:
							if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
							{
								foreach (Players value3 in value.List_Party.Values)
								{
									if (World.AllConnectedChars.ContainsKey(value3.UserSessionID) && value3.Client != null)
									{
										value3.Client.SendPak(packetData, 26112, base.UserSessionID);
									}
									else if (value3.GM模式 != 0)
									{
										value3.Client.SendPak(packetData, 26112, base.UserSessionID);
									}
								}
							}
							break;
						case 3:
							if (base.Guild_Name != "")
							{
								Show1.WriteLine(3, base.UserName + "(" + base.Player_Level + ") - " + base.Guild_Name + ": " + msg);
								foreach (Players value4 in World.AllConnectedChars.Values)
								{
									if (value4.Guild_Name == base.Guild_Name && value4.Client != null)
									{
										value4.Client.SendPak(packetData, 26112, base.UserSessionID);
									}
									else if (value4.GM模式 != 0)
									{
										value4.Client.SendPak(packetData, 26112, base.UserSessionID);
									}
								}
								World.Conn.发送("ChatGuild|" + base.UserSessionID + "|" + base.UserName + "|" + msg + "|" + base.Client.ToString() + "|" + World.服务器id + "|" + base.Guild_Name);
							}
							break;
						case 4:
							Show1.WriteLine(4, base.UserName + "(" + base.Player_Level + ") To " + name + ": " + msg);
							foreach (Players value5 in World.AllConnectedChars.Values)
							{
								if (value5.UserName == name)
								{
									if (value5.Config.传音 == 0)
									{
										GameMessage("Ðôìi phýõng ðaÞ taìt troÌ chuyêòn", 9);
									}
									else
									{
										if (base.Client != null)
										{
											base.Client.SendPak(packetData, 26112, base.UserSessionID);
										}
										PacketData packetData2 = new PacketData();
										if (World.Newversion >= 16)
										{
											packetData2.WriteShort(msgType);
										}
										else
										{
											packetData2.WriteByte(msgType);
										}
										packetData2.WriteString(base.UserName);
										packetData2.WriteLong(0L);
										packetData2.WriteString(msg, msg.Length);
										if (value5.Client != null)
										{
											value5.Client.SendPak(packetData2, 26112, base.UserSessionID);
										}
									}
								}
							}
							break;
						case 5:
							foreach (Players value6 in World.AllConnectedChars.Values)
							{
								if (value6.Player_FLD_Map == base.Player_FLD_Map)
								{
									if (value6.Client != null)
									{
										value6.Client.SendPak(packetData, 26112, base.UserSessionID);
									}
								}
								else if (value6.GM模式 != 0)
								{
									value6.Client.SendPak(packetData, 26112, base.UserSessionID);
								}
							}
							break;
						case 20:
							if (交易 == null || !交易.交易中)
							{
								foreach (Players value7 in World.AllConnectedChars.Values)
								{
									if (Check_Radius_Player(1000, value7) && value7.Client != null)
									{
										value7.Client.SendPak(packetData, 26112, base.UserSessionID);
									}
								}
							}
							else
							{
								if (base.Client != null)
								{
									base.Client.SendPak(packetData, 26112, base.UserSessionID);
								}
								if (交易.交易人.Client != null)
								{
									交易.交易人.Client.SendPak(packetData, 26112, base.UserSessionID);
								}
							}
							break;
						case 51:
						case 54:
							time_狮子吼 = DateTime.Now;
							foreach (Players value8 in World.AllConnectedChars.Values)
							{
								if (value8.人物PK模式 == base.人物PK模式 && base.人物PK模式 != 0 && value8.人物PK模式 != 0)
								{
									if (Check_Radius_Player(1000, value8) && value8.Client != null)
									{
										value8.Client.SendPak(packetData, 26112, base.UserSessionID);
									}
								}
								else if (Check_Radius_Player(1000, value8) && value8.Client != null)
								{
									value8.GameMessage("Baòn phaÒi bâòt PK mõìi coì thêÒ sýÒ duòng", 9);
								}
							}
							break;
						case 14:
							if (DateTime.Now.Subtract(time_狮子吼).TotalSeconds >= 30.0)
							{
								time_狮子吼 = DateTime.Now;
								int 减去数量 = 1;
								for (int j = 0; j < Item_In_Bag.Length; j++)
								{
									if (BitConverter.ToInt32(Item_In_Bag[j].Get_Byte_Item_PID, 0) == 1007000001)
									{
										Delete_Item_Use(j, 减去数量);
										减去数量 = 0;
									}
								}
								if (World.狮子吼List.Count < World.狮子吼最大数)
								{
									狮子吼Class 狮子吼Class = new 狮子吼Class();
									狮子吼Class.FLD_INDEX = base.UserSessionID;
									狮子吼Class.UserName = base.UserName;
									狮子吼Class.TxtId = msgType;
									狮子吼Class.Txt = msg;
									World.狮子吼List.Enqueue(狮子吼Class);
									if (World.狮子吼id >= 127)
									{
										World.狮子吼id = 0;
									}
									else
									{
										World.狮子吼id++;
									}
									GameMessage("ÐaÞ gýÒi tin thaÌnh công, haÌng chõÌ ðang chaòy!", 9);
								}
								else
								{
									GameMessage("Vui loÌng thýÒ laòi sau giây laìt!", 9);
								}
							}
							else
							{
								double totalSeconds = DateTime.Now.Subtract(time_狮子吼).TotalSeconds;
								int num = 30 - (int)totalSeconds;
								GameMessage("ThýÒ laòi sau " + num + " giây", 9);
								for (int k = 0; k < Item_In_Bag.Length; k++)
								{
									if (BitConverter.ToInt32(Item_In_Bag[k].Get_Byte_Item_PID, 0) == 1007000001)
									{
										Delete_Item_Use(k, 0);
									}
								}
							}
							break;
						case 204:
							if (DateTime.Now.Subtract(time_狮子吼).TotalSeconds >= 30.0)
							{
								time_狮子吼 = DateTime.Now;
								int 减去数量 = 1;
								for (int i = 0; i < Item_In_Bag.Length; i++)
								{
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000028)
									{
										Delete_Item_Use(i, 减去数量);
										减去数量 = 0;
									}
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000027)
									{
										Delete_Item_Use(i, 减去数量);
										减去数量 = 0;
									}
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000026)
									{
										Delete_Item_Use(i, 减去数量);
										减去数量 = 0;
									}
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000025)
									{
										Delete_Item_Use(i, 减去数量);
										减去数量 = 0;
									}
								}
								GameMessage("ÐaÞ gýÒi tin thaÌnh công, haÌng chõÌ ðang chaòy!");
								World.Conn.发送("狮子吼|" + base.UserSessionID + "|" + base.UserName + "|" + msg + "|" + base.Client.ToString() + "|" + World.服务器id + "|" + base.Player_FLD_Map);
							}
							else
							{
								double totalSeconds = DateTime.Now.Subtract(time_狮子吼).TotalSeconds;
								int num = 30 - (int)totalSeconds;
								GameMessage("ThýÒ laòi sau " + num + " giây", 9);
								for (int i = 0; i < Item_In_Bag.Length; i++)
								{
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000028)
									{
										Delete_Item_Use(i, 0);
									}
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000027)
									{
										Delete_Item_Use(i, 0);
									}
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000026)
									{
										Delete_Item_Use(i, 0);
									}
									if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1007000025)
									{
										Delete_Item_Use(i, 0);
									}
								}
							}
							break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送消息出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 发送消息出(string msg, int msgType, string name)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_发送消息出");
			}
			string hex = "AA55AB00012C0166009C000461736400000000000000000000000000000000000003";
			string hex2 = "000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = Converter.hexStringToByte(hex2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(msg);
			byte[] array3 = new byte[array.Length + array2.Length + bytes.Length];
			Buffer.BlockCopy(array, 0, array3, 0, array.Length);
			Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(bytes.Length), 0, array3, 33, 1);
			Buffer.BlockCopy(bytes, 0, array3, 34, bytes.Length);
			array3[11] = (byte)msgType;
			if (name == null || name == "")
			{
				name = base.UserName;
			}
			byte[] bytes2 = Encoding.GetEncoding(1252).GetBytes(name);
			Buffer.BlockCopy(BitConverter.GetBytes(array.Length + bytes.Length - 11 + 15), 0, array3, 2, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(array.Length + bytes.Length - 11), 0, array3, 9, 2);
			Buffer.BlockCopy(bytes2, 0, array3, 12, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send(array3, array3.Length);
			}
		}

		public void 发送医生群疗数据(int 人物ID, TeamClass 组队, int 增加血量, int 武功ID, MartialArts 武功)
		{
			string hex
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(人物ID), 0, array, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(组队.List_Party.Count), 0, array, 15, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(武功ID), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(武功.FLD_EFFERT), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_X), 0, array, 27, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_Y), 0, array, 35, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array, 31, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			int num = 0;
			foreach (Players value in 组队.List_Party.Values)
			{
				long num2 = (value.Player_HP_Max - value.Player_FLD_HP < 增加血量) ? (value.Player_HP_Max - value.Player_FLD_HP) : 增加血量;
				if (Check_Radius_Player(300, value))
				{
					Buffer.BlockCopy(BitConverter.GetBytes(value.UserSessionID), 0, array, 123 + num * 2, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 163 + num * 2, 2);
					value.Player_FLD_HP += num2;
					value.Update_HP_MP_SP();
				}
				num++;
			}
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 发送组队(byte[] data, int length)
		{
			try
			{
				byte[] array2;
				Players players;
				if (!进店中 && !打开仓库中)
				{
					byte[] array = new byte[4];
					Buffer.BlockCopy(data, 15, array, 0, 2);
					int 人物ID = BitConverter.ToInt32(array, 0);
					string hex = "AA552A00000B0031001B00010001000A00000000000000000000000000000000000000000000000000000000000055AA";
					array2 = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 17, 2);
					players = Select_Character_ID(人物ID);
					string hex2 = "AA551300002C013300040003000200000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex2);
					if (base.Client != null && players == null)
					{
						GameMessage("Không tiÌm thâìy ðôìi phýõng");
						base.Client.Send(array3, array3.Length);
					}
					else if (players != null && (players.PlayerShop == null || !players.PlayerShop.个人商店是否开启) && !players.进店中 && players.UserName != base.UserName)
					{
						if (players.Config.组队 == 0)
						{
							GameMessage("Ðôìi phýõng ðaÞ khoìa tôÒ ðôòi");
							if (base.Client != null)
							{
								base.Client.Send(array3, array3.Length);
							}
						}
						else if (Math.Abs(Level_Party - players.Player_Level) > World.组队级别限制)
						{
							GameMessage("Giõìi haòn tôÒ ðoòi laÌ : " + World.组队级别限制 + " câìp ðôò", 20);
							GameMessage("Câìp ðôò hiêòn taòi laÌ: " + Level_Party + " - Ðôìi phýõng: " + players.Player_Level, 20);
							if (base.Client != null)
							{
								base.Client.Send(array3, array3.Length);
							}
						}
						else if (Math.Abs(players.Player_Level - Level_Party) > World.组队级别限制)
						{
							GameMessage("Giõìi haòn tôÒ ðoòi laÌ : " + World.组队级别限制 + " câìp ðôò", 20);
							GameMessage("Câìp ðôò hiêòn taòi laÌ: " + Level_Party + " - Ðôìi phýõng: " + players.Player_Level, 20);
							if (base.Client != null)
							{
								base.Client.Send(array3, array3.Length);
							}
						}
						else if (players.Party_ID == 0)
						{
							if (!World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
							{
								value = new TeamClass(this);
								value.邀请人 = players;
								Party_ID = World.Add组队(value);
								players.Party_ID = Party_ID;
								value.组队id = Party_ID;
								goto IL_03bc;
							}
							if (value.List_Party.Count < 8)
							{
								value.邀请人 = players;
								players.Party_ID = Party_ID;
								goto IL_03bc;
							}
							GameMessage("TôÒ ðôòi ðaÞ ðâÌy!");
							if (base.Client != null)
							{
								base.Client.Send(array3, array3.Length);
							}
						}
						else
						{
							GameMessage("Ðôìi phýõng ðaÞ coì tôÒi ðôòi");
							if (base.Client != null)
							{
								base.Client.Send(array3, array3.Length);
							}
						}
					}
					else if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
				goto end_IL_0001;
			IL_03bc:
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array2, 21, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array2, 5, 2);
				if (players.Client != null)
				{
					players.Client.Send(array2, array2.Length);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "发送组队出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void CMD_InviteParty(string Username)
		{
			try
			{
				byte[] array;
				Players players;
				if (!进店中 && !打开仓库中)
				{
					string hex = "AA552A00000B0031001B00010001000A00000000000000000000000000000000000000000000000000000000000055AA";
					array = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 17, 2);
					players = Find_Player(Username);
					string hex2 = "AA551300002C013300040003000200000000000000000055AA";
					byte[] array2 = Converter.hexStringToByte(hex2);
					if (players == null)
					{
						if (base.Client != null)
						{
							GameMessage("Không tiÌm thâìy ðôìi phýõng", 20);
							base.Client.Send(array2, array2.Length);
						}
					}
					else if (players != null && (players.PlayerShop == null || !players.PlayerShop.个人商店是否开启) && !players.进店中 && players.UserName != base.UserName)
					{
						if (players.Config.组队 == 0)
						{
							GameMessage("Ðôìi phýõng ðaÞ khoìa tôÒ ðôòi", 20);
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
						}
						else if (Math.Abs(Level_Party - players.Player_Level) > World.组队级别限制)
						{
							GameMessage("Giõìi haòn tôÒ ðoòi laÌ : " + World.组队级别限制 + " câìp ðôò", 20);
							GameMessage("Câìp ðôò hiêòn taòi laÌ: " + Level_Party + " - Ðôìi phýõng: " + players.Player_Level, 20);
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
						}
						else if (Math.Abs(players.Player_Level - Level_Party) > World.组队级别限制)
						{
							GameMessage("Giõìi haòn tôÒ ðoòi laÌ : " + World.组队级别限制 + " câìp ðôò", 20);
							GameMessage("Câìp ðôò hiêòn taòi laÌ: " + Level_Party + " - Ðôìi phýõng: " + players.Player_Level, 20);
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
						}
						else if (players.Party_ID == 0)
						{
							if (!World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
							{
								value = new TeamClass(this);
								value.邀请人 = players;
								Party_ID = World.Add组队(value);
								players.Party_ID = Party_ID;
								value.组队id = Party_ID;
								goto IL_0393;
							}
							if (value.List_Party.Count < 8)
							{
								value.邀请人 = players;
								players.Party_ID = Party_ID;
								goto IL_0393;
							}
							GameMessage("TôÒ ðôòi hiêòn taòi ðaÞ ðâÌy", 20);
							if (base.Client != null)
							{
								base.Client.Send(array2, array2.Length);
							}
						}
					}
				}
				goto end_IL_0001;
			IL_0393:
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 21, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array, 5, 2);
				if (players.Client != null)
				{
					players.Client.Send(array, array.Length);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "CMD Invite Party Error![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void AddtoShortcutBar(byte[] data, int length)
		{
			string hex = "AA552000002C01181010002CDC143C00000000030002000300000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = new byte[4];
			byte[] array3 = new byte[4];
			byte[] array4 = new byte[4];
			byte[] array5 = new byte[4];
			Buffer.BlockCopy(data, 11, array2, 0, 4);
			Buffer.BlockCopy(data, 19, array3, 0, 2);
			Buffer.BlockCopy(data, 21, array4, 0, 2);
			Buffer.BlockCopy(data, 23, array5, 0, 2);
			Buffer.BlockCopy(array2, 0, array, 11, 4);
			int itmeid = Converter.getItmeid(Converter.ToString(array2));
			int itmeid2 = Converter.getItmeid(Converter.ToString(array3));
			Buffer.BlockCopy(BitConverter.GetBytes(itmeid), 0, array, 11, 4);
			if (BitConverter.ToInt32(array4, 0) == 2)
			{
				if (itmeid == 1008000003 && 快捷栏.Contains(1008000003) && base.Player_FLD_HP > base.Player_HP_Max)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (itmeid == 1008000004 && 快捷栏.Contains(1008000004) && base.Player_FLD_HP > base.Player_HP_Max)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (itmeid == 1008000174 && 快捷栏.Contains(1008000174))
				{
					if (base.Player_FLD_HP > base.Player_HP_Max)
					{
						base.Player_FLD_HP = base.Player_HP_Max;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000175 && 快捷栏.Contains(1008000175) && base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (itmeid == 1008000005 && 快捷栏.Contains(1008000005) && base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (itmeid == 1008000006 && 快捷栏.Contains(1008000006) && base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (itmeid == 1008000007 && 快捷栏.Contains(1008000007) && base.Player_FLD_HP > base.Player_HP_Max)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (itmeid == 1008000008 && 快捷栏.Contains(1008000008) && base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (itmeid == 1008000033 && 快捷栏.Contains(1008000033) && base.Player_FLD_HP > base.Player_HP_Max)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (itmeid == 1008000068 && 快捷栏.Contains(1008000068))
				{
					if (base.Player_FLD_HP > base.Player_HP_Max)
					{
						base.Player_FLD_HP = base.Player_HP_Max;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000069 && 快捷栏.Contains(1008000069) && base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (itmeid == 1008000077 && 快捷栏.Contains(1008000077) && base.Player_FLD_HP > base.Player_HP_Max)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (itmeid == 1008000078 && 快捷栏.Contains(1008000078) && base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (itmeid == 1008000079 && 快捷栏.Contains(1008000079) && base.Player_FLD_HP > base.Player_HP_Max)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (itmeid == 1008000080 && 快捷栏.Contains(1008000080) && base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (itmeid == 1008000034 && 快捷栏.Contains(1008000034))
				{
					base.FLD_Item_Premium_HP -= 200;
					if (base.Player_FLD_HP > base.Player_HP_Max)
					{
						base.Player_FLD_HP = base.Player_HP_Max;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000035 && 快捷栏.Contains(1008000035))
				{
					base.FLD_Item_Premium_MP -= 200;
					if (base.Player_FLD_MP > base.Player_MP_Max)
					{
						base.Player_FLD_MP = base.Player_MP_Max;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000044 && 快捷栏.Contains(1008000044))
				{
					base.FLD_Item_Premium_HP -= 200;
					if (base.Player_FLD_HP > base.Player_HP_Max)
					{
						base.Player_FLD_HP = base.Player_HP_Max;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000045 && 快捷栏.Contains(1008000045))
				{
					base.FLD_Item_Premium_MP -= 200;
					if (base.Player_FLD_MP > base.Player_MP_Max)
					{
						base.Player_FLD_MP = base.Player_MP_Max;
					}
					快捷栏.Remove(itmeid);
				}
				if (itmeid == 1008000065 && Pet != null)
				{
					if (Pet.宠物装备栏[itmeid2].LockMove)
					{
						Pet.宠物装备栏[itmeid2].LockMove = false;
					}
					if (Pet.Int32_16 >= 0)
					{
						Pet.Int32_16 = -1;
					}
				}
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 21, 2);
			}
			else
			{
				if (itmeid == 1008000003 && !快捷栏.Contains(1008000003))
				{
				}
				if (itmeid == 1008000004 && !快捷栏.Contains(1008000004))
				{
				}
				if (itmeid == 1008000174 && !快捷栏.Contains(1008000174))
				{
					快捷栏.Add(itmeid);
				}
				if (itmeid == 1008000175 && !快捷栏.Contains(1008000175))
				{
				}
				if (itmeid == 1008000005 && !快捷栏.Contains(1008000005))
				{
				}
				if (itmeid == 1008000006 && !快捷栏.Contains(1008000006))
				{
				}
				if (itmeid == 1008000007 && !快捷栏.Contains(1008000007))
				{
				}
				if (itmeid == 1008000008 && !快捷栏.Contains(1008000008))
				{
				}
				if (itmeid == 1008000033 && !快捷栏.Contains(1008000033))
				{
				}
				if (itmeid == 1008000068 && !快捷栏.Contains(1008000068))
				{
					快捷栏.Add(itmeid);
				}
				if (itmeid == 1008000069 && !快捷栏.Contains(1008000069))
				{
				}
				if (itmeid == 1008000077 && !快捷栏.Contains(1008000077))
				{
				}
				if (itmeid == 1008000078 && !快捷栏.Contains(1008000078))
				{
				}
				if (itmeid == 1008000079 && !快捷栏.Contains(1008000079))
				{
				}
				if (itmeid == 1008000080 && !快捷栏.Contains(1008000080))
				{
				}
				if (itmeid == 1008000034 && !快捷栏.Contains(1008000034))
				{
					base.FLD_Item_Premium_HP += 200;
					快捷栏.Add(itmeid);
				}
				if (itmeid == 1008000035 && !快捷栏.Contains(1008000035))
				{
					base.FLD_Item_Premium_MP += 200;
					快捷栏.Add(itmeid);
				}
				if (itmeid == 1008000044 && !快捷栏.Contains(1008000044))
				{
					base.FLD_Item_Premium_HP += 200;
					快捷栏.Add(itmeid);
				}
				else if (itmeid == 1008000065 && Pet != null)
				{
					Pet.宠物装备栏[itmeid2].LockMove = true;
					if (Pet.Int32_16 == -1)
					{
						Pet.Int32_16 = itmeid2;
					}
				}
				if (itmeid == 1008000045 && !快捷栏.Contains(1008000045))
				{
					base.FLD_Item_Premium_MP += 200;
					快捷栏.Add(itmeid);
				}
				Buffer.BlockCopy(array3, 0, array, 19, 2);
				Buffer.BlockCopy(array4, 0, array, 21, 2);
			}
			Buffer.BlockCopy(array5, 0, array, 23, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			Update_HP_MP_SP();
		}

		public void 飞鸽传书内容()
		{
			string hex = "AA55AC00002D01B6009C000029867D0195003131313131312CC4E3BAC3A3ACBBB6D3ADB9E2C1D9C6DFCFA6BDADBAFEC8CECEF1B4ABCAE9B7C2B9D9C7F8A3ACC8E7B9FBCFB2BBB6CED2C3C7B5C4D3CECFB7C7EBBDE9C9DCB8F8C4FAB5C4C5F3D3D1A3A1CED2C3C7D3C0BEC3D3F2C3FBCEAA5777772E37786A682E636F4D2CCCD8B1F0CCE1D0D13AB1BEB7FECBF9D3D0C8CECEF1BEF9BFC9D7F6A3ACB2BBD2AACDFCBCC7C5B6A3A100000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void PacketVerify(byte[] data, int length)
		{
			try
			{
				if (base.UserSessionID != 0 && World.是否加密 != 0)
				{
					byte[] array = new byte[4];
					Buffer.BlockCopy(data, 5, array, 0, 2);
					int num = BitConverter.ToInt32(array, 0);
					if (num != base.UserSessionID && num != base.Pet_ID)
					{
						if (World.封包封号 == 1)
						{
							DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
						}
						string text = Converter.ToString(data);
						Form1.WriteLine(77, "非法修改封包封号[" + base.Userid + "][" + base.UserName + "] ID=[" + num + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "] 包ID[" + $"{data[8]:X2}{data[7]:X2}" + "] [" + text + "]");
						if (base.Client != null)
						{
							base.Client.Dispose();
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 74", 7);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "封包修改!出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 封号(Players player, string 原因)
		{
			DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{player.Userid}'", "rxjhaccount");
			Form1.WriteLine(9, "帐号已被停封 [" + player.Userid + "][" + player.UserName + "][" + player.Client.ToString() + "]  原因：" + 原因);
			if (player.Client != null)
			{
				player.Client.Dispose();
				player.GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 76", 7);
			}
		}

		public void 服务器时间()
		{
			int value = 10000;
			if (World.时间系统开关 != 0)
			{
				if (World.Newversion >= 16)
				{
					value = (int)((double)DateTime.Now.Minute / 1.25 % 24.0 * 1000.0);
				}
				else if (DateTime.Now.Hour <= 3)
				{
					value = 16000;
				}
				else if (DateTime.Now.Hour <= 5)
				{
					value = 17000;
				}
				else if (DateTime.Now.Hour <= 7)
				{
					value = 18000;
				}
				else if (DateTime.Now.Hour <= 11)
				{
					value = 19000;
				}
				else if (DateTime.Now.Hour <= 15)
				{
					value = 10000;
				}
				else if (DateTime.Now.Hour <= 17)
				{
					value = 11000;
				}
				else if (DateTime.Now.Hour <= 19)
				{
					value = 12000;
				}
				else if (DateTime.Now.Hour <= 21)
				{
					value = 13000;
				}
				else if (DateTime.Now.Hour <= 22)
				{
					value = 14000;
				}
				else if (DateTime.Now.Hour <= 23)
				{
					value = 15000;
				}
			}
			string hex = "AA55130000000080000400D0070000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array, 11, 2);
			if (bEnableSnowEffect)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 14, 1);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 14, 1);
			}
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void Graft_Gem()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			int index = 0;
			int index2 = 0;
			int index3 = 0;
			int index4 = 0;
			int index5 = 0;
			for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
			{
				if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000161)
				{
					num = 1;
					index = i;
				}
				else if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000162)
				{
					num2 = 1;
					index2 = i;
				}
				else if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000163)
				{
					num3 = 1;
					index3 = i;
				}
				else if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000164)
				{
					num4 = 1;
					index4 = i;
				}
				else if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000199)
				{
					num5 = 1;
					index5 = i;
				}
				if (num != 0 && num2 != 0 && num3 != 0 && num4 != 0 && num5 != 0)
				{
					break;
				}
			}
			if (num != 0 && num2 != 0 && num3 != 0 && num4 != 0 && num5 != 0)
			{
				Send_Packet_Delete_Item(index, 1);
				Send_Packet_Delete_Item(index2, 1);
				Send_Packet_Delete_Item(index3, 1);
				Send_Packet_Delete_Item(index4, 1);
				Send_Packet_Delete_Item(index5, 1);
				int num6 = Find_Package_Empty(this);
				if (num6 != -1)
				{
					byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
					增加物品2(bytes, BitConverter.GetBytes(1000000365), num6, BitConverter.GetBytes(1), new byte[56]);
					GameMessage("ÐaÞ ðôÒi 5 loaòi ðaÞ lâìy 1 nguÞ haÌnh", 13);
				}
			}
			else
			{
				GameMessage("Chýa ðuÒ 5 loaòi câÌn thiêìt", 9);
			}
		}

		public void 赋予职位(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 2);
				int num = BitConverter.ToInt32(array, 0);
				string hex = "AA551F00010A00EF00100001000000000000000000000000000000000000000000000055AA";
				byte[] array2 = Converter.hexStringToByte(hex);
				byte[] array3 = new byte[20];
				for (int i = 0; i < 20 && data[13 + i] != 0; i++)
				{
					array3[i] = data[13 + i];
				}
				string 人物名 = Encoding.GetEncoding(1252).GetString(array3).Replace("\0", "");
				Players players = Find_Player(人物名);
				if (players != null)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 11, 1);
					RxjhClass.帮派赋予职位(num, players.UserName);
					players.Guild_Level = num;
					players.查帮派();
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array2, 11, 1);
				}
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
			}
			catch
			{
			}
		}

		public void 更换装备(byte[] data, int length)
		{
			try
			{
				int num = 0;
				PacketVerify(data, length);
				int num2 = data[11];
				int num3 = data[12];
				int num4 = data[13];
				int num5 = data[14];
				if (num2 == 8 && num4 == 8)
				{
					byte[] byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (BitConverter.ToInt32(个人仓库[num5].Get_Byte_Item_PID, 0) == 0)
					{
						个人仓库[num5].Byte_Item = 个人仓库[num3].Byte_Item;
						个人仓库[num3].Byte_Item = byte_Item;
						更换装备位置(num2, num3, num4, num5, 个人仓库[num3].Byte_Item, BitConverter.ToInt32(个人仓库[num3].Item_Amount, 0));
					}
				}
				else if (num2 == 9 && num4 == 9)
				{
					byte[] byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (BitConverter.ToInt32(公共仓库[num5].Get_Byte_Item_PID, 0) == 0)
					{
						公共仓库[num5].Byte_Item = 公共仓库[num3].Byte_Item;
						公共仓库[num3].Byte_Item = byte_Item;
						更换装备位置(num2, num3, num4, num5, 公共仓库[num3].Byte_Item, BitConverter.ToInt32(公共仓库[num3].Item_Amount, 0));
					}
				}
				if (退出中)
				{
					Form1.WriteLine(6, "退出复制BUG [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
				}
				else if (!打开仓库中 && (PlayerShop == null || !PlayerShop.个人商店是否开启))
				{
					if (Pet != null)
					{
						num = ((Pet.FLD_JOB_LEVEL >= 3) ? 16 : ((Pet.FLD_JOB_LEVEL == 2) ? 12 : ((Pet.FLD_JOB_LEVEL == 1) ? 8 : 4)));
					}
					DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT * FROM Log_DeleteItem where TrangThai=0 and MaItem=" + BitConverter.ToInt32(Item_In_Bag[num3].物品全局ID, 0)));
					if (dBToDataTable.Rows.Count > 0)
					{
						Form1.WriteLine(100, "BUG CUONG HOA: [" + base.UserName + "] - [" + Item_In_Bag[num3].Get物品全局ID + "] - [" + Item_In_Bag[num3].FLD_PID + "]");
						Item_In_Bag[num3].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						Update_Item_In_Bag();
						Update_Money_Weight();
						if (base.Client != null)
						{
							base.Client.Dispose();
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 77", 7);
						}
					}
					else
					{
						byte[] byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						物品类 物品类;
						switch (num2)
						{
							default:
								return;
							case 1:
								{
									物品类 物品类2 = Item_In_Bag[num3];
									if (BitConverter.ToInt32(物品类2.Get_Byte_Item_PID, 0) == 0)
									{
										return;
									}
									ItmeClass itmeClass10;
									switch (num4)
									{
										default:
											return;
										case 0:
											if (BitConverter.ToInt32(Item_In_Bag[num3].Get_Byte_Item_PID, 0) == 0)
											{
												return;
											}
											goto IL_218b;
										case 1:
											if (!Item_In_Bag[num3].LockMove)
											{
												if (BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0) == 0)
												{
													Item_In_Bag[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
													Item_In_Bag[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_In_Bag[num5].Byte_Item, BitConverter.ToInt32(Item_In_Bag[num5].Item_Amount, 0));
												}
												else
												{
													byte_Item = Item_In_Bag[num5].Byte_Item;
													Item_In_Bag[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
													Item_In_Bag[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_In_Bag[num5].Byte_Item, BitConverter.ToInt32(Item_In_Bag[num5].Item_Amount, 0));
												}
											}
											return;
										case 59:
											if (BitConverter.ToInt32(Pet.宠物以装备[num3].Get_Byte_Item_PID, 0) == 0)
											{
												return;
											}
											goto IL_218b;
										case 60:
											if (num3 >= ((base.装备行囊是否开启 == 1) ? 66 : 36) || num5 >= num || Item_In_Bag[num3].FLD_PID < 601100001 || Item_In_Bag[num3].FLD_PID > 700000000)
											{
												return;
											}
											if (BitConverter.ToInt32(Pet.宠物装备栏[num5].Get_Byte_Item_PID, 0) == 0)
											{
												Pet.宠物装备栏[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
												Item_In_Bag[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Pet.宠物装备栏[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物装备栏[num5].Item_Amount, 0));
											}
											else
											{
												byte[] byte_Item5 = Pet.宠物装备栏[num5].Byte_Item;
												Pet.宠物装备栏[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
												Item_In_Bag[num3].Byte_Item = byte_Item5;
												更换装备位置(num2, num3, num4, num5, Pet.宠物装备栏[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物装备栏[num5].Item_Amount, 0));
											}
											break;
										case 169:
											if (BitConverter.ToInt32(Item_Coat[num5].Get_Byte_Item_PID, 0) == 0)
											{
												Item_Coat[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
												Item_In_Bag[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Item_Coat[num5].Byte_Item, BitConverter.ToInt32(Item_Coat[num5].Item_Amount, 0));
											}
											else
											{
												byte_Item = Item_Coat[num5].Byte_Item;
												Item_Coat[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
												Item_In_Bag[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Item_Coat[num5].Byte_Item, BitConverter.ToInt32(Item_Coat[num5].Item_Amount, 0));
											}
											break;
										case 171:
											{
												if (BitConverter.ToInt32(Item_NTC[num5].Get_Byte_Item_PID, 0) == 0)
												{
													Item_NTC[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
													Item_In_Bag[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_NTC[num5].Byte_Item, BitConverter.ToInt32(Item_NTC[num5].Item_Amount, 0));
												}
												else
												{
													byte_Item = Item_NTC[num5].Byte_Item;
													Item_NTC[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
													Item_In_Bag[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_NTC[num5].Byte_Item, BitConverter.ToInt32(Item_NTC[num5].Item_Amount, 0));
												}
												UpdateNTCBag();
												break;
											}
										IL_218b:
											if (Item_In_Bag[num3].LockMove || (Item_In_Bag[num3].FLD_PID >= 600000000 && Item_In_Bag[num3].FLD_PID < 700000000))
											{
												return;
											}
											if (Item_In_Bag[num3].FLD_PID == 900102 && base.Level_Of_Guild < 4)
											{
												GameMessage("Bang hôòi chýa ðaòt câìp 4", 9);
												return;
											}
											if (Item_In_Bag[num3].FLD_PID == 900103 && base.Level_Of_Guild < 5)
											{
												GameMessage("Bang hôòi chýa ðaòt câìp 5", 9);
												return;
											}
											if (Item_In_Bag[num3].FLD_PID == 900104 && base.Level_Of_Guild < 6)
											{
												GameMessage("Bang hôòi chýa ðaòt câìp 6", 9);
												return;
											}
											if (Item_In_Bag[num3].FLD_PID >= 900109 && Item_In_Bag[num3].FLD_PID <= 900112 && base.Level_Of_Guild < 7)
											{
												GameMessage("Bang hôòi chýa ðaòt câìp 7", 9);
												return;
											}
											if (Item_In_Bag[num3].FLD_PID >= 900105 && Item_In_Bag[num3].FLD_PID <= 900108 && (base.Level_Of_Guild < 7 || base.Guild_Level < 5))
											{
												GameMessage("Bang hôòi chýa ðaòt câìp 7 hoãòc baòn không phaÒi bang chuÒ", 9);
												return;
											}
											itmeClass10 = World.Itme[BitConverter.ToInt32(Item_In_Bag[num3].Get_Byte_Item_PID, 0)];
											if (itmeClass10.FLD_LEVEL > base.Player_Level || (itmeClass10.FLD_ZX != 0 && itmeClass10.FLD_ZX != base.Player_Zx) || (itmeClass10.FLD_RESIDE2 == 13 && base.Player_Job != 4 && base.Player_Job != 11))
											{
												return;
											}
											if (World.Newversion >= 16 && base.Player_Job == 11 && itmeClass10.FLD_SHIELD == 0 && (itmeClass10.FLD_RESIDE2 == 2 || itmeClass10.FLD_RESIDE2 == 5 || itmeClass10.FLD_RESIDE2 == 6 || itmeClass10.FLD_RESIDE2 == 7 || itmeClass10.FLD_RESIDE2 == 8 || itmeClass10.FLD_RESIDE2 == 10))
											{
												GameMessage("Vâòt phâÒm không daÌnh cho Diêòu Yêìn");
												return;
											}
											if ((itmeClass10.FLD_RESIDE1 != 0 && itmeClass10.FLD_RESIDE1 != base.Player_Job && (itmeClass10.FLD_RESIDE1 != 4 || itmeClass10.FLD_RESIDE2 != 13 || (base.Player_Job != 4 && base.Player_Job != 11))) || (itmeClass10.FLD_JOB_LEVEL != 0 && itmeClass10.FLD_JOB_LEVEL > base.Player_Job_Level) || (itmeClass10.FLD_SEX != 0 && itmeClass10.FLD_SEX != base.Player_Sex) || itmeClass10.FLD_RESIDE2 < 1 || itmeClass10.FLD_RESIDE2 > 16 || (itmeClass10.FLD_XWJD >= 1 && itmeClass10.FLD_XWJD > base.人物武勋阶段) || (num5 == 14 && Pet != null))
											{
												return;
											}
											if (BitConverter.ToInt32(Item_Wear[num5].Get_Byte_Item_PID, 0) == 0)
											{
												Item_Wear[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
												Item_In_Bag[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Item_Wear[num5].Byte_Item, BitConverter.ToInt32(Item_Wear[num5].Item_Amount, 0));
											}
											else
											{
												if (BitConverter.ToInt32(Item_Wear[num5].Get_Byte_Item_PID, 0) == 0)
												{
													return;
												}
												ItmeClass itmeClass11 = World.Itme[BitConverter.ToInt32(Item_Wear[num5].Get_Byte_Item_PID, 0)];
												if (itmeClass10.FLD_RESIDE2 != itmeClass11.FLD_RESIDE2)
												{
													return;
												}
												byte_Item = Item_Wear[num5].Byte_Item;
												Item_Wear[num5].Byte_Item = Item_In_Bag[num3].Byte_Item;
												Item_In_Bag[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Item_Wear[num5].Byte_Item, BitConverter.ToInt32(Item_Wear[num5].Item_Amount, 0));
											}
											break;
									}
									break;
								}
							case 0:
								物品类 = Item_Wear[num3];
								if (BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0) == 0)
								{
									return;
								}
								goto IL_04f2;
							case 59:
								物品类 = Pet.宠物以装备[num3];
								if (BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0) == 0)
								{
									return;
								}
								goto IL_04f2;
							case 60:
								物品类 = Pet.宠物装备栏[num3];
								if (BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0) == 0)
								{
									return;
								}
								goto IL_04f2;
							case 169:
								物品类 = Item_Coat[num3];
								if (BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0) == 0)
								{
									return;
								}
								goto IL_04f2;
							case 171:
								{
									物品类 = Item_NTC[num3];
									if (BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0) == 0)
									{
										return;
									}
									goto IL_04f2;
								}
							IL_04f2:
								if (物品类.LockMove)
								{
									return;
								}
								switch (num4)
								{
									case 169:
										if (BitConverter.ToInt32(Item_Coat[num5].Get_Byte_Item_PID, 0) == 0)
										{
											Item_Coat[num5].Byte_Item = Item_Coat[num3].Byte_Item;
											Item_Coat[num3].Byte_Item = byte_Item;
											更换装备位置(num2, num3, num4, num5, Item_Coat[num3].Byte_Item, BitConverter.ToInt32(Item_Coat[num3].Item_Amount, 0));
										}
										else
										{
											byte_Item = Item_Coat[num5].Byte_Item;
											Item_Coat[num5].Byte_Item = Item_Coat[num3].Byte_Item;
											Item_Coat[num3].Byte_Item = byte_Item;
											更换装备位置(num2, num3, num4, num5, Item_Coat[num3].Byte_Item, BitConverter.ToInt32(Item_Coat[num3].Item_Amount, 0));
										}
										return;
									case 171:
										if (BitConverter.ToInt32(Item_NTC[num5].Get_Byte_Item_PID, 0) == 0)
										{
											Item_NTC[num5].Byte_Item = Item_NTC[num3].Byte_Item;
											Item_NTC[num3].Byte_Item = byte_Item;
											更换装备位置(num2, num3, num4, num5, Item_NTC[num3].Byte_Item, BitConverter.ToInt32(Item_NTC[num3].Item_Amount, 0));
										}
										else
										{
											byte_Item = Item_NTC[num5].Byte_Item;
											Item_NTC[num5].Byte_Item = Item_NTC[num3].Byte_Item;
											Item_NTC[num3].Byte_Item = byte_Item;
											更换装备位置(num2, num3, num4, num5, Item_NTC[num3].Byte_Item, BitConverter.ToInt32(Item_NTC[num3].Item_Amount, 0));
										}
										UpdateNTCBag();
										return;
									case 0:
										{
											if ((num3 == 14 && Pet != null) || (Item_In_Bag[num3].FLD_PID >= 600000000 && Item_In_Bag[num3].FLD_PID < 700000000))
											{
												return;
											}
											ItmeClass itmeClass8 = World.Itme[BitConverter.ToInt32(Item_Wear[num3].Get_Byte_Item_PID, 0)];
											if (itmeClass8.FLD_LEVEL > base.Player_Level || (itmeClass8.FLD_ZX != 0 && itmeClass8.FLD_ZX != base.Player_Zx) || (itmeClass8.FLD_RESIDE1 != 0 && itmeClass8.FLD_RESIDE1 != base.Player_Job) || (itmeClass8.FLD_JOB_LEVEL != 0 && itmeClass8.FLD_JOB_LEVEL > base.Player_Job_Level) || (itmeClass8.FLD_SEX != 0 && itmeClass8.FLD_SEX != base.Player_Sex) || (itmeClass8.FLD_XWJD >= 1 && itmeClass8.FLD_XWJD > base.人物武勋阶段) || itmeClass8.FLD_RESIDE2 < 1 || itmeClass8.FLD_RESIDE2 > 15)
											{
												return;
											}
											if (BitConverter.ToInt32(Item_Wear[num5].Get_Byte_Item_PID, 0) == 0)
											{
												if (itmeClass8.FLD_RESIDE2 != num5 + 1 && ((itmeClass8.FLD_RESIDE2 != 2 && itmeClass8.FLD_RESIDE2 != 3 && itmeClass8.FLD_RESIDE2 != 8 && itmeClass8.FLD_RESIDE2 != 9 && itmeClass8.FLD_RESIDE2 != 10 && itmeClass8.FLD_RESIDE2 != 11) || itmeClass8.FLD_RESIDE2 != num5))
												{
													return;
												}
												Item_Wear[num5].Byte_Item = Item_Wear[num3].Byte_Item;
												Item_Wear[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Item_Wear[num5].Byte_Item, BitConverter.ToInt32(Item_Wear[num5].Item_Amount, 0));
											}
											else
											{
												if (BitConverter.ToInt32(Item_Wear[num5].Get_Byte_Item_PID, 0) == 0)
												{
													return;
												}
												ItmeClass itmeClass9 = World.Itme[BitConverter.ToInt32(Item_Wear[num5].Get_Byte_Item_PID, 0)];
												if (itmeClass8.FLD_RESIDE2 != itmeClass9.FLD_RESIDE2)
												{
													return;
												}
												byte_Item = Item_Wear[num5].Byte_Item;
												Item_Wear[num5].Byte_Item = Item_Wear[num3].Byte_Item;
												Item_Wear[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Item_Wear[num5].Byte_Item, BitConverter.ToInt32(Item_Wear[num5].Item_Amount, 0));
											}
											break;
										}
									case 1:
										if (num5 >= ((base.装备行囊是否开启 == 1) ? 66 : 36))
										{
											return;
										}
										switch (num2)
										{
											case 0:
												if (Item_In_Bag[num5].FLD_PID >= 600000000 && Item_In_Bag[num5].FLD_PID < 700000000)
												{
													return;
												}
												if (Item_In_Bag[num5].FLD_PID == 900102 && base.Level_Of_Guild < 4)
												{
													GameMessage("Bang hôòi chýa ðaòt câìp 4", 9);
													return;
												}
												if (Item_In_Bag[num5].FLD_PID == 900103 && base.Level_Of_Guild < 5)
												{
													GameMessage("Bang hôòi chýa ðaòt câìp 5", 9);
													return;
												}
												if (Item_In_Bag[num5].FLD_PID == 900104 && base.Level_Of_Guild < 6)
												{
													GameMessage("Bang hôòi chýa ðaòt câìp 6", 9);
													return;
												}
												if (Item_In_Bag[num5].FLD_PID >= 900109 && Item_In_Bag[num5].FLD_PID <= 900112 && base.Level_Of_Guild < 7)
												{
													GameMessage("Bang hôòi chýa ðaòt câìp 7", 9);
													return;
												}
												if (Item_In_Bag[num5].FLD_PID >= 900105 && Item_In_Bag[num5].FLD_PID <= 900108 && (base.Level_Of_Guild < 7 || base.Guild_Level < 5))
												{
													GameMessage("Bang hôòi chýa ðaòt câìp 7 hoãòc baòn không phaÒi bang chuÒ", 9);
													return;
												}
												if (num3 == 14 && Pet != null)
												{
													return;
												}
												if (BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0) == 0)
												{
													if (BitConverter.ToInt32(Item_Wear[num3].Get_Byte_Item_PID, 0) == 0)
													{
														return;
													}
													Item_In_Bag[num5].Byte_Item = Item_Wear[num3].Byte_Item;
													Item_Wear[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_In_Bag[num5].Byte_Item, BitConverter.ToInt32(Item_In_Bag[num5].Item_Amount, 0));
												}
												else
												{
													if (BitConverter.ToInt32(Item_Wear[num3].Get_Byte_Item_PID, 0) == 0)
													{
														return;
													}
													ItmeClass itmeClass6 = World.Itme[BitConverter.ToInt32(Item_Wear[num3].Get_Byte_Item_PID, 0)];
													if (BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0) == 0 || Item_In_Bag[num5].LockMove)
													{
														return;
													}
													ItmeClass itmeClass7 = World.Itme[BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0)];
													if (itmeClass6.FLD_RESIDE2 != itmeClass7.FLD_RESIDE2 || itmeClass7.FLD_LEVEL > base.Player_Level || (itmeClass7.FLD_ZX != 0 && itmeClass7.FLD_ZX != base.Player_Zx))
													{
														return;
													}
													if (World.Newversion >= 16 && base.Player_Job == 11 && itmeClass7.FLD_SHIELD == 0 && (itmeClass7.FLD_RESIDE2 == 2 || itmeClass7.FLD_RESIDE2 == 5 || itmeClass7.FLD_RESIDE2 == 6 || itmeClass7.FLD_RESIDE2 == 7 || itmeClass7.FLD_RESIDE2 == 8 || itmeClass7.FLD_RESIDE2 == 10))
													{
														GameMessage("Vâòt phâÒm không daÌnh cho Diêòu Yêìn");
														return;
													}
													if (World.Newversion >= 16 && itmeClass7.FLD_PID >= 900105 && itmeClass7.FLD_PID <= 900102)
													{
														if (base.Guild_Name == "")
														{
															GameMessage("Baòn chýa tham gia môn phaìi");
															return;
														}
														if (base.Player_Sex == 1 && base.Player_Zx == 1 && itmeClass7.FLD_PID != 900105 && itmeClass7.FLD_PID != 900109)
														{
															GameMessage("Trang phuòc môn phaÒi không phuÌ hõòp giõìi tiình, thêì lýòc");
															return;
														}
														if (base.Player_Sex == 1 && base.Player_Zx == 2 && itmeClass7.FLD_PID != 900107 && itmeClass7.FLD_PID != 900111)
														{
															GameMessage("Trang phuòc môn phaÒi không phuÌ hõòp giõìi tiình, thêì lýòc");
															return;
														}
														if (base.Player_Sex == 2 && base.Player_Zx == 1 && itmeClass7.FLD_PID != 900106 && itmeClass7.FLD_PID != 900110)
														{
															GameMessage("Trang phuòc môn phaÒi không phuÌ hõòp giõìi tiình, thêì lýòc");
															return;
														}
														if (base.Player_Sex == 2 && base.Player_Zx == 2 && itmeClass7.FLD_PID != 900108 && itmeClass7.FLD_PID != 900112)
														{
															GameMessage("Trang phuòc môn phaÒi không phuÌ hõòp giõìi tiình, thêì lýòc");
															return;
														}
														if (base.Guild_Level < 5 && itmeClass7.FLD_PID >= 900105 && itmeClass7.FLD_PID <= 900108)
														{
															GameMessage("ChiÒ môn chuÒ mõìi coì thêÒ mãòc trang phuòc naÌy");
															return;
														}
													}
													if ((itmeClass7.FLD_RESIDE1 != 0 && itmeClass7.FLD_RESIDE1 != base.Player_Job) || (itmeClass7.FLD_JOB_LEVEL != 0 && itmeClass7.FLD_JOB_LEVEL > base.Player_Job_Level) || (itmeClass7.FLD_SEX != 0 && itmeClass7.FLD_SEX != base.Player_Sex) || (itmeClass7.FLD_XWJD >= 1 && itmeClass7.FLD_XWJD > base.人物武勋阶段) || itmeClass7.FLD_RESIDE2 < 1 || itmeClass7.FLD_RESIDE2 > 15)
													{
														return;
													}
													byte_Item = Item_In_Bag[num5].Byte_Item;
													Item_In_Bag[num5].Byte_Item = Item_Wear[num3].Byte_Item;
													Item_Wear[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_In_Bag[num5].Byte_Item, BitConverter.ToInt32(Item_In_Bag[num5].Item_Amount, 0));
												}
												break;
											case 169:
												if (BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0) == 0)
												{
													Item_In_Bag[num5].Byte_Item = Item_Coat[num3].Byte_Item;
													Item_Coat[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_Coat[num3].Byte_Item, BitConverter.ToInt32(Item_Coat[num3].Item_Amount, 0));
												}
												break;
											case 171:
												if (BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0) == 0)
												{
													Item_In_Bag[num5].Byte_Item = Item_NTC[num3].Byte_Item;
													Item_NTC[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_NTC[num3].Byte_Item, BitConverter.ToInt32(Item_NTC[num3].Item_Amount, 0));
													UpdateNTCBag();
												}
												break;
											default:
												if (Pet == null || num2 != 60 || num5 >= ((base.装备行囊是否开启 == 1) ? 66 : 36))
												{
													return;
												}
												if (BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0) == 0)
												{
													if (BitConverter.ToInt32(Pet.宠物装备栏[num3].Get_Byte_Item_PID, 0) == 0)
													{
														return;
													}
													Item_In_Bag[num5].Byte_Item = Pet.宠物装备栏[num3].Byte_Item;
													Pet.宠物装备栏[num3].Byte_Item = byte_Item;
													更换装备位置(num2, num3, num4, num5, Item_In_Bag[num5].Byte_Item, BitConverter.ToInt32(Item_In_Bag[num5].Item_Amount, 0));
												}
												else
												{
													if (BitConverter.ToInt32(Pet.宠物装备栏[num3].Get_Byte_Item_PID, 0) == 0)
													{
														return;
													}
													ItmeClass itmeClass4 = World.Itme[BitConverter.ToInt32(Pet.宠物装备栏[num3].Get_Byte_Item_PID, 0)];
													if (BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0) == 0 || Item_In_Bag[num5].LockMove)
													{
														return;
													}
													ItmeClass itmeClass5 = World.Itme[BitConverter.ToInt32(Item_In_Bag[num5].Get_Byte_Item_PID, 0)];
													if (itmeClass4.FLD_RESIDE2 != itmeClass5.FLD_RESIDE2 || itmeClass5.FLD_LEVEL > base.Player_Level || (itmeClass5.FLD_ZX != 0 && itmeClass5.FLD_ZX != base.Player_Zx) || (itmeClass5.FLD_RESIDE1 != 0 && itmeClass5.FLD_RESIDE1 != base.Player_Job) || (itmeClass5.FLD_JOB_LEVEL != 0 && itmeClass5.FLD_JOB_LEVEL > base.Player_Job_Level) || (itmeClass5.FLD_SEX != 0 && itmeClass5.FLD_SEX != base.Player_Sex) || (itmeClass5.FLD_XWJD >= 1 && itmeClass5.FLD_XWJD > base.人物武勋阶段) || itmeClass5.FLD_RESIDE2 < 1 || itmeClass5.FLD_RESIDE2 > 15)
													{
														return;
													}
													byte[] byte_Item4 = Item_In_Bag[num5].Byte_Item;
													Item_In_Bag[num5].Byte_Item = Pet.宠物装备栏[num3].Byte_Item;
													Pet.宠物装备栏[num3].Byte_Item = byte_Item4;
													更换装备位置(num2, num3, num4, num5, Item_In_Bag[num5].Byte_Item, BitConverter.ToInt32(Item_In_Bag[num5].Item_Amount, 0));
												}
												break;
										}
										break;
									case 59:
										{
											if (num2 != 60 || num5 >= 4 || Pet.宠物装备栏[num3].LockMove)
											{
												return;
											}
											ItmeClass itmeClass3 = World.Itme[BitConverter.ToInt32(Pet.宠物装备栏[num3].Get_Byte_Item_PID, 0)];
											if (((itmeClass3.FLD_RESIDE1 != 6 || itmeClass3.FLD_RESIDE2 != 25) && (itmeClass3.FLD_RESIDE1 != 7 || (itmeClass3.FLD_RESIDE2 != 23 && itmeClass3.FLD_RESIDE2 != 24)) && (itmeClass3.FLD_RESIDE1 != 8 || (itmeClass3.FLD_RESIDE2 != 23 && itmeClass3.FLD_RESIDE2 != 24)) && (itmeClass3.FLD_RESIDE1 != 9 || (itmeClass3.FLD_RESIDE2 != 23 && itmeClass3.FLD_RESIDE2 != 24)) && (itmeClass3.FLD_RESIDE1 != 10 || (itmeClass3.FLD_RESIDE2 != 23 && itmeClass3.FLD_RESIDE2 != 24))) || itmeClass3.FLD_LEVEL > Pet.Pet_FLD_LEVEL || itmeClass3.FLD_JOB_LEVEL > Pet.FLD_JOB_LEVEL)
											{
												return;
											}
											if (BitConverter.ToInt32(Pet.宠物以装备[num5].Get_Byte_Item_PID, 0) == 0)
											{
												if ((itmeClass3.FLD_RESIDE2 == 24 && itmeClass3.FLD_RESIDE2 != num5 + 21) || (itmeClass3.FLD_RESIDE2 == 23 && itmeClass3.FLD_RESIDE2 != num5 + 23) || (itmeClass3.FLD_RESIDE2 == 25 && itmeClass3.FLD_RESIDE2 != num5 + 23 && itmeClass3.FLD_RESIDE2 != num5 + 24) || (itmeClass3.FLD_RESIDE1 != Pet.FLD_JOB + 6 && itmeClass3.FLD_RESIDE1 != 6))
												{
													return;
												}
												Pet.宠物以装备[num5].Byte_Item = Pet.宠物装备栏[num3].Byte_Item;
												Pet.宠物装备栏[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Pet.宠物以装备[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物以装备[num5].Item_Amount, 0));
											}
											else
											{
												if (BitConverter.ToInt32(Pet.宠物以装备[num5].Get_Byte_Item_PID, 0) == 0)
												{
													return;
												}
												ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(Pet.宠物以装备[num5].Get_Byte_Item_PID, 0)];
												if (itmeClass3.FLD_RESIDE2 != itmeClass.FLD_RESIDE2 || (itmeClass3.FLD_RESIDE2 == itmeClass.FLD_RESIDE2 && itmeClass3.FLD_RESIDE1 != itmeClass.FLD_RESIDE1))
												{
													return;
												}
												byte[] byte_Item2 = Pet.宠物以装备[num5].Byte_Item;
												Pet.宠物以装备[num5].Byte_Item = Pet.宠物装备栏[num3].Byte_Item;
												Pet.宠物装备栏[num3].Byte_Item = byte_Item2;
												更换装备位置(num2, num3, num4, num5, Pet.宠物以装备[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物以装备[num5].Item_Amount, 0));
											}
											break;
										}
									case 60:
										if (num2 == 59)
										{
											if (BitConverter.ToInt32(Pet.宠物装备栏[num5].Get_Byte_Item_PID, 0) == 0)
											{
												if (BitConverter.ToInt32(Pet.宠物以装备[num3].Get_Byte_Item_PID, 0) == 0)
												{
													return;
												}
												Pet.宠物装备栏[num5].Byte_Item = Pet.宠物以装备[num3].Byte_Item;
												Pet.宠物以装备[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Pet.宠物装备栏[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物装备栏[num5].Item_Amount, 0));
											}
											else
											{
												if (BitConverter.ToInt32(Pet.宠物以装备[num3].Get_Byte_Item_PID, 0) == 0)
												{
													return;
												}
												ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(Pet.宠物以装备[num3].Get_Byte_Item_PID, 0)];
												if (BitConverter.ToInt32(Pet.宠物装备栏[num5].Get_Byte_Item_PID, 0) == 0 || Pet.宠物装备栏[num5].LockMove)
												{
													return;
												}
												ItmeClass itmeClass2 = World.Itme[BitConverter.ToInt32(Pet.宠物装备栏[num5].Get_Byte_Item_PID, 0)];
												if (itmeClass.FLD_RESIDE2 != itmeClass2.FLD_RESIDE2 || itmeClass2.FLD_LEVEL > base.Player_Level || (itmeClass2.FLD_ZX != 0 && itmeClass2.FLD_ZX != base.Player_Zx) || (itmeClass2.FLD_RESIDE1 != 0 && itmeClass2.FLD_RESIDE1 != base.Player_Job) || (itmeClass2.FLD_JOB_LEVEL != 0 && itmeClass2.FLD_JOB_LEVEL > base.Player_Job_Level) || (itmeClass2.FLD_SEX != 0 && itmeClass2.FLD_SEX != base.Player_Sex) || (itmeClass2.FLD_XWJD >= 1 && itmeClass2.FLD_XWJD > base.人物武勋阶段) || itmeClass2.FLD_RESIDE2 < 1 || itmeClass2.FLD_RESIDE2 > 15)
												{
													return;
												}
												byte[] byte_Item2 = Pet.宠物装备栏[num5].Byte_Item;
												Pet.宠物装备栏[num5].Byte_Item = Pet.宠物以装备[num3].Byte_Item;
												Pet.宠物以装备[num3].Byte_Item = byte_Item2;
												更换装备位置(num2, num3, num4, num5, Pet.宠物装备栏[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物装备栏[num5].Item_Amount, 0));
											}
										}
										else
										{
											if (num2 != 60 || num5 >= num || Item_In_Bag[num3].FLD_PID < 601100001 || Item_In_Bag[num3].FLD_PID > 700000000)
											{
												return;
											}
											if (BitConverter.ToInt32(Pet.宠物装备栏[num5].Get_Byte_Item_PID, 0) == 0)
											{
												Pet.宠物装备栏[num5].Byte_Item = Pet.宠物装备栏[num3].Byte_Item;
												Pet.宠物装备栏[num3].Byte_Item = byte_Item;
												更换装备位置(num2, num3, num4, num5, Pet.宠物装备栏[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物装备栏[num5].Item_Amount, 0));
											}
											else
											{
												byte[] byte_Item3 = Pet.宠物装备栏[num5].Byte_Item;
												Pet.宠物装备栏[num5].Byte_Item = Pet.宠物装备栏[num3].Byte_Item;
												Pet.宠物装备栏[num3].Byte_Item = byte_Item3;
												更换装备位置(num2, num3, num4, num5, Pet.宠物装备栏[num5].Byte_Item, BitConverter.ToInt32(Pet.宠物装备栏[num5].Item_Amount, 0));
											}
										}
										break;
								}
								break;
						}
						if (Pet != null)
						{
							Pet.method_5(this);
							Pet.保存数据();
							更新灵兽武功和状态();
							Update_Item_In_Bag();
							Update_Money_Weight();
						}
						if ((num2 == 169 || num2 == 169 || num2 == 169) && num4 == 1)
						{
							base.Player_Money -= 100L;
						}
						vancong = 0;
						更新人物数据(this);
						Update_Item_In_Bag();
						Update_Equipment_Effectiveness(this, all: true);
						Update_Character_Wear_Item();
						UpdatePowersAndStatus();
						Update_Money_Weight();
						Update_HP_MP_SP();
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "更换装备出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void Update_HP_MP_SP()
		{
			try
			{
				if (base.Player_ExpErience < 0)
				{
					base.Player_ExpErience = 0;
				}
				Random random = new Random(World.GetRandomSeed());
				if ((base.人物_SP > base.人物最大_SP && base.Player_Job != 5) || KCPhanNo != 0)
				{
					if (KCPhanNo == 0)
					{
						base.人物_SP = 0;
					}
					if (base.Player_Job == 6)
					{
						if (怒气_JOB6 < 5)
						{
							怒气_JOB6++;
						}
					}
					else if (base.Player_Job == 7)
					{
						int num = 0;
						if (Show_Pic_Class.ContainsKey(901301))
						{
							if (base.上河调计数 >= 3)
							{
								base.上河调计数 = 0;
							}
							switch (base.上河调计数)
							{
								case 0:
									num = 900401;
									break;
								case 1:
								case 2:
									num = 900403;
									break;
							}
							if (Show_Pic_Class.ContainsKey(900401))
							{
								Show_Pic_Class[900401].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(900402))
							{
								Show_Pic_Class[900402].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(900403))
							{
								Show_Pic_Class[900403].EndEvent();
							}
							if (num != 0 && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
							{
								Class_Show_Pill value = new Class_Show_Pill(this, 60000.0, num, 0);
								Show_Pic_Class.Add(num, value);
								Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, 60000);
								Add_ATT_Percentage_PN(0.15);
								Add_DEF_Percentage_PN(0.15);
								base.上河调计数++;
							}
						}
						else if (Show_Pic_Class.ContainsKey(901302))
						{
							if (base.下河调计数 >= 3)
							{
								base.下河调计数 = 0;
							}
							switch (base.下河调计数)
							{
								case 0:
									num = 900401;
									break;
								case 1:
								case 2:
									num = 900402;
									break;
							}
							if (Show_Pic_Class.ContainsKey(900401))
							{
								Show_Pic_Class[900401].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(900402))
							{
								Show_Pic_Class[900402].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(900403))
							{
								Show_Pic_Class[900403].EndEvent();
							}
							if (num != 0 && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
							{
								Class_Show_Pill value2 = new Class_Show_Pill(this, 60000.0, num, 0);
								Show_Pic_Class.Add(num, value2);
								Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, 60000);
								Add_ATT_Percentage_PN(0.15);
								Add_DEF_Percentage_PN(0.15);
								base.下河调计数++;
							}
						}
						else if (Show_Pic_Class.ContainsKey(901303) && 玉连环 != null)
						{
							if (base.玉连环计数 >= 6)
							{
								base.玉连环计数 = 0;
							}
							switch (base.玉连环计数)
							{
								case 0:
									num = 玉连环[0];
									break;
								case 1:
									num = 玉连环[1];
									break;
								case 2:
									num = 玉连环[2];
									break;
								case 3:
									num = 玉连环[3];
									break;
								case 4:
									num = 玉连环[4];
									break;
								case 5:
									num = 玉连环[5];
									break;
							}
							if (Show_Pic_Class.ContainsKey(900401))
							{
								Show_Pic_Class[900401].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(900402))
							{
								Show_Pic_Class[900402].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(900403))
							{
								Show_Pic_Class[900403].EndEvent();
							}
							if (num != 0 && !Show_Pic_Class.ContainsKey(num) && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
							{
								Class_Show_Pill value3 = new Class_Show_Pill(this, 60000.0, num, 0);
								Show_Pic_Class.Add(num, value3);
								Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, 60000);
								Add_ATT_Percentage_PN(0.15);
								Add_DEF_Percentage_PN(0.15);
								base.玉连环计数++;
							}
						}
						UpdatePowersAndStatus();
						更新人物数据(this);
						更新广播人物数据();
					}
					else
					{
						if (Show_Pic_Class.ContainsKey(700014))
						{
							Show_Pic_Class[700014].EndEvent();
						}
						if (!Show_Pic_Class.ContainsKey(700014))
						{
							int num2 = 10000 + (int)base.QiGong_PhanNo * 3000 + (10 + (int)base.KhiCongTTChung_PhanNo) * 1000;
							if (KCPhanNo == 2)
							{
								num2 = 3000;
							}
							Show_Qigong_Effect(base.UserSessionID, 404);
							Class_Show_Pill value4 = new Class_Show_Pill(this, num2, 700014, 0);
							Show_Pic_Class.Add(700014, value4);
							if (base.Player_Job == 3 || base.Player_Job == 10)
							{
								Add_ATT_Percentage_PN(0.2 + base.枪_末日狂舞);
								Add_DEF_Percentage_PN(0.2 + base.枪_末日狂舞);
							}
							else
							{
								Add_ATT_Percentage_PN(0.2);
								Add_DEF_Percentage_PN(0.2);
								if (base.Player_Job == 11)
								{
									base.FLD_追加百分比_Shield_PHANNO = 0.2;
								}
							}
							Send_Packet_Show_Pic(BitConverter.GetBytes(700014), 1, num2);
						}
						UpdatePowersAndStatus();
						更新人物数据(this);
						更新广播人物数据();
					}
				}
				KCPhanNo = 0;
				if (base.Player_FLD_HP > base.Player_HP_Max)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (base.Player_FLD_MP > base.Player_MP_Max)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (base.Player_FLD_HP < 0)
				{
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				if (base.Player_FLD_MP < 0)
				{
					base.Player_FLD_MP = base.Player_MP_Max;
				}
				if (base.Player_FLD_Map != 7301)
				{
					base.HP_GuildWar = 0L;
				}
				if (World.血战 != null && base.Player_FLD_Map == 7301 && base.HP_GuildWar == 0 && (base.UserName == World.血战.帮战主方.帮主名称 || base.UserName == World.血战.帮战客方.帮主名称))
				{
					base.HP_GuildWar = 500000 - base.Player_HP_Max;
					base.Player_FLD_HP = base.Player_HP_Max;
				}
				PacketData packetData = new PacketData();
				packetData.WriteInt(0);
				packetData.WriteInt((int)base.Player_FLD_HP);
				packetData.WriteInt(base.Player_FLD_MP);
				packetData.WriteInt(base.人物_SP);
				packetData.WriteInt((int)base.Player_HP_Max);
				packetData.WriteInt(base.Player_MP_Max);
				packetData.WriteInt(base.人物最大_SP);
				packetData.WriteInt(怒气_JOB6);
				packetData.WriteInt(base.Player_Shield_Max);
				packetData.WriteInt(base.Player_Shield);
				packetData.WriteInt(0);
				packetData.WriteByte(0);
				packetData.WriteInt(怒气_JOB11);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 26880, base.UserSessionID);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "更新HP_MP_SP 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 更新NPC数据cc(int NPCid, int NPCid2, Players Playe)
		{
			string hex = "AA554D0000000067003E00010000007D297D2911270100000032000000320000000080A24300007041004088440000804000000000000000000080A243000070410040884400000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.UserSessionID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(NPCid), 0, array, 15, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(NPCid), 0, array, 17, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(NPCid2), 0, array, 19, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(200), 0, array, 25, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(200), 0, array, 29, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.Player_FLD_X), 0, array, 33, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.Player_FLD_Y), 0, array, 41, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.Player_FLD_Z), 0, array, 37, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 49, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 53, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.Player_FLD_X), 0, array, 57, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.Player_FLD_Y), 0, array, 65, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.Player_FLD_Z), 0, array, 61, 4);
			if (Playe.Client != null)
			{
				Playe.Client.Send(array, array.Length);
			}
			SendRangeOfPackets(array, array.Length);
		}

		public void method_1911(Players players)
		{
			PacketData packetData = new PacketData();
			packetData.WriteLong(60L);
			for (int i = 0; i < 16; i++)
			{
				if (BitConverter.ToInt32(players.Pet.宠物装备栏[i].Item_Amount, 0) == 0)
				{
					players.Pet.宠物装备栏[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
				}
				else
				{
					players.检查物品系统("装备栏包裹", ref players.Pet.宠物装备栏[i]);
				}
				packetData.Write(players.Pet.宠物装备栏[i].GetByte(), 0, World.单个物品大小);
			}
			if (players.Client != null)
			{
				players.Client.SendPak(packetData, 28928, players.Pet_ID);
			}
		}

		public void 更新灵兽HP_MP_SP()
		{
			if ((double)Pet.FLD_HP < (double)Pet.FLD_HP_MAX * 0.3 && Pet.Int32_16 >= 0)
			{
				int num = Pet.FLD_HP_MAX - Pet.FLD_HP;
				Pet.FLD_HP += num;
				method_1922(this);
				method_132(Pet.Int32_16, num);
				Item_Effects(1000000179L);
				if (Pet != null)
				{
					Pet.method_5(this);
					Pet.保存数据();
					更新灵兽武功和状态();
					method_1911(this);
				}
			}
			string hex;
			byte[] array;
			if (World.Newversion >= 11)
			{
				hex = "AA552200000100C00013000F000E000D2A9F69000800660300009D010000000000000000000055AA";
				array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_ZCD), 0, array, 22, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 16, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				return;
			}
			hex = "AA552B0000549C69001C00000000001D070000CC0600001D070000CC0600000D07000000000000000000000000000055AA";
			array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_HP), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_MP), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_HP_MAX), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_MP_MAX), 0, array, 27, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_ZCD), 0, array, 31, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 更新灵兽初始话装备篮包裹()
		{
			string hex
			byte[] array = Converter.hexStringToByte(hex);
			for (int i = 0; i < 16; i++)
			{
				if (BitConverter.ToInt32(Pet.宠物装备栏[i].Item_Amount, 0) == 0)
				{
					Pet.宠物装备栏[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
				}
				Buffer.BlockCopy(Pet.宠物装备栏[i].Byte_Item, 0, array, 15 + i * 72, 72);
				if (Pet.宠物装备栏[i].物品绑定)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(BitConverter.ToInt32(Pet.宠物装备栏[i].Get_Byte_Item_PID, 0) + 20000), 0, array, 23 + i * 72, 4);
				}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 更新灵兽负重()
		{
			Pet.FLD_负重 = 0;
			for (int i = 0; i < 16; i++)
			{
				if (i < 4)
				{
					Pet.FLD_负重 += Pet.宠物以装备[i].物品总重量;
				}
				Pet.FLD_负重 += Pet.宠物装备栏[i].物品总重量;
			}
			string hex = "AA551F0000549C7C0010000000000000000000730A0000730A0000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_负重), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.FLD_负重_MAX), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 更新灵兽经验和历练()
		{
			string hex = "AA551F0000549C6A00100078A8B70E80A1031C0000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			double num = Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL]) - Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL - 1]);
			double num2 = Pet.FLD_EXP - Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL - 1]);
			if (num2 < 1.0)
			{
				Pet.FLD_EXP = Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL - 1]);
				num2 = 0.0;
			}
			Buffer.BlockCopy(BitConverter.GetBytes((int)num2), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 更新灵兽武功和状态()
		{
			PacketData packetData = new PacketData();
			packetData.WriteShort(Pet.Pet_FLD_LEVEL);
			packetData.WriteShort(Pet.FLD_攻击);
			packetData.WriteShort(Pet.FLD_防御);
			packetData.WriteShort(Pet.FLD_命中);
			for (int i = 0; i < 8; i++)
			{
				if (Pet.武功[i] != null)
				{
					packetData.WriteInt(Pet.武功[i].FLD_PID);
				}
				else
				{
					packetData.WriteInt(0);
				}
			}
			for (int j = 0; j < 24; j++)
			{
				packetData.WriteInt(0);
			}
			packetData.WriteInt(11);
			packetData.WriteInt(22);
			packetData.WriteInt(33);
			packetData.WriteInt(44);
			packetData.WriteInt(55);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 27392, base.Pet_ID);
			}
		}

		public void UpdateConfig(byte[] data, int length)
		{
			PacketVerify(data, length);
			PacketReader packetReader = new PacketReader(data, length, fixedSize: false);
			packetReader.Seek(11, SeekOrigin.Begin);
			if (length != 35)
			{
				GameMessage("Please update new pachet. Some functions not available", 9);
			}
			cacheDataConfig = data;
			Config.组队 = packetReader.ReadInt8();
			Config.交易 = packetReader.ReadInt8();
			Config.传音 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			int 原著衣服 = Config.原著衣服;
			Config.原著衣服 = packetReader.ReadInt8();
			Config.查装备 = packetReader.ReadInt8();
			int 头发开关 = Config.头发开关;
			Config.头发开关 = packetReader.ReadInt8();
			int 武勋开关 = Config.武勋开关;
			Config.武勋开关 = packetReader.ReadInt8();
			if (Config.武勋开关 == 2 && (double)base.Player_WuXun > World.Wxlever[7] && base.人物武勋阶段 == 7 && base.Player_Zx != 0)
			{
				DateTime d = DateTime.Now.AddDays(30.0);
				DateTime now = DateTime.Now;
				TimeSpan timeSpan = d - now;
				时间药品 时间药品 = new 时间药品();
				时间药品.FLD_sj = (int)Convert.ToDouble(d.ToString("yyMMddHHmm"));
				base.Player_WuXun -= 50000;
				if (base.Player_Zx == 1)
				{
					时间药品.FLD_PID = 1008001042;
					Send_Packet_Show_时间物品(1008001042, 1, 时间药品.FLD_sj, (int)timeSpan.TotalMinutes);
				}
				else
				{
					时间药品.FLD_PID = 1008001043;
					Send_Packet_Show_时间物品(1008001043, 1, 时间药品.FLD_sj, (int)timeSpan.TotalMinutes);
				}
				list_时间药品.Add(时间药品.FLD_PID, 时间药品);
			}
			Config.搜索开关 = packetReader.ReadInt8();
			Config.告白开关 = packetReader.ReadInt8();
			int 蔬菜武器开关 = Config.蔬菜武器开关;
			if (World.Newversion <= 15)
			{
				packetReader.ReadInt8();
			}
			Config.蔬菜武器开关 = packetReader.ReadInt8();
			packetReader.ReadInt8();
			Config.宠物经验 = packetReader.ReadInt8();
			更新人物数据(this);
			更新装备效果to(this, this);
			UpdatePowersAndStatus();
			if (原著衣服 != Config.原著衣服 || 蔬菜武器开关 != Config.蔬菜武器开关 || 头发开关 != Config.头发开关 || 武勋开关 != Config.武勋开关 || Config.武勋开关 == 99)
			{
				更新广播人物数据();
				Update_Equipment_Effectiveness();
				if (武勋开关 != Config.武勋开关)
				{
					更新武勋效果();
				}
			}
			服务器时间();
			if (base.FLD_Teacher != "")
			{
				Write_Name_Teacher();
			}
			UpdatePowersAndStatus();
			Update_HP_MP_SP();
			移动离开当前地图(base.Player_FLD_Map);
			获取复查范围玩家();
		}

		public void 更新人物任务()
		{
			using (PacketData packetData = new PacketData())
			{
				packetData.WriteInt(任务.Count);
				foreach (任务类 value in 任务.Values)
				{
					packetData.WriteShort(value.任务ID);
					packetData.WriteShort(value.任务阶段ID);
				}
				packetData.WriteInt(0);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 34048, base.UserSessionID);
				}
			}
		}

		public void 更新武勋效果()
		{
			if (Config.武勋开关 == 90 && (list_时间药品.ContainsKey(1008001478) || list_时间药品.ContainsKey(1008001479)))
			{
				base.FLD_斗神_追加_防御 = 150;
				base.FLD_斗神_追加_攻击 = 200;
				base.FLD_斗神_追加_气功 = 2;
			}
			else
			{
				base.FLD_斗神_追加_防御 = 0;
				base.FLD_斗神_追加_攻击 = 0;
				base.FLD_斗神_追加_气功 = 0;
			}
			if (Config.武勋开关 == 1 || Config.武勋开关 == 99)
			{
				switch (base.人物武勋阶段)
				{
					case 1:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段1[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段1[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段1[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段1[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段1[4]);
						break;
					case 2:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段2[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段2[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段2[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段2[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段2[4]);
						break;
					case 3:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段3[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段3[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段3[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段3[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段3[4]);
						break;
					case 4:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段4[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段4[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段4[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段4[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段4[4]);
						break;
					case 5:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段5[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段5[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段5[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段5[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段5[4]);
						break;
					case 6:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段6[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段6[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段6[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段6[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段6[4]);
						break;
					case 7:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段7[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段7[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段7[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段7[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段7[4]);
						break;
					case 8:
						base.FLD_武勋攻击 = int.Parse(World.武勋阶段8[0]);
						base.FLD_武勋防御 = int.Parse(World.武勋阶段8[1]);
						base.武勋追加_HP = int.Parse(World.武勋阶段8[2]);
						base.武勋追加_MP = int.Parse(World.武勋阶段8[3]);
						base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段8[4]);
						break;
				}
			}
			else if (Config.武勋开关 == 2)
			{
				if (base.人物武勋阶段 == 8)
				{
					base.FLD_武勋攻击 = int.Parse(World.武勋阶段8[0]);
					base.FLD_武勋防御 = int.Parse(World.武勋阶段8[1]);
					base.武勋追加_HP = int.Parse(World.武勋阶段8[2]);
					base.武勋追加_MP = int.Parse(World.武勋阶段8[3]);
					base.FLD_武勋_追加_气功 = int.Parse(World.武勋阶段8[4]);
				}
			}
			else
			{
				base.FLD_武勋攻击 = 0;
				base.FLD_武勋防御 = 0;
				base.武勋追加_HP = 0;
				base.武勋追加_MP = 0;
				base.FLD_武勋_追加_气功 = 0;
			}
			UpdatePowersAndStatus();
			Update_HP_MP_SP();
		}

		public void Update_Equipment_Effectiveness(Players players = null, bool all = false)
		{
			for (int i = 0; i < 16; i++)
			{
				DateTime dateTime = new DateTime(1970, 1, 1, 7, 0, 0);
				if (Item_Wear[i].FLD_DAY1 != 0 && Item_Wear[i].FLD_DAY2 != 0 && DateTime.Now.Subtract(dateTime.AddSeconds(Item_Wear[i].FLD_DAY2)).TotalSeconds >= 0.0)
				{
					Item_Wear[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
				}
			}
			PacketData packetData = new PacketData();
			for (int i = 0; i < 30; i++)
			{
				if (i < 15)
				{
					packetData.Write(Item_Wear[i].GetByte(), 0, World.单个物品大小);
				}
				else
				{
					packetData.Write(new byte[World.单个物品大小], 0, World.单个物品大小);
				}
			}
			packetData.Write(Item_Wear[15].GetByte(), 0, World.单个物品大小);
			packetData.Write(new byte[World.单个物品大小], 0, World.单个物品大小);
			if (players != null && players.Client != null && !all)
			{
				players.Client.SendPak(packetData, 30208, base.UserSessionID);
				return;
			}
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 30208, base.UserSessionID);
			}
			if (all)
			{
				SendRangeOfPackets(packetData, 30208, base.UserSessionID);
			}
		}

		public void 更新装备效果to(Players toPlay, Players thisPlay)
		{
			PacketData packetData = new PacketData();
			for (int i = 0; i < 30; i++)
			{
				if (i < 15)
				{
					packetData.Write(Item_Wear[i].GetByte(), 0, World.单个物品大小);
				}
				else
				{
					packetData.Write(new byte[World.单个物品大小], 0, World.单个物品大小);
				}
			}
			packetData.Write(Item_Wear[15].GetByte(), 0, World.单个物品大小);
			packetData.Write(new byte[World.单个物品大小], 0, World.单个物品大小);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 30208, thisPlay.UserSessionID);
			}
		}

		public Players FindPlayer(int UserSessionID)
		{
			return Find_PlayerSessionID(UserSessionID);
		}

		public void TeleCharacter(float x, float y, float z)
		{
			base.Player_FLD_X = x;
			base.Player_FLD_Z = z;
			base.Player_FLD_Y = y;
			string hex = "AA551F00000000790010000020D7C500007041000040422D010000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_X), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_Z), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_Y), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_Map), 0, array, 23, 4);
			if (base.Client != null)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				base.Client.Send(array, array.Length);
			}
		}

		public void FakeMove(float x, float y, float z)
		{
			string hex = "AA553700012C0165002800026091862820D4451C629642270A1544EB20D44500007041369311440100000097BD5D41FFFF0000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(x), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(z), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(y), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(x), 0, array, 27, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(z), 0, array, 31, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(y), 0, array, 35, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 攻击(byte[] data, int length)
		{
			int num = 1;
			try
			{
				int num2;
				int num4;
				int num5;
				int num3;
				if (异常状态 != null && 异常状态.Count > 0 && (异常状态.ContainsKey(17) || 异常状态.ContainsKey(8) || 异常状态.ContainsKey(23) || 异常状态.ContainsKey(26) || 异常状态.ContainsKey(28)))
				{
					GameMessage("Traòng thaìi không thêÒ tâìn công", 9);
				}
				else
				{
					num = 111;
					if (Show_Pic_Class != null && Show_Pic_Class.Count > 0 && Show_Pic_Class.ContainsKey(700314))
					{
						GameMessage("Traòng thaìi không thêÒ tâìn công", 9);
					}
					else
					{
						num = 112;
						if (base.Player_FLD_HP > 0)
						{
							if (潜行模式 == 0 && GM模式 == 1)
							{
								潜行状态(0);
							}
							if (!base.PlayerIsDead)
							{
								num = 24;
								PacketVerify(data, length);
								byte[] array = new byte[4];
								Buffer.BlockCopy(data, 5, array, 0, 2);
								num2 = BitConverter.ToInt32(array, 0);
								byte[] array2 = new byte[4];
								byte[] array3 = new byte[4];
								num3 = 0;
								Buffer.BlockCopy(data, 15, array2, 0, 4);
								Buffer.BlockCopy(data, 11, array3, 0, 2);
								num4 = BitConverter.ToInt32(array2, 0);
								num = 23;
								if (base.弓群攻技能ID != 0 && base.Player_Job == 6 && Check_Aoe == 0)
								{
									num = 21;
									if (World.TblKongfu.TryGetValue(base.弓群攻技能ID, out MartialArts _) && num4 == 0)
									{
										num = 22;
										num4 = base.弓群攻技能ID;
										Check_Aoe1 = 1;
									}
								}
								if (base.Player_Job == 4 && Check_Aoe != 0 && num4 == 0)
								{
									num4 = 400001;
								}
								num5 = BitConverter.ToInt32(array3, 0);
								if (num4 != 2000401 && num4 != 2000402)
								{
									goto IL_0282;
								}
								if (Check_Skill_Combo_DHL)
								{
									Check_Skill_Combo_DHL = false;
									goto IL_0282;
								}
								GameMessage("ChiÒ coì thêÒ sýÒ duòng voÞ công combo", 7);
							}
						}
					}
				}
				goto end_IL_0003;
			IL_0282:
				if (num5 >= 10000)
				{
					goto IL_080e;
				}
				num = 20;
				if (num5 >= 300)
				{
					num = 200;
					Players players = FindPlayer(num5);
					num = 19;
					if (players != null)
					{
						if (base.UserSessionID != num5 && World.Newversion >= 10 && World.Newversion <= 13 && base.人物PK模式 != 0 && (base.Player_FLD_Map == 101 || base.Player_FLD_Map == 2101 || base.Player_FLD_Map == 2201 || base.Player_FLD_Map == 2101) && base.Player_FLD_Map != 801 && base.Player_FLD_Map != 901)
						{
							GameMessage("BaÒn ðôÌ không PK", 22);
						}
						else if (World.Newversion >= 10 && World.Newversion <= 13 && players.Player_FLD_Map != 801 && players.Player_FLD_Map != 901 && (World.PkSwitch != 0 || base.人物PK模式 == 0) && num5 != base.UserSessionID && num4 != 501201 && num4 != 501202 && num4 != 501203 && num4 != 501301 && num4 != 501302 && num4 != 501303 && num4 != 501401 && num4 != 501402 && num4 != 501403 && num4 != 501501 && num4 != 501502 && num4 != 501601 && num4 != 501602 && num4 != 501603 && num4 != 401202 && num4 != 401203 && num4 != 401301 && num4 != 401302 && num4 != 401303 && num4 != 601201 && num4 != 601202 && num4 != 501701 && num4 != 901501)
						{
							GameMessage("Không ðýõòc PK", 22);
						}
						else if (base.UserSessionID != num5 && World.Newversion >= 10 && !World.isMapPK(players.Player_FLD_Map) && num4 != 501201 && num4 != 501202 && num4 != 501203 && num4 != 501301 && num4 != 501302 && num4 != 501303 && num4 != 501401 && num4 != 501402 && num4 != 501403 && num4 != 501501 && num4 != 501502 && num4 != 501601 && num4 != 501602 && num4 != 501603 && num4 != 401202 && num4 != 401203 && num4 != 401301 && num4 != 401302 && num4 != 401303 && num4 != 601201 && num4 != 601202 && num4 != 501701 && num4 != 901501)
						{
							GameMessage("BaÒn ðôÌ không PK", 22);
						}
						else if (World.Newversion >= 14 && base.Player_FLD_Map != 101 && base.Player_FLD_Map != 801 && base.Player_FLD_Map != 901 && (World.PkSwitch != 0 || base.人物PK模式 == 0) && num5 != base.UserSessionID && num4 != 501201 && num4 != 501202 && num4 != 501203 && num4 != 501301 && num4 != 501302 && num4 != 501303 && num4 != 501401 && num4 != 501402 && num4 != 501403 && num4 != 501501 && num4 != 501502 && num4 != 501601 && num4 != 501602 && num4 != 501603 && num4 != 401202 && num4 != 401203 && num4 != 401301 && num4 != 401302 && num4 != 401303 && num4 != 601201 && num4 != 601202 && num4 != 501701 && num4 != 901501)
						{
							GameMessage("Không ðýõòc PK", 22);
						}
						else if (base.Player_FLD_Map == 7301 && CheckCungGuild(num5))
						{
							GameMessage("BaÒn ðôÌ naÌy không ðýõòc ðaình ngýõÌi cuÌng bang hôòi", 22);
						}
						else
						{
							if (Pet == null || Pet.Ride == 0)
							{
								players.time_PK_Switch = DateTime.Now;
								goto IL_080e;
							}
							GameMessage("Traòng thaìi không thêÒ tâìn công", 7);
						}
					}
					else
					{
						GameMessage("Không xaìc ðiònh ðýõòc ðôìi phýõng", 7);
					}
				}
				goto end_IL_0003;
			IL_1413:
				num = 3;
				MartialArts value2 = default(MartialArts);
				DateTime now;
				if (World.Newversion >= 16 && World.TblKongfu.TryGetValue(num4, out value2))
				{
					if (value2.FLD_SKILL_TIME < 4000)
					{
						KeyValuePair<int, DateTime> value3 = new KeyValuePair<int, DateTime>(num4, now.AddMilliseconds(value2.FLD_SKILL_TIME));
						timeDelaySkill.Add(num4, value3);
					}
					else
					{
						int num6 = (int)((double)value2.FLD_SKILL_TIME * (1.0 - base.HBQ_KCTT3_GiamThoiGian * 1.2));
						KeyValuePair<int, DateTime> value3 = new KeyValuePair<int, DateTime>(num4, now.AddMilliseconds(num6));
						timeDelaySkill.Add(num4, value3);
					}
				}
				num = 2;
				goto end_IL_0003;
			IL_0d2d:
				CheckHackSpeed_SkillID = num4;
				Check_Attack_Skill_Or_Physical = 1;
				goto IL_0d48;
			IL_080e:
				if (num4 != 3000401)
				{
					goto IL_08d1;
				}
				int num7 = (int)Math.Sqrt(Math.Pow(base.Player_FLD_X - Player_FLD_X_Old, 2.0) + Math.Pow(base.Player_FLD_Y - Player_FLD_Y_Old, 2.0));
				int num8 = (int)DateTime.Now.Subtract(time_PK_3000401).TotalSeconds;
				if (num8 >= 2)
				{
					if (200 >= num7)
					{
						time_PK_3000401 = DateTime.Now;
						goto IL_08d1;
					}
					GameMessage("KhoaÒng caìch quaì xa", 9);
				}
				goto end_IL_0003;
			IL_08d1:
				if (num4 != 801401)
				{
					goto IL_094c;
				}
				num8 = (int)DateTime.Now.Subtract(time_PK_801401).TotalSeconds;
				if (num8 >= 60)
				{
					time_PK_801401 = DateTime.Now;
					goto IL_094c;
				}
				GameMessage("ThõÌi gian hôÌi chiêu laÌ " + (60 - num8) + " giây nýÞa mõìi duÌng dýõòc");
				goto end_IL_0003;
			IL_094c:
				num3 = (int)DateTime.Now.Subtract(time_PK).TotalMilliseconds;
				if (num4 == 0)
				{
					Check_Attack_Skill_Or_Physical = 0;
					goto IL_0d48;
				}
				MartialArts value4 = default(MartialArts);
				if (World.Newversion >= 16 && World.TblKongfu.TryGetValue(num4, out value4))
				{
					num = 16;
					if (timeDelaySkill.Count > 0)
					{
						foreach (KeyValuePair<int, DateTime> value8 in timeDelaySkill.Values)
						{
							if (DateTime.Now >= value8.Value)
							{
								timeDelaySkill.Remove(value8.Key);
							}
						}
					}
					num = 17;
					if (timeDelaySkill.Count >= 10)
					{
						int num9 = 1;
						foreach (KeyValuePair<int, DateTime> value9 in timeDelaySkill.Values)
						{
							GameMessage("Skill " + num9 + " :=> " + value9.Value.Subtract(DateTime.Now).TotalMilliseconds);
							num9++;
						}
					}
					else
					{
						num = 18;
						int num10;
						if (timeDelaySkill.ContainsKey(num4))
						{
							DateTime value10 = timeDelaySkill[num4].Value;
							num10 = ((1 == 0) ? 1 : 0);
						}
						else
						{
							num10 = 1;
						}
						if (num10 != 0 || !(DateTime.Now < timeDelaySkill[num4].Value))
						{
							goto IL_0d2d;
						}
						GameMessage("Baòn tâìn công quaì nhanh! => " + timeDelaySkill[num4].Value.Subtract(DateTime.Now).TotalMilliseconds + " / " + num3);
					}
				}
				else
				{
					if (World.Newversion < 10 || !World.TblKongfu.TryGetValue(num4, out value4))
					{
						goto IL_0d2d;
					}
					if (num3 < 450)
					{
						GameMessage("Baòn tâìn công quaì nhanh! 1");
					}
					else if (CheckHackSpeed_Skill_Time < 4000)
					{
						if (num3 >= CheckHackSpeed_Skill_Time || CheckHackSpeed_Kep_Skill != 0)
						{
							CheckHackSpeed_Skill_Time = value4.FLD_SKILL_TIME;
							CheckHackSpeed_Kep_Skill = 0;
							goto IL_0cff;
						}
						GameMessage("Baòn tâìn công quaì nhanh! 2");
					}
					else
					{
						if (CheckHackSpeed_SkillID != num4 || num3 >= CheckHackSpeed_Skill_Time)
						{
							CheckHackSpeed_Skill_Time = (int)((double)value4.FLD_SKILL_TIME * (1.0 - base.HBQ_KCTT3_GiamThoiGian));
							CheckHackSpeed_Kep_Skill = 0;
							goto IL_0cff;
						}
						GameMessage("Baòn tâìn công quaì nhanh! 3");
					}
				}
				goto end_IL_0003;
			IL_0d48:
				now = DateTime.Now;
				if (base.Player_FLD_Map == 801 && Check_kepskill == 0)
				{
					num = 15;
					Check_kepskill = 1;
					UPDATECDSKILL(base.Player_FLD_Map);
				}
				else if (base.Player_FLD_Map != 801)
				{
					num = 14;
					if (base.人物PK模式 == 0)
					{
						if (Check_kepskill != 0)
						{
							Check_kepskill = 0;
							UPDATECDSKILL(base.Player_FLD_Map);
						}
					}
					else if (Check_kepskill != 1)
					{
						Check_kepskill = 1;
						UPDATECDSKILL(base.Player_FLD_Map);
					}
					num = 13;
				}
				if (num4 == 3000401)
				{
					if (num5 > 10000)
					{
						if (MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(num5, out NpcClass value5) && value5.IsNpc != 1 && PlayerShop == null)
						{
							TeleCharacter(value5.RxjhX, value5.RxjhY, value5.RxjhZ);
							if (!value5.异常状态.ContainsKey(4))
							{
								异常状态类 value6 = new 异常状态类(value5, base.UserSessionID, 1000, 4, 0);
								value5.异常状态.Add(4, value6);
							}
							if (base.KC_QuyenVuong_1 != 0.0 && new Random().NextDouble() * 100.0 < base.KC_QuyenVuong_1)
							{
								if (value5.异常状态.ContainsKey(4))
								{
									value5.异常状态[4].EndEvent();
								}
								Show_Qigong_Effect(base.UserSessionID, 562);
								异常状态类 value7 = new 异常状态类(value5, base.UserSessionID, 3000, 4, 0);
								value5.异常状态.Add(4, value7);
							}
						}
					}
					else
					{
						Players players2 = Find_PlayerSessionID(num5);
						if (players2 != null)
						{
							TeleCharacter(players2.Player_FLD_X, players2.Player_FLD_Y, players2.Player_FLD_Z);
							players2.TeleCharacter(players2.Player_FLD_X, players2.Player_FLD_Y, players2.Player_FLD_Z);
							FakeMove(players2.Player_FLD_X, players2.Player_FLD_Y, players2.Player_FLD_Z);
							players2.FakeMove(players2.Player_FLD_X, players2.Player_FLD_Y, players2.Player_FLD_Z);
							if (!players2.异常状态.ContainsKey(4))
							{
								异常状态类 value6 = new 异常状态类(players2, 1000, 4, 0);
								players2.异常状态.Add(4, value6);
								players2.UpdatePowersAndStatus();
							}
							if (base.KC_QuyenVuong_1 != 0.0 && new Random().NextDouble() * 100.0 < base.KC_QuyenVuong_1)
							{
								if (players2.异常状态.ContainsKey(4))
								{
									players2.异常状态[4].EndEvent();
								}
								Show_Qigong_Effect(base.UserSessionID, 562);
								异常状态类 value7 = new 异常状态类(players2, 3000 / ((!players2.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2), 4, 0);
								players2.异常状态.Add(4, value7);
							}
						}
					}
				}
				else if (num5 > 10000 || Check_kepskill == 0)
				{
					Pk武功ID = num4;
					num = 12;
					if (num2 != base.UserSessionID)
					{
						if (num4 != 0 && num4 != 400001)
						{
							num = 5;
							魔法攻击灵兽(num4, num5);
						}
						else
						{
							num = 4;
							物理攻击灵兽(num4, num5);
						}
						goto IL_1413;
					}
					if (num4 != 0 && num4 != 400001)
					{
						if (num3 >= 1000)
						{
							num = 11;
							if (Timer_VerifyAttack != null)
							{
								Timer_VerifyAttack.Enabled = false;
								Timer_VerifyAttack.AutoReset = false;
								Timer_VerifyAttack.Dispose();
								Timer_VerifyAttack = null;
							}
							time_PK = DateTime.Now;
							Thread.Sleep(50);
							num = 10;
							Magic_Attack(num4, num5);
							if (World.攻击确认模式 == 2)
							{
								num = 9;
								verifyAttack_ByteArray = data;
							}
							goto IL_1413;
						}
					}
					else if (num3 >= 600)
					{
						num = 8;
						if (Timer_VerifyAttack != null)
						{
							Timer_VerifyAttack.Enabled = false;
							Timer_VerifyAttack.AutoReset = false;
							Timer_VerifyAttack.Dispose();
							Timer_VerifyAttack = null;
						}
						time_PK = DateTime.Now;
						Thread.Sleep(50);
						num = 7;
						Physical_Attack(num4, num5);
						if (World.攻击确认模式 == 2)
						{
							num = 6;
							verifyAttack_ByteArray = data;
							autoAttackPhysical_ByteArray = data;
						}
						goto IL_1413;
					}
				}
				else
				{
					Pk武功ID = num4;
					if (num2 != base.UserSessionID)
					{
						if (num4 != 0 && num4 != 400001)
						{
							魔法攻击灵兽(num4, num5);
						}
						else
						{
							物理攻击灵兽(num4, num5);
						}
						goto IL_1413;
					}
					if (num4 != 0 && num4 != 400001)
					{
						if (num3 >= 300)
						{
							time_PK = DateTime.Now;
							Thread.Sleep(50);
							Magic_Attack(num4, num5);
							Thread.Sleep(250);
							VerifyAttack(data, length);
							goto IL_1413;
						}
						GameMessage("Baòn tâìn công quaì nhanh! Skill");
					}
					else
					{
						if (num3 >= 250)
						{
							time_PK = DateTime.Now;
							Thread.Sleep(50);
							Physical_Attack(num4, num5);
							autoAttackPhysical_ByteArray = data;
							Thread.Sleep(250);
							VerifyAttack(data, length);
							goto IL_1413;
						}
						GameMessage("Baòn tâìn công quaì nhanh! Physical");
					}
				}
				goto end_IL_0003;
			IL_0cff:
				CheckHackSpeed_SkillID = value4.FLD_PID;
				num3 = (int)DateTime.Now.Subtract(time_PK).TotalMilliseconds;
				goto IL_0d2d;
			end_IL_0003:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "攻击物理攻击 " + base.UserSessionID + " | " + num + " | " + ToString() + " " + ex.Message);
			}
		}

		public bool CheckCungGuild(int Target_ID)
		{
			Players players = Find_PlayerSessionID(Target_ID);
			if (base.Guild_Name == players.Guild_Name)
			{
				return true;
			}
			return false;
		}

		public void 攻击计算完成(Players Play, int Target_ID, int Skill_ID, long Power_Attack, int 攻击类型, long Target_HP, double basedame = 0.0, double basedef = 0.0, bool Is_Skill_400001 = false)
		{
			if (Power_Attack < 0)
			{
				Power_Attack = 0L;
			}
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_攻击计算完成");
			}
			try
			{
				CheckDoiPhuongNeSkill = 0;
				Random random = new Random(World.GetRandomSeed());
				攻击类 攻击类;
				if (World.TblKongfu.TryGetValue(Skill_ID, out MartialArts value))
				{
					MartialArts value2 = default(MartialArts);
					if (value.FLD_PID == 400001)
					{
						int kC = 25;
						int num = 0;
						if ((double)random.Next(0, 100) < base.弓_升天一气功_绝影射魂)
						{
							Show_Qigong_Effect(base.UserSessionID, 340);
							num = 1;
						}
						攻击类 = new 攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型, value.FLD_TYPE);
						if (Target_ID >= 10000)
						{
							NpcClass npc = MapClass.GetNpc(base.Player_FLD_Map, Target_ID);
							if (npc != null)
							{
								群攻击类 群攻击类 = new 群攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型);
								npc.RxjhHp += Power_Attack;
								群攻击类.剩余血量 = npc.RxjhHp + Power_Attack;
								攻击类.群攻.Add(群攻击类);
								double num2 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point + (double)base.FLD_斗神_追加_攻击) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0));
								double num3 = npc.FldDf - (double)npc.FLD_TRUDEF_NPC_CAMSU - (double)npc.FLD_TRUDEF_NPC_NINJA;
								double num4 = 0.0;
								if (Is_Skill_400001)
								{
									if (base.Player_Job == 4 && base.弓群攻技能ID != 0 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value2) && Skill_ID == 400001)
									{
										int num5 = 0;
										if (Array_Skill_Book[3, value2.FLD_INDEX] != null)
										{
											num5 = value2.FLD_AT + Array_Skill_Book[3, value2.FLD_INDEX].每级加危害(Array_Skill_Book[3, value2.FLD_INDEX].武功_等级 - 1);
											num5 += (int)base.FLD_Item_Attack_Skill_Point;
											num4 = ((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)num5 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
										}
									}
								}
								else
								{
									num4 = (basedame * 1.5 - basedef) * 1.5 + (double)(base.FLD_人物基本_命中 / 1) + 刺_连消带打数量;
								}
								if (World.Newversion >= 18)
								{
									num4 /= World.FixDamage;
								}
								double num6 = (double)Power_Attack / num4;
								List<NpcClass> list = npc.群攻查找范围Npc2(value.FLD_攻击数量 + num, kC);
								foreach (NpcClass item in list)
								{
									if (!item.enableNpcAttack)
									{
										item.Play_Add(this, 1L);
										item.enableNpcMove = false;
										item.enableNpcAttack = true;
									}
									double num7 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point + (double)base.FLD_斗神_追加_攻击) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0));
									double num8 = item.FldDf - (double)item.FLD_TRUDEF_NPC_CAMSU - (double)item.FLD_TRUDEF_NPC_NINJA;
									double num9 = 0.0;
									if (Is_Skill_400001)
									{
										if (base.Player_Job == 4 && base.弓群攻技能ID != 0 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value2) && Skill_ID == 400001)
										{
											int num5 = 0;
											if (Array_Skill_Book[3, value2.FLD_INDEX] != null)
											{
												num5 = value2.FLD_AT + Array_Skill_Book[3, value2.FLD_INDEX].每级加危害(Array_Skill_Book[3, value2.FLD_INDEX].武功_等级 - 1);
												num5 += (int)base.FLD_Item_Attack_Skill_Point;
												num9 = ((num7 - num8 + (double)base.FLD_人物基本_命中) * 1.5 + (double)num5 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
											}
										}
									}
									else
									{
										num9 = (num7 * 1.5 - num8) * 1.5 + (double)(base.FLD_人物基本_命中 / 1) + 刺_连消带打数量;
									}
									if (World.Newversion >= 18)
									{
										num9 /= World.FixDamage;
									}
									num9 = ((num6 > 1.0) ? num6 : 1.0) * num9 * ((AoeTuHao != 0) ? 6.0 : ((list.Count > 1) ? 2.0 : 3.0)) / 6.0;
									if ((int)num9 - (int)(num9 / 40.0) > 0)
									{
										num9 = random.Next((int)num9 - (int)(num9 / 40.0), (int)num9 + (int)(num9 / 40.0));
									}
									if (random.Next(0, 7500) + base.FLD_人物基本_命中 < 500)
									{
										num9 = 0.0;
									}
									群攻击类 群攻击类2 = new 群攻击类(item.FldIndex, Skill_ID, (long)num9, 攻击类型);
									群攻击类2.剩余血量 = item.RxjhHp;
									攻击类.群攻.Add(群攻击类2);
								}
								goto IL_0dcd;
							}
						}
						else
						{
							Players players = FindPlayer(Target_ID);
							if (players != null)
							{
								群攻击类 群攻击类 = new 群攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型);
								群攻击类.剩余血量 = players.Player_FLD_HP + Power_Attack;
								攻击类.群攻.Add(群攻击类);
								double num10 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0) - (players.Show_Pic_Class.ContainsKey(1000000852) ? 0.2 : 0.0));
								double num11 = (double)players.FLD_人物基本_防御 * (1.0 - (Show_Pic_Class.ContainsKey(1000000843) ? 0.2 : 0.0));
								double num12 = 0.0;
								if (Is_Skill_400001)
								{
									if (base.Player_Job == 4 && base.弓群攻技能ID != 0 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value2) && Skill_ID == 400001)
									{
										int num13 = value2.FLD_AT + Array_Skill_Book[3, value2.FLD_INDEX].每级加危害(Array_Skill_Book[3, value2.FLD_INDEX].武功_等级 - 1);
										num13 += (int)(base.FLD_Item_Attack_Skill_Point - players.FLD_Item_Defense_Skill_Point) / 2;
										double num14 = (1.0 + World.FIX_ULPT) * ((double)num13 * (1.0 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage) - 0.5 * (((double)((players.FLD_Qigong_Defense_Skill + players.FLD_装备_追加_tam + (int)(players.KCV17_KC7 * (double)players.FLD_Defense)) / 6) + players.FLD_Pill_Defense_Skill / 6.0) / 100.0 + players.FLD_Item_Defense_Skill / 6.0 + (players.FLD_Item_Skill_Def_Percentage + players.fldItemSkillDefPercentage) * (1.0 + players.FLD_人物_气功_武功防御力增加百分比 + players.coupleEffectSkillDefense)) * (1.0 - players.FLD_TRUDEF_NINJA)));
										num12 = (num10 - num11) * 0.5 + ((num14 > 0.0) ? num14 : 0.0) + (double)(base.FLD_人物基本_命中 / 1) - (double)(players.FLD_人物基本_回避 / 4);
									}
								}
								else
								{
									num12 = (num10 - num11) * 1.25 + (double)(base.FLD_人物基本_命中 / 1) - (double)(players.FLD_人物基本_回避 / 4) + 刺_连消带打数量;
								}
								if (World.Newversion >= 18)
								{
									num12 /= World.FixDamage;
								}
								double num6 = (double)Power_Attack / num12;
								List<Players> list2 = players.Find_Player_AOE(value.FLD_攻击数量 + num, kC, this);
								foreach (Players item2 in list2)
								{
									double num15 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0) - (item2.Show_Pic_Class.ContainsKey(1000000852) ? 0.2 : 0.0));
									double num16 = (double)item2.FLD_人物基本_防御 * (1.0 - (Show_Pic_Class.ContainsKey(1000000843) ? 0.2 : 0.0));
									double num17 = 0.0;
									if (Is_Skill_400001)
									{
										if (base.Player_Job == 4 && base.弓群攻技能ID != 0 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value2) && Skill_ID == 400001)
										{
											int num13 = value2.FLD_AT + Array_Skill_Book[3, value2.FLD_INDEX].每级加危害(Array_Skill_Book[3, value2.FLD_INDEX].武功_等级 - 1);
											num13 += (int)(base.FLD_Item_Attack_Skill_Point - item2.FLD_Item_Defense_Skill_Point) / 2;
											double num14 = (1.0 + World.FIX_ULPT) * ((double)num13 * (1.0 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage) - 0.5 * (((double)((item2.FLD_Qigong_Defense_Skill + item2.FLD_装备_追加_tam + (int)(item2.KCV17_KC7 * (double)item2.FLD_Defense)) / 6) + item2.FLD_Pill_Defense_Skill / 6.0) / 100.0 + item2.FLD_Item_Defense_Skill / 6.0 + (item2.FLD_Item_Skill_Def_Percentage + item2.fldItemSkillDefPercentage) * (1.0 + item2.FLD_人物_气功_武功防御力增加百分比 + item2.coupleEffectSkillDefense)) * (1.0 - item2.FLD_TRUDEF_NINJA)));
											num17 = (num15 - num16) * 0.5 + ((num14 > 0.0) ? num14 : 0.0) + (double)(base.FLD_人物基本_命中 / 1) - (double)(item2.FLD_人物基本_回避 / 4);
										}
									}
									else
									{
										num17 = (num15 - num16) * 1.25 + (double)(base.FLD_人物基本_命中 / 1) - (double)(players.FLD_人物基本_回避 / 4) + 刺_连消带打数量;
									}
									if (World.Newversion >= 18)
									{
										num17 /= World.FixDamage;
									}
									num17 = ((num6 > 1.0) ? num6 : 1.0) * num17 * ((AoeTuHao != 0) ? 6.0 : ((list2.Count > 1) ? 2.0 : 3.0)) / 6.0;
									if ((int)num17 - (int)(num17 / 40.0) > 0)
									{
										num17 = random.Next((int)num17 - (int)(num17 / 40.0), (int)num17 + (int)(num17 / 40.0));
									}
									if (random.Next(0, 5000) + base.FLD_人物基本_命中 < item2.FLD_人物基本_回避 || item2.Bat_Tu > 0)
									{
										num17 = 0.0;
									}
									群攻击类 群攻击类2 = new 群攻击类(item2.UserSessionID, Skill_ID, (long)num17, 攻击类型);
									群攻击类2.剩余血量 = item2.Player_FLD_HP;
									攻击类.群攻.Add(群攻击类2);
								}
								goto IL_0dcd;
							}
						}
					}
					else
					{
						if (value.FLD_TYPE != 4 && AoeTuHao == 0)
						{
							攻击类 = new 攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型);
							发送攻击人物数据(Play, Target_ID, Skill_ID, (int)Power_Attack, 攻击类型, (int)Target_HP);
							goto IL_26e4;
						}
						double num18 = Power_Attack;
						int num19 = value.FLD_攻击数量;
						int kC = 20;
						攻击类 = new 攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型, 4);
						if (base.刀_群攻威力 != 0.0 && (base.Player_Job == 1 || base.Player_Job == 8))
						{
							num19 = value.FLD_攻击数量 + (int)base.刀_群攻威力;
						}
						if (Play.Player_Job == 7 && Play.Show_Pic_Class.ContainsKey(900403))
						{
							num19 = value.FLD_攻击数量 + (int)(Play.琴师_岳阳三醉 * 0.1);
							num18 *= 1.0 + (0.012 + Play.琴师_岳阳三醉 * 0.003);
							kC = (int)((double)kC * (1.0 + Play.琴师_升天三气功_子夜秋歌 * 0.02));
						}
						Power_Attack = (long)num18;
						if (Target_ID >= 10000)
						{
							NpcClass npc = MapClass.GetNpc(base.Player_FLD_Map, Target_ID);
							if (npc != null)
							{
								double num20 = 0.0;
								if (base.弓群攻技能ID != 0 && Skill_ID != base.弓群攻技能ID)
								{
									if (World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value2))
									{
										int fLD_AT = value2.FLD_AT;
										fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
										num20 = ((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
									}
								}
								else if (Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX] == null && (base.FLD_师徒_武功ID1_1 == Skill_ID || base.FLD_师徒_武功ID1_2 == Skill_ID || base.FLD_师徒_武功ID1_3 == Skill_ID || 400001 == Skill_ID))
								{
									if (World.TblKongfu.TryGetValue(Skill_ID, out value2))
									{
										int fLD_AT = value2.FLD_AT;
										fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
										num20 = ((base.FLD_师徒_武功ID1_1 != Skill_ID && base.FLD_师徒_武功ID1_2 != Skill_ID && base.FLD_师徒_武功ID1_3 != Skill_ID) ? (((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2)) : (((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)(fLD_AT / 2) * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2)));
									}
								}
								else if (value.FLD_武功类型 == 3)
								{
									int fLD_AT = value.FLD_AT + Array_Skill_Book[3, value.FLD_INDEX].每级加危害(Array_Skill_Book[3, value.FLD_INDEX].武功_等级 - 1);
									fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
									num20 = ((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
								else if (value.FLD_武功类型 == 2)
								{
									num20 = ((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)(base.KyNangKetHon_UyLuc + (int)base.FLD_Item_Attack_Skill_Point) * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
								else if (value.FLD_武功类型 == 0 && Array_Skill_Book[0, value.FLD_INDEX].武功_等级 != 0)
								{
									int num21 = value.FLD_AT + Array_Skill_Book[0, value.FLD_INDEX].每级加危害(Array_Skill_Book[0, value.FLD_INDEX].武功_等级 - 1);
									num21 += (int)base.FLD_Item_Attack_Skill_Point;
									num20 = ((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)num21 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
								else
								{
									int fLD_AT = value.FLD_AT;
									fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
									num20 = ((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
								群攻击类 群攻击类 = new 群攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型);
								npc.RxjhHp += Power_Attack;
								群攻击类.剩余血量 = npc.RxjhHp;
								攻击类.群攻.Add(群攻击类);
								if (num19 > 20)
								{
									num19 = 20;
									kC *= 10;
								}
								List<NpcClass> list = npc.群攻查找范围Npc2(num19, kC);
								foreach (NpcClass item3 in list)
								{
									if (!item3.enableNpcAttack)
									{
										item3.Play_Add(this, 1L);
										item3.enableNpcMove = false;
										item3.enableNpcAttack = true;
									}
									long num22 = 0L;
									double num23 = (item3.FldDf - (double)item3.FLD_TRUDEF_NPC_CAMSU - (double)item3.FLD_TRUDEF_NPC_NINJA) * (basedef / (npc.FldDf - (double)npc.FLD_TRUDEF_NPC_CAMSU - (double)npc.FLD_TRUDEF_NPC_NINJA));
									double num24 = 0.0;
									if (base.弓群攻技能ID != 0 && Skill_ID != base.弓群攻技能ID)
									{
										if (World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value2))
										{
											int fLD_AT = value2.FLD_AT;
											fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
											num24 = ((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
										}
									}
									else if (Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX] == null && (base.FLD_师徒_武功ID1_1 == Skill_ID || base.FLD_师徒_武功ID1_2 == Skill_ID || base.FLD_师徒_武功ID1_3 == Skill_ID || 400001 == Skill_ID))
									{
										if (World.TblKongfu.TryGetValue(Skill_ID, out value2))
										{
											int fLD_AT = value2.FLD_AT;
											fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
											num24 = ((base.FLD_师徒_武功ID1_1 != Skill_ID && base.FLD_师徒_武功ID1_2 != Skill_ID && base.FLD_师徒_武功ID1_3 != Skill_ID) ? (((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2)) : (((basedame - basedef + (double)base.FLD_人物基本_命中) * 1.5 + (double)(fLD_AT / 2) * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2)));
										}
									}
									else if (value.FLD_武功类型 == 3)
									{
										int fLD_AT = value.FLD_AT + Array_Skill_Book[3, value.FLD_INDEX].每级加危害(Array_Skill_Book[3, value.FLD_INDEX].武功_等级 - 1);
										fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
										num24 = ((basedame - num23 + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
									}
									else if (value.FLD_武功类型 == 2)
									{
										num24 = ((basedame - num23 + (double)base.FLD_人物基本_命中) * 1.5 + (double)base.KyNangKetHon_UyLuc * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
									}
									else if (value.FLD_武功类型 == 0 && Array_Skill_Book[0, value.FLD_INDEX].武功_等级 != 0)
									{
										int num21 = value.FLD_AT + Array_Skill_Book[0, value.FLD_INDEX].每级加危害(Array_Skill_Book[0, value.FLD_INDEX].武功_等级 - 1);
										num21 += (int)base.FLD_Item_Attack_Skill_Point;
										num24 = ((basedame - num23 + (double)base.FLD_人物基本_命中) * 1.5 + (double)num21 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
									}
									else
									{
										int num21 = value.FLD_AT;
										num21 += (int)base.FLD_Item_Attack_Skill_Point;
										num24 = ((basedame - num23 + (double)base.FLD_人物基本_命中) * 1.5 + (double)num21 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
									}
									double num25 = (double)Power_Attack / num20;
									num22 = (long)(((num25 > 1.0) ? num25 : 1.0) * num24 * ((AoeTuHao != 0) ? 6.0 : ((list.Count > 1) ? 2.0 : 3.0)) / 6.0);
									if ((int)num22 - (int)(num22 / 40) > 0)
									{
										num22 = new Random(World.GetRandomSeed()).Next((int)num22 - (int)(num22 / 40), (int)num22 + (int)(num22 / 40));
									}
									if (new Random(World.GetRandomSeed()).Next(0, 7500) + base.FLD_人物基本_命中 < 500)
									{
										num22 = 0L;
									}
									群攻击类 群攻击类2 = new 群攻击类(item3.FldIndex, Skill_ID, num22, 攻击类型);
									群攻击类2.剩余血量 = item3.RxjhHp;
									攻击类.群攻.Add(群攻击类2);
								}
								goto IL_26ab;
							}
						}
						else
						{
							Players players = FindPlayer(Target_ID);
							if (players != null)
							{
								long num26 = 0L;
								double num27 = 0.0;
								double num14 = 0.0;
								int num28 = 0;
								if (base.弓群攻技能ID != 0 && Skill_ID == 400001 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value))
								{
									num26 = value.FLD_AT;
								}
								num26 = ((Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX] != null || (Skill_ID != base.FLD_师徒_武功ID1_1 && Skill_ID != base.FLD_师徒_武功ID1_2 && Skill_ID != base.FLD_师徒_武功ID1_3 && Skill_ID != 400001)) ? ((value.FLD_武功类型 == 3) ? (value.FLD_AT + Array_Skill_Book[3, value.FLD_INDEX].每级加危害(Array_Skill_Book[3, value.FLD_INDEX].武功_等级 - 1)) : ((value.FLD_武功类型 == 2) ? base.KyNangKetHon_UyLuc : ((value.FLD_武功类型 != 0 || Array_Skill_Book[0, value.FLD_INDEX].武功_等级 == 0) ? value.FLD_AT : (value.FLD_AT + Array_Skill_Book[0, value.FLD_INDEX].每级加危害(Array_Skill_Book[0, value.FLD_INDEX].武功_等级 - 1))))) : ((base.FLD_师徒_武功ID1_1 != Skill_ID && base.FLD_师徒_武功ID1_2 != Skill_ID && base.FLD_师徒_武功ID1_3 != Skill_ID) ? value.FLD_AT : (value.FLD_AT / 2)));
								num26 += (int)(base.FLD_Item_Attack_Skill_Point - players.FLD_Item_Defense_Skill_Point) / 2;
								if (num28 == 0)
								{
									num14 = (1.0 + World.FIX_ULPT) * ((double)num26 * (1.0 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage) - 0.5 * (((double)((players.FLD_Qigong_Defense_Skill + players.FLD_装备_追加_tam + (int)(players.KCV17_KC7 * (double)players.FLD_Defense)) / 6) + players.FLD_Pill_Defense_Skill / 6.0) / 100.0 + players.FLD_Item_Defense_Skill / 6.0 + (players.FLD_Item_Skill_Def_Percentage + players.fldItemSkillDefPercentage) * (1.0 + players.FLD_人物_气功_武功防御力增加百分比 + players.coupleEffectSkillDefense)) * (1.0 - players.FLD_TRUDEF_NINJA)));
									num27 = (basedame - basedef) * 0.5 + ((num14 > 0.0) ? num14 : 0.0) + (double)(base.FLD_人物基本_命中 / 1) - (double)(players.FLD_人物基本_回避 / 4);
								}
								if (World.Newversion >= 18)
								{
									num27 /= World.FixDamage;
								}
								群攻击类 群攻击类 = new 群攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型);
								攻击类.群攻.Add(群攻击类);
								List<Players> list2 = players.Find_Player_AOE(num19, kC, this);
								foreach (Players item4 in list2)
								{
									if (item4.UserSessionID != base.UserSessionID)
									{
										long num22 = 0L;
										double num24 = 0.0;
										double num29 = (double)item4.FLD_人物基本_防御 * (1.0 - (Show_Pic_Class.ContainsKey(1000000843) ? 0.2 : 0.0));
										double num30 = num29 * (basedef / num29);
										double num31 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0) - (item4.Show_Pic_Class.ContainsKey(1000000852) ? 0.2 : 0.0));
										if (item4.Item_Wear[0].FLD_PID != 0 && item4.Item_Wear[0].物品属性阶段类型 == 1 && !item4.Show_Pic_Class.ContainsKey(700344))
										{
											num31 = ((!item4.Show_Pic_Class.ContainsKey(700291)) ? (num31 - num31 * ((double)item4.Item_Wear[3].物品属性阶段数 * 0.01)) : (num31 - num31 * ((double)item4.Item_Wear[3].物品属性阶段数 * 0.01 * 2.0)));
										}
										if ((base.Player_Job == 1 || base.Player_Job == 8) && base.最少攻击 != 0.0)
										{
											num31 += num31 * base.最少攻击;
										}
										if ((base.Player_Job == 2 || item4.Player_Job == 9) && base.最少攻击 != 0.0)
										{
											num31 += num31 * base.最少攻击;
										}
										if ((base.Player_Job == 3 || base.Player_Job == 10) && base.最少攻击 != 0.0)
										{
											num31 += num31 * base.最少攻击;
										}
										if (base.Player_Job == 4 && base.弓_凝神聚气 != 0.0)
										{
											num31 += num31 * base.弓_凝神聚气;
										}
										if (base.Player_Job == 5 && base.最少攻击 != 0.0)
										{
											num31 += num31 * base.最少攻击;
										}
										if (base.Player_Job == 6 && base.刺_荆轲之怒 != 0.0)
										{
											num31 += num31 * base.刺_荆轲之怒;
										}
										if (base.Player_Job == 7 && base.最少攻击 != 0.0)
										{
											num31 += num31 * base.最少攻击;
										}
										num28 = 0;
										if (base.弓群攻技能ID != 0 && Skill_ID == 400001 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value))
										{
											num26 = value.FLD_AT;
										}
										num26 = ((Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX] != null || (Skill_ID != base.FLD_师徒_武功ID1_1 && Skill_ID != base.FLD_师徒_武功ID1_2 && Skill_ID != base.FLD_师徒_武功ID1_3 && Skill_ID != 400001)) ? ((value.FLD_武功类型 == 3) ? (value.FLD_AT + Array_Skill_Book[3, value.FLD_INDEX].每级加危害(Array_Skill_Book[3, value.FLD_INDEX].武功_等级 - 1)) : ((value.FLD_武功类型 == 2) ? base.KyNangKetHon_UyLuc : ((value.FLD_武功类型 != 0 || Array_Skill_Book[0, value.FLD_INDEX].武功_等级 == 0) ? value.FLD_AT : (value.FLD_AT + Array_Skill_Book[0, value.FLD_INDEX].每级加危害(Array_Skill_Book[0, value.FLD_INDEX].武功_等级 - 1))))) : ((base.FLD_师徒_武功ID1_1 != Skill_ID && base.FLD_师徒_武功ID1_2 != Skill_ID && base.FLD_师徒_武功ID1_3 != Skill_ID) ? value.FLD_AT : (value.FLD_AT / 2)));
										num26 += (int)(base.FLD_Item_Attack_Skill_Point - item4.FLD_Item_Defense_Skill_Point) / 2;
										if (num28 == 0)
										{
											num14 = (1.0 + World.FIX_ULPT) * ((double)num26 * (1.0 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage) - 0.5 * (((double)((item4.FLD_Qigong_Defense_Skill + item4.FLD_装备_追加_tam + (int)(item4.KCV17_KC7 * (double)item4.FLD_Defense)) / 6) + item4.FLD_Pill_Defense_Skill / 6.0) / 100.0 + item4.FLD_Item_Defense_Skill / 6.0 + (item4.FLD_Item_Skill_Def_Percentage + item4.fldItemSkillDefPercentage) * (1.0 + item4.FLD_人物_气功_武功防御力增加百分比 + item4.coupleEffectSkillDefense)) * (1.0 - item4.FLD_TRUDEF_NINJA)));
											num24 = (num31 - num30) * 0.5 + ((num14 > 0.0) ? num14 : 0.0) + (double)(base.FLD_人物基本_命中 / 1) - (double)(item4.FLD_人物基本_回避 / 4);
										}
										double num25 = (double)Power_Attack / num27;
										if (World.Newversion >= 18)
										{
											num24 /= World.FixDamage;
										}
										num22 = (long)(((num25 > 1.0) ? num25 : 1.0) * num24 * ((AoeTuHao != 0) ? 6.0 : ((list2.Count > 1) ? 2.0 : 3.0)) / 6.0);
										if ((int)num22 - (int)(num22 / 40) > 0)
										{
											num22 = new Random(World.GetRandomSeed()).Next((int)num22 - (int)(num22 / 40), (int)num22 + (int)(num22 / 40));
										}
										if (random.Next(0, 5000) + base.FLD_人物基本_命中 < item4.FLD_人物基本_回避 || item4.Bat_Tu > 0)
										{
											num22 = 0L;
											CheckDoiPhuongNeSkill = 1;
										}
										群攻击类 群攻击类2 = new 群攻击类(item4.UserSessionID, Skill_ID, num22, 攻击类型);
										群攻击类2.剩余血量 = item4.Player_FLD_HP - num22;
										攻击类.群攻.Add(群攻击类2);
									}
								}
								goto IL_26ab;
							}
						}
					}
				}
				else
				{
					发送攻击人物数据(Play, Target_ID, Skill_ID, (int)Power_Attack * ((base.Player_Job != 6 || (攻击类型 != 136 && 攻击类型 != 157)) ? 1 : 2), 攻击类型, (int)Target_HP + (int)((base.Player_Job == 6 && (攻击类型 == 136 || 攻击类型 == 157)) ? Power_Attack : 0));
					攻击列表.Clear();
					using (new Lock(攻击列表, "攻击列表"))
					{
						攻击列表.Add(new 攻击类(Target_ID, Skill_ID, Power_Attack, 攻击类型));
					}
					int num32;
					if (Play.Item_Wear[3].FLD_PID != 0)
					{
						switch (Play.Player_Job)
						{
							case 1:
							case 2:
							case 8:
							case 9:
								num32 = ((攻击类型 != 130 && 攻击类型 != 131 && 攻击类型 != 132 && 攻击类型 != 133) ? ((攻击类型 != 128 && 攻击类型 != 129) ? ((攻击类型 != 126 && 攻击类型 != 127) ? 1100 : 1100) : 1500) : 2300);
								break;
							case 3:
							case 12:
								num32 = ((攻击类型 != 129 && 攻击类型 != 130 && 攻击类型 != 131) ? ((攻击类型 != 132) ? ((攻击类型 != 133) ? ((攻击类型 != 128) ? ((攻击类型 != 126 && 攻击类型 != 127) ? 1400 : 1400) : 2300) : 2300) : 3500) : 3000);
								break;
							case 4:
								num32 = ((攻击类型 != 128 && 攻击类型 != 129 && 攻击类型 != 130 && 攻击类型 != 131 && 攻击类型 != 132 && 攻击类型 != 133) ? ((攻击类型 != 136) ? 2200 : 1300) : 3500);
								break;
							case 11:
								if (攻击类型 == 128 || 攻击类型 == 130 || 攻击类型 == 131 || 攻击类型 == 132 || 攻击类型 == 133)
								{
									num32 = 3500;
								}
								else
								{
									switch (攻击类型)
									{
										case 136:
											num32 = 1300;
											break;
										case 129:
											num32 = 2500;
											break;
										case 126:
											num32 = 1100;
											break;
										default:
											num32 = 2200;
											break;
									}
								}
								break;
							case 5:
								num32 = 1500;
								break;
							case 6:
								if (攻击类型 == 136 || 攻击类型 == 157)
								{
									num32 = 1300;
								}
								else if (攻击类型 == 129 || 攻击类型 == 130 || 攻击类型 == 131 || 攻击类型 == 132 || 攻击类型 == 133)
								{
									num32 = 3000;
								}
								else
								{
									switch (攻击类型)
									{
										case 126:
											num32 = 1400;
											break;
										case 127:
											num32 = 1500;
											break;
										default:
											num32 = 1500;
											break;
									}
								}
								break;
							case 7:
								num32 = ((攻击类型 != 129) ? 1100 : 2000);
								break;
							case 10:
								num32 = ((攻击类型 != 130 && 攻击类型 != 131 && 攻击类型 != 132 && 攻击类型 != 133) ? ((攻击类型 != 128 && 攻击类型 != 129) ? ((攻击类型 != 126 && 攻击类型 != 127) ? 1100 : 1100) : 1500) : 2300);
								break;
							default:
								num32 = 2000;
								break;
						}
					}
					else
					{
						num32 = 1000;
					}
					if (World.攻击确认模式 != 2)
					{
						SendPack(Play.UserSessionID, Target_ID, 攻击类型, 0, num32);
					}
					else if (World.攻击确认模式 == 2)
					{
						int num33 = num32 * 100 / base.FLD_攻击速度;
						if (num33 < 100 || num33 > 4000)
						{
							num33 = 500;
						}
						if (Target_ID >= 10000)
						{
							Timer_VerifyAttack = new System.Timers.Timer(num33 - 100);
							Timer_VerifyAttack.Elapsed += Event_VerifyAttack;
							Timer_VerifyAttack.Enabled = true;
							Timer_VerifyAttack.AutoReset = false;
						}
						if (autoAttackPhysical)
						{
							Timer_AutoAttack = new System.Timers.Timer(num33);
							Timer_AutoAttack.Elapsed += Event_AutoAttack;
							Timer_AutoAttack.Enabled = true;
							Timer_AutoAttack.AutoReset = false;
						}
						else
						{
							Timer_AutoAttack.Enabled = false;
							Timer_AutoAttack.AutoReset = false;
							Timer_AutoAttack.Dispose();
							Timer_AutoAttack = null;
						}
					}
				}
				goto end_IL_0033;
			IL_26ab:
				发送群攻攻击数据2(Play, 攻击类.群攻, Target_ID, Skill_ID, (int)Power_Attack, 攻击类型);
				goto IL_26e4;
			IL_26e4:
				攻击列表.Clear();
				using (new Lock(攻击列表, "攻击列表"))
				{
					攻击列表.Add(攻击类);
				}
				if (World.攻击确认模式 != 2 && Target_ID >= 10000)
				{
					SendPack(Play.UserSessionID, Target_ID, 攻击类型, value.FLD_PID, (value.FLD_SKILL_TIME >= 4000) ? 1000 : (value.FLD_SKILL_TIME * 3 / 4));
				}
				if (World.攻击确认模式 == 2 && Target_ID >= 10000)
				{
					int num33 = value.FLD_SKILL_TIME;
					if (num33 < 100 || num33 > 4000)
					{
						num33 = 1500;
					}
					Timer_VerifyAttack = new System.Timers.Timer(num33 - 100);
					Timer_VerifyAttack.Elapsed += Event_VerifyAttack;
					Timer_VerifyAttack.Enabled = true;
					Timer_VerifyAttack.AutoReset = false;
				}
				goto end_IL_0033;
			IL_0dcd:
				发送群攻攻击数据2(Play, 攻击类.群攻, Target_ID, Skill_ID, (int)Power_Attack, 攻击类型);
				goto IL_26e4;
			end_IL_0033:;
			}
			catch (Exception ex)
			{
				攻击列表.Clear();
				Form1.WriteLine(1, "攻击计算完成" + base.UserSessionID + "|" + ToString() + " " + ex.Message);
			}
		}

		public List<Players> Find_Player_AOE(int 数量, int KC = 25, Players p = null)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Find_Player_AOE");
			}
			try
			{
				List<Players> list = new List<Players>();
				int num = 1;
				foreach (Players value in PlayList.Values)
				{
					if (num >= 数量)
					{
						break;
					}
					if (!value.PlayerIsDead && Check_Radius_Player(KC, value) && value.UserSessionID != base.UserSessionID && value.UserSessionID != p.UserSessionID)
					{
						if (p.Player_FLD_Map == 801 || value.Player_FLD_Map == 801)
						{
							if (p.Player_Zx == value.Player_Zx)
							{
								continue;
							}
						}
						else if (value.人物PK模式 == 0)
						{
							continue;
						}
						if ((p.Party_ID == 0 && value.Party_ID == 0) || p.Party_ID != value.Party_ID)
						{
							list.Add(value);
							num++;
						}
					}
				}
				return list;
			}
			catch (Exception arg)
			{
				Form1.WriteLine(1, "Find_Player_AOE 出错：" + arg);
				return null;
			}
		}

		public void UPDATECDSKILL(int tomap = 101, bool reset = true, bool itemOnly = false)
		{
			List<MartialArts> list;
			int fLD_SKILL_TIME;
			int[] array;
			if (World.Newversion >= 16)
			{
				list = new List<MartialArts>();
				foreach (var value in World.TblKongfu.Values)
				{
					if (value.FLD_INDEX != 0 && (value.FLD_JOB == 0 || value.FLD_JOB == base.Player_Job))
					{
						list.Add(value);
					}
				}
				fLD_SKILL_TIME = ((tomap == 801 || Check_kepskill == 1) ? World.Time_Use_Item : (World.Time_Use_Item / 2));
				array = new int[19]
				{
					1008000003,
					1008000004,
					1008000005,
					1008000006,
					1008000007,
					1008000008,
					1008000034,
					1008000035,
					1008000033,
					1008000044,
					1008000045,
					1008000068,
					1008000069,
					1008000077,
					1008000078,
					1008000079,
					1008000080,
					1008000174,
					1008000175
				};
				for (int i = 0; i < array.Length; i++)
				{
					MartialArts MartialArts = new MartialArts();
					MartialArts.FLD_PID = array[i];
					MartialArts.FLD_JOB = 69;
					MartialArts.FLD_SKILL_TIME = fLD_SKILL_TIME;
					list.Add(MartialArts);
				}
				int[] array2 = new int[2]
				{
					1000000415,
					1000000416
				};
				for (int i = 0; i < array2.Length; i++)
				{
					MartialArts MartialArts = new MartialArts();
					MartialArts.FLD_PID = array2[i];
					MartialArts.FLD_JOB = 69;
					MartialArts.FLD_SKILL_TIME = 600000;
					list.Add(MartialArts);
				}
				PacketData packetData = new PacketData();
				packetData.WriteShort(1);
				packetData.WriteShort(1);
				packetData.WriteShort(list.Count);
				foreach (var item in list)
				{
					packetData.WriteLong(item.FLD_PID);
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					if (item.FLD_JOB == 69)
					{
						packetData.WriteLong(item.FLD_SKILL_TIME);
					}
					else if (tomap == 801 && (item.FLD_PID == 601101 || item.FLD_PID == 601102 || item.FLD_PID == 601103 || item.FLD_PID == 1001101 || item.FLD_PID == 1001102))
					{
						packetData.WriteLong(60000L);
					}
					else
					{
						packetData.WriteLong((item.FLD_SKILL_TIME <= 800) ? 800 : ((item.FLD_SKILL_TIME >= 4000) ? (item.FLD_SKILL_TIME * 120 / 100) : item.FLD_SKILL_TIME));
					}
					packetData.WriteLong(0L);
					packetData.WriteLong(0L);
					packetData.WriteInt(0);
				}
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 4610, base.UserSessionID);
				}
				return;
			}
			list = new List<MartialArts>();
			fLD_SKILL_TIME = ((tomap == 801 || Check_kepskill == 1) ? World.Time_Use_Item : (World.Time_Use_Item / 2));
			array = new int[19]
			{
				1000000101,
				0,
				1000000102,
				1000000103,
				1000000185,
				1000000969,
				1000000970,
				0,
				1000000295,
				1000000297,
				1000000104,
				1000000105,
				1000000106,
				0,
				1000000186,
				1000000971,
				1000000972,
				1000000296,
				1000000298
			};
			for (int i = 0; i < array.Length; i++)
			{
				MartialArts MartialArts = new MartialArts();
				MartialArts.FLD_PID = array[i];
				MartialArts.FLD_JOB = 0;
				MartialArts.FLD_SKILL_TIME = fLD_SKILL_TIME;
				list.Add(MartialArts);
			}
			foreach (var value2 in World.TblKongfu.Values)
			{
				if (value2.FLD_INDEX != 0 && (value2.FLD_JOB == 0 || value2.FLD_JOB == base.Player_Job))
				{
					list.Add(value2);
				}
			}
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append
			byte[] array3 = Converter.hexStringToByte(stringBuilder.ToString());
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
			for (int j = 0; j < 170 && j < list.Count && j < 170; j++)
			{
				if (tomap == 801 && (list[j].FLD_PID == 601101 || list[j].FLD_PID == 601102 || list[j].FLD_PID == 601103 || list[j].FLD_PID == 1001101 || list[j].FLD_PID == 1001102))
				{
					Buffer.BlockCopy(BitConverter.GetBytes(list[j].FLD_PID), 0, array3, 17 + j * 56, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(60000), 0, array3, 17 + j * 56 + 32, 4);
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(list[j].FLD_PID), 0, array3, 17 + j * 56, 4);
					Buffer.BlockCopy(BitConverter.GetBytes((list[j].FLD_SKILL_TIME <= 800) ? 800 : ((list[j].FLD_SKILL_TIME >= 4000) ? (list[j].FLD_SKILL_TIME * 120 / 100) : list[j].FLD_SKILL_TIME)), 0, array3, 17 + j * 56 + 32, 4);
				}
			}
			if (base.Client != null)
			{
				base.Client.Send(array3, array3.Length);
			}
		}

		public void AddPlayerToEventTop()
		{
		}

		private void Event_AutoAttack(object sender, ElapsedEventArgs e)
		{
			攻击(autoAttackPhysical_ByteArray, verifyAttack_ByteArray.Length);
		}

		private void Event_VerifyAttack(object sender, ElapsedEventArgs e)
		{
			VerifyAttack(verifyAttack_ByteArray, verifyAttack_ByteArray.Length);
		}

		public void VerifyAttack(byte[] data, int length)
		{
			int num = 0;
			try
			{
				Random random = new Random(World.GetRandomSeed());
				num = 1;
				PacketVerify(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 2);
				Buffer.BlockCopy(data, 15, array3, 0, 2);
				Buffer.BlockCopy(data, 5, array2, 0, 2);
				int num2 = BitConverter.ToInt32(array2, 0);
				int num3 = BitConverter.ToInt32(array, 0);
				int num4 = BitConverter.ToInt32(array3, 0);
				bool flag = false;
				if (TrungCapEffect_PhucThu != 0 && num3 > 10000 && random.Next(0, 100) <= TrungCapEffect_PhucThu)
				{
					flag = true;
					Show_Qigong_Effect(num3, 401);
				}
				攻击类 攻击类 = null;
				using (new Lock(攻击列表, "攻击列表"))
				{
					if (攻击列表.Count < 1)
					{
						return;
					}
					if (攻击列表.Count > 1)
					{
						foreach (攻击类 item in 攻击列表)
						{
							if (item.人物ID == num3)
							{
								攻击类 = item;
								break;
							}
						}
					}
					else
					{
						攻击类 = 攻击列表[0];
					}
				}
				if (攻击类 != null)
				{
					if (num3 >= 10000)
					{
						num = 2;
						if (攻击类.武功ID != 0)
						{
							if (World.TblKongfu.TryGetValue(攻击类.武功ID, out MartialArts value))
							{
								if (base.Player_Job == 6 && value.FLD_PID == 801303)
								{
									Update_HP_MP_SP();
								}
								else
								{
									num = 3;
									if (MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(攻击类.人物ID, out NpcClass value2))
									{
										if (value.FLD_TYPE == 4 || AoeTuHao != 0)
										{
											value2.Play_Add(this, 攻击类.攻击力);
											if (flag && value2.FldBoss == 0)
											{
												value2.RxjhHp -= Math.Min(value2.MaxRxjhHp / 3, 33333L);
											}
											value2.RxjhHp -= 攻击类.攻击力;
											if (value2.RxjhHp <= 0 && !value2.Npc死亡)
											{
												value2.NPC_Die(base.UserSessionID);
												double num5 = value2.获得钱();
												double num6 = value2.获得经验();
												double num7 = value2.获得历练();
												double num8 = value2.获得升天历练();
												吸魂(num3);
												if (TrungCapEffect_KyDuyen != 0)
												{
													double num9 = random.Next(0, 100);
													if (num9 <= (double)TrungCapEffect_KyDuyen)
													{
														num6 *= 2.0;
														Show_Qigong_Effect(num3, 403);
													}
												}
												if (base.FLD_VIP == 1)
												{
													num6 += num6 * 0.3;
													num7 += num7 * 0.3;
													num8 += num8 * 0.3;
													num5 += num5 * 0.3;
												}
												if (Party_ID != 0 && Party_Status == 1)
												{
													if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value3))
													{
														double num10 = num6 * (1.0 + (double)value3.List_Party.Count * World.ExpParty) / (double)value3.List_Party.Count;
														double num11 = num7 * (1.0 + (double)value3.List_Party.Count * World.ExpParty) / (double)value3.List_Party.Count;
														double num12 = num8 * (1.0 + (double)value3.List_Party.Count * World.ExpParty) / (double)value3.List_Party.Count;
														double num13 = num5 * (1.0 + (double)value3.List_Party.Count * World.ExpParty) / (double)value3.List_Party.Count;
														foreach (Players value12 in value3.List_Party.Values)
														{
															if (Check_Radius_Player(700, value12) && value12.Player_Level - value2.Level < World.获得经验等级差 && value2.Level - value12.Player_Level < World.获得经验等级差)
															{
																if (value12.Pet != null)
																{
																	value12.宠物升级(value12, num10);
																	num10 *= (double)(1 - value12.Config.宠物经验 / 100);
																}
																value12.Player_FLD_EXP += (long)(num10 * (1.0 + value12.人物_追加_经验百分比));
																if (value12.FLD_Teacher != "")
																{
																	Players players = World.FindPlayerbyName(base.FLD_Teacher);
																	if (players != null)
																	{
																		players.Player_FLD_EXP += (int)((double)(long)(num10 * (1.0 + value12.人物_追加_经验百分比)) * 0.05);
																		players.计算人物基本数据3();
																		players.Update_HP_MP_SP();
																		players.UpdatePowersAndStatus();
																		players.Update_Exp_Marble();
																		players.Update_Money_Weight();
																	}
																}
																value12.AddExpToNTC((int)(num10 * (1.0 + value12.人物_追加_经验百分比)));
																value12.Player_ExpErience += (int)(num11 * (1.0 + value12.FLD_Premium_Fight_Exp));
																value12.Player_Money += (uint)(num13 * (1.0 + value12.FLD_Item_Premium_Money + value12.FLD_Wear_Item_Money));
																value12.得到钱的提示((uint)(num13 * (1.0 + value12.FLD_Item_Premium_Money + value12.FLD_Wear_Item_Money)));
																value12.升天历练当前获得数 += (int)num12;
																value12.计算人物基本数据3();
																value12.Update_HP_MP_SP();
																value12.UpdatePowersAndStatus();
																value12.Update_Exp_Marble();
																value12.Update_Money_Weight();
															}
														}
													}
												}
												else
												{
													if (base.Player_Level - value2.Level < World.获得经验等级差 && value2.Level - base.Player_Level < World.获得经验等级差)
													{
														if (Pet != null)
														{
															宠物升级(this, num6);
															num6 *= (double)(1 - Config.宠物经验 / 100);
														}
														base.Player_FLD_EXP += (long)(num6 * (base.人物_追加_经验百分比 + 1.0));
														if (base.FLD_Teacher != "")
														{
															Players players = World.FindPlayerbyName(base.FLD_Teacher);
															if (players != null)
															{
																players.Player_FLD_EXP += (int)((double)(long)(num6 * (1.0 + base.人物_追加_经验百分比)) * 0.05);
																players.计算人物基本数据3();
																players.Update_HP_MP_SP();
																players.UpdatePowersAndStatus();
																players.Update_Exp_Marble();
																players.Update_Money_Weight();
															}
														}
														AddExpToNTC((int)(num6 * (1.0 + base.人物_追加_经验百分比)));
													}
													base.Player_ExpErience += (int)(num7 * (base.FLD_Premium_Fight_Exp + 1.0));
													base.Player_Money += (uint)(num5 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money));
													得到钱的提示((uint)(num5 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money)));
													升天历练当前获得数 += (int)num8;
													计算人物基本数据3();
													Update_HP_MP_SP();
													UpdatePowersAndStatus();
													Update_Exp_Marble();
													Update_Money_Weight();
												}
												SkillCombo_Index_Start = 0;
											}
											else
											{
												if (!value2.enableNpcAttack)
												{
													value2.enableNpcMove = false;
													value2.enableNpcAttack = true;
												}
												if (SkillCombo_Index_Start > 0)
												{
													Magic_Attack(SkillCombo[SkillCombo_Index_Start].FLD_PID, num3);
												}
												else
												{
													攻击列表.Clear();
												}
											}
											num = 8;
											foreach (群攻击类 item2 in 攻击类.群攻)
											{
												if (MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(item2.人物ID, out NpcClass value4))
												{
													value2.Play_Add(this, item2.攻击力);
													if (flag && value4.FldBoss == 0)
													{
														value4.RxjhHp -= Math.Min(value4.MaxRxjhHp / 3, 33333L);
													}
													value4.RxjhHp -= item2.攻击力;
													if (value4.RxjhHp <= 0 && !value4.Npc死亡)
													{
														value4.NPC_Die(base.UserSessionID);
														double num14 = value4.获得钱();
														double num15 = value4.获得经验();
														double num16 = value4.获得历练();
														吸魂(num3);
														double num17 = value4.获得升天历练();
														if (TrungCapEffect_KyDuyen != 0)
														{
															double num18 = random.Next(0, 100);
															if (num18 <= (double)TrungCapEffect_KyDuyen)
															{
																num15 *= 2.0;
																Show_Qigong_Effect(num3, 403);
															}
														}
														if (base.FLD_VIP == 1)
														{
															num15 += num15 * 0.3;
															num16 += num16 * 0.3;
															num17 += num17 * 0.3;
															num14 += num14 * 0.3;
														}
														if (Party_ID != 0 && Party_Status == 1)
														{
															if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value5))
															{
																double num19 = num15 * (1.0 + (double)value5.List_Party.Count * World.ExpParty) / (double)value5.List_Party.Count;
																double num20 = num16 * (1.0 + (double)value5.List_Party.Count * World.ExpParty) / (double)value5.List_Party.Count;
																double num21 = num14 * (1.0 + (double)value5.List_Party.Count * World.ExpParty) / (double)value5.List_Party.Count;
																double num22 = num17 * (1.0 + (double)value5.List_Party.Count * World.ExpParty) / (double)value5.List_Party.Count;
																foreach (Players value13 in value5.List_Party.Values)
																{
																	if (Check_Radius_Player(700, value13) && value13.Player_Level - value4.Level < World.获得经验等级差 && value4.Level - value13.Player_Level < World.获得经验等级差)
																	{
																		if (value13.Pet != null)
																		{
																			value13.宠物升级(value13, num19);
																			num19 *= (double)(1 - value13.Config.宠物经验 / 100);
																		}
																		value13.Player_FLD_EXP += (long)(num19 * (1.0 + value13.人物_追加_经验百分比));
																		if (value13.FLD_Teacher != "")
																		{
																			Players players = World.FindPlayerbyName(base.FLD_Teacher);
																			if (players != null)
																			{
																				players.Player_FLD_EXP += (int)((double)(long)(num19 * (1.0 + value13.人物_追加_经验百分比)) * 0.05);
																				players.计算人物基本数据3();
																				players.Update_HP_MP_SP();
																				players.UpdatePowersAndStatus();
																				players.Update_Exp_Marble();
																				players.Update_Money_Weight();
																			}
																		}
																		value13.AddExpToNTC((int)(num19 * (1.0 + value13.人物_追加_经验百分比)));
																		value13.Player_ExpErience += (int)(num20 * (1.0 + value13.FLD_Premium_Fight_Exp));
																		value13.Player_Money += (uint)(num21 * (1.0 + value13.FLD_Item_Premium_Money + value13.FLD_Wear_Item_Money));
																		value13.得到钱的提示((uint)(num21 * (1.0 + value13.FLD_Item_Premium_Money + value13.FLD_Wear_Item_Money)));
																		value13.升天历练当前获得数 += (int)num22;
																		value13.计算人物基本数据3();
																		value13.Update_HP_MP_SP();
																		value13.UpdatePowersAndStatus();
																		value13.Update_Exp_Marble();
																		value13.Update_Money_Weight();
																	}
																}
															}
														}
														else
														{
															if (base.Player_Level - value4.Level < World.获得经验等级差 && value4.Level - base.Player_Level < World.获得经验等级差)
															{
																if (Pet != null)
																{
																	宠物升级(this, num15);
																	num15 *= (double)(1 - Config.宠物经验 / 100);
																}
																base.Player_FLD_EXP += (long)(num15 * (1.0 + base.人物_追加_经验百分比));
																if (base.FLD_Teacher != "")
																{
																	Players players = World.FindPlayerbyName(base.FLD_Teacher);
																	if (players != null)
																	{
																		players.Player_FLD_EXP += (int)((double)(long)(num15 * (1.0 + base.人物_追加_经验百分比)) * 0.05);
																		players.计算人物基本数据3();
																		players.Update_HP_MP_SP();
																		players.UpdatePowersAndStatus();
																		players.Update_Exp_Marble();
																		players.Update_Money_Weight();
																	}
																}
																AddExpToNTC((int)(num15 * (1.0 + base.人物_追加_经验百分比)));
															}
															base.Player_ExpErience += (int)(num16 * (1.0 + base.FLD_Premium_Fight_Exp));
															base.Player_Money += (uint)(num14 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money));
															得到钱的提示((uint)(num14 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money)));
															升天历练当前获得数 += (int)num17;
															计算人物基本数据3();
															Update_HP_MP_SP();
															UpdatePowersAndStatus();
															Update_Exp_Marble();
															Update_Money_Weight();
														}
														攻击列表.Clear();
														SkillCombo_Index_Start = 0;
													}
													else
													{
														if (!value4.enableNpcAttack)
														{
															value4.enableNpcMove = false;
															value4.enableNpcAttack = true;
														}
														if (SkillCombo_Index_Start > 0)
														{
															Magic_Attack(SkillCombo[SkillCombo_Index_Start].FLD_PID, num3);
														}
														else
														{
															攻击列表.Clear();
														}
													}
												}
											}
										}
										else
										{
											num = 4;
											if (num2 == base.UserSessionID)
											{
												value2.Play_Add(this, 攻击类.攻击力);
											}
											if (flag && value2.FldBoss == 0)
											{
												value2.RxjhHp -= Math.Min(value2.MaxRxjhHp / 3, 33333L);
											}
											value2.RxjhHp -= 攻击类.攻击力;
											if (value2.RxjhHp <= 0 && !value2.Npc死亡)
											{
												value2.NPC_Die(base.UserSessionID);
												double num23 = value2.获得钱();
												double num24 = value2.获得经验();
												double num25 = value2.获得历练();
												double num26 = value2.获得升天历练();
												吸魂(num3);
												if (TrungCapEffect_KyDuyen != 0)
												{
													double num27 = random.Next(0, 100);
													if (num27 <= (double)TrungCapEffect_KyDuyen)
													{
														num24 *= 2.0;
														Show_Qigong_Effect(num3, 403);
													}
												}
												if (base.FLD_VIP == 1)
												{
													num24 += num24 * 0.3;
													num25 += num25 * 0.3;
													num26 += num26 * 0.3;
													num23 += num23 * 0.3;
												}
												if (base.Player_Job == 2 || base.Player_Job == 9)
												{
													double num28 = random.NextDouble() * 100.0;
													if (num28 < base.剑_移花接木)
													{
														Recovery_HP((int)攻击类.攻击力 / 2);
														Show_Qigong_Effect(num3, 26);
													}
												}
												if (Party_ID != 0 && Party_Status == 1)
												{
													if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value6))
													{
														double num29 = num24 * (1.0 + (double)value6.List_Party.Count * World.ExpParty) / (double)value6.List_Party.Count;
														double num30 = num25 * (1.0 + (double)value6.List_Party.Count * World.ExpParty) / (double)value6.List_Party.Count;
														double num31 = num23 * (1.0 + (double)value6.List_Party.Count * World.ExpParty) / (double)value6.List_Party.Count;
														double num32 = num26 * (1.0 + (double)value6.List_Party.Count * World.ExpParty) / (double)value6.List_Party.Count;
														foreach (Players value14 in value6.List_Party.Values)
														{
															if (Check_Radius_Player(700, value14) && value14.Player_Level - value2.Level < World.获得经验等级差 && value2.Level - value14.Player_Level < World.获得经验等级差)
															{
																if (value14.Pet != null)
																{
																	value14.宠物升级(value14, num29);
																	num29 *= (double)(1 - value14.Config.宠物经验 / 100);
																}
																value14.Player_FLD_EXP += (long)(num29 * (1.0 + value14.人物_追加_经验百分比));
																if (value14.FLD_Teacher != "")
																{
																	Players players = World.FindPlayerbyName(base.FLD_Teacher);
																	if (players != null)
																	{
																		players.Player_FLD_EXP += (int)((double)(long)(num29 * (1.0 + value14.人物_追加_经验百分比)) * 0.05);
																		players.计算人物基本数据3();
																		players.Update_HP_MP_SP();
																		players.UpdatePowersAndStatus();
																		players.Update_Exp_Marble();
																		players.Update_Money_Weight();
																	}
																}
																value14.AddExpToNTC((int)(num29 * (1.0 + value14.人物_追加_经验百分比)));
																value14.Player_ExpErience += (int)(num30 * (1.0 + value14.FLD_Premium_Fight_Exp));
																value14.Player_Money += (uint)(num31 * (1.0 + value14.FLD_Item_Premium_Money + value14.FLD_Wear_Item_Money));
																value14.得到钱的提示((uint)(num31 * (1.0 + value14.FLD_Item_Premium_Money + value14.FLD_Wear_Item_Money)));
																value14.升天历练当前获得数 += (int)num32;
																value14.计算人物基本数据3();
																value14.Update_HP_MP_SP();
																value14.UpdatePowersAndStatus();
																value14.Update_Exp_Marble();
																value14.Update_Money_Weight();
															}
														}
													}
												}
												else
												{
													if (base.Player_Level - value2.Level < World.获得经验等级差 && value2.Level - base.Player_Level < World.获得经验等级差)
													{
														if (Pet != null)
														{
															宠物升级(this, num24);
															num24 *= (double)(1 - Config.宠物经验 / 100);
														}
														base.Player_FLD_EXP += (long)(num24 * (base.人物_追加_经验百分比 + 1.0));
														if (base.FLD_Teacher != "")
														{
															Players players = World.FindPlayerbyName(base.FLD_Teacher);
															if (players != null)
															{
																players.Player_FLD_EXP += (int)((double)(long)(num24 * (1.0 + base.人物_追加_经验百分比)) * 0.05);
																players.计算人物基本数据3();
																players.Update_HP_MP_SP();
																players.UpdatePowersAndStatus();
																players.Update_Exp_Marble();
																players.Update_Money_Weight();
															}
														}
														AddExpToNTC((int)(num24 * (1.0 + base.人物_追加_经验百分比)));
													}
													base.Player_ExpErience += (int)(num25 * (base.FLD_Premium_Fight_Exp + 1.0));
													base.Player_Money += (uint)(num23 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money));
													得到钱的提示((uint)(num23 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money)));
													升天历练当前获得数 += (int)num26;
													计算人物基本数据3();
													Update_HP_MP_SP();
													UpdatePowersAndStatus();
													Update_Exp_Marble();
													Update_Money_Weight();
												}
												攻击列表.Clear();
												SkillCombo_Index_Start = 0;
											}
											else
											{
												if (!value2.enableNpcAttack)
												{
													value2.enableNpcMove = false;
													value2.enableNpcAttack = true;
												}
												if (SkillCombo_Index_Start > 0)
												{
													Magic_Attack(SkillCombo[SkillCombo_Index_Start].FLD_PID, num3);
												}
												else
												{
													攻击列表.Clear();
												}
											}
										}
									}
								}
							}
						}
						else
						{
							num = 5;
							Random random2 = new Random(World.GetRandomSeed());
							if (MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(攻击类.人物ID, out NpcClass value7))
							{
								if (num2 == base.UserSessionID)
								{
									value7.Play_Add(this, 攻击类.攻击力);
								}
								if (flag && value7.FldBoss == 0)
								{
									value7.RxjhHp -= Math.Min(value7.MaxRxjhHp / 3, 33333L);
								}
								value7.RxjhHp -= 攻击类.攻击力;
								if (value7.RxjhHp <= 0 && !value7.Npc死亡)
								{
									攻击列表.Clear();
									value7.NPC_Die(base.UserSessionID);
									double num33 = value7.获得钱();
									double num34 = value7.获得经验();
									double num35 = value7.获得历练();
									double num36 = value7.获得升天历练();
									吸魂(num3);
									if (TrungCapEffect_KyDuyen != 0)
									{
										double num37 = random2.Next(0, 100);
										if (num37 <= (double)TrungCapEffect_KyDuyen)
										{
											num34 *= 2.0;
											Show_Qigong_Effect(num3, 403);
										}
									}
									if (base.FLD_VIP == 1)
									{
										num34 += num34 * 0.3;
										num35 += num35 * 0.3;
										num36 += num36 * 0.3;
										num33 += num33 * 0.3;
									}
									if (base.Player_Job == 2 || base.Player_Job == 9)
									{
										double num38 = random2.NextDouble() * 100.0;
										if (num38 < base.剑_移花接木)
										{
											Recovery_HP((int)攻击类.攻击力 / 2);
											Show_Qigong_Effect(num3, 26);
										}
									}
									if (Party_ID != 0 && Party_Status == 1)
									{
										if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value8))
										{
											double num39 = num34 * (1.0 + (double)value8.List_Party.Count * World.ExpParty) / (double)value8.List_Party.Count;
											double num40 = num35 * (1.0 + (double)value8.List_Party.Count * World.ExpParty) / (double)value8.List_Party.Count;
											double num41 = num33 * (1.0 + (double)value8.List_Party.Count * World.ExpParty) / (double)value8.List_Party.Count;
											double num42 = num36 * (1.0 + (double)value8.List_Party.Count * World.ExpParty) / (double)value8.List_Party.Count;
											foreach (Players value15 in value8.List_Party.Values)
											{
												if (Check_Radius_Player(700, value15) && value15.Player_Level - value7.Level < World.获得经验等级差 && value7.Level - value15.Player_Level < World.获得经验等级差)
												{
													if (value15.Pet != null)
													{
														value15.宠物升级(value15, num39);
														num39 *= (double)(1 - value15.Config.宠物经验 / 100);
													}
													value15.Player_FLD_EXP += (long)(num39 * (1.0 + value15.人物_追加_经验百分比));
													if (value15.FLD_Teacher != "")
													{
														Players players = World.FindPlayerbyName(base.FLD_Teacher);
														if (players != null)
														{
															players.Player_FLD_EXP += (int)((double)(long)(num39 * (1.0 + value15.人物_追加_经验百分比)) * 0.05);
															players.计算人物基本数据3();
															players.Update_HP_MP_SP();
															players.UpdatePowersAndStatus();
															players.Update_Exp_Marble();
															players.Update_Money_Weight();
														}
													}
													value15.AddExpToNTC((int)(num39 * (1.0 + value15.人物_追加_经验百分比)));
													value15.Player_ExpErience += (int)(num40 * (1.0 + value15.FLD_Premium_Fight_Exp));
													value15.Player_Money += (uint)(num41 * (1.0 + value15.FLD_Item_Premium_Money + value15.FLD_Wear_Item_Money));
													value15.得到钱的提示((uint)(num41 * (1.0 + value15.FLD_Item_Premium_Money + value15.FLD_Wear_Item_Money)));
													value15.升天历练当前获得数 += (int)num42;
													value15.计算人物基本数据3();
													value15.Update_HP_MP_SP();
													value15.UpdatePowersAndStatus();
													value15.Update_Exp_Marble();
													value15.Update_Money_Weight();
												}
											}
										}
									}
									else
									{
										if (base.Player_Level - value7.Level < World.获得经验等级差 && value7.Level - base.Player_Level < World.获得经验等级差)
										{
											if (Pet != null)
											{
												宠物升级(this, num34);
												num34 *= (double)(1 - Config.宠物经验 / 100);
											}
											base.Player_FLD_EXP += (long)(num34 * (base.人物_追加_经验百分比 + 1.0));
											if (base.FLD_Teacher != "")
											{
												Players players = World.FindPlayerbyName(base.FLD_Teacher);
												if (players != null)
												{
													players.Player_FLD_EXP += (int)((double)(long)(num34 * (1.0 + base.人物_追加_经验百分比)) * 0.05);
													players.计算人物基本数据3();
													players.Update_HP_MP_SP();
													players.UpdatePowersAndStatus();
													players.Update_Exp_Marble();
													players.Update_Money_Weight();
												}
											}
											AddExpToNTC((int)(num34 * (1.0 + base.人物_追加_经验百分比)));
										}
										base.Player_ExpErience += (int)(num35 * (base.FLD_Premium_Fight_Exp + 1.0));
										base.Player_Money += (uint)(num33 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money));
										得到钱的提示((uint)(num33 * (1.0 + base.FLD_Item_Premium_Money + base.FLD_Wear_Item_Money)));
										升天历练当前获得数 += (int)num36;
										计算人物基本数据3();
										Update_HP_MP_SP();
										UpdatePowersAndStatus();
										Update_Exp_Marble();
										Update_Money_Weight();
									}
									攻击列表.Clear();
									autoAttackPhysical = false;
									if (Timer_AutoAttack != null)
									{
										Timer_AutoAttack.Enabled = false;
										Timer_AutoAttack.AutoReset = false;
										Timer_AutoAttack.Dispose();
										Timer_AutoAttack = null;
									}
								}
								else
								{
									if (!value7.enableNpcAttack)
									{
										value7.enableNpcMove = false;
										value7.enableNpcAttack = true;
									}
									if (num4 >= 150)
									{
										攻击列表.Clear();
									}
								}
							}
						}
					}
					else
					{
						num = 6;
						Random random3 = new Random(World.GetRandomSeed());
						if (攻击类.群攻 == null)
						{
							攻击类.群攻 = new List<群攻击类>();
							群攻击类 current3 = new 群攻击类(攻击列表[0].人物ID, 攻击列表[0].武功ID, 攻击列表[0].攻击力, 攻击列表[0].攻击类型);
							攻击类.群攻.Add(current3);
						}
						foreach (群攻击类 item3 in 攻击类.群攻)
						{
							if (!World.AllConnectedChars.TryGetValue(item3.人物ID, out Players value9))
							{
								break;
							}
							if (base.Player_Job == 2 || base.Player_Job == 9)
							{
								double num43 = random3.NextDouble() * 100.0;
								if (num43 < base.剑_移花接木)
								{
									Recovery_HP((int)item3.攻击力 / 2);
									Show_Qigong_Effect(num3, 26);
									Update_HP_MP_SP();
								}
							}
							if (value9.Player_Job == 3 || value9.Player_Job == 10)
							{
								value9.人物_SP += (int)((double)(value9.Player_Level * 10) * value9.枪_狂神降世);
								if (value9.Item_Wear[0].FLD_PID != 0 && value9.Item_Wear[0].物品属性阶段类型 == 2 && !value9.Show_Pic_Class.ContainsKey(700344))
								{
									if (value9.Show_Pic_Class.ContainsKey(700291))
									{
										value9.人物_SP += value9.Item_Wear[0].物品属性阶段数 * 2 * 2;
									}
									else
									{
										value9.人物_SP += value9.Item_Wear[0].物品属性阶段数 * 2;
									}
								}
							}
							if (value9.Player_Job == 6 && value9.刺_荆轲之怒 != 0.0)
							{
								value9.人物_SP += (int)(3.0 * (3.0 + (double)(value9.Player_Level / 2) * value9.刺_荆轲之怒));
							}
							if (item3.攻击力 <= 0)
							{
								value9.人物_SP += new Random(World.GetRandomSeed()).Next(value9.人物最大_SP / 200, value9.人物最大_SP / 40);
							}
							else
							{
								value9.人物_SP += new Random(World.GetRandomSeed()).Next(value9.人物最大_SP / 100, value9.人物最大_SP / 20);
							}
							if (value9.Item_Wear[0].FLD_PID != 0 && value9.Item_Wear[0].物品属性阶段类型 == 2 && !value9.Show_Pic_Class.ContainsKey(700344))
							{
								if (value9.Show_Pic_Class.ContainsKey(700291))
								{
									value9.人物_SP += value9.Item_Wear[0].物品属性阶段数 * 2 * 2;
								}
								else
								{
									value9.人物_SP += value9.Item_Wear[0].物品属性阶段数 * 2;
								}
							}
							value9.Ravage_HP(item3.攻击力);
							if (value9.Player_Job == 2 || value9.Player_Job == 9)
							{
								double num44 = new Random(World.GetRandomSeed()).Next(0, 100);
								if (num44 <= value9.剑_升天三气功_火凤临朝 && value9.Player_FLD_HP <= 0)
								{
									value9.Player_FLD_HP = 10L;
									value9.Show_Qigong_Effect(num3, 322);
								}
							}
							if (value9.Player_Job == 8)
							{
								double num44 = new Random(World.GetRandomSeed()).Next(0, 100);
								if (num44 <= value9.剑_升天三气功_火凤临朝 && value9.Player_FLD_HP <= 0)
								{
									value9.Player_FLD_HP = 10L;
									value9.Show_Qigong_Effect(num3, 601);
								}
							}
							num = 9;
							攻击列表.Clear();
							if (value9.Player_FLD_HP <= 0)
							{
								value9.Player_FLD_HP = 0L;
								value9.Player_Die();
								if (base.Player_FLD_Map != 7001 && base.Player_FLD_Map != 7101 && base.Player_FLD_Map != 7301)
								{
									if (base.Player_FLD_Map == 801 && World.势力战进程 == 3)
									{
										if (World.EventTop.TryGetValue(base.UserName, out EventTopClass value10))
										{
											value10.杀人数++;
										}
										else
										{
											value10 = new EventTopClass();
											value10.人物名 = base.UserName;
											value10.等级 = base.Player_Level;
											if (base.Player_Zx == 1)
											{
												value10.势力 = "正";
											}
											else
											{
												value10.势力 = "邪";
											}
											value10.帮派 = base.Guild_Name;
											value10.杀人数 = 1;
											value10.死亡数 = 0;
											World.EventTop.Add(base.UserName, value10);
										}
										if (World.EventTop.TryGetValue(value9.UserName, out EventTopClass value11))
										{
											value11.死亡数++;
										}
										else
										{
											value11 = new EventTopClass();
											value11.人物名 = value9.UserName;
											value11.等级 = value9.Player_Level;
											if (value9.Player_Zx == 1)
											{
												value11.势力 = "正";
											}
											else
											{
												value11.势力 = "邪";
											}
											value11.帮派 = value9.Guild_Name;
											value11.杀人数 = 0;
											value11.死亡数 = 1;
											World.EventTop.Add(value9.UserName, value11);
										}
										if (base.Player_Zx == 1)
										{
											World.势力战正分数 += (int)((double)value9.Player_Level * 0.1);
										}
										else
										{
											World.势力战邪分数 += (int)((double)value9.Player_Level * 0.1);
										}
									}
									else
									{
										if (World.Newversion <= 13 || (World.Newversion >= 14 && base.Player_FLD_Map != 101 && value9.Player_FLD_Map != 101))
										{
											if (value9.Player_FLD_SE < 0)
											{
												if (base.Player_FLD_SE < 0)
												{
													value9.Player_FLD_SE += 250;
													value9.UpdatePowersAndStatus();
													base.Player_FLD_SE += 100;
													UpdatePowersAndStatus();
												}
												else
												{
													value9.Player_FLD_SE += 250;
													value9.UpdatePowersAndStatus();
													if (base.Player_FLD_SE < 150)
													{
														UpdatePowersAndStatus();
														base.Player_FLD_SE = 150;
													}
												}
											}
											if (World.是否开启武勋系统 == 1)
											{
												武勋系统(this, value9);
											}
										}
										if (World.PkDropEquipment == 1 && value9.Player_FLD_SE <= World.PkEquipmentGoodAndEvil)
										{
											int[] array4 = new int[15];
											int num45 = 0;
											for (int i = 0; i < 16; i++)
											{
												if (BitConverter.ToInt32(value9.Item_Wear[i].Get_Byte_Item_PID, 0) != 0 && i != 12)
												{
													array4[++num45] = i;
												}
											}
											int num46 = array4[new Random(World.GetRandomSeed()).Next(0, num45)];
											if (new Random(World.GetRandomSeed()).Next(1, 100) <= World.PkEquipmentDropChance && BitConverter.ToInt32(value9.Item_Wear[num46].Get_Byte_Item_PID, 0) != 0)
											{
												logo.logpkdrop("[" + base.UserName + " (" + base.Player_FLD_SE + ")] giet [" + value9.UserName + " (" + value9.Player_FLD_SE + ")] -> DROP: " + value9.Item_Wear[num46].FLD_PID + " - " + value9.Item_Wear[num46].FLD_MAGIC0 + " - " + value9.Item_Wear[num46].FLD_MAGIC1 + " - " + value9.Item_Wear[num46].FLD_MAGIC2 + " - " + value9.Item_Wear[num46].FLD_MAGIC3 + " - " + value9.Item_Wear[num46].FLD_MAGIC4);
												人物死亡掉落装备(BitConverter.ToInt32(value9.Item_Wear[num46].Get_Byte_Item_PID, 0), value9.Item_Wear[num46].FLD_MAGIC0, value9.Item_Wear[num46].FLD_MAGIC1, value9.Item_Wear[num46].FLD_MAGIC2, value9.Item_Wear[num46].FLD_MAGIC3, value9.Item_Wear[num46].FLD_MAGIC4, value9.Item_Wear[num46].Get_Name(), this, value9);
												value9.GameMessage("Baòn výÌa ðaình rõi 1 vâòt phâÒm xuôìng mãòt ðâìt! (PK DROP)");
												GameMessage("Ðôìi phýõng výÌa laÌm rõi 1 vâòt phâÒm xuôìng mãòt ðâìt! (PK DROP)");
												value9.Item_Wear[num46].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
												value9.Update_Character_Wear_Item();
												value9.Initialize_Equip_Item();
												value9.UpdatePowersAndStatus();
											}
										}
										bool flag2 = false;
										for (int num45 = 0; num45 < World.PkSystemRestrictionMap.Length; num45++)
										{
											if (value9.Player_FLD_Map == int.Parse(World.PkSystemRestrictionMap[0]))
											{
												flag2 = true;
												break;
											}
										}
										if (flag2)
										{
											if (World.PkDropLevel != 0 && value9.Player_Level > World.PkDropLevel)
											{
												value9.Player_Level -= World.PkDropLevel;
												value9.Player_FLD_EXP = 0L;
												value9.Update_HP_MP_SP();
												value9.UpdatePowersAndStatus();
												value9.Update_Exp_Marble();
												value9.SaveDataCharacter();
												value9.GameMessage("TrýÌng phaòt: -" + World.PkDropLevel + " câìp ðôò!");
											}
											if (World.PkDropIngot != 0 && value9.FLD_RXPIONT > World.PkDropIngot)
											{
												value9.查百宝阁元宝数();
												value9.Add_Del_Rxpiont(World.PkDropIngot, 0);
												value9.Save_data_Rxpiont();
												value9.GameMessage("TrýÌng phaòt: -" + World.PkDropIngot + " @cash");
												查百宝阁元宝数();
												if (World.PkLostIngotSystemRecoveryVolume != 0)
												{
													Add_Del_Rxpiont(World.PkDropIngot - World.PkLostIngotSystemRecoveryVolume, 1);
												}
												else
												{
													Add_Del_Rxpiont(World.PkDropIngot, 1);
												}
												Save_data_Rxpiont();
												GameMessage("对方死亡您获得" + (World.PkDropIngot - World.PkLostIngotSystemRecoveryVolume) + "个元宝！");
												GameMessage("系统回收" + World.PkLostIngotSystemRecoveryVolume + "个元宝");
											}
										}
									}
								}
								autoAttackPhysical = false;
								if (Timer_AutoAttack != null)
								{
									Timer_AutoAttack.Enabled = false;
									Timer_AutoAttack.AutoReset = false;
									Timer_AutoAttack.Dispose();
									Timer_AutoAttack = null;
								}
							}
							else
							{
								num = 7;
								if (num4 >= 150)
								{
								}
							}
							value9.Update_HP_MP_SP();
						}
					}
				}
			}
			catch (Exception ex)
			{
				攻击列表.Clear();
				Form1.WriteLine(1, "攻击确认 错误" + num.ToString() + base.Userid + ex.Message);
			}
		}

		public void 关闭交易(int 人物的ID, int 操作ID)
		{
			try
			{
				string hex = "AA5543000000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 11, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 15, 4);
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.UserName);
				Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 19, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				if (交易.交易人.Client != null)
				{
					交易.交易人.Client.Send(array, array.Length);
				}
				交易.关闭交易();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "关闭交易出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 关店()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_关店");
			}
			string hex = "AA551100000000CD0002000404000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (PlayerShop.进入人 != null)
			{
				string hex2 = "AA551500000000CF000600030319000000000000000000000055AA";
				byte[] array2 = Converter.hexStringToByte(hex2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 13, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(PlayerShop.进入人.UserSessionID), 0, array2, 5, 2);
				PlayerShop.进入人.进店中 = false;
				PlayerShop.进入人.打开仓库中 = false;
				PlayerShop.进入人.进店中ID = 0;
				if (PlayerShop.进入人.Client != null)
				{
					PlayerShop.进入人.Client.Send(array2, array2.Length);
				}
			}
			打开仓库中 = false;
			PlayerShop.个人商店是否开启 = false;
			PlayerShop.商店物品列表.Clear();
			PlayerShop.Dispose();
			PlayerShop.进入人 = null;
			PlayerShop = null;
			string hex3 = "AA551B00000000CA000C000100000000000000FFFFFFFF000000000000000055AA";
			byte[] array3 = Converter.hexStringToByte(hex3);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 15, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array3, array3.Length);
			}
			SendRangeOfPackets(array3, array3.Length);
			合成系统解锁();
		}

		public void 行走状态(byte[] wg_id, int 状态ID)
		{
			string hex = "AA5527000000003D0018000E2C09000101000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(wg_id, 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 16, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 行走状态to(Players ToPlay, Players Play)
		{
			if (Play.行走状态id != 1)
			{
				string hex = "AA55270000A1003D001800020000000101000000000000000000000000000000000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(Play.行走状态id), 0, array, 16, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(Play.UserSessionID), 0, array, 5, 2);
				if (ToPlay.Client != null)
				{
					ToPlay.Client.Send多包(array, array.Length);
				}
			}
		}

		public void 行走状态人物灵兽(byte[] wg_id, int 状态ID)
		{
			string hex = "AA5527000000003D0018000E2C09000101000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(wg_id, 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 16, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			SendRangeOfPackets(array, array.Length);
		}

		public void Send_Packet_Tip_Upgrade_Item(int Upgrade_ID, int Type, int Value_Money, 物品类 Item, int newIdItem = 0)
		{
			if (newIdItem == 0 && World.Newversion < 17)
			{
				Send_Packet_Tip_Upgrade_Item_old(Upgrade_ID, Type, Value_Money, Item);
				return;
			}
			string hex = "AA55007A00E70051007400730101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(Upgrade_ID), 0, array, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(Type), 0, array, 13, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(Item.Bag), 0, array, 27, 4);
			Buffer.BlockCopy(Item.Get_Byte_Item_PID, 0, array, 31, 4);
			Buffer.BlockCopy(Item.Get_Byte_Item_Option, 0, array, 39, 56);
			Buffer.BlockCopy(BitConverter.GetBytes((long)Value_Money), 0, array, 99, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(newIdItem), 0, array, 19, 4);
			HcItimesClass hcItimesClass = new HcItimesClass();
			hcItimesClass.Get_Byte_Item = Item.Byte_Item;
			if (Item.FLD_持久力 == 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(50 * (hcItimesClass.Upgrade_Level + 1)), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Send_Packet_Tip_Upgrade_Item_old(int Upgrade_ID, int Type, int Value_Money, 物品类 Item)
		{
			string hex = "AA55770001330251006800150001000000000000000000000000000000000042EEF8050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008813000000000000000000000000000000000000000000000000625855AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(Upgrade_ID), 0, array, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(Type), 0, array, 13, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(Item.Bag), 0, array, 27, 4);
			Buffer.BlockCopy(Item.Get_Byte_Item_PID, 0, array, 31, 4);
			Buffer.BlockCopy(Item.Get_Byte_Item_Option, 0, array, 39, 56);
			Buffer.BlockCopy(BitConverter.GetBytes((long)Value_Money), 0, array, 99, 4);
			HcItimesClass hcItimesClass = new HcItimesClass();
			hcItimesClass.Get_Byte_Item = Item.Byte_Item;
			if (Item.FLD_持久力 == 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(50 * (hcItimesClass.Upgrade_Level + 1)), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Upgrade_Item(byte[] data, int length)
		{
			int num = BitConverter.ToUInt16(data, 11);
			int num2 = data[27];
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_Upgrade_Item");
			}
			if (World.Newversion < 17 && num != 302 && !打开仓库中)
			{
				Form1.WriteLine(6, "Upgrade_Item BUG - [num: " + num + "] ![" + base.Userid + "]-[" + base.UserName + "]");
				return;
			}
			if ((int)DateTime.Now.Subtract(time_PK).TotalMilliseconds < 100)
			{
				GameMessage("Vui loÌng haÌnh ðôòng châòm laòi!", 7);
				return;
			}
			time_PK = DateTime.Now;
			Thread.Sleep(100);
			if (World.Debug != 0)
			{
				GameMessage("Upgrade_Item: " + num);
			}
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT * FROM Log_DeleteItem where TrangThai=0 and MaItem=" + BitConverter.ToInt32(Item_In_Bag[num2].物品全局ID, 0)));
			if (dBToDataTable.Rows.Count > 0)
			{
				Form1.WriteLine(100, "BUG CUONG HOA: [" + base.UserName + "] - [" + Item_In_Bag[num2].Get物品全局ID + "] - [" + Item_In_Bag[num2].FLD_PID + "]");
				Item_In_Bag[num2].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
				Update_Item_In_Bag();
				Update_Money_Weight();
				if (base.Client != null)
				{
					base.Client.Dispose();
					GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 79", 7);
				}
			}
			else
			{
				try
				{
					PacketVerify(data, length);
					打开仓库中 = true;
					string hex = "AA55770001330251006800150001000000000000000000000000000000000042EEF8050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008813000000000000000000000000000000000000000000000000625855AA";
					byte[] array = Converter.hexStringToByte(hex);
					string hex2 = "AA5577000133025100680023010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000055AA";
					byte[] array2 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(BitConverter.GetBytes(0L), 0, array, 95, 8);
					byte[] array3;
					HcItimesClass value32;
					ItmeClass value30 = default(ItmeClass);
					ItmeClass value33;
					HcItimesClass hcItimesClass63;
					int num3;
					if (length > 30)
					{
						array3 = new byte[4];
						Buffer.BlockCopy(data, 11, array3, 0, 4);
						num3 = num;
						ItmeClass value10;
						if (num3 <= 83)
						{
							switch (num3)
							{
								default:
									return;
								case 14:
								case 15:
								case 16:
								case 17:
								case 18:
								case 24:
								case 25:
								case 26:
								case 27:
								case 28:
								case 31:
								case 44:
								case 45:
								case 46:
								case 47:
								case 48:
								case 52:
								case 53:
								case 54:
								case 55:
								case 56:
								case 57:
								case 58:
								case 72:
								case 73:
								case 74:
								case 75:
								case 76:
								case 77:
								case 78:
									return;
								case 33:
								case 34:
								case 35:
								case 36:
								case 37:
								case 38:
								case 64:
								case 65:
								case 66:
								case 67:
								case 68:
									return;
								case 51:
									try
									{
										if (ClassHcItimes.ContainsKey(1) || Item_In_Bag[num2].物品绑定 || Item_In_Bag[num2].Item_Level_Upgrade > 0)
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass36 = new HcItimesClass();
										hcItimesClass36.index = num2;
										hcItimesClass36.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(1, hcItimesClass36);
									}
									catch (Exception ex24)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex24.Message);
										return;
									}
									break;
								case 69:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value18))
										{
											Item_In_Bag[value18.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
									}
									catch (Exception ex25)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex25.Message);
										return;
									}
									break;
								case 70:
									try
									{
										byte[] array16 = new byte[4];
										byte[] dst2 = new byte[4];
										Buffer.BlockCopy(data, 15, array16, 0, 4);
										Buffer.BlockCopy(data, 19, dst2, 0, 4);
										if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array16, 0)].Get_Byte_Item_PID, 0) == 0 || ClassHcItimes.Count <= 0)
										{
											return;
										}
										HcItimesClass hcItimesClass35 = null;
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass35 = ClassHcItimes[1];
										}
										ItmeClass value17 = default(ItmeClass);
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass35.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass35.物品全局ID, 0) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass35.Item_ID, 0), out value17))
										{
											return;
										}
										if (value17.FLD_RESIDE2 != 1 && value17.FLD_RESIDE2 != 2 && value17.FLD_RESIDE2 != 4 && value17.FLD_RESIDE2 != 5 && value17.FLD_RESIDE2 != 6)
										{
											Form1.WriteLine(6, "Upgrade_Item 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass35.Item_ID, 0) + "]");
											return;
										}
										if (Item_In_Bag[hcItimesClass35.index].物品绑定)
										{
											Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass35.index]);
											return;
										}
										hcItimesClass35.强化属性阶段();
										hcItimesClass35.阶段类型 = 0;
										hcItimesClass35.阶段数量 = 0;
										hcItimesClass35.设置阶段属性();
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Send_Packet_Delete_Item(BitConverter.ToInt32(array16, 0), 1);
										if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass35.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass35.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass35.物品全局ID, 0))
										{
											Send_Packet_Delete_Item(hcItimesClass35.index, 1);
											_Make_Item_Option(hcItimesClass35.物品全局ID, hcItimesClass35.Item_ID, hcItimesClass35.index, hcItimesClass35.Item_Count, hcItimesClass35.Item_Opt);
										}
										Item_In_Bag[hcItimesClass35.index].LockMove = false;
										ClassHcItimes.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
									}
									catch (Exception ex23)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex23.Message);
										return;
									}
									break;
								case 71:
									try
									{
										if (ClassHcItimes.ContainsKey(1) || Item_In_Bag[num2].物品绑定)
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass34 = new HcItimesClass();
										hcItimesClass34.index = num2;
										hcItimesClass34.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(1, hcItimesClass34);
									}
									catch (Exception ex21)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex21.Message);
										return;
									}
									break;
								case 79:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value16))
										{
											Item_In_Bag[value16.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
										}
										打开仓库中 = false;
										元宝合成开关 = 0;
										Buffer.BlockCopy(array3, 0, array, 11, 2);
									}
									catch (Exception ex22)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex22.Message);
										return;
									}
									break;
								case 81:
									try
									{
										if (Item_In_Bag[num2].LockMove || ClassHcItimes.ContainsKey(1))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass31 = new HcItimesClass();
										hcItimesClass31.index = num2;
										hcItimesClass31.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(1, hcItimesClass31);
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex18)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex18.Message);
										return;
									}
									break;
								case 82:
									try
									{
										if (ClassHcItimes.Count == 0)
										{
											Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
											return;
										}
										if (ClassHcItimes.ContainsKey(2) || Item_In_Bag[num2].LockMove || Item_In_Bag[num2].物品绑定)
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass33 = new HcItimesClass();
										hcItimesClass33.index = num2;
										hcItimesClass33.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(2, hcItimesClass33);
									}
									catch (Exception ex20)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex20.Message);
										return;
									}
									break;
								case 83:
									try
									{
										if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(3))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass43 = new HcItimesClass();
										hcItimesClass43.index = num2;
										hcItimesClass43.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										ClassHcItimes.Add(3, hcItimesClass43);
										Item_In_Bag[num2].LockMove = true;
									}
									catch (Exception ex31)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex31.Message);
										return;
									}
									break;
								case 39:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value21))
										{
											Item_In_Bag[value21.index].LockMove = false;
										}
										if (ClassHcItimes.TryGetValue(2, out value21))
										{
											Item_In_Bag[value21.index].LockMove = false;
										}
										if (ClassHcItimes.TryGetValue(3, out value21))
										{
											Item_In_Bag[value21.index].LockMove = false;
										}
										if (ClassHcItimes.TryGetValue(4, out value21))
										{
											Item_In_Bag[value21.index].LockMove = false;
										}
										元宝合成开关 = 0;
										ClassHcItimes.Clear();
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										合成系统解锁();
									}
									catch (Exception ex30)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex30.Message);
										return;
									}
									break;
								case 40:
									try
									{
										byte[] array17 = new byte[4];
										byte[] dst3 = new byte[4];
										Buffer.BlockCopy(data, 15, array17, 0, 4);
										Buffer.BlockCopy(data, 19, dst3, 0, 4);
										if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array17, 0)].Get_Byte_Item_PID, 0) == 0 || ClassHcItimes.Count <= 0)
										{
											return;
										}
										HcItimesClass hcItimesClass19 = null;
										HcItimesClass hcItimesClass40 = null;
										HcItimesClass hcItimesClass41 = null;
										HcItimesClass hcItimesClass42 = null;
										HcItimesClass hcItimesClass23 = null;
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass19 = ClassHcItimes[1];
										}
										if (ClassHcItimes.ContainsKey(2))
										{
											hcItimesClass40 = ClassHcItimes[2];
										}
										if (ClassHcItimes.ContainsKey(3))
										{
											hcItimesClass41 = ClassHcItimes[3];
										}
										if (ClassHcItimes.ContainsKey(4))
										{
											hcItimesClass42 = ClassHcItimes[4];
										}
										if (ClassHcItimes.ContainsKey(5))
										{
											hcItimesClass23 = ClassHcItimes[5];
										}
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0) || hcItimesClass40 == null || (hcItimesClass40 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass40.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass40.物品全局ID, 0)) || (hcItimesClass41 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass41.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass41.物品全局ID, 0)) || (hcItimesClass42 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass42.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass42.物品全局ID, 0)) || (hcItimesClass23 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass23.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass23.物品全局ID, 0)))
										{
											return;
										}
										if (Item_In_Bag[hcItimesClass19.index].物品绑定)
										{
											Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass19.index]);
											return;
										}
										hcItimesClass19.得到属性();
										hcItimesClass19.强化属性阶段();
										if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), out ItmeClass value20))
										{
											return;
										}
										if (value20.FLD_RESIDE2 != 1 && value20.FLD_RESIDE2 != 2 && value20.FLD_RESIDE2 != 4 && value20.FLD_RESIDE2 != 5 && value20.FLD_RESIDE2 != 6 && value20.FLD_RESIDE2 != 14)
										{
											Form1.WriteLine(6, "Upgrade_Item 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass19.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass40.Item_ID, 0) + "]");
											return;
										}
										switch (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array17, 0)].Get_Byte_Item_PID, 0))
										{
											case 1008001057:
											case 1008001058:
											case 1008001059:
											case 1008001060:
												if (value20.FLD_LEVEL < 120 || value20.FLD_JOB_LEVEL < 7)
												{
													GameMessage("ChiÒ coì thêÒ sýÒ duòng cho vâòt phâÒm coì câìp ðôò 120 trõÒ lên", 7);
													return;
												}
												break;
										}
										if (hcItimesClass19.Upgrade_Level >= 10 && (value20.FLD_LEVEL < 120 || value20.FLD_JOB_LEVEL < 7))
										{
											ClassHcItimes.Clear();
										}
										else
										{
											double[] rateCuongHoa2 = getRateCuongHoa(30.0, 95.0, hcItimesClass23);
											double num14 = rateCuongHoa2[0];
											double num15 = rateCuongHoa2[1];
											double num16 = new Random((int)DateTime.Now.Ticks).Next((int)num14, (int)num15);
											for (int i = 0; i < new Random((int)DateTime.Now.Ticks).Next(10, 10); i++)
											{
												num16 = new Random(World.GetRandomSeed()).Next((int)num14, (int)num15);
											}
											double num17 = hcItimesClass19.Upgrade_Level * 10;
											if (hcItimesClass19.属性1.属性数量 + hcItimesClass19.属性2.属性数量 != 0 && hcItimesClass41 == null)
											{
												GameMessage("CýõÌng hoìa thaòch không ðuÒ 2 viên", 9);
												return;
											}
											if (hcItimesClass19.属性1.属性数量 + hcItimesClass19.属性2.属性数量 != 0 && hcItimesClass19.属性3.属性数量 + hcItimesClass19.属性4.属性数量 != 0 && hcItimesClass42 == null)
											{
												GameMessage("CýõÌng hoìa thaòch không ðuÒ 3 viên", 9);
												return;
											}
											if (base.Player_Money < 15000)
											{
												GameMessage("Không ðuÒ 15000 tiêÌn vaÌng", 9);
												return;
											}
											base.Player_Money -= 15000L;
											if (value20.FLD_CJL != 0)
											{
												if (base.Player_WuXun < 50 * (hcItimesClass19.Upgrade_Level + 1))
												{
													GameMessage("Không ðuÒ " + 50 * (hcItimesClass19.Upgrade_Level + 1) + " ðiêÒm voÞ huân", 9);
													return;
												}
												base.Player_WuXun -= 50 * (hcItimesClass19.Upgrade_Level + 1);
												UpdatePowersAndStatus();
											}
											int upgrade_Level = hcItimesClass19.Upgrade_Level;
											if (num16 >= num17)
											{
												switch (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array17, 0)].Get_Byte_Item_PID, 0))
												{
													case 1008001059:
													case 1008001060:
														{
															if (hcItimesClass19.Upgrade_Level < 10)
															{
																GameMessage("Câìp cýõÌng hoìa hiêòn taòi cuÒa vâòt phâÒm phaÒi lõìn hõn hoãòc bãÌng 10", 7);
																return;
															}
															Random random2 = new Random((int)DateTime.Now.Ticks);
															int num26 = new Random(World.GetRandomSeed()).Next(1, 900);
															if (num26 > 700)
															{
																hcItimesClass19.Upgrade_Level += 3;
															}
															else if (num26 > 400)
															{
																hcItimesClass19.Upgrade_Level += 2;
															}
															else
															{
																hcItimesClass19.Upgrade_Level++;
															}
															if (hcItimesClass19.Upgrade_Level > 15)
															{
																hcItimesClass19.Upgrade_Level = 15;
															}
															break;
														}
													case 1008000111:
													case 1008000114:
														if (hcItimesClass19.Upgrade_Level != 5)
														{
															GameMessage("Câìp cýõÌng hoìa hiêòn taòi cuÒa vâòt phâÒm phaÒi phaÒi bãÌng 5", 7);
															return;
														}
														hcItimesClass19.Upgrade_Level = 6;
														break;
													case 1008000113:
													case 1008000116:
														{
															if (hcItimesClass19.Upgrade_Level > 10 && value20.FLD_LEVEL < 120)
															{
																hcItimesClass19.Upgrade_Level = 10;
															}
															if (hcItimesClass19.Upgrade_Level > 15 && value20.FLD_LEVEL >= 120)
															{
																hcItimesClass19.Upgrade_Level = 15;
															}
															Random random2 = new Random((int)DateTime.Now.Ticks);
															hcItimesClass19.Upgrade_Level += World.GetStoneValue_Fix(1, 3);
															break;
														}
													case 1008000023:
													case 1008000024:
													case 1008000112:
													case 1008000115:
													case 1008001057:
													case 1008001058:
													case 1008001475:
													case 1008001476:
														hcItimesClass19.Upgrade_Level++;
														break;
												}
												if (hcItimesClass19.Upgrade_Level > 10 && value20.FLD_LEVEL < 120)
												{
													hcItimesClass19.Upgrade_Level = 10;
												}
												if (hcItimesClass19.Upgrade_Level > 15 && value20.FLD_LEVEL >= 120)
												{
													hcItimesClass19.Upgrade_Level = 15;
												}
												if (hcItimesClass19.Upgrade_Level >= World.江湖快报强化阶段)
												{
													World.发送强化合成公告(BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), base.UserName, hcItimesClass19.Upgrade_Level, base.Player_Zx);
												}
												if (value20.FLD_RESIDE2 == 4)
												{
													hcItimesClass19.Upgrade_Type = 1;
												}
												else
												{
													hcItimesClass19.Upgrade_Type = 2;
												}
												hcItimesClass19.设置阶段属性();
												Send_Packet_Delete_Item(BitConverter.ToInt32(array17, 0), 1);
												if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass19.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0))
												{
													Send_Packet_Delete_Item(hcItimesClass19.index, 1);
													_Make_Item_Option(hcItimesClass19.物品全局ID, hcItimesClass19.Item_ID, hcItimesClass19.index, hcItimesClass19.Item_Count, hcItimesClass19.Item_Opt);
												}
												Item_In_Bag[hcItimesClass19.index].LockMove = false;
												if (base.FLD_VIP == 1)
												{
												}
												if (hcItimesClass19.Upgrade_Level >= 0)
												{
													RxjhClass.GhiLogDelItem(BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0), BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), upgrade_Level + "->" + hcItimesClass19.Upgrade_Level, this, 1);
													string txt = "[ " + BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass19.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [" + num16 + "/" + num17 + " - " + upgrade_Level + "->" + hcItimesClass19.Upgrade_Level + " ] | " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC0 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC1 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC2 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC3 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC4 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_觉醒 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_中级附魂 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_进化 + " - " + Item_In_Bag[hcItimesClass19.index].物品绑定 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_DAY1 + "/" + Item_In_Bag[hcItimesClass19.index].FLD_DAY2;
													logo.logcuonghoaitem(txt);
												}
											}
											else
											{
												switch (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array17, 0)].Get_Byte_Item_PID, 0))
												{
													case 1008000023:
													case 1008000024:
													case 1008000113:
													case 1008000116:
													case 1008001059:
													case 1008001060:
														hcItimesClass19.Upgrade_Type = 0;
														hcItimesClass19.Upgrade_Level = 0;
														hcItimesClass19.设置阶段属性();
														if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass19.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0))
														{
															Send_Packet_Delete_Item(hcItimesClass19.index, 1);
															_Make_Item_Option(hcItimesClass19.物品全局ID, hcItimesClass19.Item_ID, hcItimesClass19.index, hcItimesClass19.Item_Count, hcItimesClass19.Item_Opt);
														}
														break;
													case 1008000112:
													case 1008000115:
													case 1008001057:
													case 1008001058:
													case 1008001475:
													case 1008001476:
														hcItimesClass19.Upgrade_Level -= 2;
														if (hcItimesClass19.Upgrade_Level <= 0)
														{
															hcItimesClass19.Upgrade_Level = 0;
															hcItimesClass19.Upgrade_Type = 0;
														}
														hcItimesClass19.设置阶段属性();
														if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass19.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0))
														{
															Send_Packet_Delete_Item(hcItimesClass19.index, 1);
															_Make_Item_Option(hcItimesClass19.物品全局ID, hcItimesClass19.Item_ID, hcItimesClass19.index, hcItimesClass19.Item_Count, hcItimesClass19.Item_Opt);
														}
														break;
													case 1008000111:
													case 1008000114:
														if (hcItimesClass19.Upgrade_Level != 5)
														{
															GameMessage("Câìp cýõÌng hoìa hiêòn taòi cuÒa vâòt phâÒm phaÒi bãÌng 5", 7);
															return;
														}
														hcItimesClass19.Upgrade_Level = 6;
														hcItimesClass19.设置阶段属性();
														if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass19.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0))
														{
															Send_Packet_Delete_Item(hcItimesClass19.index, 1);
															_Make_Item_Option(hcItimesClass19.物品全局ID, hcItimesClass19.Item_ID, hcItimesClass19.index, hcItimesClass19.Item_Count, hcItimesClass19.Item_Opt);
														}
														break;
												}
												Send_Packet_Delete_Item(BitConverter.ToInt32(array17, 0), 1);
												Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
												if (hcItimesClass19.Upgrade_Level >= 0)
												{
													RxjhClass.GhiLogDelItem(BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0), BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), upgrade_Level + "->" + hcItimesClass19.Upgrade_Level, this, 1);
													string txt = "[ " + BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass19.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [" + num16 + "/" + num17 + " - " + upgrade_Level + "->" + hcItimesClass19.Upgrade_Level + " ] | " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC0 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC1 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC2 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC3 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC4 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_觉醒 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_中级附魂 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_进化 + " - " + Item_In_Bag[hcItimesClass19.index].物品绑定 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_DAY1 + "/" + Item_In_Bag[hcItimesClass19.index].FLD_DAY2;
													logo.logcuonghoaitem(txt);
												}
											}
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
											Send_Packet_Delete_Item(hcItimesClass40.index, 1);
											if (hcItimesClass41 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass41.index, 1);
											}
											if (hcItimesClass42 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass42.index, 1);
											}
											if (hcItimesClass23 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass23.index, 1);
											}
											ClassHcItimes.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
										}
									}
									catch (Exception ex29)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex29.Message);
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex29.StackTrace);
										return;
									}
									break;
								case 41:
									try
									{
										if (ClassHcItimes.ContainsKey(1) || Item_In_Bag[num2].物品绑定)
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass39 = new HcItimesClass();
										hcItimesClass39.index = num2;
										hcItimesClass39.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(1, hcItimesClass39);
									}
									catch (Exception ex28)
									{
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex28.Message);
										return;
									}
									break;
								case 42:
									try
									{
										HcItimesClass hcItimesClass37;
										HcItimesClass hcItimesClass38;
										if (!ClassHcItimes.ContainsKey(4))
										{
											hcItimesClass37 = null;
											if (ClassHcItimes.ContainsKey(1))
											{
												hcItimesClass37 = ClassHcItimes[1];
												if (ClassHcItimes.Count != 0)
												{
													Buffer.BlockCopy(array3, 0, array, 11, 2);
													Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
													Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
													Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
													Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
													Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
													Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
													if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 1 && (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) == 800000006 || BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) == 800000060))
													{
														hcItimesClass38 = new HcItimesClass();
														hcItimesClass38.index = num2;
														hcItimesClass38.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
														Item_In_Bag[num2].LockMove = true;
														if (!ClassHcItimes.ContainsKey(2))
														{
															ClassHcItimes.Add(2, hcItimesClass38);
															if (base.Client != null)
															{
																base.Client.Send(array, array.Length);
															}
														}
														hcItimesClass37.得到属性();
														if (hcItimesClass37.属性1.属性数量 + hcItimesClass37.属性2.属性数量 == 0)
														{
															goto IL_2c18;
														}
														if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 2)
														{
															if (!ClassHcItimes.ContainsKey(3))
															{
																ClassHcItimes.Add(3, hcItimesClass38);
																if (base.Client != null)
																{
																	base.Client.Send(array, array.Length);
																}
															}
															goto IL_2c18;
														}
													}
												}
											}
										}
										goto end_IL_298d;
									IL_2c18:
										if (hcItimesClass37.属性1.属性数量 + hcItimesClass37.属性2.属性数量 != 0 && hcItimesClass37.属性3.属性数量 + hcItimesClass37.属性4.属性数量 != 0 && BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 3 && !ClassHcItimes.ContainsKey(4))
										{
											ClassHcItimes.Add(4, hcItimesClass38);
											if (base.Client != null)
											{
												base.Client.Send(array, array.Length);
											}
										}
										double[] rateCuongHoa = getRateCuongHoa(10.0, 100.0);
										if (ClassHcItimes.ContainsKey(5))
										{
											rateCuongHoa = getRateCuongHoa(10.0, 100.0, ClassHcItimes[5]);
										}
										ClassHcItimes[1].得到属性();
										ClassHcItimes[1].强化属性阶段();
										double num13 = 1.0 - ((double)(ClassHcItimes[1].Upgrade_Level * 10) - rateCuongHoa[0]) / (rateCuongHoa[1] - rateCuongHoa[0]);
										if (num13 >= 1.0)
										{
											num13 = 0.99;
										}
									end_IL_298d:;
									}
									catch (Exception ex27)
									{
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex27.Message);
									}
									return;
								case 43:
									try
									{
										if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(5))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass32 = new HcItimesClass();
										hcItimesClass32.index = num2;
										hcItimesClass32.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(5, hcItimesClass32);
										double[] rateCuongHoa = getRateCuongHoa(10.0, 100.0);
										if (ClassHcItimes.ContainsKey(5))
										{
											rateCuongHoa = getRateCuongHoa(10.0, 100.0, ClassHcItimes[5]);
										}
										ClassHcItimes[1].得到属性();
										ClassHcItimes[1].强化属性阶段();
										double num13 = 1.0 - ((double)(ClassHcItimes[1].Upgrade_Level * 10) - rateCuongHoa[0]) / (rateCuongHoa[1] - rateCuongHoa[0]);
										if (num13 >= 1.0)
										{
											num13 = 0.99;
										}
									}
									catch (Exception ex19)
									{
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex19.Message);
										return;
									}
									break;
								case 49:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value19))
										{
											Item_In_Bag[value19.index].LockMove = false;
											ClassHcItimes.Clear();
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											合成系统解锁();
										}
										元宝合成开关 = 0;
										打开仓库中 = false;
									}
									catch (Exception ex26)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex26.Message);
									}
									return;
								case 50:
									{
										byte[] array15 = new byte[4];
										byte[] dst = new byte[4];
										Buffer.BlockCopy(data, 15, array15, 0, 4);
										Buffer.BlockCopy(data, 19, dst, 0, 4);
										if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array15, 0)].Get_Byte_Item_PID, 0) == 0 || ClassHcItimes.Count <= 0)
										{
											return;
										}
										HcItimesClass hcItimesClass30 = null;
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass30 = ClassHcItimes[1];
										}
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass30.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass30.物品全局ID, 0))
										{
											return;
										}
										if (Item_In_Bag[hcItimesClass30.index].物品绑定)
										{
											Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass30.index]);
											return;
										}
										hcItimesClass30.得到属性();
										if (hcItimesClass30.属性4.属性类型 != 0)
										{
											hcItimesClass30.属性4.属性类型 = 0;
											hcItimesClass30.属性4.属性数量 = 0;
											hcItimesClass30.设置属性();
										}
										else if (hcItimesClass30.属性3.属性类型 != 0)
										{
											hcItimesClass30.属性3.属性类型 = 0;
											hcItimesClass30.属性3.属性数量 = 0;
											hcItimesClass30.设置属性();
										}
										else if (hcItimesClass30.属性2.属性类型 != 0)
										{
											hcItimesClass30.属性2.属性类型 = 0;
											hcItimesClass30.属性2.属性数量 = 0;
											hcItimesClass30.设置属性();
										}
										else if (hcItimesClass30.属性1.属性类型 != 0)
										{
											hcItimesClass30.属性1.属性类型 = 0;
											hcItimesClass30.属性1.属性数量 = 0;
											hcItimesClass30.设置属性();
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Send_Packet_Delete_Item(BitConverter.ToInt32(array15, 0), 1);
										if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass30.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass30.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass30.物品全局ID, 0))
										{
											Send_Packet_Delete_Item(hcItimesClass30.index, 1);
											_Make_Item_Option(hcItimesClass30.物品全局ID, hcItimesClass30.Item_ID, hcItimesClass30.index, hcItimesClass30.Item_Count, hcItimesClass30.Item_Opt);
										}
										Item_In_Bag[hcItimesClass30.index].LockMove = false;
										ClassHcItimes.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										break;
									}
								case 59:
									try
									{
										ClassHcItimes.Clear();
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										合成系统解锁();
										元宝合成开关 = 0;
										打开仓库中 = false;
									}
									catch (Exception ex17)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 八卦回天符 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex17.Message);
										return;
									}
									break;
								case 60:
									try
									{
										if (ClassHcItimes.Count <= 0)
										{
											return;
										}
										HcItimesClass hcItimesClass27 = null;
										HcItimesClass hcItimesClass28 = null;
										HcItimesClass hcItimesClass29 = null;
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass27 = ClassHcItimes[1];
										}
										if (ClassHcItimes.ContainsKey(2))
										{
											hcItimesClass28 = ClassHcItimes[2];
										}
										if (ClassHcItimes.ContainsKey(3))
										{
											hcItimesClass29 = ClassHcItimes[3];
										}
										ItmeClass value15 = default(ItmeClass);
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass27.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass27.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass28.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass28.物品全局ID, 0) || (hcItimesClass29 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass29.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass29.物品全局ID, 0)) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass27.Item_ID, 0), out value15))
										{
											return;
										}
										if (value15.FLD_RESIDE2 != 1 && value15.FLD_RESIDE2 != 2 && value15.FLD_RESIDE2 != 4 && value15.FLD_RESIDE2 != 5 && value15.FLD_RESIDE2 != 6)
										{
											Form1.WriteLine(6, "Upgrade_Item 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass27.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass28.Item_ID, 0) + "]");
											return;
										}
										if (Item_In_Bag[hcItimesClass27.index].物品绑定)
										{
											Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass27.index]);
											return;
										}
										hcItimesClass27.强化属性阶段();
										hcItimesClass28.强化属性阶段();
										double num24 = new Random((int)DateTime.Now.Ticks).Next(0, 100);
										double num25 = hcItimesClass27.阶段数量 * 10;
										if (hcItimesClass27.阶段数量 >= 10 || (hcItimesClass27.阶段类型 != 0 && hcItimesClass27.阶段类型 != hcItimesClass28.阶段类型))
										{
											ClassHcItimes.Clear();
										}
										else
										{
											if (hcItimesClass29 != null)
											{
												num3 = BitConverter.ToInt32(hcItimesClass29.Item_ID, 0);
												int num12 = World.checkLuckyItem(num3);
												num24 += (double)num12;
												GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
											}
											if (base.Item_Upgrade_Lucky_Add != 0.0)
											{
												num24 += 100.0 * base.Item_Upgrade_Lucky_Add;
											}
											if (base.Character_Upgrade_Lucky != 0.0)
											{
												num24 += 100.0 * base.Character_Upgrade_Lucky;
											}
											if (元宝合成开关 == 1)
											{
												num24 += 5.0;
											}
											if (base.FLD_VIP == 1)
											{
												num24 = ((World.Newversion < 13) ? (num24 + 100.0 * World.VipSynthesisRate) : (num24 * (1.0 + World.VipSynthesisRate)));
											}
											if (World.合成率 != 0.0)
											{
												num24 = ((World.Newversion < 13) ? (num24 + 100.0 * World.合成率) : (num24 * (1.0 + World.合成率)));
											}
											if (公有药品.ContainsKey(1008000312))
											{
												num24 *= 1.05;
											}
											if (num24 >= num25)
											{
												hcItimesClass27.阶段类型 = hcItimesClass28.阶段类型;
												hcItimesClass27.阶段数量++;
												hcItimesClass27.设置阶段属性();
												if (base.FLD_VIP != 1)
												{
												}
											}
											else
											{
												hcItimesClass27.阶段数量 = 0;
												hcItimesClass27.设置阶段属性();
												Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
											}
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
											Send_Packet_Delete_Item(hcItimesClass28.index, 1);
											if (hcItimesClass29 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass29.index, 1);
											}
											if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass27.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass27.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass27.物品全局ID, 0))
											{
												Send_Packet_Delete_Item(hcItimesClass27.index, 1);
												_Make_Item_Option(hcItimesClass27.物品全局ID, hcItimesClass27.Item_ID, hcItimesClass27.index, hcItimesClass27.Item_Count, hcItimesClass27.Item_Opt);
											}
											Item_In_Bag[hcItimesClass27.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
										}
									}
									catch (Exception ex16)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex16.Message);
										return;
									}
									break;
								case 61:
									try
									{
										if (ClassHcItimes.ContainsKey(1) || Item_In_Bag[num2].物品绑定)
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass26 = new HcItimesClass();
										hcItimesClass26.index = num2;
										hcItimesClass26.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(1, hcItimesClass26);
									}
									catch (Exception ex15)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex15.Message);
										return;
									}
									break;
								case 62:
									try
									{
										if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(2))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass25 = new HcItimesClass();
										hcItimesClass25.index = num2;
										hcItimesClass25.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(2, hcItimesClass25);
									}
									catch (Exception ex14)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex14.Message);
										return;
									}
									break;
								case 63:
									try
									{
										if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(3))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass24 = new HcItimesClass();
										hcItimesClass24.index = num2;
										hcItimesClass24.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(3, hcItimesClass24);
									}
									catch (Exception ex13)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex13.Message);
										return;
									}
									break;
								case 10:
									try
									{
										if (ClassHcItimes.Count <= 0)
										{
											return;
										}
										HcItimesClass hcItimesClass19 = null;
										HcItimesClass hcItimesClass20 = null;
										HcItimesClass hcItimesClass21 = null;
										HcItimesClass hcItimesClass22 = null;
										HcItimesClass hcItimesClass23 = null;
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass19 = ClassHcItimes[1];
										}
										if (ClassHcItimes.ContainsKey(2))
										{
											hcItimesClass20 = ClassHcItimes[2];
										}
										if (ClassHcItimes.ContainsKey(3))
										{
											hcItimesClass21 = ClassHcItimes[3];
										}
										if (ClassHcItimes.ContainsKey(4))
										{
											hcItimesClass22 = ClassHcItimes[4];
										}
										if (ClassHcItimes.ContainsKey(5))
										{
											hcItimesClass23 = ClassHcItimes[5];
										}
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0) || hcItimesClass20 == null || (hcItimesClass20 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass20.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass20.物品全局ID, 0)) || (hcItimesClass21 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass21.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass21.物品全局ID, 0)) || (hcItimesClass22 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass22.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass22.物品全局ID, 0)) || (hcItimesClass23 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass23.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass23.物品全局ID, 0)))
										{
											return;
										}
										hcItimesClass19.得到属性();
										hcItimesClass19.强化属性阶段();
										if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), out ItmeClass value13))
										{
											return;
										}
										if (value13.FLD_RESIDE2 != 1 && value13.FLD_RESIDE2 != 2 && value13.FLD_RESIDE2 != 4 && value13.FLD_RESIDE2 != 5 && value13.FLD_RESIDE2 != 6 && value13.FLD_RESIDE2 != 14)
										{
											Form1.WriteLine(6, "Upgrade_Item 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass19.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass20.Item_ID, 0) + "]");
											return;
										}
										if (Item_In_Bag[hcItimesClass19.index].物品绑定)
										{
											Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass19.index]);
											return;
										}
										Random random;
										if ((hcItimesClass19.Upgrade_Level < 10 || World.Newversion >= 13) && (World.Newversion < 13 || ((hcItimesClass19.Upgrade_Level < 10 || (value13.FLD_RESIDE2 != 0 && value13.FLD_RESIDE2 <= 6 && value13.FLD_LEVEL >= 120)) && (hcItimesClass19.Upgrade_Level < 15 || value13.FLD_RESIDE2 < 1 || value13.FLD_RESIDE2 > 6 || value13.FLD_LEVEL < 120))))
										{
											double[] rateCuongHoa2 = getRateCuongHoa(25.0, 90.0, hcItimesClass23);
											double num14 = rateCuongHoa2[0];
											double num15 = rateCuongHoa2[1];
											double num16 = new Random((int)DateTime.Now.Ticks).Next((int)num14, (int)num15);
											for (int i = 0; i < new Random((int)DateTime.Now.Ticks).Next(5, 5); i++)
											{
												num16 = new Random(World.GetRandomSeed()).Next((int)num14, (int)num15);
											}
											double num17 = hcItimesClass19.Upgrade_Level * 10;
											if (hcItimesClass19.属性1.属性数量 + hcItimesClass19.属性2.属性数量 != 0 && hcItimesClass21 == null)
											{
												GameMessage("CýõÌng hoìa thaòch không ðuÒ 2 viên", 9);
												return;
											}
											if (hcItimesClass19.属性1.属性数量 + hcItimesClass19.属性2.属性数量 != 0 && hcItimesClass19.属性3.属性数量 + hcItimesClass19.属性4.属性数量 != 0 && hcItimesClass22 == null)
											{
												GameMessage("CýõÌng hoìa thaòch không ðuÒ 3 viên", 9);
												return;
											}
											if (base.Player_Money < 15000)
											{
												GameMessage("Không ðuÒ 15000 tiêÌn vaÌng", 9);
												return;
											}
											base.Player_Money -= 15000L;
											if (value13.FLD_CJL != 0)
											{
												base.Player_WuXun -= 50 * (hcItimesClass19.Upgrade_Level + 1);
												UpdatePowersAndStatus();
											}
											if (num16 >= num17)
											{
												if (value13.FLD_RESIDE2 == 4)
												{
													hcItimesClass19.Upgrade_Type = 1;
												}
												else
												{
													hcItimesClass19.Upgrade_Type = 2;
												}
												hcItimesClass19.Upgrade_Level++;
												if (hcItimesClass19.Upgrade_Level > 10 && (value13.FLD_RESIDE2 == 0 || value13.FLD_RESIDE2 > 6 || value13.FLD_LEVEL < 120))
												{
													hcItimesClass19.Upgrade_Level = 10;
												}
												if (hcItimesClass19.Upgrade_Level > 15 && value13.FLD_RESIDE2 >= 1 && value13.FLD_RESIDE2 <= 6 && value13.FLD_LEVEL >= 120)
												{
													hcItimesClass19.Upgrade_Level = 15;
												}
												hcItimesClass19.设置阶段属性();
												if (hcItimesClass19.Upgrade_Level >= World.江湖快报强化阶段)
												{
													World.发送强化合成公告(BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), base.UserName, hcItimesClass19.Upgrade_Level, base.Player_Zx);
												}
												if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass19.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0))
												{
													Send_Packet_Delete_Item(hcItimesClass19.index, 1);
													Make_Item_Upgrade(hcItimesClass19.物品全局ID, hcItimesClass19.Item_ID, hcItimesClass19.index, hcItimesClass19.Item_Count, hcItimesClass19.Item_Opt);
												}
												Item_In_Bag[hcItimesClass19.index].LockMove = false;
												if (base.FLD_VIP == 1)
												{
												}
												if (hcItimesClass19.Upgrade_Level >= 0)
												{
													RxjhClass.GhiLogDelItem(BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0), BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), hcItimesClass19.Upgrade_Level - 1 + "->" + hcItimesClass19.Upgrade_Level, this, 1);
													string txt = "[ " + BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass19.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [ (" + num14 + "-" + num15 + ")->" + num16 + "/" + num17 + " - " + (hcItimesClass19.Upgrade_Level - 1) + "->" + hcItimesClass19.Upgrade_Level + " ] | " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC0 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC1 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC2 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC3 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC4 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_觉醒 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_中级附魂 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_进化 + " - " + Item_In_Bag[hcItimesClass19.index].物品绑定 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_DAY1 + "/" + Item_In_Bag[hcItimesClass19.index].FLD_DAY2;
													logo.logcuonghoaitem(txt);
												}
											}
											else
											{
												if (hcItimesClass19.Upgrade_Level >= 0)
												{
													string txt = "[ " + BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass19.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [ (" + num14 + "-" + num15 + ")->" + num16 + "/" + num17 + " - " + hcItimesClass19.Upgrade_Level + "->0 ] - Faild | " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC0 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC1 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC2 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC3 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_MAGIC4 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_觉醒 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_中级附魂 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_FJ_进化 + " - " + Item_In_Bag[hcItimesClass19.index].物品绑定 + " - " + Item_In_Bag[hcItimesClass19.index].FLD_DAY1 + "/" + Item_In_Bag[hcItimesClass19.index].FLD_DAY2;
													logo.logcuonghoaitem(txt);
												}
												if (World.CuonghoaMatItem != 0 || World.checkSpecialWeapons(value13.FLD_PID) == 0)
												{
													if (value13.FLD_RESIDE2 != 1 && value13.FLD_RESIDE2 != 2 && value13.FLD_RESIDE2 != 5 && value13.FLD_RESIDE2 != 6)
													{
														if (value13.FLD_RESIDE2 == 4)
														{
															random = new Random((int)DateTime.Now.Ticks);
															int num18 = Find_Package_Empty(this);
															if (num18 != -1)
															{
																switch (value13.FLD_JOB_LEVEL)
																{
																	case 2:
																		break;
																	case 3:
																		goto IL_4e44;
																	case 4:
																		goto IL_4e61;
																	case 5:
																		goto IL_4e7e;
																	default:
																		goto IL_5019;
																}
																int num19 = random.Next(1, 1);
																byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
																goto IL_5020;
															}
														}
													}
													else
													{
														int value14 = new Random((int)DateTime.Now.Ticks).Next(1, 1);
														int num20 = Find_Package_Empty(this);
														if (num20 != -1)
														{
															if (value13.FLD_LEVEL >= 200)
															{
																byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
															}
															else if (value13.FLD_LEVEL >= 80 && hcItimesClass19.Upgrade_Level <= 5)
															{
																if (hcItimesClass19.属性1.属性数量 != 0 && hcItimesClass19.属性2.属性数量 != 0 && hcItimesClass19.属性3.属性数量 != 0 && hcItimesClass19.属性4.属性数量 != 0)
																{
																	byte[] bytes3 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
																	增加物品2(bytes3, BitConverter.GetBytes(1000001071), num20, BitConverter.GetBytes(value14), new byte[56]);
																}
															}
															else if (value13.FLD_LEVEL >= 60 && value13.FLD_LEVEL < 79)
															{
																byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
															}
															else if (value13.FLD_LEVEL >= 40 && value13.FLD_LEVEL < 59)
															{
																byte[] bytes4 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
															}
														}
													}
													goto IL_5019;
												}
												hcItimesClass19.Upgrade_Level = 0;
												hcItimesClass19.设置阶段属性();
												if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass19.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass19.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass19.物品全局ID, 0))
												{
													Send_Packet_Delete_Item(hcItimesClass19.index, 1);
													_Make_Item_Option(hcItimesClass19.物品全局ID, hcItimesClass19.Item_ID, hcItimesClass19.index, hcItimesClass19.Item_Count, new byte[56]);
												}
												Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
												GameMessage("Thâìt baòi, vuÞ khiì mâìt hêìt thuôòc tiình", 9);
												Update_Money_Weight();
											}
											goto IL_51bc;
										}
										ClassHcItimes.Clear();
										goto end_IL_3f62;
									IL_51bc:
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(hcItimesClass19.index), 0, array, 27, 4);
										Send_Packet_Delete_Item(hcItimesClass20.index, 1);
										if (hcItimesClass21 != null)
										{
											Send_Packet_Delete_Item(hcItimesClass21.index, 1);
										}
										if (hcItimesClass22 != null)
										{
											Send_Packet_Delete_Item(hcItimesClass22.index, 1);
										}
										if (hcItimesClass23 != null)
										{
											Send_Packet_Delete_Item(hcItimesClass23.index, 1);
										}
										ClassHcItimes.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										goto end_IL_3f62;
									IL_4e7e:
										int num21 = random.Next(1, 1);
										byte[] bytes5 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										goto IL_5020;
									IL_5020:
										for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
										{
											if (Item_In_Bag[i].物品全局ID == hcItimesClass19.物品全局ID)
											{
												Item_In_Bag[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
											}
										}
										RxjhClass.GhiLogDelItem(BitConverter.ToInt32(hcItimesClass19.物品全局ID, 0), BitConverter.ToInt32(hcItimesClass19.Item_ID, 0), hcItimesClass19.Upgrade_Level.ToString(), this);
										Send_Packet_Delete_Item(hcItimesClass19.index, 1);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
										goto IL_51bc;
									IL_4e44:
										int num22 = random.Next(1, 1);
										byte[] bytes6 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										goto IL_5020;
									IL_4e61:
										int num23 = random.Next(1, 1);
										byte[] bytes7 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										goto IL_5020;
									IL_5019:
										Update_Money_Weight();
										goto IL_5020;
									end_IL_3f62:;
									}
									catch (Exception ex12)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex12.Message);
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex12.StackTrace);
										return;
									}
									break;
								case 11:
									try
									{
										if (!ClassHcItimes.ContainsKey(1))
										{
											if (Item_In_Bag[num2].物品绑定)
											{
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else
											{
												HcItimesClass hcItimesClass18 = new HcItimesClass();
												hcItimesClass18.index = num2;
												hcItimesClass18.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
												Item_In_Bag[num2].LockMove = true;
												ClassHcItimes.Add(1, hcItimesClass18);
												Send_Packet_Tip_Upgrade_Item(num, 1, 15000, Item_In_Bag[num2]);
											}
										}
									}
									catch (Exception ex11)
									{
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex11.Message);
									}
									return;
								case 12:
									try
									{
										HcItimesClass hcItimesClass16;
										HcItimesClass hcItimesClass17;
										if (!ClassHcItimes.ContainsKey(4))
										{
											hcItimesClass16 = null;
											if (ClassHcItimes.ContainsKey(1))
											{
												hcItimesClass16 = ClassHcItimes[1];
												if (ClassHcItimes.Count == 0)
												{
													Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
												}
												else if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 1)
												{
													if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 800000006 && BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 800000060)
													{
														Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
													}
													else
													{
														hcItimesClass17 = new HcItimesClass();
														hcItimesClass17.index = num2;
														hcItimesClass17.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
														Item_In_Bag[num2].LockMove = true;
														if (!ClassHcItimes.ContainsKey(2))
														{
															ClassHcItimes.Add(2, hcItimesClass17);
															Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
														}
														hcItimesClass16.得到属性();
														if (hcItimesClass16.属性1.属性数量 + hcItimesClass16.属性2.属性数量 == 0)
														{
															goto IL_5652;
														}
														if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 2)
														{
															if (!ClassHcItimes.ContainsKey(3))
															{
																ClassHcItimes.Add(3, hcItimesClass17);
																Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
															}
															goto IL_5652;
														}
													}
												}
											}
											else
											{
												Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
											}
										}
										goto end_IL_5453;
									IL_5652:
										if (hcItimesClass16.属性1.属性数量 + hcItimesClass16.属性2.属性数量 != 0 && hcItimesClass16.属性3.属性数量 + hcItimesClass16.属性4.属性数量 != 0 && BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 3 && !ClassHcItimes.ContainsKey(4))
										{
											ClassHcItimes.Add(4, hcItimesClass17);
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
										double[] rateCuongHoa = getRateCuongHoa(20.0, 90.0);
										if (ClassHcItimes.ContainsKey(5))
										{
											rateCuongHoa = getRateCuongHoa(20.0, 100.0, ClassHcItimes[5]);
										}
										ClassHcItimes[1].得到属性();
										ClassHcItimes[1].强化属性阶段();
										double num13 = 1.0 - ((double)(ClassHcItimes[1].Upgrade_Level * 10) - rateCuongHoa[0]) / (rateCuongHoa[1] - rateCuongHoa[0]);
										if (num13 >= 1.0)
										{
											num13 = 0.99;
										}
									end_IL_5453:;
									}
									catch (Exception ex10)
									{
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex10.Message);
									}
									return;
								case 13:
									try
									{
										if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(5))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass15 = new HcItimesClass();
										hcItimesClass15.index = num2;
										hcItimesClass15.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(5, hcItimesClass15);
										double[] rateCuongHoa = getRateCuongHoa(20.0, 100.0);
										if (ClassHcItimes.ContainsKey(5))
										{
											rateCuongHoa = getRateCuongHoa(20.0, 90.0, ClassHcItimes[5]);
										}
										ClassHcItimes[1].得到属性();
										ClassHcItimes[1].强化属性阶段();
										double num13 = 1.0 - ((double)(ClassHcItimes[1].Upgrade_Level * 10) - rateCuongHoa[0]) / (rateCuongHoa[1] - rateCuongHoa[0]);
										if (num13 >= 1.0)
										{
											num13 = 0.99;
										}
									}
									catch (Exception ex9)
									{
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex9.Message);
										return;
									}
									break;
								case 19:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value12))
										{
											Item_In_Bag[value12.index].LockMove = false;
											ClassHcItimes.Clear();
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											合成系统解锁();
										}
										元宝合成开关 = 0;
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
									}
									catch (Exception ex8)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 强化合成 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex8.Message);
										return;
									}
									break;
								case 20:
									try
									{
										if (ClassHcItimes.Count <= 0)
										{
											return;
										}
										HcItimesClass hcItimesClass12 = null;
										HcItimesClass hcItimesClass13 = null;
										HcItimesClass hcItimesClass14 = null;
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass12 = ClassHcItimes[1];
										}
										if (ClassHcItimes.ContainsKey(2))
										{
											hcItimesClass13 = ClassHcItimes[2];
										}
										if (ClassHcItimes.ContainsKey(3))
										{
											hcItimesClass14 = ClassHcItimes[3];
										}
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass12.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass12.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass13.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass13.物品全局ID, 0) || (hcItimesClass14 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass14.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass14.物品全局ID, 0)))
										{
											return;
										}
										hcItimesClass12.得到属性();
										hcItimesClass12.强化属性阶段();
										hcItimesClass13.强化属性阶段();
										if (Item_In_Bag[hcItimesClass12.index].物品绑定)
										{
											Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass12.index]);
											return;
										}
										if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass12.Item_ID, 0), out ItmeClass value11))
										{
											return;
										}
										if (value11.FLD_RESIDE2 != 1 && value11.FLD_RESIDE2 != 2 && value11.FLD_RESIDE2 != 4 && value11.FLD_RESIDE2 != 5 && value11.FLD_RESIDE2 != 6 && value11.FLD_RESIDE2 != 12)
										{
											Form1.WriteLine(6, "Upgrade_Item WGF BUG11[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
											return;
										}
										if (value11.FLD_RESIDE2 == 12 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000013)
										{
											Form1.WriteLine(6, "Upgrade_Item WGF BUG1[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
											return;
										}
										if (value11.FLD_LEVEL >= 130 && World.Fixbugngoc130 == 1 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000061 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000062)
										{
											Form1.WriteLine(6, "Upgrade_Item BUG ITEM STONE 130 [" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
											GameMessage("Loaòi ngoòc không phuÌ hõòp", 20);
											return;
										}
										if (value11.FLD_LEVEL < 130 && World.Fixbugngoc130 == 1 && (BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) == 800000061 || BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) == 800000062))
										{
											Form1.WriteLine(6, "Upgrade_Item BUG ITEM STONE 130 [" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
											GameMessage("Ngoòc siêu câìp chiÒ duÌng cho trang biò > 130", 20);
											return;
										}
										if (value11.FLD_LEVEL < 80 && World.Fixbugngoc130 == 1 && (BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) == 800000023 || BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) == 800000024))
										{
											Form1.WriteLine(6, "Upgrade_Item BUG ITEM STONE 130 [" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
											GameMessage("Ngoòc cao câìp chiÒ sýÒ duòng cho vuÞ khiì, trang biò > 80 vaÌ < 130", 20);
											return;
										}
										if (value11.FLD_RESIDE2 == 1 || value11.FLD_RESIDE2 == 2 || value11.FLD_RESIDE2 == 5 || value11.FLD_RESIDE2 == 6)
										{
											if (BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000002 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000024 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000062)
											{
												Form1.WriteLine(6, "Upgrade_Item WGF BUG2[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
												return;
											}
											if (value11.FLD_RESIDE2 == 6 && (hcItimesClass12.属性2.属性数量 != 0 || hcItimesClass12.属性3.属性数量 != 0 || hcItimesClass12.属性4.属性数量 != 0))
											{
												return;
											}
										}
										if (value11.FLD_RESIDE2 == 4 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000001 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000023 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000025 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000026 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000061)
										{
											Form1.WriteLine(6, "Upgrade_Item WGF BUG3[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
											return;
										}
										if (hcItimesClass12.Upgrade_Level > 0)
										{
											GameMessage("Vâòt phâÒm ðaÞ cýõÌng hoìa rôÌi!", 9);
											Form1.WriteLine(6, "Upgrade_Item 先强后合 BUG1[" + base.Userid + "]-[" + base.UserName + "]");
											return;
										}
										string[] array14 = World.合成率控制.Split(';');
										double num9 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array14[0]), int.Parse(array14[1]));
										for (int i = 0; i < new Random((int)DateTime.Now.Ticks).Next(5, 15); i++)
										{
											num9 = new Random(World.GetRandomSeed()).Next(int.Parse(array14[0]), int.Parse(array14[1]));
										}
										double num10 = 0.0;
										double num11 = int.Parse(array14[0]);
										num10 = ((hcItimesClass13.阶段类型 == 11 || hcItimesClass13.阶段类型 == 1 || hcItimesClass13.阶段类型 == 10) ? ((double)(hcItimesClass12.属性1.数量 * 20 + hcItimesClass12.属性2.数量 * 20 + hcItimesClass12.属性3.数量 * 20 + hcItimesClass12.属性4.数量 * 20 + hcItimesClass13.阶段数量 * ((hcItimesClass13.阶段类型 != 8) ? 5 : 0) / 7)) : ((hcItimesClass13.阶段类型 != 7) ? ((double)(hcItimesClass12.属性1.数量 * 20 + hcItimesClass12.属性2.数量 * 20 + hcItimesClass12.属性3.数量 * 20 + hcItimesClass12.属性4.数量 * 20 + hcItimesClass13.阶段数量 * ((hcItimesClass13.阶段类型 != 8) ? 5 : 0) / 4)) : ((double)(hcItimesClass12.属性1.数量 * 20 + hcItimesClass12.属性2.数量 * 20 + hcItimesClass12.属性3.数量 * 20 + hcItimesClass12.属性4.数量 * 20 + hcItimesClass13.阶段数量 * ((hcItimesClass13.阶段类型 != 8) ? 5 : 0) / 6))));
										if (hcItimesClass12.属性1.属性数量 != 0 && hcItimesClass12.属性2.属性数量 != 0 && hcItimesClass12.属性3.属性数量 != 0 && hcItimesClass12.属性4.属性数量 != 0)
										{
											return;
										}
										if (base.Player_Money < 15000)
										{
											GameMessage("Không ðuÒ 15000 tiêÌn vaÌng", 9);
											return;
										}
										base.Player_Money -= 15000L;
										if (hcItimesClass14 != null)
										{
											num3 = BitConverter.ToInt32(hcItimesClass14.Item_ID, 0);
											int num12 = World.checkLuckyItem(num3);
											num9 += (double)num12;
											num11 += (double)num12;
											GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
										}
										if (base.Item_Upgrade_Lucky_Add != 0.0)
										{
											num9 += 100.0 * base.Item_Upgrade_Lucky_Add;
											num11 += 100.0 * base.Item_Upgrade_Lucky_Add;
										}
										if (base.Character_Upgrade_Lucky != 0.0)
										{
											num9 += 100.0 * base.Character_Upgrade_Lucky;
											num11 += 100.0 * base.Character_Upgrade_Lucky;
										}
										if (元宝合成开关 == 1)
										{
										}
										if (base.FLD_VIP == 1)
										{
											if (World.Newversion >= 13)
											{
												num9 *= 1.0 + World.VipSynthesisRate;
												num11 *= 1.0 + World.VipSynthesisRate;
											}
											else
											{
												num9 += 100.0 * World.VipSynthesisRate;
												num11 += 100.0 * World.VipSynthesisRate;
											}
										}
										if (World.合成率 != 0.0)
										{
											if (World.Newversion >= 13)
											{
												num9 *= 1.0 + World.合成率;
												num11 *= 1.0 + World.合成率;
											}
											else
											{
												num9 += 100.0 * World.合成率;
												num11 += 100.0 * World.合成率;
											}
										}
										if (公有药品.ContainsKey(1008000312))
										{
											num9 *= 1.05;
											num11 *= 1.05;
										}
										if (num10 > num11)
										{
										}
										if (num9 >= num10)
										{
											if (hcItimesClass12.属性1.属性类型 == 0)
											{
												if (hcItimesClass13.阶段类型 == 8)
												{
													hcItimesClass12.属性1.气功属性类型 = hcItimesClass13.气功属性类型;
												}
												hcItimesClass12.属性1.属性类型 = hcItimesClass13.阶段类型;
												hcItimesClass12.属性1.属性数量 = hcItimesClass13.阶段数量;
												hcItimesClass12.设置属性();
											}
											else if (hcItimesClass12.属性2.属性类型 == 0)
											{
												if (hcItimesClass13.阶段类型 == 8)
												{
													hcItimesClass12.属性2.气功属性类型 = hcItimesClass13.气功属性类型;
												}
												hcItimesClass12.属性2.属性类型 = hcItimesClass13.阶段类型;
												hcItimesClass12.属性2.属性数量 = hcItimesClass13.阶段数量;
												hcItimesClass12.设置属性();
											}
											else if (hcItimesClass12.属性3.属性类型 == 0)
											{
												if (hcItimesClass13.阶段类型 == 8)
												{
													hcItimesClass12.属性3.气功属性类型 = hcItimesClass13.气功属性类型;
												}
												hcItimesClass12.属性3.属性类型 = hcItimesClass13.阶段类型;
												hcItimesClass12.属性3.属性数量 = hcItimesClass13.阶段数量;
												hcItimesClass12.设置属性();
											}
											else if (hcItimesClass12.属性4.属性类型 == 0)
											{
												if (hcItimesClass13.阶段类型 == 8)
												{
													hcItimesClass12.属性4.气功属性类型 = hcItimesClass13.气功属性类型;
												}
												hcItimesClass12.属性4.属性类型 = hcItimesClass13.阶段类型;
												hcItimesClass12.属性4.属性数量 = hcItimesClass13.阶段数量;
												hcItimesClass12.设置属性();
											}
											if (base.FLD_VIP != 1)
											{
											}
										}
										else
										{
											Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(hcItimesClass12.Get_Byte_Item, 0, array, 31, 4);
										Buffer.BlockCopy(hcItimesClass12.Get_Byte_Item, 0, array, 39, 20);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										Send_Packet_Delete_Item(hcItimesClass13.index, 1);
										if (hcItimesClass14 != null)
										{
											Send_Packet_Delete_Item(hcItimesClass14.index, 1);
										}
										if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass12.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass12.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass12.物品全局ID, 0))
										{
											Send_Packet_Delete_Item(hcItimesClass12.index, 1);
											Make_Item_Upgrade(hcItimesClass12.物品全局ID, hcItimesClass12.Item_ID, hcItimesClass12.index, hcItimesClass12.Item_Count, hcItimesClass12.Item_Opt);
										}
										Item_In_Bag[hcItimesClass12.index].LockMove = false;
										ClassHcItimes.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
									}
									catch (Exception ex7)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex7.Message);
										return;
									}
									break;
								case 21:
									try
									{
										if (Item_In_Bag[num2].LockMove || Item_In_Bag[num2].物品绑定 || ClassHcItimes.ContainsKey(1))
										{
											return;
										}
										HcItimesClass hcItimesClass11 = new HcItimesClass();
										hcItimesClass11.index = num2;
										hcItimesClass11.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(1, hcItimesClass11);
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(15000), 0, array, 99, 4);
										if (Item_In_Bag[num2].FLD_持久力 == 0)
										{
											Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										}
										else
										{
											Buffer.BlockCopy(BitConverter.GetBytes(50), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										}
									}
									catch (Exception ex6)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex6.Message);
										return;
									}
									break;
								case 22:
									try
									{
										if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(2) || !ClassHcItimes.ContainsKey(1) || (World.Itme.TryGetValue(BitConverter.ToInt32(ClassHcItimes[1].Item_ID, 0), out value10) && value10.FLD_RESIDE2 != 23 && (Item_In_Bag[num2].FLD_PID == 800000032 || Item_In_Bag[num2].FLD_PID == 800000033 || Item_In_Bag[num2].FLD_PID == 800000036 || Item_In_Bag[num2].FLD_PID == 800000037)))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass10 = new HcItimesClass();
										hcItimesClass10.index = num2;
										hcItimesClass10.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										ClassHcItimes.Add(2, hcItimesClass10);
										Item_In_Bag[num2].LockMove = true;
									}
									catch (Exception ex5)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex5.Message);
										return;
									}
									break;
								case 23:
									try
									{
										if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(3))
										{
											return;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
										HcItimesClass hcItimesClass9 = new HcItimesClass();
										hcItimesClass9.index = num2;
										hcItimesClass9.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										ClassHcItimes.Add(3, hcItimesClass9);
										Item_In_Bag[num2].LockMove = true;
									}
									catch (Exception ex4)
									{
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex4.Message);
										return;
									}
									break;
								case 29:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value9))
										{
											Item_In_Bag[value9.index].LockMove = false;
											ClassHcItimes.Clear();
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											合成系统解锁();
											元宝合成开关 = 0;
										}
									}
									catch (Exception ex3)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
										return;
									}
									break;
								case 30:
									try
									{
										if (ClassHcItimes == null || ClassHcItimes.Count != 4)
										{
											GameMessage("石头放少了,再造合成石最少需要4颗同类型的石头", 9);
											return;
										}
										if (ClassHcItimes[1] == null || ClassHcItimes[2] == null || ClassHcItimes[3] == null || ClassHcItimes[4] == null)
										{
											return;
										}
										if (World.每次再造消耗设置 == 0)
										{
											if (base.Player_Money < World.每次消耗的数量)
											{
												Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
												return;
											}
											base.Player_Money -= World.每次消耗的数量;
											Update_Money_Weight();
										}
										else
										{
											if (base.FLD_RXPIONT < World.每次消耗的数量)
											{
												Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
												GameMessage("元宝不足,再造合成石需要扣除" + World.每次消耗的数量.ToString() + "元宝/次！", 9);
												return;
											}
											Add_Del_Rxpiont(World.每次消耗的数量, 0);
											Save_data_Rxpiont();
										}
										int num4 = new Random((int)DateTime.Now.Ticks).Next(0, 201);
										int num5 = new Random((int)DateTime.Now.Ticks).Next(0, 121);
										string text = "3";
										int num6 = 0;
										int value8 = 0;
										int num7 = BitConverter.ToInt32(ClassHcItimes[1].Item_ID, 0);
										int num8 = 0;
										HcItimesClass hcItimesClass5 = ClassHcItimes[1];
										HcItimesClass hcItimesClass6 = ClassHcItimes[2];
										HcItimesClass hcItimesClass7 = ClassHcItimes[3];
										HcItimesClass hcItimesClass8 = ClassHcItimes[4];
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass5.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass5.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass6.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass6.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass7.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass7.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass8.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass8.物品全局ID, 0))
										{
											return;
										}
										if (base.FLD_VIP == 1)
										{
											num4 += 40;
											num5 += 20;
										}
										switch (num7)
										{
											default:
												return;
											case 800000001:
												{
													num8 = 800000001;
													if (num4 >= 0 && num4 <= 40)
													{
														text = "3";
													}
													else if (num4 > 40 && num4 <= 80)
													{
														text = "5";
													}
													else if (num4 > 80 && num4 <= 120)
													{
														text = "10";
													}
													else if (num4 > 120 && num4 <= 160)
													{
														text = "1";
													}
													else if (num4 > 160 && num4 <= 200)
													{
														text = "1";
													}
													else if (num4 > 200 && num4 <= 240)
													{
														text = "7";
													}
													string text2 = text;
													if (text2 != null)
													{
														switch (text2)
														{
															case "1":
																{
																	string[] array12 = World.再造金刚石攻击.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array12[0]), int.Parse(array12[1]) + 1);
																	break;
																}
															case "5":
																{
																	string[] array13 = World.再造金刚石命中.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array13[0]), int.Parse(array13[1]) + 1);
																	break;
																}
															case "3":
																{
																	string[] array11 = World.再造金刚石生命.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array11[0]), int.Parse(array11[1]) + 1);
																	break;
																}
															default:
																if (!(text2 == "7"))
																{
																	if (text2 == "10")
																	{
																		string[] array9 = World.再造金刚石追伤.Split(';');
																		num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array9[0]), int.Parse(array9[1]) + 1);
																	}
																}
																else
																{
																	string[] array10 = World.再造金刚石武功.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array10[0]), int.Parse(array10[1]) + 1);
																}
																break;
														}
													}
													if (num5 > 0 && num5 <= 40)
													{
														num8 = 800000001;
													}
													else if (num5 > 40 && num5 <= 80)
													{
														num8 = 800000023;
													}
													else if (num5 > 80 && num5 <= 135)
													{
														num8 = 800000061;
													}
													break;
												}
											case 800000002:
												{
													num8 = 800000002;
													if (num4 >= 0 && num4 <= 40)
													{
														text = "3";
													}
													else if (num4 > 40 && num4 <= 80)
													{
														text = "4";
													}
													else if (num4 > 80 && num4 <= 120)
													{
														text = "6";
													}
													else if (num4 > 120 && num4 <= 160)
													{
														text = "2";
													}
													else if (num4 > 160 && num4 <= 200)
													{
														text = "2";
													}
													else if (num4 > 200 && num4 <= 240)
													{
														text = "11";
													}
													string text2 = text;
													if (text2 != null)
													{
														switch (text2)
														{
															case "2":
																{
																	string[] array7 = World.再造寒玉石防御.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array7[0]), int.Parse(array7[1]) + 1);
																	break;
																}
															case "4":
																{
																	string[] array8 = World.再造寒玉石内功.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array8[0]), int.Parse(array8[1]) + 1);
																	break;
																}
															case "3":
																{
																	string[] array6 = World.再造寒玉石生命.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array6[0]), int.Parse(array6[1]) + 1);
																	break;
																}
															default:
																if (!(text2 == "6"))
																{
																	if (text2 == "11")
																	{
																		string[] array4 = World.再造寒玉石武防.Split(';');
																		num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array4[0]), int.Parse(array4[1]) + 1);
																	}
																}
																else
																{
																	string[] array5 = World.再造寒玉石回避.Split(';');
																	num6 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array5[0]), int.Parse(array5[1]) + 1);
																}
																break;
														}
													}
													if (num5 > 0 && num5 <= 40)
													{
														num8 = 800000002;
													}
													else if (num5 > 40 && num5 <= 80)
													{
														num8 = 800000024;
													}
													else if (num5 > 80 && num5 <= 135)
													{
														num8 = 800000062;
													}
													break;
												}
										}
										switch (num6.ToString().Length)
										{
											case 1:
												value8 = int.Parse(text + "0000" + num6);
												break;
											case 2:
												value8 = int.Parse(text + "000" + num6);
												break;
											case 3:
												value8 = int.Parse(text + "00" + num6);
												break;
											case 4:
												value8 = int.Parse(text + "0" + num6);
												break;
											case 5:
												value8 = int.Parse(text + num6);
												break;
										}
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(hcItimesClass5.index), 0, array, 27, 4);
										Buffer.BlockCopy(Item_In_Bag[hcItimesClass5.index].Get_Byte_Item_PID, 0, array, 31, 4);
										Buffer.BlockCopy(Item_In_Bag[hcItimesClass5.index].Get_Byte_Item_Option, 0, array, 39, 56);
										Send_Packet_Delete_Item(hcItimesClass5.index, 1);
										Send_Packet_Delete_Item(hcItimesClass6.index, 1);
										Send_Packet_Delete_Item(hcItimesClass7.index, 1);
										Send_Packet_Delete_Item(hcItimesClass8.index, 1);
										_Make_Item_Option(BitConverter.GetBytes(RxjhClass.GetDbItmeId()), BitConverter.GetBytes(num8), hcItimesClass5.index, BitConverter.GetBytes(1), BitConverter.GetBytes(value8));
										ClassHcItimes.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
									}
									catch (Exception ex2)
									{
										Form1.WriteLine(1, "Upgrade_Item 再造合成石-确认再造 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
										return;
									}
									break;
								case 32:
									try
									{
										if ((Item_In_Bag[num2].FLD_PID != 800000001 && Item_In_Bag[num2].FLD_PID != 800000002) || ClassHcItimes.Count >= 4)
										{
											return;
										}
										if (!ClassHcItimes.ContainsKey(1))
										{
											Item_In_Bag[num2].LockMove = true;
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
											HcItimesClass hcItimesClass = new HcItimesClass();
											hcItimesClass.index = num2;
											hcItimesClass.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											HcItimesClass value = hcItimesClass;
											ClassHcItimes.Add(1, value);
										}
										else if (!ClassHcItimes.ContainsKey(2))
										{
											HcItimesClass value2 = new HcItimesClass();
											if (!ClassHcItimes.TryGetValue(1, out value2))
											{
												return;
											}
											if (Item_In_Bag[num2].FLD_PID != BitConverter.ToInt32(value2.Item_ID, 0))
											{
												Send_Packet_Tip_Upgrade_Item(num, 9, 0, Item_In_Bag[num2]);
												return;
											}
											Item_In_Bag[num2].LockMove = true;
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
											HcItimesClass hcItimesClass2 = new HcItimesClass();
											hcItimesClass2.index = num2;
											hcItimesClass2.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											HcItimesClass value3 = hcItimesClass2;
											ClassHcItimes.Add(2, value3);
										}
										else if (!ClassHcItimes.ContainsKey(3))
										{
											HcItimesClass value4 = new HcItimesClass();
											if (ClassHcItimes.TryGetValue(1, out value4))
											{
												if (Item_In_Bag[num2].FLD_PID != BitConverter.ToInt32(value4.Item_ID, 0))
												{
													Send_Packet_Tip_Upgrade_Item(num, 9, 0, Item_In_Bag[num2]);
													return;
												}
												Item_In_Bag[num2].LockMove = true;
												Buffer.BlockCopy(array3, 0, array, 11, 2);
												Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
												Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
												Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
												HcItimesClass hcItimesClass3 = new HcItimesClass();
												hcItimesClass3.index = num2;
												hcItimesClass3.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
												HcItimesClass value5 = hcItimesClass3;
												ClassHcItimes.Add(3, value5);
											}
										}
										else
										{
											if (ClassHcItimes.ContainsKey(4))
											{
												return;
											}
											HcItimesClass value6 = new HcItimesClass();
											if (!ClassHcItimes.TryGetValue(1, out value6))
											{
												return;
											}
											if (Item_In_Bag[num2].FLD_PID != BitConverter.ToInt32(value6.Item_ID, 0))
											{
												Send_Packet_Tip_Upgrade_Item(num, 9, 0, Item_In_Bag[num2]);
												return;
											}
											Item_In_Bag[num2].LockMove = true;
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
											HcItimesClass hcItimesClass4 = new HcItimesClass();
											hcItimesClass4.index = num2;
											hcItimesClass4.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											HcItimesClass value7 = hcItimesClass4;
											ClassHcItimes.Add(4, value7);
										}
									}
									catch (Exception ex)
									{
										Form1.WriteLine(1, "Upgrade_Item 再造合成石-放合成石 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
										return;
									}
									break;
								case 80:
									break;
							}
						}
						else if (num3 <= 120)
						{
							switch (num3)
							{
								default:
									return;
								case 120:
									try
									{
										Converter.ToString1(data);
										int num27 = BitConverter.ToInt32(data, 19);
										int num28 = BitConverter.ToInt32(data, 27);
										int num29 = BitConverter.ToInt16(data, 15);
										int value23 = BitConverter.ToInt32(data, 31);
										if (!value23.ToString().Contains("9001") || (!num27.ToString().Contains("1690") && !num27.ToString().Contains("2690")))
										{
											Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
											GameMessage("Vâòt phâÒm không hõòp lêò", 9);
											return;
										}
										if (Item_In_Bag[num28].LockMove || Item_In_Bag[num29].LockMove)
										{
											return;
										}
										if (World.门甲组合消耗类型 == 0)
										{
											if (base.Player_Money < World.门甲组合消耗的数量)
											{
												Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
												return;
											}
											base.Player_Money -= World.门甲组合消耗的数量;
											Update_Money_Weight();
										}
										else
										{
											if (base.FLD_RXPIONT < World.门甲组合消耗的数量)
											{
												Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
												GameMessage("您的元宝不足需要扣除元宝" + World.门甲组合消耗的数量 + "个,才可以进行组合");
												return;
											}
											Add_Del_Rxpiont(World.门甲组合消耗的数量, 0);
											Save_data_Rxpiont();
										}
										byte[] dst4 = new byte[4];
										Buffer.BlockCopy(data, 31, dst4, 0, 4);
										byte[] 物品全局ID = Item_In_Bag[num28].物品全局ID;
										byte[] array18 = new byte[56];
										byte[] bytes8 = BitConverter.GetBytes(Item_In_Bag[num29].FLD_MAGIC1);
										byte[] bytes9 = BitConverter.GetBytes(Item_In_Bag[num29].FLD_MAGIC2);
										byte[] bytes10 = BitConverter.GetBytes(Item_In_Bag[num29].FLD_MAGIC3);
										byte[] bytes11 = BitConverter.GetBytes(Item_In_Bag[num29].FLD_MAGIC4);
										if (Item_In_Bag[num29].FLD_MAGIC1 == 0)
										{
											return;
										}
										Buffer.BlockCopy(bytes8, 0, array18, 4, 4);
										Buffer.BlockCopy(bytes9, 0, array18, 8, 4);
										Buffer.BlockCopy(bytes10, 0, array18, 12, 4);
										Buffer.BlockCopy(bytes11, 0, array18, 16, 4);
										Send_Packet_Delete_Item(num28, 1);
										Send_Packet_Delete_Item(num29, 1);
										_Make_Item_Option(物品全局ID, BitConverter.GetBytes(value23), num28, BitConverter.GetBytes(1), array18);
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										合成系统解锁();
										元宝合成开关 = 0;
									}
									catch (Exception ex33)
									{
										Form1.WriteLine(1, "Loi chuyen doi AC G![" + base.Userid + "]-[" + base.UserName + "]" + ex33.Message);
										return;
									}
									break;
								case 89:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value22))
										{
											Item_In_Bag[value22.index].LockMove = false;
											ClassHcItimes.Clear();
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											合成系统解锁();
											元宝合成开关 = 0;
										}
									}
									catch (Exception ex32)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex32.Message);
										return;
									}
									break;
							}
						}
						else
						{
							switch (num3)
							{
								default:
									return;
								case 191:
									try
									{
										if (!ClassHcItimes.ContainsKey(1) && !Item_In_Bag[num2].物品绑定 && Item_In_Bag[num2].FLD_FJ_中级附魂 != 0)
										{
											HcItimesClass hcItimesClass70 = new HcItimesClass();
											hcItimesClass70.index = num2;
											hcItimesClass70.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(1, hcItimesClass70);
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex59)
									{
										Form1.WriteLine(1, "Upgrade_Item 附魂分解 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex59.Message);
									}
									return;
								case 192:
									try
									{
										if (!ClassHcItimes.ContainsKey(2) && BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) == 1000000780)
										{
											HcItimesClass hcItimesClass69 = new HcItimesClass();
											hcItimesClass69.index = num2;
											hcItimesClass69.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(2, hcItimesClass69);
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex58)
									{
										Form1.WriteLine(1, "Upgrade_Item 附魂分解 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex58.Message);
									}
									return;
								case 193:
									try
									{
										if (ClassHcItimes.Count != 0 && !ClassHcItimes.ContainsKey(3))
										{
											HcItimesClass hcItimesClass68 = new HcItimesClass();
											hcItimesClass68.index = num2;
											hcItimesClass68.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(3, hcItimesClass68);
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex57)
									{
										Form1.WriteLine(1, "Upgrade_Item 附魂分解 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex57.Message);
									}
									return;
								case 199:
									try
									{
										ClassHcItimes.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										打开仓库中 = false;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex56)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 附魂分解 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex56.Message);
									}
									return;
								case 200:
									break;
								case 202:
									goto IL_9e3d;
								case 203:
									goto IL_9e5e;
								case 204:
									goto IL_9e7f;
								case 205:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value38))
										{
											Item_In_Bag[value38.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
										}
										元宝合成开关 = 0;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex55)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 首饰加工 205 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex55.Message);
									}
									return;
								case 206:
									try
									{
										if (!ClassHcItimes.ContainsKey(1))
										{
											ItmeClass value37;
											if (Item_In_Bag[num2].物品绑定)
											{
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0), out value37))
											{
												if (value37.FLD_RESIDE2 != 7 && value37.FLD_RESIDE2 != 8 && value37.FLD_RESIDE2 != 10)
												{
													Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
												}
												else if (value37.FLD_LEVEL < 60)
												{
													Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
												}
												else
												{
													HcItimesClass hcItimesClass67 = new HcItimesClass();
													hcItimesClass67.index = num2;
													hcItimesClass67.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
													Item_In_Bag[num2].LockMove = true;
													ClassHcItimes.Add(1, hcItimesClass67);
													Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
												}
											}
											else
											{
												Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
											}
										}
									}
									catch (Exception ex54)
									{
										Form1.WriteLine(1, "206首饰分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex54);
									}
									return;
								case 207:
									goto IL_a155;
								case 208:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value36))
										{
											Item_In_Bag[value36.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
										}
										元宝合成开关 = 0;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex53)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 首饰分解 208 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex53.Message);
									}
									return;
								case 210:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value35))
										{
											Item_In_Bag[value35.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
										}
										元宝合成开关 = 0;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex51)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 披风分解取消 210 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex51.Message);
									}
									return;
								case 211:
									try
									{
										if (!ClassHcItimes.ContainsKey(1))
										{
											if (Item_In_Bag[num2].物品绑定 || Item_In_Bag[num2].FLD_DAY1 != 0 || Item_In_Bag[num2].FLD_DAY2 != 0)
											{
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0), out value10) && value10.FLD_RESIDE2 == 12)
											{
												HcItimesClass hcItimesClass66 = new HcItimesClass();
												hcItimesClass66.index = num2;
												hcItimesClass66.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
												Item_In_Bag[num2].LockMove = true;
												ClassHcItimes.Add(1, hcItimesClass66);
												Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
											}
										}
									}
									catch (Exception ex52)
									{
										Form1.WriteLine(1, "211披风分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex52);
									}
									return;
								case 212:
									goto IL_a7a9;
								case 213:
									goto IL_a8a0;
								case 216:
									try
									{
										if (World.Itme.TryGetValue((int)Item_In_Bag[num2].FLD_PID, out ItmeClass value34) && value34.FLD_RESIDE2 == 12 && !Item_In_Bag[num2].物品绑定 && Item_In_Bag[num2].FLD_DAY1 == 0 && Item_In_Bag[num2].FLD_DAY2 == 0)
										{
											HcItimesClass hcItimesClass53 = new HcItimesClass();
											hcItimesClass53.index = num2;
											hcItimesClass53.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											if (!ClassHcItimes.ContainsKey(1))
											{
												ClassHcItimes.Add(1, hcItimesClass53);
											}
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex40)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 披风组合 214 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex40.Message);
									}
									return;
								case 270:
									goto IL_ab8f;
								case 271:
								case 272:
								case 273:
									goto IL_ac47;
								case 274:
									goto IL_ae9d;
								case 280:
									goto IL_b79f;
								case 281:
								case 282:
								case 283:
								case 284:
									goto IL_b857;
								case 285:
									goto IL_bc22;
								case 291:
									goto IL_c19b;
								case 295:
									goto IL_c3a2;
								case 299:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out value32))
										{
											Item_In_Bag[value32.index].LockMove = false;
											ClassHcItimes.Clear();
										}
										合成系统解锁();
										打开仓库中 = false;
									}
									catch (Exception ex51)
									{
										Form1.WriteLine(1, "Upgrade_Item 299 ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex51.Message);
									}
									return;
								case 300:
									goto IL_c7cc;
								case 301:
									try
									{
										if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0), out value30) && (value30.FLD_RESIDE2 == 1 || value30.FLD_RESIDE2 == 4) && !Item_In_Bag[num2].LockMove)
										{
											if (Item_In_Bag[num2].FLD_FJ_觉醒 == 0)
											{
												Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
											}
											else if (Item_In_Bag[num2].Type_TuLinh != 0)
											{
												GameMessage("Trang biò naÌy không phuÌ hõòp");
												Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
											}
											else if (ClassHcItimes.Count != 0)
											{
												HcItimesClass hcItimesClass65 = new HcItimesClass();
												hcItimesClass65.index = num2;
												hcItimesClass65.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
												Item_In_Bag[num2].LockMove = true;
												if (!ClassHcItimes.ContainsKey(1))
												{
													ClassHcItimes.Add(1, hcItimesClass65);
												}
												Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
											}
										}
									}
									catch (Exception ex50)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "火龙石合成属性 301 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
									}
									return;
								case 302:
									try
									{
										if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0), out value30))
										{
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
											Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 95, 4);
											Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103, 4);
											HcItimesClass hcItimesClass65 = new HcItimesClass();
											hcItimesClass65.index = num2;
											hcItimesClass65.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											打开仓库中 = true;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(3, hcItimesClass65);
										}
									}
									catch (Exception ex50)
									{
										Form1.WriteLine(1, "合成系统 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
									}
									return;
								case 303:
									try
									{
										if (ClassHcItimes.Count != 0 && !ClassHcItimes.ContainsKey(2))
										{
											Buffer.BlockCopy(array3, 0, array, 11, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
											Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
											Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 95, 4);
											Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103, 4);
											HcItimesClass hcItimesClass65 = new HcItimesClass();
											hcItimesClass65.index = num2;
											hcItimesClass65.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(2, hcItimesClass65);
										}
									}
									catch (Exception ex50)
									{
										Form1.WriteLine(1, "合成系统 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
									}
									return;
								case 309:
									goto IL_d27b;
								case 311:
									try
									{
										if (World.Itme.TryGetValue((int)Item_In_Bag[num2].FLD_PID, out value30))
										{
											int num33 = 0;
											num33 = ((value30.FLD_SHIELD != 0) ? ((value30.FLD_ZX != 1) ? (-100) : 900) : ((value30.FLD_ZX != 1) ? 100 : (-900)));
											if (value30.FLD_PID == 100018)
											{
												num33 = 99;
											}
											else if (value30.FLD_PID == 100117)
											{
												num33 = -99;
											}
											if (value30.FLD_PID == 100020)
											{
												num33 = 98;
											}
											else if (value30.FLD_PID == 100118)
											{
												num33 = -98;
											}
											if (value30.FLD_PID == 100021)
											{
												num33 = 98;
											}
											else if (value30.FLD_PID == 100119)
											{
												num33 = -98;
											}
											if (value30.FLD_PID == 100022)
											{
												num33 = 98;
											}
											else if (value30.FLD_PID == 100120)
											{
												num33 = -98;
											}
											if (value30.FLD_PID == 100026)
											{
												num33 = 98;
											}
											else if (value30.FLD_PID == 100124)
											{
												num33 = -98;
											}
											if (value30.FLD_PID == 100028)
											{
												num33 = 97;
											}
											else if (value30.FLD_PID == 100125)
											{
												num33 = -97;
											}
											if (value30.FLD_PID == 100029)
											{
												num33 = 97;
											}
											else if (value30.FLD_PID == 100126)
											{
												num33 = -97;
											}
											if (value30.FLD_PID == 700911)
											{
												num33 = 10;
											}
											else if (value30.FLD_PID == 700921)
											{
												num33 = -10;
											}
											if (World.Itme.TryGetValue(value30.FLD_PID + num33, out value33))
											{
												if (ClassHcItimes.Count != 0)
												{
													ClassHcItimes.Clear();
												}
												HcItimesClass hcItimesClass65 = new HcItimesClass();
												hcItimesClass65.index = num2;
												hcItimesClass65.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
												if (!ClassHcItimes.ContainsKey(1))
												{
													ClassHcItimes.Add(1, hcItimesClass65);
												}
												Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2], value33.FLD_PID);
											}
										}
									}
									catch (Exception ex50)
									{
										Form1.WriteLine(1, "火龙石合成属性 301 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
									}
									return;
								case 310:
									goto IL_d6f4;
								case 319:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out value32))
										{
											Item_In_Bag[value32.index].LockMove = false;
										}
										if (ClassHcItimes.TryGetValue(2, out value32))
										{
											Item_In_Bag[value32.index].LockMove = false;
										}
										元宝合成开关 = 0;
										打开仓库中 = false;
										ClassHcItimes.Clear();
										Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
										合成系统解锁();
									}
									catch (Exception ex50)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
									}
									return;
								case 370:
									goto IL_dc2a;
								case 371:
									try
									{
										if (World.Itme.TryGetValue((int)Item_In_Bag[num2].FLD_PID, out value30) && Item_In_Bag[num2].FLD_PID >= 1000001170 && Item_In_Bag[num2].FLD_PID <= 1000001175)
										{
											if (ClassHcItimes.Count != 0)
											{
												ClassHcItimes.Clear();
											}
											HcItimesClass hcItimesClass65 = new HcItimesClass();
											hcItimesClass65.index = num2;
											hcItimesClass65.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											if (!ClassHcItimes.ContainsKey(1))
											{
												ClassHcItimes.Add(1, hcItimesClass65);
											}
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2], (int)Item_In_Bag[num2].FLD_PID + 6);
										}
									}
									catch (Exception ex50)
									{
										Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
									}
									return;
								case 373:
									goto IL_dede;
								case 1400:
									goto IL_df73;
								case 140:
									goto IL_ee1a;
								case 141:
									try
									{
										int num32 = data[15];
										if (Item_In_Bag[num32].FLD_PID == 1008000041)
										{
											long fLD_PID = Item_In_Bag[num2].FLD_PID;
											if (!World.Itme.TryGetValue((int)Item_In_Bag[num2].FLD_PID, out ItmeClass _))
											{
												GameMessage("Không thêÒ xaìc ðiònh vâòt phâÒm", 9);
											}
											else if (World.checkSpecialWeapons(Item_In_Bag[num2].FLD_PID) == 0)
											{
												GameMessage("ChiÒ coì thêÒ sýÒ duòng loaòi vuÞ khiì ðãòc biêòt", 9);
												Send_Packet_Tip_Upgrade_Item(num, 21, 0, Item_In_Bag[num2]);
											}
											else if (Item_In_Bag[num2].FLD_MAGIC1 != 0 && Item_In_Bag[num2].FLD_MAGIC2 != 0 && Item_In_Bag[num2].FLD_MAGIC3 != 0 && Item_In_Bag[num2].FLD_MAGIC4 != 0)
											{
												HcItimesClass hcItimesClass65 = new HcItimesClass();
												hcItimesClass65.index = num2;
												hcItimesClass65.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
												Item_In_Bag[num2].LockMove = true;
												if (!ClassHcItimes.ContainsKey(1))
												{
													ClassHcItimes.Add(1, hcItimesClass65);
												}
												Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
											}
											else
											{
												Send_Packet_Tip_Upgrade_Item(num, 14, 0, Item_In_Bag[num2]);
											}
										}
										else if (Item_In_Bag[num32].FLD_PID == 1008001078)
										{
											long fLD_PID2 = Item_In_Bag[num2].FLD_PID;
											if (fLD_PID2 < 900000 || fLD_PID2 > 36900000 || (fLD_PID2 > 1000000 && fLD_PID2 < 16900000))
											{
												Send_Packet_Tip_Upgrade_Item(num, 21, 0, Item_In_Bag[num2]);
											}
											if (Item_In_Bag[num2].FLD_MAGIC1 != 0 && Item_In_Bag[num2].FLD_MAGIC2 != 0 && Item_In_Bag[num2].FLD_MAGIC3 != 0 && Item_In_Bag[num2].FLD_MAGIC4 != 0)
											{
												HcItimesClass hcItimesClass65 = new HcItimesClass();
												hcItimesClass65.index = num2;
												hcItimesClass65.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
												Item_In_Bag[num2].LockMove = true;
												if (!ClassHcItimes.ContainsKey(1))
												{
													ClassHcItimes.Add(1, hcItimesClass65);
												}
												Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
											}
											else
											{
												Send_Packet_Tip_Upgrade_Item(num, 14, 0, Item_In_Bag[num2]);
											}
										}
									}
									catch (Exception ex49)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "火龙石合成属性 141 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex49.Message);
									}
									return;
								case 142:
									try
									{
										hcItimesClass63 = null;
										int num32 = data[15];
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass63 = ClassHcItimes[1];
										}
										if (hcItimesClass63 != null)
										{
											if (Item_In_Bag[num32].FLD_PID == 1008000041)
											{
												if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass63.Item_ID, 0), out value30))
												{
													goto IL_10353;
												}
												if (Item_In_Bag[num2].FLD_PID == 800000001)
												{
													if (value30.FLD_LEVEL <= 125)
													{
														goto IL_10353;
													}
												}
												else if (Item_In_Bag[num2].FLD_PID == 800000023)
												{
													if (value30.FLD_LEVEL >= 80 && value30.FLD_LEVEL <= 125)
													{
														goto IL_10353;
													}
												}
												else if (Item_In_Bag[num2].FLD_PID != 800000061 || (value30.FLD_LEVEL <= 160 && value30.FLD_LEVEL >= 130))
												{
													goto IL_10353;
												}
											}
											else if (Item_In_Bag[num32].FLD_PID != 1008001078 || Item_In_Bag[num2].FLD_PID == 800000013)
											{
												goto IL_10353;
											}
										}
										goto end_IL_1018c;
									IL_10353:
										HcItimesClass hcItimesClass64 = new HcItimesClass();
										hcItimesClass64.index = num2;
										hcItimesClass64.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										if (!ClassHcItimes.ContainsKey(2))
										{
											ClassHcItimes.Add(2, hcItimesClass64);
										}
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									end_IL_1018c:;
									}
									catch (Exception ex48)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "火龙石合成属性 141 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex48.Message);
									}
									return;
								case 143:
									goto IL_10436;
								case 148:
								case 149:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value29))
										{
											Item_In_Bag[value29.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
										}
										打开仓库中 = false;
										元宝合成开关 = 0;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex47)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "火龙石149 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex47.Message);
									}
									return;
								case 150:
									goto IL_10689;
								case 151:
									goto IL_10d68;
								case 152:
									goto IL_10ec7;
								case 153:
									goto IL_1106f;
								case 159:
									goto IL_111e0;
								case 160:
									goto IL_11287;
								case 161:
									goto IL_11a81;
								case 162:
									goto IL_11be8;
								case 163:
									goto IL_11d59;
								case 169:
									goto IL_11eca;
								case 170:
									try
									{
										if (ClassHcItimes.Count > 0)
										{
											HcItimesClass hcItimesClass59 = null;
											HcItimesClass hcItimesClass60 = null;
											HcItimesClass hcItimesClass61 = null;
											HcItimesClass hcItimesClass62 = null;
											if (ClassHcItimes.ContainsKey(1))
											{
												hcItimesClass59 = ClassHcItimes[1];
												if (ClassHcItimes.ContainsKey(2))
												{
													hcItimesClass60 = ClassHcItimes[2];
													if (ClassHcItimes.ContainsKey(3))
													{
														hcItimesClass61 = ClassHcItimes[3];
													}
													if (ClassHcItimes.ContainsKey(4))
													{
														hcItimesClass62 = ClassHcItimes[4];
														ItmeClass value28 = default(ItmeClass);
														if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass59.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass59.物品全局ID, 0) && BitConverter.ToInt64(Item_In_Bag[hcItimesClass60.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass60.物品全局ID, 0) && BitConverter.ToInt64(Item_In_Bag[hcItimesClass62.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass62.物品全局ID, 0) && (hcItimesClass61 == null || BitConverter.ToInt64(Item_In_Bag[hcItimesClass61.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass61.物品全局ID, 0)) && World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass59.Item_ID, 0), out value28))
														{
															if (value28.FLD_RESIDE2 != 1 && value28.FLD_RESIDE2 != 4)
															{
																Form1.WriteLine(6, "Upgrade_Item 中级附魂 BUG1[" + BitConverter.ToInt32(hcItimesClass59.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass60.Item_ID, 0) + "]");
															}
															else if (value28.FLD_LEVEL >= 60)
															{
																if (Item_In_Bag[hcItimesClass59.index].物品绑定)
																{
																	Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass59.index]);
																}
																else
																{
																	hcItimesClass60.强化属性阶段();
																	double num30 = new Random((int)DateTime.Now.Ticks).Next(0, 100);
																	double num31 = (hcItimesClass59.FLD_FJ_觉醒 * 20 >= 90) ? 90.0 : ((double)hcItimesClass59.FLD_FJ_觉醒);
																	if (hcItimesClass61 != null)
																	{
																		num3 = BitConverter.ToInt32(hcItimesClass61.Item_ID, 0);
																		int num12 = World.checkLuckyItem(num3);
																		num30 += (double)num12;
																		GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
																	}
																	if (base.Item_Upgrade_Lucky_Add != 0.0)
																	{
																		num30 += 100.0 * base.Item_Upgrade_Lucky_Add;
																	}
																	if (base.Character_Upgrade_Lucky != 0.0)
																	{
																		num30 += 100.0 * base.Character_Upgrade_Lucky;
																	}
																	if (元宝合成开关 == 1)
																	{
																		num30 += 5.0;
																	}
																	if (base.FLD_VIP == 1)
																	{
																		num30 = ((World.Newversion < 13) ? (num30 + 100.0 * World.VipSynthesisRate) : (num30 * (1.0 + World.VipSynthesisRate)));
																	}
																	if (World.合成率 != 0.0)
																	{
																		num30 = ((World.Newversion < 13) ? (num30 + 100.0 * World.合成率) : (num30 * (1.0 + World.合成率)));
																	}
																	if (公有药品.ContainsKey(1008000312))
																	{
																		num30 *= 1.05;
																	}
																	if (num30 >= num31)
																	{
																		hcItimesClass59.FLD_FJ_中级附魂 = hcItimesClass60.阶段数量;
																		Send_Packet_Delete_Item(hcItimesClass59.index, 1);
																		_Make_Item_Option(hcItimesClass59.物品全局ID, hcItimesClass59.Item_ID, hcItimesClass59.index, hcItimesClass59.Item_Count, hcItimesClass59.Item_Opt);
																		if (base.FLD_VIP == 1)
																		{
																		}
																		if (hcItimesClass60 != null)
																		{
																			Send_Packet_Delete_Item(hcItimesClass60.index, 1);
																		}
																		if (hcItimesClass62 != null)
																		{
																			Send_Packet_Delete_Item(hcItimesClass62.index, 1);
																		}
																		if (hcItimesClass61 != null)
																		{
																			Send_Packet_Delete_Item(hcItimesClass61.index, 1);
																		}
																		Item_In_Bag[hcItimesClass59.index].LockMove = false;
																		ClassHcItimes.Clear();
																		合成系统解锁();
																		元宝合成开关 = 0;
																		Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
																	}
																	else
																	{
																		if (hcItimesClass60 != null)
																		{
																			Send_Packet_Delete_Item(hcItimesClass60.index, 1);
																		}
																		if (hcItimesClass62 != null)
																		{
																			Send_Packet_Delete_Item(hcItimesClass62.index, 1);
																		}
																		if (hcItimesClass61 != null)
																		{
																			Send_Packet_Delete_Item(hcItimesClass61.index, 1);
																		}
																		Item_In_Bag[hcItimesClass59.index].LockMove = false;
																		ClassHcItimes.Clear();
																		合成系统解锁();
																		元宝合成开关 = 0;
																		Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									catch (Exception ex46)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 中级附魂 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex46.Message);
									}
									return;
								case 171:
									try
									{
										ItmeClass value27;
										if (ClassHcItimes.Count != 0 && ClassHcItimes.ContainsKey(4) && !ClassHcItimes.ContainsKey(1) && !Item_In_Bag[num2].物品绑定 && World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0), out value27) && (value27.FLD_RESIDE2 == 1 || value27.FLD_RESIDE2 == 4) && value27.FLD_LEVEL >= 60)
										{
											HcItimesClass hcItimesClass58 = new HcItimesClass();
											hcItimesClass58.index = num2;
											hcItimesClass58.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(1, hcItimesClass58);
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex45)
									{
										Form1.WriteLine(1, "Upgrade_Item 中级附魂 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex45.Message);
									}
									return;
								case 172:
									try
									{
										HcItimesClass hcItimesClass56;
										if (ClassHcItimes.Count != 0 && !ClassHcItimes.ContainsKey(2) && ClassHcItimes.Count != 0)
										{
											hcItimesClass56 = new HcItimesClass();
											hcItimesClass56.index = num2;
											hcItimesClass56.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											hcItimesClass56.强化属性阶段();
											HcItimesClass hcItimesClass57 = null;
											if (ClassHcItimes.ContainsKey(1))
											{
												hcItimesClass57 = ClassHcItimes[1];
												if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass57.Item_ID, 0), out ItmeClass value26))
												{
													goto IL_12a34;
												}
												if (value26.FLD_RESIDE2 == 4)
												{
													if (hcItimesClass56.阶段数量 >= 1 && hcItimesClass56.阶段数量 <= 36)
													{
														goto IL_12a34;
													}
													Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
													ClassHcItimes.Remove(1);
												}
												else
												{
													if (value26.FLD_RESIDE2 != 1 || (hcItimesClass56.阶段数量 >= 36 && hcItimesClass56.阶段数量 <= 51) || (hcItimesClass56.阶段数量 >= 1 && hcItimesClass56.阶段数量 <= 22))
													{
														goto IL_12a34;
													}
													Send_Packet_Tip_Upgrade_Item(num, 3, 0, Item_In_Bag[num2]);
													ClassHcItimes.Remove(1);
												}
											}
										}
										goto end_IL_12871;
									IL_12a34:
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(2, hcItimesClass56);
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									end_IL_12871:;
									}
									catch (Exception ex44)
									{
										Form1.WriteLine(1, "Upgrade_Item 中级附魂 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex44.Message);
									}
									return;
								case 173:
									try
									{
										if (ClassHcItimes.Count != 0 && !ClassHcItimes.ContainsKey(3))
										{
											HcItimesClass hcItimesClass55 = new HcItimesClass();
											hcItimesClass55.index = num2;
											hcItimesClass55.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(3, hcItimesClass55);
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex43)
									{
										Form1.WriteLine(1, "Upgrade_Item 中级附魂 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex43.Message);
									}
									return;
								case 174:
									try
									{
										if (!ClassHcItimes.ContainsKey(4) && BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) == 1000000330)
										{
											HcItimesClass hcItimesClass54 = new HcItimesClass();
											hcItimesClass54.index = num2;
											hcItimesClass54.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											ClassHcItimes.Add(4, hcItimesClass54);
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex42)
									{
										Form1.WriteLine(1, "Upgrade_Item 中级附魂 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex42.Message);
									}
									return;
								case 179:
									try
									{
										ClassHcItimes.Clear();
										Buffer.BlockCopy(array3, 0, array, 11, 2);
										合成系统解锁();
										元宝合成开关 = 0;
										打开仓库中 = false;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex41)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex41.Message);
									}
									return;
								case 190:
									goto IL_12d94;
								case 201:
									goto IL_13275;
								case 214:
									try
									{
										if (!Item_In_Bag[num2].物品绑定 && Item_In_Bag[num2].FLD_DAY1 == 0 && Item_In_Bag[num2].FLD_DAY2 == 0)
										{
											HcItimesClass hcItimesClass53 = new HcItimesClass();
											hcItimesClass53.index = num2;
											hcItimesClass53.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											if (!ClassHcItimes.ContainsKey(1))
											{
												ClassHcItimes.Add(1, hcItimesClass53);
											}
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex40)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 披风组合 214 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex40.Message);
									}
									return;
								case 215:
									try
									{
										if (!Item_In_Bag[num2].物品绑定 && Item_In_Bag[num2].FLD_DAY1 == 0 && Item_In_Bag[num2].FLD_DAY2 == 0)
										{
											HcItimesClass hcItimesClass52 = new HcItimesClass();
											hcItimesClass52.index = num2;
											hcItimesClass52.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
											Item_In_Bag[num2].LockMove = true;
											if (!ClassHcItimes.ContainsKey(3) && ClassHcItimes.ContainsKey(1))
											{
												ClassHcItimes[1].得到属性();
												ClassHcItimes[1].强化属性阶段();
												hcItimesClass52.得到属性();
												hcItimesClass52.强化属性阶段();
												ClassHcItimes.Add(3, hcItimesClass52);
											}
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex39)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 披风组合 215 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex39.Message);
									}
									return;
								case 217:
									goto IL_13e23;
								case 218:
									goto IL_14cd9;
								case 219:
									try
									{
										HcItimesClass hcItimesClass49;
										HcItimesClass hcItimesClass50;
										HcItimesClass hcItimesClass51;
										if (ClassHcItimes.Count >= 3)
										{
											hcItimesClass49 = null;
											hcItimesClass50 = null;
											hcItimesClass51 = null;
											if (ClassHcItimes.ContainsKey(1))
											{
												hcItimesClass50 = ClassHcItimes[3];
											}
											if (ClassHcItimes.ContainsKey(2))
											{
												hcItimesClass51 = ClassHcItimes[2];
											}
											if (ClassHcItimes.ContainsKey(3))
											{
												hcItimesClass49 = ClassHcItimes[1];
											}
											if (Item_In_Bag[hcItimesClass49.index].FLD_DAY1 == 0 && Item_In_Bag[hcItimesClass49.index].FLD_DAY2 == 0 && Item_In_Bag[hcItimesClass50.index].FLD_DAY1 == 0 && Item_In_Bag[hcItimesClass50.index].FLD_DAY2 == 0)
											{
												hcItimesClass50.得到属性();
												hcItimesClass50.强化属性阶段();
												hcItimesClass49.得到属性();
												hcItimesClass49.强化属性阶段();
												if (hcItimesClass49.Upgrade_Level >= hcItimesClass50.Upgrade_Level)
												{
													GameMessage("Trang biò chuyêÒn ðôÒi phaÒi coì cýõÌng hoìa cao hõn trang biò câÌn chuyêÒn ðôÒi (traìi phaÒi lõìn hõn phaÒi)", 7);
												}
												else if (World.披风组合消耗类型 == 0)
												{
													if (base.Player_Money >= World.组合消耗的数量)
													{
														base.Player_Money -= World.组合消耗的数量;
														Update_Money_Weight();
														goto IL_152ef;
													}
													GameMessage("您的金币不足需要扣除金币" + World.组合消耗的数量 + "个,才可以进行分解");
													Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
												}
												else
												{
													if (base.FLD_RXPIONT >= World.组合消耗的数量)
													{
														Add_Del_Rxpiont(World.组合消耗的数量, 0);
														Save_data_Rxpiont();
														goto IL_152ef;
													}
													Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
													GameMessage("您的元宝不足需要扣除元宝" + World.组合消耗的数量 + "个,才可以进行分解");
												}
											}
										}
										goto end_IL_15074;
									IL_152ef:
										int index = hcItimesClass49.index;
										int 物品ID = BitConverter.ToInt32(Item_In_Bag[index].Get_Byte_Item_PID, 0);
										int fLD_MAGIC = Item_In_Bag[hcItimesClass50.index].FLD_MAGIC0;
										int fLD_MAGIC2 = Item_In_Bag[hcItimesClass49.index].FLD_MAGIC1;
										int fLD_MAGIC3 = Item_In_Bag[hcItimesClass49.index].FLD_MAGIC2;
										int fLD_MAGIC4 = Item_In_Bag[hcItimesClass49.index].FLD_MAGIC3;
										int fLD_MAGIC5 = Item_In_Bag[hcItimesClass49.index].FLD_MAGIC4;
										Send_Packet_Delete_Item(hcItimesClass49.index, 1);
										Send_Packet_Delete_Item(hcItimesClass50.index, 1);
										Send_Packet_Delete_Item(hcItimesClass51.index, 1);
										增加物品带属性(物品ID, index, 1, fLD_MAGIC, fLD_MAGIC2, fLD_MAGIC3, fLD_MAGIC4, fLD_MAGIC5, 0, 0, 0, 0);
										ClassHcItimes.Clear();
										合成系统解锁();
										元宝合成开关 = 0;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[hcItimesClass49.index]);
									end_IL_15074:;
									}
									catch (Exception ex38)
									{
										Form1.WriteLine(1, "组合错误![" + base.Userid + "]-[" + base.UserName + "]" + ex38.Message);
									}
									return;
								case 220:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value25))
										{
											Item_In_Bag[value25.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
										}
										元宝合成开关 = 0;
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									}
									catch (Exception ex37)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 披风分解取消 210 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex37.Message);
									}
									return;
								case 221:
									try
									{
										if (!Item_In_Bag[num2].Get_Name().Contains("玄武龙啸") && !Item_In_Bag[num2].Get_Name().Contains("鳌天斩") && !Item_In_Bag[num2].Get_Name().Contains("泣血殇"))
										{
											if (!Item_In_Bag[num2].Get_Name().Contains("天元") && !Item_In_Bag[num2].Get_Name().Contains("邪元") && !Item_In_Bag[num2].Get_Name().Contains("金龙") && !Item_In_Bag[num2].Get_Name().Contains("青龙缠天") && !Item_In_Bag[num2].Get_Name().Contains("浪天厥") && !Item_In_Bag[num2].Get_Name().Contains("天罡沁血") && !Item_In_Bag[num2].Get_Name().Contains("麒麟踏宇") && !Item_In_Bag[num2].Get_Name().Contains("擎天圣戟") && !Item_In_Bag[num2].Get_Name().Contains("燃血亡戬") && !Item_In_Bag[num2].Get_Name().Contains("朱雀覆火") && !Item_In_Bag[num2].Get_Name().Contains("丹霞碧天") && !Item_In_Bag[num2].Get_Name().Contains("烈血残阳") && !Item_In_Bag[num2].Get_Name().Contains("虎扇吞日") && !Item_In_Bag[num2].Get_Name().Contains("天罗抚雨") && !Item_In_Bag[num2].Get_Name().Contains("燎风落血") && !Item_In_Bag[num2].Get_Name().Contains("天兆鬼牙") && !Item_In_Bag[num2].Get_Name().Contains("天灵子") && !Item_In_Bag[num2].Get_Name().Contains("血信子") && !Item_In_Bag[num2].Get_Name().Contains("凤凰栾鸣") && !Item_In_Bag[num2].Get_Name().Contains("九霄环佩琴") && !Item_In_Bag[num2].Get_Name().Contains("九绝七玄琴"))
											{
												GameMessage("只能放入新武勋装备和130的装备", 9);
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else if (Item_In_Bag[num2].Get_Name().Contains("真-"))
											{
												GameMessage("此装备已经无法升级", 9);
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else if (Item_In_Bag[num2].Get_Name().Contains("未完成"))
											{
												GameMessage("此装备已经无法升级", 9);
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else if (Item_In_Bag[num2].Get_Name().Contains("伪造的"))
											{
												GameMessage("此装备已经无法升级", 9);
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else
											{
												HcItimesClass hcItimesClass48 = new HcItimesClass();
												if (Item_In_Bag[num2].FLD_强化数量 >= 7)
												{
													hcItimesClass48.index = num2;
													hcItimesClass48.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
													Item_In_Bag[num2].LockMove = true;
													if (!ClassHcItimes.ContainsKey(2))
													{
														ClassHcItimes.Add(2, hcItimesClass48);
													}
													Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
												}
												else
												{
													GameMessage("必须放入强化大于或者等于[7]的装备", 9);
													Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
												}
											}
										}
										else
										{
											GameMessage("此系统只能装备升级", 9);
											GameMessage("可以升级金龙和130不带真字的装备", 9);
											Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
										}
									}
									catch (Exception ex36)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 装备升级放物品 221 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex36.Message);
									}
									return;
								case 222:
									try
									{
										HcItimesClass hcItimesClass47;
										if (!Item_In_Bag[num2].物品绑定)
										{
											if (Item_In_Bag[num2].FLD_PID == 1000000854 && Item_In_Bag[num2].FLD_PID == 1000000853)
											{
												GameMessage("请放入[金刚水玉]或者[蜘蛛金丝]进行装备升级", 9);
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else if (ClassHcItimes.Count > 0)
											{
												HcItimesClass hcItimesClass46 = null;
												hcItimesClass47 = new HcItimesClass();
												if (ClassHcItimes.ContainsKey(2))
												{
													hcItimesClass46 = ClassHcItimes[2];
												}
												if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass46.Item_ID, 0), out ItmeClass value24))
												{
													goto IL_15ce3;
												}
												if (value24.FLD_RESIDE2 != 1 && value24.FLD_RESIDE2 != 2 && value24.FLD_RESIDE2 != 5 && value24.FLD_RESIDE2 != 6)
												{
													if (value24.FLD_RESIDE2 == 4)
													{
														if (Item_In_Bag[num2].FLD_PID == 1000000853)
														{
															goto IL_15ce3;
														}
														GameMessage("请放入金刚水玉升级武器", 9);
														Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
													}
													else
													{
														GameMessage("此系统只适合130武器装备和130武勋装备升级", 9);
														Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
													}
												}
												else
												{
													if (Item_In_Bag[num2].FLD_PID == 1000000854)
													{
														goto IL_15ce3;
													}
													GameMessage("请放入蜘蛛金丝装备升级", 9);
													Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
												}
											}
										}
										goto end_IL_15aac;
									IL_15ce3:
										hcItimesClass47.index = num2;
										hcItimesClass47.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										if (!ClassHcItimes.ContainsKey(1))
										{
											ClassHcItimes.Add(1, hcItimesClass47);
										}
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									end_IL_15aac:;
									}
									catch (Exception ex35)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 披风组合 214 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex35.Message);
									}
									return;
								case 223:
									try
									{
										if (!Item_In_Bag[num2].物品绑定)
										{
											if (Item_In_Bag[num2].FLD_PID != 800000029 && Item_In_Bag[num2].FLD_PID != 800000005 && Item_In_Bag[num2].FLD_PID != 800000004 && Item_In_Bag[num2].FLD_PID != 800000003)
											{
												GameMessage("Vui loÌng ðãòt ðuìng loaòi buÌa may mãìn", 9);
												Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
											}
											else if (ClassHcItimes.Count > 0)
											{
												if (!ClassHcItimes.ContainsKey(1))
												{
													GameMessage("Vui loÌng ðãòt vâòt phâÒm vaÌo", 9);
													Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
												}
												else
												{
													HcItimesClass hcItimesClass44 = null;
													HcItimesClass hcItimesClass45 = new HcItimesClass();
													if (ClassHcItimes.ContainsKey(2))
													{
														hcItimesClass44 = ClassHcItimes[2];
													}
													if (Item_In_Bag[hcItimesClass44.index].FLD_强化数量 < 7)
													{
														Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
													}
													else
													{
														hcItimesClass45.index = num2;
														hcItimesClass45.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
														Item_In_Bag[num2].LockMove = true;
														if (!ClassHcItimes.ContainsKey(3))
														{
															ClassHcItimes.Add(3, hcItimesClass45);
														}
														Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
													}
												}
											}
										}
									}
									catch (Exception ex34)
									{
										元宝合成开关 = 0;
										Form1.WriteLine(1, "Upgrade_Item 披风组合 214 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex34.Message);
									}
									return;
								case 224:
									goto IL_16037;
							}
							int num34 = 0;
							try
							{
								HcItimesClass hcItimesClass71 = null;
								if (ClassHcItimes.ContainsKey(1))
								{
									hcItimesClass71 = ClassHcItimes[1];
									hcItimesClass71.得到属性();
									hcItimesClass71.强化属性阶段();
									num34 = 1;
									HcItimesClass value39 = null;
									HcItimesClass value40 = null;
									HcItimesClass hcItimesClass72 = null;
									if (ClassHcItimes.ContainsKey(4))
									{
										hcItimesClass72 = ClassHcItimes[4];
									}
									num34 = 2;
									if (ClassHcItimes.TryGetValue(3, out value40))
									{
										if (BitConverter.ToInt32(value40.Item_Count, 0) < 1)
										{
											Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
										}
										else
										{
											num34 = 3;
											if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass71.Item_ID, 0), out ItmeClass value41))
											{
												if (value41.FLD_RESIDE2 == 7 || value41.FLD_RESIDE2 == 8 || value41.FLD_RESIDE2 == 10)
												{
													if (value41.FLD_LEVEL >= 100)
													{
														if (!ClassHcItimes.TryGetValue(2, out value39))
														{
															Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
															return;
														}
														if (BitConverter.ToInt32(value39.Item_Count, 0) < 2)
														{
															Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
															return;
														}
													}
													else if (value41.FLD_LEVEL >= 80)
													{
														if (!ClassHcItimes.TryGetValue(2, out value39))
														{
															Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
															return;
														}
														if (BitConverter.ToInt32(value39.Item_Count, 0) < 1)
														{
															Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
															return;
														}
													}
													num34 = 4;
													if (Item_In_Bag[hcItimesClass71.index].物品绑定)
													{
														Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass71.index]);
													}
													else
													{
														num34 = 5;
														double num35 = new Random((int)DateTime.Now.Ticks).Next(0, 100);
														if (World.AlphaTest == 1)
														{
															num35 = 100.0;
														}
														double num36 = hcItimesClass71.Upgrade_Level * 10;
														if (hcItimesClass71.Upgrade_Level >= 10)
														{
															ClassHcItimes.Clear();
															Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
														}
														else
														{
															num34 = 6;
															if (元宝合成开关 == 1)
															{
																num35 += 5.0;
															}
															if (公有药品.ContainsKey(1008000312))
															{
																num35 *= 1.05;
															}
															if (hcItimesClass72 != null && BitConverter.ToInt32(hcItimesClass72.Item_ID, 0) == 1000000619)
															{
																num35 += 100.0;
															}
															if (num35 >= num36)
															{
																if (value41.FLD_RESIDE2 == 7)
																{
																	hcItimesClass71.Upgrade_Type = 2;
																}
																else if (value41.FLD_RESIDE2 == 8)
																{
																	hcItimesClass71.Upgrade_Type = 3;
																}
																else if (value41.FLD_RESIDE2 == 10)
																{
																	hcItimesClass71.Upgrade_Type = 1;
																}
																if (hcItimesClass72 == null)
																{
																	hcItimesClass71.Upgrade_Level++;
																}
																else if (BitConverter.ToInt32(hcItimesClass72.Item_ID, 0) == 1008000072)
																{
																	Random random3 = new Random((int)DateTime.Now.Ticks);
																	hcItimesClass71.Upgrade_Level += World.GetStoneValue_Fix(1, 3);
																}
																else if (BitConverter.ToInt32(hcItimesClass72.Item_ID, 0) == 1000000619)
																{
																	hcItimesClass71.Upgrade_Level++;
																}
																if (hcItimesClass71.Upgrade_Level > 10)
																{
																	hcItimesClass71.Upgrade_Level = 10;
																}
																if (hcItimesClass71.Upgrade_Level == World.江湖快报强化阶段)
																{
																	World.发送强化合成公告(BitConverter.ToInt32(hcItimesClass71.Item_ID, 0), base.UserName, hcItimesClass71.Upgrade_Level, base.Player_Zx);
																}
																hcItimesClass71.设置阶段属性();
																if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass71.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass71.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass71.物品全局ID, 0))
																{
																	Send_Packet_Delete_Item(hcItimesClass71.index, 1);
																	_Make_Item_Option(hcItimesClass71.物品全局ID, hcItimesClass71.Item_ID, hcItimesClass71.index, hcItimesClass71.Item_Count, hcItimesClass71.Item_Opt);
																}
																num34 = 9;
																Item_In_Bag[hcItimesClass71.index].LockMove = false;
																if (base.FLD_VIP == 1)
																{
																}
																Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
																if (hcItimesClass71.Upgrade_Level > 1)
																{
																	string txt = "[ " + BitConverter.ToInt32(hcItimesClass71.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass71.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [ " + num35 + "/" + num36 + " - " + hcItimesClass71.Upgrade_Level + " ]";
																	logo.logcuonghoatrangsuc(txt);
																}
															}
															else if (hcItimesClass72 != null)
															{
																if (BitConverter.ToInt32(hcItimesClass72.Item_ID, 0) == 1000000619)
																{
																	if (hcItimesClass71.Upgrade_Level <= 2)
																	{
																		if (value41.FLD_RESIDE2 == 7)
																		{
																			hcItimesClass71.Upgrade_Type = 2;
																		}
																		else if (value41.FLD_RESIDE2 == 8)
																		{
																			hcItimesClass71.Upgrade_Type = 3;
																		}
																		else if (value41.FLD_RESIDE2 == 10)
																		{
																			hcItimesClass71.Upgrade_Type = 1;
																		}
																		hcItimesClass71.Upgrade_Level++;
																		if (hcItimesClass71.Upgrade_Level > 10)
																		{
																			hcItimesClass71.Upgrade_Level = 10;
																		}
																		hcItimesClass71.设置阶段属性();
																		num34 = 10;
																		if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass71.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass71.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass71.物品全局ID, 0))
																		{
																			Send_Packet_Delete_Item(hcItimesClass71.index, 1);
																			_Make_Item_Option(hcItimesClass71.物品全局ID, hcItimesClass71.Item_ID, hcItimesClass71.index, hcItimesClass71.Item_Count, hcItimesClass71.Item_Opt);
																		}
																		num34 = 11;
																		Item_In_Bag[hcItimesClass71.index].LockMove = false;
																		Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
																	}
																	else
																	{
																		num34 = 12;
																		Send_Packet_Delete_Item(hcItimesClass71.index, 1);
																		Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
																	}
																}
																else if (BitConverter.ToInt32(hcItimesClass72.Item_ID, 0) == 1008000072)
																{
																	hcItimesClass71.Upgrade_Level = 0;
																	hcItimesClass71.Upgrade_Type = 0;
																	hcItimesClass71.设置阶段属性();
																	if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass71.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass71.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass71.物品全局ID, 0))
																	{
																		Send_Packet_Delete_Item(hcItimesClass71.index, 1);
																		_Make_Item_Option(hcItimesClass71.物品全局ID, hcItimesClass71.Item_ID, hcItimesClass71.index, hcItimesClass71.Item_Count, hcItimesClass71.Item_Opt);
																	}
																	Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
																}
																else
																{
																	num34 = 13;
																	Send_Packet_Delete_Item(hcItimesClass71.index, 1);
																	Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
																}
															}
															else
															{
																num34 = 14;
																Send_Packet_Delete_Item(hcItimesClass71.index, 1);
																Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
																for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
																{
																	if (Item_In_Bag[i].物品全局ID == hcItimesClass71.物品全局ID)
																	{
																		Item_In_Bag[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
																	}
																}
																Update_Item_In_Bag();
																if (hcItimesClass71.Upgrade_Level >= 0)
																{
																	RxjhClass.GhiLogDelItem(BitConverter.ToInt32(hcItimesClass71.物品全局ID, 0), BitConverter.ToInt32(hcItimesClass71.Item_ID, 0), hcItimesClass71.Upgrade_Level.ToString(), this, 1);
																	string txt = "[ " + BitConverter.ToInt32(hcItimesClass71.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass71.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [ " + num35 + "/" + num36 + " - " + hcItimesClass71.Upgrade_Level + " ]";
																	logo.logcuonghoatrangsuc(txt);
																}
															}
															num34 = 15;
															if (value39 != null)
															{
																num34 = 16;
																if (value41.FLD_LEVEL >= 100)
																{
																	Send_Packet_Delete_Item(value39.index, 2);
																}
																else if (value41.FLD_LEVEL >= 80)
																{
																	Send_Packet_Delete_Item(value39.index, 1);
																}
																else
																{
																	Send_Packet_Delete_Item(value39.index, 1);
																}
																num34 = 17;
															}
															num34 = 18;
															if (value40 != null)
															{
																num34 = 19;
																Send_Packet_Delete_Item(value40.index, 1);
															}
															num34 = 20;
															if (hcItimesClass72 != null)
															{
																num34 = 21;
																Send_Packet_Delete_Item(hcItimesClass72.index, 1);
															}
															num34 = 22;
															ClassHcItimes.Clear();
															合成系统解锁();
															元宝合成开关 = 0;
														}
													}
												}
											}
											else
											{
												Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
											}
										}
									}
									else
									{
										Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
									}
								}
								else
								{
									Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
								}
								return;
							}
							catch (Exception ex60)
							{
								Form1.WriteLine(1, "200首饰加工 出错 " + base.Client.WorldId + "|" + base.Client.ToString() + " " + num34 + " " + ex60);
							}
						}
						goto IL_1660a;
					}
					goto end_IL_029c;
				IL_139a7:
					HcItimesClass hcItimesClass73 = new HcItimesClass();
					hcItimesClass73.index = num2;
					hcItimesClass73.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
					Item_In_Bag[num2].LockMove = true;
					if (!ClassHcItimes.ContainsKey(3))
					{
						ClassHcItimes.Add(3, hcItimesClass73);
					}
					Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
					goto end_IL_029c;
				IL_a155:
					ItmeClass value42;
					try
					{
						if (ClassHcItimes.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass74 = null;
						if (!ClassHcItimes.ContainsKey(1))
						{
							Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
							return;
						}
						hcItimesClass74 = ClassHcItimes[1];
						if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass74.Item_ID, 0), out value42))
						{
							int value43 = 1;
							int value44 = 1;
							int value45 = 1000000640;
							int value46 = 0;
							if (得到包裹空位数() < 2)
							{
								Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							}
							else
							{
								Random random4 = new Random((int)DateTime.Now.Ticks);
								if (value42.FLD_LEVEL >= 100)
								{
									value43 = random4.Next(11, 16);
									value44 = random4.Next(3, 6);
								}
								else if (value42.FLD_LEVEL >= 80)
								{
									value43 = random4.Next(6, 11);
									value44 = random4.Next(2, 4);
								}
								else if (value42.FLD_LEVEL >= 60)
								{
									value43 = random4.Next(1, 6);
									value44 = random4.Next(1, 1);
								}
								int num37 = Find_Package_Empty(this);
								if (num37 != -1)
								{
									if (value42.FLD_RESIDE2 == 7)
									{
										value46 = 1000000638;
									}
									else if (value42.FLD_RESIDE2 == 8)
									{
										value46 = 1000000637;
									}
									else if (value42.FLD_RESIDE2 == 10)
									{
										value46 = 1000000639;
									}
									Send_Packet_Delete_Item(hcItimesClass74.index, 1);
									byte[] bytes12 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
									增加物品2(bytes12, BitConverter.GetBytes(value45), num37, BitConverter.GetBytes(value43), new byte[56]);
									num37 = Find_Package_Empty(this);
									bytes12 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
									增加物品2(bytes12, BitConverter.GetBytes(value46), num37, BitConverter.GetBytes(value44), new byte[56]);
									Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
									ClassHcItimes.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
								}
								else
								{
									Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
								}
							}
							return;
						}
					}
					catch (Exception ex61)
					{
						Form1.WriteLine(1, "207首饰分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex61);
						return;
					}
					goto IL_1660a;
				IL_9e5e:
					if (!ClassHcItimes.ContainsKey(3))
					{
						HcItimesClass hcItimesClass75 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass75 = ClassHcItimes[1];
							if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass75.Item_ID, 0), out ItmeClass value47))
							{
								if (value47.FLD_RESIDE2 == 7)
								{
									if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000638)
									{
										Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
										GameMessage("44 ", 7);
									}
									else
									{
										GameMessage("55 ", 7);
										if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 1)
										{
											goto IL_139a7;
										}
										Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
									}
								}
								else if (value47.FLD_RESIDE2 == 8)
								{
									if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000637)
									{
										Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
									}
									else
									{
										if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 1)
										{
											goto IL_139a7;
										}
										Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
									}
								}
								else
								{
									if (value47.FLD_RESIDE2 != 10)
									{
										goto IL_139a7;
									}
									if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000639)
									{
										Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
									}
									else
									{
										if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) >= 1)
										{
											goto IL_139a7;
										}
										Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
									}
								}
							}
							else
							{
								Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
							}
						}
						else
						{
							Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
						}
					}
					goto end_IL_029c;
				IL_ee1a:
					try
					{
						byte[] array19 = new byte[4];
						byte[] dst5 = new byte[4];
						Buffer.BlockCopy(data, 15, array19, 0, 4);
						Buffer.BlockCopy(data, 19, dst5, 0, 4);
						if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array19, 0)].Get_Byte_Item_PID, 0) == 0 || ClassHcItimes.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass12 = null;
						HcItimesClass hcItimesClass13 = null;
						HcItimesClass hcItimesClass14 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass12 = ClassHcItimes[1];
						}
						if (ClassHcItimes.ContainsKey(2))
						{
							hcItimesClass13 = ClassHcItimes[2];
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							hcItimesClass14 = ClassHcItimes[3];
						}
						if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass12.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass12.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass13.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass13.物品全局ID, 0) || (hcItimesClass14 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass14.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass14.物品全局ID, 0)))
						{
							return;
						}
						hcItimesClass12.得到属性();
						hcItimesClass12.强化属性阶段();
						hcItimesClass13.强化属性阶段();
						if (Item_In_Bag[hcItimesClass12.index].物品绑定)
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass12.index]);
							return;
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass12.Item_ID, 0), out ItmeClass value48))
						{
							return;
						}
						if (value48.FLD_RESIDE2 != 4)
						{
							Form1.WriteLine(6, "Upgrade_Item WGF BUG11[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
							return;
						}
						if (value48.FLD_RESIDE2 == 12 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000013)
						{
							Form1.WriteLine(6, "Upgrade_Item WGF BUG1[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
							return;
						}
						if (value48.FLD_RESIDE2 == 1 || value48.FLD_RESIDE2 == 2 || value48.FLD_RESIDE2 == 5 || value48.FLD_RESIDE2 == 6)
						{
							if (BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000002 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000024 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000062)
							{
								Form1.WriteLine(6, "Upgrade_Item WGF BUG2[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
								return;
							}
							if (value48.FLD_RESIDE2 == 6 && (hcItimesClass12.属性2.属性数量 != 0 || hcItimesClass12.属性3.属性数量 != 0 || hcItimesClass12.属性4.属性数量 != 0))
							{
								return;
							}
						}
						if (value48.FLD_RESIDE2 == 4 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000001 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000023 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000025 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000026 && BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) != 800000061)
						{
							Form1.WriteLine(6, "Upgrade_Item WGF BUG3[" + BitConverter.ToInt32(hcItimesClass12.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass13.Item_ID, 0) + "]");
							return;
						}
						string[] array14 = World.合成率控制.Split(';');
						double num38 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array14[0]), int.Parse(array14[1]));
						for (int i = 0; i < new Random((int)DateTime.Now.Ticks).Next(5, 15); i++)
						{
							num38 = new Random(World.GetRandomSeed()).Next(int.Parse(array14[0]), int.Parse(array14[1]));
						}
						double num10 = 0.0;
						double num11 = int.Parse(array14[0]);
						int num39 = 0;
						int num40 = 0;
						int num41 = 0;
						int num42 = 0;
						if (data[111] > 0)
						{
							num39 = 1;
						}
						if (data[111] > 1)
						{
							num40 = 1;
						}
						if (data[111] > 2)
						{
							num41 = 1;
						}
						num10 = ((hcItimesClass13.阶段类型 == 11 || hcItimesClass13.阶段类型 == 1 || hcItimesClass13.阶段类型 == 10) ? ((double)(10 + (hcItimesClass12.属性1.数量 * 20 * num39 + hcItimesClass12.属性2.数量 * 20 * num40 + hcItimesClass12.属性3.数量 * 20 * num41 + hcItimesClass12.属性4.数量 * 20 * num42 + hcItimesClass13.阶段数量 * ((hcItimesClass13.阶段类型 != 8) ? 5 : 0) / 7))) : ((hcItimesClass13.阶段类型 != 7) ? ((double)(10 + (hcItimesClass12.属性1.数量 * 20 * num39 + hcItimesClass12.属性2.数量 * 20 * num40 + hcItimesClass12.属性3.数量 * 20 * num41 + hcItimesClass12.属性4.数量 * 20 * num42 + hcItimesClass13.阶段数量 * ((hcItimesClass13.阶段类型 != 8) ? 5 : 0) / 4))) : ((double)(10 + (hcItimesClass12.属性1.数量 * 20 * num39 + hcItimesClass12.属性2.数量 * 20 * num40 + hcItimesClass12.属性3.数量 * 20 * num41 + hcItimesClass12.属性4.数量 * 20 * num42 + hcItimesClass13.阶段数量 * ((hcItimesClass13.阶段类型 != 8) ? 5 : 0) / 6)))));
						if (base.Player_Money < 15000)
						{
							GameMessage("Không ðuÒ 15000 tiêÌn vaÌng", 9);
							return;
						}
						base.Player_Money -= 15000L;
						if (hcItimesClass14 != null)
						{
							num3 = BitConverter.ToInt32(hcItimesClass14.Item_ID, 0);
							int num12 = World.checkLuckyItem(num3);
							num38 += (double)num12;
							num11 += (double)num12;
							GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
						}
						if (base.Item_Upgrade_Lucky_Add != 0.0)
						{
							num38 += 100.0 * base.Item_Upgrade_Lucky_Add;
							num11 += 100.0 * base.Item_Upgrade_Lucky_Add;
						}
						if (base.Character_Upgrade_Lucky != 0.0)
						{
							num38 += 100.0 * base.Character_Upgrade_Lucky;
							num11 += 100.0 * base.Character_Upgrade_Lucky;
						}
						if (元宝合成开关 == 1)
						{
						}
						if (base.FLD_VIP == 1)
						{
							if (World.Newversion >= 13)
							{
								num38 *= 1.0 + World.VipSynthesisRate;
								num11 *= 1.0 + World.VipSynthesisRate;
							}
							else
							{
								num38 += 100.0 * World.VipSynthesisRate;
								num11 += 100.0 * World.VipSynthesisRate;
							}
						}
						if (World.合成率 != 0.0)
						{
							if (World.Newversion >= 13)
							{
								num38 *= 1.0 + World.合成率;
								num11 *= 1.0 + World.合成率;
							}
							else
							{
								num38 += 100.0 * World.合成率;
								num11 += 100.0 * World.合成率;
							}
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num38 *= 1.05;
							num11 *= 1.05;
						}
						if (num10 > num11)
						{
						}
						if (num38 >= num10)
						{
							if (hcItimesClass12.属性1.属性类型 != 0 && data[111] == 0)
							{
								if (hcItimesClass13.阶段类型 == 8)
								{
									hcItimesClass12.属性1.气功属性类型 = hcItimesClass13.气功属性类型;
								}
								hcItimesClass12.属性1.属性类型 = hcItimesClass13.阶段类型;
								hcItimesClass12.属性1.属性数量 = hcItimesClass13.阶段数量;
								hcItimesClass12.设置属性();
							}
							else if (hcItimesClass12.属性2.属性类型 != 0 && data[111] == 1)
							{
								if (hcItimesClass13.阶段类型 == 8)
								{
									hcItimesClass12.属性2.气功属性类型 = hcItimesClass13.气功属性类型;
								}
								hcItimesClass12.属性2.属性类型 = hcItimesClass13.阶段类型;
								hcItimesClass12.属性2.属性数量 = hcItimesClass13.阶段数量;
								hcItimesClass12.设置属性();
							}
							else if (hcItimesClass12.属性3.属性类型 != 0 && data[111] == 2)
							{
								if (hcItimesClass13.阶段类型 == 8)
								{
									hcItimesClass12.属性3.气功属性类型 = hcItimesClass13.气功属性类型;
								}
								hcItimesClass12.属性3.属性类型 = hcItimesClass13.阶段类型;
								hcItimesClass12.属性3.属性数量 = hcItimesClass13.阶段数量;
								hcItimesClass12.设置属性();
							}
							else if (hcItimesClass12.属性4.属性类型 != 0 && data[111] == 3)
							{
								if (hcItimesClass13.阶段类型 == 8)
								{
									hcItimesClass12.属性4.气功属性类型 = hcItimesClass13.气功属性类型;
								}
								hcItimesClass12.属性4.属性类型 = hcItimesClass13.阶段类型;
								hcItimesClass12.属性4.属性数量 = hcItimesClass13.阶段数量;
								hcItimesClass12.设置属性();
							}
							if (base.FLD_VIP == 1)
							{
							}
							GameMessage("Hõòp thaÌnh thaÌnh công!");
						}
						else
						{
							GameMessage("Hõòp thaÌnh thâìt baòi: " + World.VipSynthesisRate * 100.0 + "%", 9);
							Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(hcItimesClass12.Get_Byte_Item, 0, array, 31, 4);
						Buffer.BlockCopy(hcItimesClass12.Get_Byte_Item, 0, array, 39, 20);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						Send_Packet_Delete_Item(hcItimesClass13.index, 1);
						Send_Packet_Delete_Item(BitConverter.ToInt32(array19, 0), 1);
						if (hcItimesClass14 != null)
						{
							Send_Packet_Delete_Item(hcItimesClass14.index, 1);
						}
						if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass12.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass12.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass12.物品全局ID, 0))
						{
							Send_Packet_Delete_Item(hcItimesClass12.index, 1);
							_Make_Item_Option(hcItimesClass12.物品全局ID, hcItimesClass12.Item_ID, hcItimesClass12.index, hcItimesClass12.Item_Count, hcItimesClass12.Item_Opt);
						}
						Item_In_Bag[hcItimesClass12.index].LockMove = false;
						ClassHcItimes.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex62)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "Upgrade_Item 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex62.Message);
						return;
					}
					goto IL_1660a;
				IL_9e7f:
					if (!ClassHcItimes.ContainsKey(4))
					{
						if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1008000072 && BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000619)
						{
							Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
						}
						else
						{
							HcItimesClass hcItimesClass76 = null;
							if (ClassHcItimes.ContainsKey(1))
							{
								hcItimesClass76 = ClassHcItimes[1];
								hcItimesClass76.得到属性();
								hcItimesClass76.强化属性阶段();
								HcItimesClass hcItimesClass77 = new HcItimesClass();
								hcItimesClass77.index = num2;
								hcItimesClass77.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
								Item_In_Bag[num2].LockMove = true;
								if (!ClassHcItimes.ContainsKey(4))
								{
									ClassHcItimes.Add(4, hcItimesClass77);
								}
								Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
							}
							else
							{
								Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
							}
						}
					}
					goto end_IL_029c;
				IL_13275:
					if (!ClassHcItimes.ContainsKey(1))
					{
						ItmeClass value49;
						if (Item_In_Bag[num2].物品绑定)
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[num2]);
						}
						else if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0), out value49) && (value49.FLD_RESIDE2 == 7 || value49.FLD_RESIDE2 == 8 || value49.FLD_RESIDE2 == 10) && value49.FLD_LEVEL >= 60)
						{
							if (value49.FLD_LEVEL >= 100)
							{
								Send_Packet_Tip_Upgrade_Item(num, 121, 0, Item_In_Bag[num2]);
								HcItimesClass hcItimesClass78 = new HcItimesClass();
								hcItimesClass78.index = num2;
								hcItimesClass78.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
								Item_In_Bag[num2].LockMove = true;
								ClassHcItimes.Add(1, hcItimesClass78);
							}
							else if (value49.FLD_LEVEL >= 80)
							{
								Send_Packet_Tip_Upgrade_Item(num, 111, 0, Item_In_Bag[num2]);
								HcItimesClass hcItimesClass79 = new HcItimesClass();
								hcItimesClass79.index = num2;
								hcItimesClass79.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
								Item_In_Bag[num2].LockMove = true;
								ClassHcItimes.Add(1, hcItimesClass79);
							}
							else
							{
								if (value49.FLD_LEVEL < 60)
								{
									goto IL_1660a;
								}
								Send_Packet_Tip_Upgrade_Item(num, 101, 0, Item_In_Bag[num2]);
								HcItimesClass hcItimesClass80 = new HcItimesClass();
								hcItimesClass80.index = num2;
								hcItimesClass80.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
								Item_In_Bag[num2].LockMove = true;
								ClassHcItimes.Add(1, hcItimesClass80);
							}
						}
					}
					goto end_IL_029c;
				IL_df73:
					try
					{
						if (ClassHcItimes.Count <= 0)
						{
							return;
						}
						hcItimesClass63 = null;
						HcItimesClass hcItimesClass81 = null;
						HcItimesClass hcItimesClass82 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass63 = ClassHcItimes[1];
						}
						if (ClassHcItimes.ContainsKey(2))
						{
							hcItimesClass81 = ClassHcItimes[2];
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							hcItimesClass82 = ClassHcItimes[3];
						}
						if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass63.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass63.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass81.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass81.物品全局ID, 0) || (hcItimesClass82 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass82.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass82.物品全局ID, 0)))
						{
							return;
						}
						hcItimesClass63.得到属性();
						hcItimesClass63.强化属性阶段();
						hcItimesClass81.强化属性阶段();
						if (Item_In_Bag[hcItimesClass63.index].物品绑定)
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass63.index]);
							return;
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass63.Item_ID, 0), out ItmeClass value50))
						{
							return;
						}
						if (value50.FLD_RESIDE2 != 4)
						{
							Form1.WriteLine(6, "Upgrade_Item WGF BUG11[" + BitConverter.ToInt32(hcItimesClass63.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) + "]");
							return;
						}
						if (value50.FLD_RESIDE2 == 12 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000013)
						{
							Form1.WriteLine(6, "Upgrade_Item WGF BUG1[" + BitConverter.ToInt32(hcItimesClass63.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) + "]");
							return;
						}
						if (value50.FLD_RESIDE2 == 1 || value50.FLD_RESIDE2 == 2 || value50.FLD_RESIDE2 == 5 || value50.FLD_RESIDE2 == 6)
						{
							if (BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000002 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000024 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000062)
							{
								Form1.WriteLine(6, "Upgrade_Item WGF BUG2[" + BitConverter.ToInt32(hcItimesClass63.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) + "]");
								return;
							}
							if (value50.FLD_RESIDE2 == 6 && (hcItimesClass63.属性2.属性数量 != 0 || hcItimesClass63.属性3.属性数量 != 0 || hcItimesClass63.属性4.属性数量 != 0))
							{
								return;
							}
						}
						if (value50.FLD_RESIDE2 == 4 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000001 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000023 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000025 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000026 && BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) != 800000061)
						{
							Form1.WriteLine(6, "Upgrade_Item WGF BUG3[" + BitConverter.ToInt32(hcItimesClass63.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass81.Item_ID, 0) + "]");
							return;
						}
						Random random5 = new Random((int)DateTime.Now.Ticks);
						string[] array20 = World.合成率控制.Split(';');
						double num43 = random5.Next(int.Parse(array20[0]), int.Parse(array20[1]));
						double num44 = (hcItimesClass63.属性1.数量 * 20 + hcItimesClass63.属性2.数量 * 20 + hcItimesClass63.属性3.数量 * 20 + hcItimesClass63.属性4.数量 * 20 + hcItimesClass81.阶段数量 >= 99) ? 99.0 : ((double)hcItimesClass81.阶段数量);
						if (hcItimesClass82 != null)
						{
							num3 = BitConverter.ToInt32(hcItimesClass82.Item_ID, 0);
							int num12 = World.checkLuckyItem(num3);
							num43 += (double)num12;
							GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
						}
						if (base.Item_Upgrade_Lucky_Add != 0.0)
						{
							num43 += 100.0 * base.Item_Upgrade_Lucky_Add;
						}
						if (base.Character_Upgrade_Lucky != 0.0)
						{
							num43 += 100.0 * base.Character_Upgrade_Lucky;
						}
						if (元宝合成开关 == 1)
						{
						}
						if (base.FLD_VIP == 1)
						{
							num43 = ((World.Newversion < 13) ? (num43 + 100.0 * World.VipSynthesisRate) : (num43 * (1.0 + World.VipSynthesisRate)));
						}
						if (World.合成率 != 0.0)
						{
							num43 = ((World.Newversion < 13) ? (num43 + 100.0 * World.合成率) : (num43 * (1.0 + World.合成率)));
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num43 *= 1.05;
						}
						if (num43 >= num44)
						{
							if (hcItimesClass63.属性1.属性类型 != 0)
							{
								if (hcItimesClass63.属性1.属性类型 == hcItimesClass81.阶段类型)
								{
									if (hcItimesClass81.阶段数量 <= hcItimesClass63.属性1.属性数量)
									{
										if (hcItimesClass63.属性2.属性类型 == 0)
										{
											GameMessage("不符合条件无法合成");
											return;
										}
										if (hcItimesClass63.属性2.属性类型 == hcItimesClass81.阶段类型)
										{
											if (hcItimesClass81.阶段数量 > hcItimesClass63.属性2.属性数量)
											{
												hcItimesClass63.属性2.属性类型 = hcItimesClass81.阶段类型;
												hcItimesClass63.属性2.属性数量 = hcItimesClass81.阶段数量;
												hcItimesClass63.设置属性();
											}
											else if (hcItimesClass63.属性3.属性类型 != 0 && hcItimesClass63.属性3.属性类型 == hcItimesClass81.阶段类型)
											{
												if (hcItimesClass81.阶段数量 > hcItimesClass63.属性3.属性数量)
												{
													hcItimesClass63.属性3.属性类型 = hcItimesClass81.阶段类型;
													hcItimesClass63.属性3.属性数量 = hcItimesClass81.阶段数量;
													hcItimesClass63.设置属性();
												}
												else if (hcItimesClass63.属性4.属性类型 != 0 && hcItimesClass63.属性4.属性类型 == hcItimesClass81.阶段类型 && hcItimesClass81.阶段数量 > hcItimesClass63.属性4.属性数量)
												{
													hcItimesClass63.属性4.属性类型 = hcItimesClass81.阶段类型;
													hcItimesClass63.属性4.属性数量 = hcItimesClass81.阶段数量;
													hcItimesClass63.设置属性();
												}
											}
										}
									}
									else
									{
										hcItimesClass63.属性1.属性类型 = hcItimesClass81.阶段类型;
										hcItimesClass63.属性1.属性数量 = hcItimesClass81.阶段数量;
										hcItimesClass63.设置属性();
									}
								}
								else if (hcItimesClass63.属性1.属性类型 != hcItimesClass81.阶段类型)
								{
									hcItimesClass63.属性1.属性类型 = hcItimesClass81.阶段类型;
									hcItimesClass63.属性1.属性数量 = hcItimesClass81.阶段数量;
									hcItimesClass63.设置属性();
								}
							}
							else if (hcItimesClass63.属性1.属性类型 == 0)
							{
								if (hcItimesClass81.阶段类型 == 8)
								{
									hcItimesClass63.属性1.气功属性类型 = hcItimesClass81.气功属性类型;
								}
								hcItimesClass63.属性1.属性类型 = hcItimesClass81.阶段类型;
								hcItimesClass63.属性1.属性数量 = hcItimesClass81.阶段数量;
								hcItimesClass63.设置属性();
							}
							else if (hcItimesClass63.属性2.属性类型 == 0)
							{
								if (hcItimesClass81.阶段类型 == 8)
								{
									hcItimesClass63.属性2.气功属性类型 = hcItimesClass81.气功属性类型;
								}
								hcItimesClass63.属性2.属性类型 = hcItimesClass81.阶段类型;
								hcItimesClass63.属性2.属性数量 = hcItimesClass81.阶段数量;
								hcItimesClass63.设置属性();
							}
							else if (hcItimesClass63.属性3.属性类型 == 0)
							{
								if (hcItimesClass81.阶段类型 == 8)
								{
									hcItimesClass63.属性3.气功属性类型 = hcItimesClass81.气功属性类型;
								}
								hcItimesClass63.属性3.属性类型 = hcItimesClass81.阶段类型;
								hcItimesClass63.属性3.属性数量 = hcItimesClass81.阶段数量;
								hcItimesClass63.设置属性();
							}
							else if (hcItimesClass63.属性4.属性类型 == 0)
							{
								if (hcItimesClass81.阶段类型 == 8)
								{
									hcItimesClass63.属性4.气功属性类型 = hcItimesClass81.气功属性类型;
								}
								hcItimesClass63.属性4.属性类型 = hcItimesClass81.阶段类型;
								hcItimesClass63.属性4.属性数量 = hcItimesClass81.阶段数量;
								hcItimesClass63.设置属性();
							}
							if (base.FLD_VIP != 1)
							{
							}
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(hcItimesClass63.Get_Byte_Item, 0, array, 31, 4);
						Buffer.BlockCopy(hcItimesClass63.Get_Byte_Item, 0, array, 39, 20);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						Send_Packet_Delete_Item(hcItimesClass81.index, 1);
						if (hcItimesClass82 != null)
						{
							Send_Packet_Delete_Item(hcItimesClass82.index, 1);
						}
						if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass63.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass63.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass63.物品全局ID, 0))
						{
							Send_Packet_Delete_Item(hcItimesClass63.index, 1);
							_Make_Item_Option(hcItimesClass63.物品全局ID, hcItimesClass63.Item_ID, hcItimesClass63.index, hcItimesClass63.Item_Count, hcItimesClass63.Item_Opt);
						}
						Item_In_Bag[hcItimesClass63.index].LockMove = false;
						ClassHcItimes.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex63)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "Upgrade_Item 合成属性 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex63.Message);
						return;
					}
					goto IL_1660a;
				IL_dede:
					try
					{
						打开仓库中 = false;
						ClassHcItimes.Clear();
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						合成系统解锁();
					}
					catch (Exception ex50)
					{
						Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
						return;
					}
					goto IL_1660a;
				IL_10ec7:
					try
					{
						if (ClassHcItimes.ContainsKey(2))
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000365 && BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000367)
						{
							return;
						}
						HcItimesClass hcItimesClass83 = new HcItimesClass();
						hcItimesClass83.index = num2;
						hcItimesClass83.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(2, hcItimesClass83);
					}
					catch (Exception ex64)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex64.Message);
						return;
					}
					goto IL_1660a;
				IL_dc2a:
					try
					{
						if (!ClassHcItimes.TryGetValue(1, out hcItimesClass63))
						{
							return;
						}
						物品类 物品类 = 得到人物物品类型(1008001963L);
						if (物品类 == null)
						{
							return;
						}
						Item_In_Bag[物品类.Bag].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						Update_Item_In_Bag();
						_Make_Item_Option(hcItimesClass63.物品全局ID, BitConverter.GetBytes(BitConverter.ToInt32(hcItimesClass63.Item_ID, 0) + 6), hcItimesClass63.index, hcItimesClass63.Item_Count, hcItimesClass63.Item_Opt);
						打开仓库中 = false;
						ClassHcItimes.Clear();
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						合成系统解锁();
					}
					catch (Exception ex50)
					{
						Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
						return;
					}
					goto IL_1660a;
				IL_1106f:
					try
					{
						if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(3))
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						HcItimesClass hcItimesClass84 = new HcItimesClass();
						hcItimesClass84.index = num2;
						hcItimesClass84.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(3, hcItimesClass84);
					}
					catch (Exception ex65)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex65.Message);
						return;
					}
					goto IL_1660a;
				IL_111e0:
					try
					{
						ClassHcItimes.Clear();
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
					}
					catch (Exception ex66)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex66.Message);
						return;
					}
					goto IL_1660a;
				IL_d6f4:
					try
					{
						if (!ClassHcItimes.TryGetValue(1, out hcItimesClass63) || !World.Itme.TryGetValue((int)Item_In_Bag[hcItimesClass63.index].FLD_PID, out value30))
						{
							return;
						}
						int num33 = 0;
						num33 = ((value30.FLD_SHIELD != 0) ? ((value30.FLD_ZX != 1) ? (-100) : 900) : ((value30.FLD_ZX != 1) ? 100 : (-900)));
						if (value30.FLD_PID == 100018)
						{
							num33 = 99;
						}
						else if (value30.FLD_PID == 100117)
						{
							num33 = -99;
						}
						if (value30.FLD_PID == 100020)
						{
							num33 = 98;
						}
						else if (value30.FLD_PID == 100118)
						{
							num33 = -98;
						}
						if (value30.FLD_PID == 100022)
						{
							num33 = 98;
						}
						else if (value30.FLD_PID == 100120)
						{
							num33 = -98;
						}
						if (value30.FLD_PID == 100026)
						{
							num33 = 98;
						}
						else if (value30.FLD_PID == 100124)
						{
							num33 = -98;
						}
						if (value30.FLD_PID == 100021)
						{
							num33 = 98;
						}
						else if (value30.FLD_PID == 100119)
						{
							num33 = -98;
						}
						if (value30.FLD_PID == 100028)
						{
							num33 = 97;
						}
						else if (value30.FLD_PID == 100125)
						{
							num33 = -97;
						}
						if (value30.FLD_PID == 100029)
						{
							num33 = 97;
						}
						else if (value30.FLD_PID == 100126)
						{
							num33 = -97;
						}
						if (value30.FLD_PID == 700911)
						{
							num33 = 10;
						}
						else if (value30.FLD_PID == 700921)
						{
							num33 = -10;
						}
						if (!World.Itme.TryGetValue(value30.FLD_PID + num33, out value33))
						{
							return;
						}
						物品类 物品类 = 得到人物物品类型(1008001753L);
						if (物品类 == null)
						{
							return;
						}
						Item_In_Bag[物品类.Bag].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						Update_Item_In_Bag();
						_Make_Item_Option(hcItimesClass63.物品全局ID, BitConverter.GetBytes(BitConverter.ToInt32(hcItimesClass63.Item_ID, 0) + num33), hcItimesClass63.index, hcItimesClass63.Item_Count, hcItimesClass63.Item_Opt);
						打开仓库中 = false;
						ClassHcItimes.Clear();
						Buffer.BlockCopy(array3, 0, array, 11, 2);
					}
					catch (Exception ex50)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
						return;
					}
					goto IL_1660a;
				IL_d27b:
					try
					{
						元宝合成开关 = 0;
						打开仓库中 = false;
						ClassHcItimes.Clear();
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						合成系统解锁();
					}
					catch (Exception ex50)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "合成系统 再造合成石-取消 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
						return;
					}
					goto IL_1660a;
				IL_11287:
					try
					{
						byte[] array21 = new byte[4];
						byte[] dst6 = new byte[4];
						Buffer.BlockCopy(data, 15, array21, 0, 4);
						Buffer.BlockCopy(data, 19, dst6, 0, 4);
						if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array21, 0)].Get_Byte_Item_PID, 0) == 0 || ClassHcItimes.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass85 = null;
						HcItimesClass hcItimesClass86 = null;
						HcItimesClass hcItimesClass87 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass85 = ClassHcItimes[1];
						}
						if (ClassHcItimes.ContainsKey(2))
						{
							hcItimesClass86 = ClassHcItimes[2];
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							hcItimesClass87 = ClassHcItimes[3];
						}
						ItmeClass value51 = default(ItmeClass);
						if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass85.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass85.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass86.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass86.物品全局ID, 0) || (hcItimesClass87 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass87.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass87.物品全局ID, 0)) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass85.Item_ID, 0), out value51))
						{
							return;
						}
						if (value51.FLD_RESIDE2 != 1 && value51.FLD_RESIDE2 != 2 && value51.FLD_RESIDE2 != 4 && value51.FLD_RESIDE2 != 5 && value51.FLD_RESIDE2 != 6)
						{
							Form1.WriteLine(6, "Upgrade_Item 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass85.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass86.Item_ID, 0) + "]");
							return;
						}
						if (Item_In_Bag[hcItimesClass85.index].物品绑定)
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass85.index]);
							return;
						}
						hcItimesClass85.强化属性阶段();
						hcItimesClass86.强化属性阶段();
						double num45 = new Random((int)DateTime.Now.Ticks).Next(0, 100);
						double num46 = hcItimesClass85.阶段数量 * 10;
						if (hcItimesClass85.阶段数量 >= 10)
						{
							ClassHcItimes.Clear();
						}
						else
						{
							if (hcItimesClass87 != null)
							{
								num3 = BitConverter.ToInt32(hcItimesClass87.Item_ID, 0);
								int num12 = World.checkLuckyItem(num3);
								num45 += (double)num12;
								GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
							}
							if (base.Item_Upgrade_Lucky_Add != 0.0)
							{
								num45 += 100.0 * base.Item_Upgrade_Lucky_Add;
							}
							if (base.Character_Upgrade_Lucky != 0.0)
							{
								num45 += 100.0 * base.Character_Upgrade_Lucky;
							}
							if (元宝合成开关 == 1)
							{
								num45 += 5.0;
							}
							if (base.FLD_VIP == 1)
							{
								num45 = ((World.Newversion < 13) ? (num45 + 100.0 * World.VipSynthesisRate) : (num45 * (1.0 + World.VipSynthesisRate)));
							}
							if (World.合成率 != 0.0)
							{
								num45 = ((World.Newversion < 13) ? (num45 + 100.0 * World.合成率) : (num45 * (1.0 + World.合成率)));
							}
							if (公有药品.ContainsKey(1008000312))
							{
								num45 *= 1.05;
							}
							if (num45 >= num46)
							{
								hcItimesClass85.阶段类型 = hcItimesClass86.阶段类型;
								Random random6 = new Random((int)DateTime.Now.Ticks);
								hcItimesClass85.阶段数量 += World.GetStoneValue_Fix(1, 4);
								if (hcItimesClass85.阶段数量 > 10)
								{
									hcItimesClass85.阶段数量 = 10;
								}
								hcItimesClass85.设置阶段属性();
								if (base.FLD_VIP != 1)
								{
								}
							}
							else
							{
								Random random7 = new Random((int)DateTime.Now.Ticks);
								hcItimesClass85.阶段数量 -= random7.Next(0, 3);
								if (hcItimesClass85.阶段数量 < 0)
								{
									hcItimesClass85.阶段数量 = 0;
								}
								hcItimesClass85.设置阶段属性();
								Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
							}
							Buffer.BlockCopy(array3, 0, array, 11, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
							Send_Packet_Delete_Item(BitConverter.ToInt32(array21, 0), 1);
							Send_Packet_Delete_Item(hcItimesClass86.index, 1);
							if (hcItimesClass87 != null)
							{
								Send_Packet_Delete_Item(hcItimesClass87.index, 1);
							}
							if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass85.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass85.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass85.物品全局ID, 0))
							{
								Send_Packet_Delete_Item(hcItimesClass85.index, 1);
								_Make_Item_Option(hcItimesClass85.物品全局ID, hcItimesClass85.Item_ID, hcItimesClass85.index, hcItimesClass85.Item_Count, hcItimesClass85.Item_Opt);
							}
							Item_In_Bag[hcItimesClass85.index].LockMove = false;
							ClassHcItimes.Clear();
							合成系统解锁();
							元宝合成开关 = 0;
						}
					}
					catch (Exception ex67)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex67.Message);
						return;
					}
					goto IL_1660a;
				IL_11a81:
					try
					{
						if (ClassHcItimes.ContainsKey(1) || Item_In_Bag[num2].物品绑定)
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						HcItimesClass hcItimesClass88 = new HcItimesClass();
						hcItimesClass88.index = num2;
						hcItimesClass88.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(1, hcItimesClass88);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1660a;
				IL_11be8:
					try
					{
						if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(2))
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						HcItimesClass hcItimesClass89 = new HcItimesClass();
						hcItimesClass89.index = num2;
						hcItimesClass89.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(2, hcItimesClass89);
					}
					catch (Exception ex69)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成2 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex69.Message);
						return;
					}
					goto IL_1660a;
				IL_c7cc:
					try
					{
						if (ClassHcItimes.Count <= 0)
						{
							return;
						}
						hcItimesClass63 = null;
						HcItimesClass hcItimesClass64 = null;
						HcItimesClass hcItimesClass90 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass63 = ClassHcItimes[1];
						}
						if (ClassHcItimes.ContainsKey(2))
						{
							hcItimesClass64 = ClassHcItimes[2];
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							hcItimesClass90 = ClassHcItimes[3];
						}
						if (hcItimesClass90 == null || hcItimesClass63 == null || BitConverter.ToInt64(Item_In_Bag[hcItimesClass63.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass63.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass90.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass90.物品全局ID, 0) || (hcItimesClass64 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass64.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass64.物品全局ID, 0)) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass63.Item_ID, 0), out value30))
						{
							return;
						}
						if (value30.FLD_RESIDE2 != 1 && value30.FLD_RESIDE2 != 4)
						{
							Form1.WriteLine(6, "合成系统 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass63.Item_ID, 0) + "]");
							return;
						}
						double num47 = new Random().Next(0, 100);
						double num48 = 50.0;
						if (hcItimesClass64 != null)
						{
							num47 += (double)World.checkLuckyItem(BitConverter.ToInt32(hcItimesClass64.Item_ID, 0));
						}
						if (base.Item_Upgrade_Lucky_Add != 0.0)
						{
							num47 += 100.0 * base.Item_Upgrade_Lucky_Add;
						}
						if (base.Character_Upgrade_Lucky != 0.0)
						{
							num47 += 100.0 * base.Character_Upgrade_Lucky;
						}
						if (元宝合成开关 == 1)
						{
						}
						if (base.FLD_VIP == 1)
						{
							num47 = ((World.Newversion < 13) ? (num47 + 100.0 * World.VipSynthesisRate) : (num47 * (1.0 + World.VipSynthesisRate)));
						}
						if (World.合成率 != 0.0)
						{
							num47 = ((World.Newversion < 13) ? (num47 + 100.0 * World.合成率) : (num47 * (1.0 + World.合成率)));
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num47 *= 1.05;
						}
						if (num47 >= num48)
						{
							hcItimesClass63.FLD_TuLinh = ((BitConverter.ToInt32(hcItimesClass90.Item_ID, 0) == 1000001122) ? 1 : ((BitConverter.ToInt32(hcItimesClass90.Item_ID, 0) == 1000001123) ? 2 : ((BitConverter.ToInt32(hcItimesClass90.Item_ID, 0) == 1000001124) ? 3 : ((BitConverter.ToInt32(hcItimesClass90.Item_ID, 0) == 1000001125) ? 4 : 0))));
							GameMessage("Týì linh thaÌnh công!", 10);
							Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
							GameMessage("Týì linh thâìt baòi!", 10);
							Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						if (hcItimesClass64 != null)
						{
							Send_Packet_Delete_Item(hcItimesClass64.index, 1);
						}
						if (hcItimesClass90 != null)
						{
							Send_Packet_Delete_Item(hcItimesClass90.index, 1);
						}
						if (num47 >= num48 && BitConverter.ToInt32(Item_In_Bag[hcItimesClass63.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass63.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass63.物品全局ID, 0))
						{
							Send_Packet_Delete_Item(hcItimesClass63.index, 1);
							增加物品(hcItimesClass63.物品全局ID, hcItimesClass63.Item_ID, hcItimesClass63.index, hcItimesClass63.Item_Count, hcItimesClass63.Item_Opt, Item_In_Bag[hcItimesClass63.index].物品绑定);
						}
						else
						{
							Send_Packet_Delete_Item(hcItimesClass63.index, 1);
							增加物品(hcItimesClass63.物品全局ID, hcItimesClass63.Item_ID, hcItimesClass63.index, hcItimesClass63.Item_Count, hcItimesClass63.Item_Opt, Item_In_Bag[hcItimesClass63.index].物品绑定);
						}
						Item_In_Bag[hcItimesClass63.index].LockMove = false;
						合成系统解锁();
						元宝合成开关 = 0;
						打开仓库中 = false;
						ClassHcItimes.Clear();
						Buffer.BlockCopy(array3, 0, array, 11, 2);
					}
					catch (Exception ex50)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "合成系统 神力出错 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex50.Message);
						return;
					}
					goto IL_1660a;
				IL_11d59:
					try
					{
						if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(3))
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						HcItimesClass hcItimesClass91 = new HcItimesClass();
						hcItimesClass91.index = num2;
						hcItimesClass91.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(3, hcItimesClass91);
					}
					catch (Exception ex70)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex70.Message);
						return;
					}
					goto IL_1660a;
				IL_c3a2:
					try
					{
						if (ClassHcItimes.Count != 1)
						{
							GameMessage("Vui loÌng ðãòt trýìng thuì cýng câÌn âìp!");
							return;
						}
						HcItimesClass hcItimesClass74 = null;
						if (!ClassHcItimes.ContainsKey(1))
						{
							GameMessage("Vui loÌng huÒy boÒ rôÌi thýÒ laòi!");
							return;
						}
						hcItimesClass74 = ClassHcItimes[1];
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass74.Item_ID, 0), out value42))
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[ClassHcItimes[1].index]);
							return;
						}
						if (得到包裹空位数() < 1)
						{
							Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							return;
						}
						Random random4 = new Random((int)DateTime.Now.Ticks);
						int num49 = Find_Package_Empty(this);
						物品类 物品类 = 得到人物物品类型(1000001150L);
						if (num49 == -1 || 物品类 != null)
						{
							Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							return;
						}
						byte[] array19 = new byte[4];
						Buffer.BlockCopy(data, 15, array19, 0, 4);
						Send_Packet_Delete_Item(BitConverter.ToInt32(array19, 0), 1);
						Send_Packet_Delete_Item(hcItimesClass74.index, 1);
						物品类 = 得到人物物品类型(1000001150L);
						if (物品类 != null)
						{
							Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							return;
						}
						DateTime value52 = new DateTime(1970, 1, 1, 7, 0, 0);
						百宝增加物品带属性(1000001150, num49, 1, 0, 0, 0, BitConverter.ToInt32(hcItimesClass74.Item_ID, 0), (int)DateTime.Now.AddDays(3.0).Subtract(value52).TotalSeconds, 0, 0, 0, 0, 0);
						DateTime d = DateTime.Now.AddDays(3.0);
						double num50 = Convert.ToDouble(d.ToString("yyMMddHHmm"));
						TimeSpan timeSpan = d - DateTime.Now;
						时间药品 时间药品 = new 时间药品();
						时间药品.FLD_sj = (int)num50;
						时间药品.FLD_PID = 1000001150;
						list_时间药品.Add(时间药品.FLD_PID, 时间药品);
						Send_Packet_Show_时间物品(1000001150, 1, 时间药品.FLD_sj, (int)timeSpan.TotalMinutes);
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 31, 4);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item 295 ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_c19b:
					try
					{
						if (list_时间药品.ContainsKey(1000001150))
						{
						}
						物品类 物品类 = 得到人物物品类型(1000001150L);
						if (物品类 != null)
						{
							GameMessage("ChiÒ coì thêÒ âìp 1 trýìng trên ngýõÌi", 7);
							return;
						}
						if (Item_In_Bag[num2].物品绑定)
						{
							return;
						}
						if (ClassHcItimes.Count == 0 && !ClassHcItimes.ContainsKey(1))
						{
							HcItimesClass hcItimesClass88 = new HcItimesClass();
							hcItimesClass88.index = num2;
							hcItimesClass88.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
							Item_In_Bag[num2].LockMove = true;
							ClassHcItimes.Add(1, hcItimesClass88);
						}
						else if (ClassHcItimes.ContainsKey(1))
						{
							ClassHcItimes[1].index = num2;
							ClassHcItimes[1].Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						}
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array2, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array2, 39, 56);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item " + num3 + " ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_bc22:
					ItmeClass value53;
					ItmeClass value54;
					try
					{
						if (ClassHcItimes.Count < 2)
						{
							GameMessage("Chýa ðaòt ðuÒ 2 thuì cýng");
							return;
						}
						if (!ClassHcItimes.ContainsKey(1) || !ClassHcItimes.ContainsKey(2))
						{
							GameMessage("Chýa ðaòt ðuÒ 2 thuì cýng");
							return;
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(ClassHcItimes[1].Item_ID, 0), out value53))
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[ClassHcItimes[1].index]);
							return;
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(ClassHcItimes[2].Item_ID, 0), out value54))
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[ClassHcItimes[2].index]);
							return;
						}
						if (得到包裹空位数() < 1)
						{
							Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							return;
						}
						int num49 = Find_Package_Empty(this);
						if (num49 == -1)
						{
							Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							return;
						}
						bool flag = false;
						double num47 = 0.0;
						for (int i = 0; i < new Random((int)DateTime.Now.Ticks).Next(0, 100); i++)
						{
							num47 = new Random((int)DateTime.Now.Ticks).Next(0, 100);
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							long fLD_PID3 = Item_In_Bag[ClassHcItimes[3].index].FLD_PID;
							if (fLD_PID3 == 1008001941 || fLD_PID3 == 1008001966 || fLD_PID3 == 1008001970)
							{
								num47 *= 2.0;
							}
						}
						if (ClassHcItimes.ContainsKey(4))
						{
							long fLD_PID3 = Item_In_Bag[ClassHcItimes[4].index].FLD_PID;
							if (fLD_PID3 == 1008001942 || fLD_PID3 == 1008001967 || fLD_PID3 == 1008001971)
							{
								flag = true;
							}
						}
						if (num47 > 80.0)
						{
							if (Item_In_Bag[ClassHcItimes[1].index].FLD_MAGIC1 < 220000003)
							{
								Item_In_Bag[ClassHcItimes[1].index].FLD_MAGIC1++;
							}
							GameMessage("Tiêìn hoìa thaÌnh công!", 10);
						}
						else
						{
							GameMessage("Tiêìn hoìa thâìt baòi!", 10);
						}
						if (!flag)
						{
							GameMessage("Thuôòc tiình cuÒa thuì cýng ðaÞ biò mâìt!", 10);
							Item_In_Bag[ClassHcItimes[1].index].FLD_MAGIC0 = 0;
						}
						if (ClassHcItimes.ContainsKey(2))
						{
							if (Item_In_Bag[ClassHcItimes[2].index].FLD_MAGIC1 >= 220000001 && Item_In_Bag[ClassHcItimes[2].index].FLD_MAGIC1 <= 220000002)
							{
								Item_In_Bag[ClassHcItimes[2].index].FLD_MAGIC1--;
							}
							else
							{
								Send_Packet_Delete_Item(ClassHcItimes[2].index, 1);
							}
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							Send_Packet_Delete_Item(ClassHcItimes[3].index, 1);
						}
						if (ClassHcItimes.ContainsKey(4))
						{
							Send_Packet_Delete_Item(ClassHcItimes[4].index, 1);
						}
						Update_Item_In_Bag();
						ClassHcItimes.Clear();
						合成系统解锁();
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item 285 ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_b857:
					ItmeClass value55;
					try
					{
						if (!World.Itme.TryGetValue((int)Item_In_Bag[num2].FLD_PID, out value55))
						{
							GameMessage("Vâòt phâÒm taòm khoìa");
							return;
						}
						if (Item_In_Bag[num2].物品绑定)
						{
							GameMessage("Vâòt phâÒm ðaÞ biò khoìa!");
							return;
						}
						if (ClassHcItimes.ContainsKey(num3 - 280))
						{
							GameMessage("ÐaÞ coì lôÞi xaÒy ra (truÌng)!");
							return;
						}
						if (num3 == 281 || num3 == 282)
						{
							if (Item_In_Bag[num2].FLD_DAY1 != 0 || Item_In_Bag[num2].FLD_DAY2 != 0)
							{
								GameMessage("Vâòt phâÒm coì thõÌi haòn không thêÒ sýÒ duòng");
								return;
							}
							if (value55.FLD_RESIDE2 != 16)
							{
								GameMessage("Vâòt phâÒm không phuÌ hõòp!");
								return;
							}
							if (value55.FLD_RESIDE2 == 16)
							{
								if (Item_In_Bag[num2].FLD_MAGIC1 == 0)
								{
									Item_In_Bag[num2].FLD_MAGIC1 = 220000000;
								}
								if (Item_In_Bag[num2].FLD_MAGIC1 == 220000003)
								{
									GameMessage("Max!");
									return;
								}
							}
							if (num3 == 282)
							{
								if (!ClassHcItimes.ContainsKey(1))
								{
									GameMessage("Chýa thêm thuì cýng chiình!");
									Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[ClassHcItimes[1].index]);
									return;
								}
								if (Item_In_Bag[num2].FLD_MAGIC1 != Item_In_Bag[ClassHcItimes[1].index].FLD_MAGIC1)
								{
									GameMessage("2 loaòi thuì cýng phaÒi giôìng nhau!");
									Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[ClassHcItimes[1].index]);
									return;
								}
							}
						}
						HcItimesClass hcItimesClass88 = new HcItimesClass();
						hcItimesClass88.index = num2;
						hcItimesClass88.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(num3 - 280, hcItimesClass88);
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array2, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array2, 39, 56);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item " + num3 + " ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_b79f:
					try
					{
						ClassHcItimes.Clear();
						合成系统解锁();
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item " + num3 + " ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_ae9d:
					try
					{
						if (ClassHcItimes.Count < 2)
						{
							GameMessage("Chýa ðaòt ðuÒ vâòt phâÒm");
							return;
						}
						if (!ClassHcItimes.ContainsKey(1) || !ClassHcItimes.ContainsKey(2))
						{
							GameMessage("Chýa ðaòt ðuÒ vâòt phâÒm");
							return;
						}
						ClassHcItimes[1].得到属性();
						ClassHcItimes[1].强化属性阶段();
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(ClassHcItimes[1].Item_ID, 0), out value53))
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[ClassHcItimes[1].index]);
							return;
						}
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(ClassHcItimes[2].Item_ID, 0), out value54))
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[ClassHcItimes[2].index]);
							return;
						}
						if (得到包裹空位数() < 1)
						{
							Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							return;
						}
						int num49 = Find_Package_Empty(this);
						if (num49 == -1)
						{
							Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							return;
						}
						string[] array22 = World.披风强化总概率.Split(';');
						double num47 = 0.0;
						for (int i = 0; i < new Random((int)DateTime.Now.Ticks).Next(0, 20); i++)
						{
							num47 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array22[0]), int.Parse(array22[1]));
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							int num12 = World.checkLuckyItem(BitConverter.ToInt32(ClassHcItimes[3].Item_ID, 0));
							num47 += (double)num12;
							GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
						}
						if (元宝合成开关 == 1)
						{
						}
						if (base.FLD_VIP == 1)
						{
							num47 = ((World.Newversion < 13) ? (num47 + 100.0 * World.VipSynthesisRate) : (num47 * (1.0 + World.VipSynthesisRate)));
						}
						if (World.合成率 != 0.0)
						{
							num47 = ((World.Newversion < 13) ? (num47 + 100.0 * World.合成率) : (num47 * (1.0 + World.合成率)));
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num47 *= 1.05;
						}
						double num51 = ClassHcItimes[1].Upgrade_Level * 15;
						num51 = ((ClassHcItimes[1].Upgrade_Level <= 10) ? ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化一阶段概率) : ((ClassHcItimes[1].Upgrade_Level > 10 && ClassHcItimes[1].Upgrade_Level <= 25) ? ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化二阶段概率) : ((ClassHcItimes[1].Upgrade_Level > 20 && ClassHcItimes[1].Upgrade_Level <= 35) ? ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化三阶段概率) : ((ClassHcItimes[1].Upgrade_Level > 30 && ClassHcItimes[1].Upgrade_Level <= 45) ? ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化四阶段概率) : ((ClassHcItimes[1].Upgrade_Level > 40 && ClassHcItimes[1].Upgrade_Level <= 60) ? ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化五阶段概率) : ((ClassHcItimes[1].Upgrade_Level > 50 && ClassHcItimes[1].Upgrade_Level <= 70) ? ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化六阶段概率) : ((ClassHcItimes[1].Upgrade_Level <= 60 || ClassHcItimes[1].Upgrade_Level > 85) ? ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化八阶段概率) : ((double)ClassHcItimes[1].Upgrade_Level * World.披风强化七阶段概率))))))));
						if (ClassHcItimes[1].Upgrade_Level >= 99)
						{
							Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
							GameMessage("Mýìc cýõÌng hoìa ðaÞ ðaòt mýìc tôìi ða", 10);
							return;
						}
						if (num47 > num51)
						{
							ClassHcItimes[1].Upgrade_Type = 19;
							ClassHcItimes[1].Upgrade_Level++;
							GameMessage("CýõÌng hoìa thaÌnh công!", 10);
							if (ClassHcItimes[1].Upgrade_Level > 99)
							{
								ClassHcItimes[1].Upgrade_Level = 99;
							}
						}
						else
						{
							ClassHcItimes[1].Upgrade_Type = 19;
							ClassHcItimes[1].Upgrade_Level -= 3;
							GameMessage("CýõÌng hoìa thâìt baòi!", 10);
							if (ClassHcItimes[1].Upgrade_Level < 0)
							{
								ClassHcItimes[1].Upgrade_Level = 0;
							}
						}
						if (ClassHcItimes.ContainsKey(2))
						{
							Send_Packet_Delete_Item(ClassHcItimes[2].index, 1);
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							Send_Packet_Delete_Item(ClassHcItimes[3].index, 1);
						}
						ClassHcItimes[1].设置阶段属性();
						_Make_Item_Option(ClassHcItimes[1].物品全局ID, ClassHcItimes[1].Item_ID, ClassHcItimes[1].index, ClassHcItimes[1].Item_Count, ClassHcItimes[1].Item_Opt);
						ClassHcItimes.Clear();
						合成系统解锁();
						array3[0]++;
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item 285 ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_ac47:
					try
					{
						if (!World.Itme.TryGetValue((int)Item_In_Bag[num2].FLD_PID, out value55))
						{
							GameMessage("Vâòt phâÒm taòm khoìa");
							return;
						}
						if (Item_In_Bag[num2].物品绑定)
						{
							GameMessage("Vâòt phâÒm ðaÞ biò khoìa!");
							return;
						}
						if (ClassHcItimes.ContainsKey(num3 - 270))
						{
							GameMessage("ÐaÞ coì lôÞi xaÒy ra (truÌng)!");
							return;
						}
						if (num3 == 271)
						{
							if (Item_In_Bag[num2].FLD_DAY1 != 0 || Item_In_Bag[num2].FLD_DAY2 != 0)
							{
								GameMessage("Vâòt phâÒm coì thõÌi haòn không thêÒ sýÒ duòng");
								return;
							}
							if (value55.FLD_RESIDE2 != 16)
							{
								GameMessage("Vâòt phâÒm không phuÌ hõòp!");
								return;
							}
						}
						HcItimesClass hcItimesClass88 = new HcItimesClass();
						hcItimesClass88.index = num2;
						hcItimesClass88.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(num3 - 270, hcItimesClass88);
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array2, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array2, 39, 56);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item " + num3 + " ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_ab8f:
					try
					{
						ClassHcItimes.Clear();
						合成系统解锁();
						Buffer.BlockCopy(array3, 0, array2, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 27, 4);
					}
					catch (Exception ex68)
					{
						Form1.WriteLine(1, "Upgrade_Item " + num3 + " ERROR![" + base.Userid + "]-[" + base.UserName + "]" + ex68.Message);
						return;
					}
					goto IL_1665f;
				IL_16037:
					try
					{
						if (ClassHcItimes.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass92 = null;
						HcItimesClass hcItimesClass93 = null;
						HcItimesClass hcItimesClass94 = null;
						if (ClassHcItimes.ContainsKey(2))
						{
							hcItimesClass92 = ClassHcItimes[2];
						}
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass93 = ClassHcItimes[1];
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							hcItimesClass94 = ClassHcItimes[3];
						}
						if (hcItimesClass92 == null || BitConverter.ToInt64(Item_In_Bag[hcItimesClass92.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass92.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass93.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass93.物品全局ID, 0) || (hcItimesClass94 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass94.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass94.物品全局ID, 0)) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass92.Item_ID, 0), out ItmeClass _))
						{
							return;
						}
						if (Item_In_Bag[hcItimesClass92.index].物品绑定)
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass92.index]);
							return;
						}
						Random random8 = new Random((int)DateTime.Now.Ticks);
						double num52 = random8.Next(0, 100);
						double num53 = random8.Next(0, 100);
						if (hcItimesClass94 != null)
						{
							num3 = BitConverter.ToInt32(hcItimesClass94.Item_ID, 0);
							int num12 = World.checkLuckyItem(num3);
							num52 += (double)num12;
							GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
						}
						if (base.Item_Upgrade_Lucky_Add != 0.0)
						{
							num52 += 100.0 * base.Item_Upgrade_Lucky_Add;
						}
						if (base.Character_Upgrade_Lucky != 0.0)
						{
							num52 += 100.0 * base.Character_Upgrade_Lucky;
						}
						if (元宝合成开关 == 1)
						{
							num52 += 5.0;
						}
						if (base.FLD_VIP == 1)
						{
							num52 = ((World.Newversion < 13) ? (num52 + 100.0 * World.VipSynthesisRate) : (num52 * (1.0 + World.VipSynthesisRate)));
						}
						if (World.合成率 != 0.0)
						{
							num52 = ((World.Newversion < 13) ? (num52 + 100.0 * World.合成率) : (num52 * (1.0 + World.合成率)));
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num52 *= 1.05;
						}
						if (num52 >= num53)
						{
							if (base.FLD_VIP != 1)
							{
							}
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Send_Packet_Delete_Item(hcItimesClass93.index, 1);
						if (hcItimesClass94 != null)
						{
							Send_Packet_Delete_Item(hcItimesClass94.index, 1);
						}
						if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass92.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass92.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass92.物品全局ID, 0) && num52 >= num53)
						{
							int value57 = BitConverter.ToInt32(hcItimesClass92.Item_ID, 0) + 1;
							Send_Packet_Delete_Item(hcItimesClass92.index, 1);
							_Make_Item_Option(hcItimesClass92.物品全局ID, BitConverter.GetBytes(value57), hcItimesClass92.index, hcItimesClass92.Item_Count, hcItimesClass92.Item_Opt);
						}
						Item_In_Bag[hcItimesClass92.index].LockMove = false;
						ClassHcItimes.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex71)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex71.Message);
						return;
					}
					goto IL_1660a;
				IL_1660a:
					if (num != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send多包(array, array.Length);
						}
					}
					Update_Money_Weight();
					goto IL_1665f;
				IL_10d68:
					try
					{
						if (ClassHcItimes.Count == 0 || !ClassHcItimes.ContainsKey(2) || ClassHcItimes.ContainsKey(1) || Item_In_Bag[num2].物品绑定)
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						HcItimesClass hcItimesClass95 = new HcItimesClass();
						hcItimesClass95.index = num2;
						hcItimesClass95.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						ClassHcItimes.Add(1, hcItimesClass95);
					}
					catch (Exception ex72)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成1 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex72.Message);
						return;
					}
					goto IL_1660a;
				IL_12d94:
					if (ClassHcItimes.Count > 0)
					{
						HcItimesClass hcItimesClass96 = null;
						HcItimesClass hcItimesClass97 = null;
						HcItimesClass hcItimesClass98 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass96 = ClassHcItimes[1];
							if (ClassHcItimes.ContainsKey(2))
							{
								hcItimesClass97 = ClassHcItimes[2];
								if (ClassHcItimes.ContainsKey(3))
								{
									hcItimesClass98 = ClassHcItimes[3];
								}
								if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass96.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass96.物品全局ID, 0) && BitConverter.ToInt64(Item_In_Bag[hcItimesClass97.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass97.物品全局ID, 0) && (hcItimesClass98 == null || BitConverter.ToInt64(Item_In_Bag[hcItimesClass98.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass98.物品全局ID, 0)))
								{
									if (Item_In_Bag[hcItimesClass96.index].物品绑定)
									{
										Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass96.index]);
									}
									else
									{
										double num54 = new Random((int)DateTime.Now.Ticks).Next(0, 100);
										double num55 = 40.0;
										if (hcItimesClass98 != null)
										{
											num3 = BitConverter.ToInt32(hcItimesClass98.Item_ID, 0);
											int num12 = World.checkLuckyItem(num3);
											num54 += (double)num12;
											GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
										}
										if (元宝合成开关 == 1)
										{
											num54 += 5.0;
										}
										if (base.FLD_VIP == 1)
										{
											num54 = ((World.Newversion < 13) ? (num54 + 100.0 * World.VipSynthesisRate) : (num54 * (1.0 + World.VipSynthesisRate)));
										}
										if (World.合成率 != 0.0)
										{
											num54 = ((World.Newversion < 13) ? (num54 + 100.0 * World.合成率) : (num54 * (1.0 + World.合成率)));
										}
										if (公有药品.ContainsKey(1008000312))
										{
											num54 *= 1.05;
										}
										if (num54 >= num55)
										{
											hcItimesClass96.FLD_FJ_中级附魂 = 0;
											Send_Packet_Delete_Item(hcItimesClass96.index, 1);
											_Make_Item_Option(hcItimesClass96.物品全局ID, hcItimesClass96.Item_ID, hcItimesClass96.index, hcItimesClass96.Item_Count, hcItimesClass96.Item_Opt);
											if (base.FLD_VIP == 1)
											{
											}
											if (hcItimesClass97 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass97.index, 1);
											}
											if (hcItimesClass98 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass98.index, 1);
											}
											Item_In_Bag[hcItimesClass96.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
											Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										}
										else
										{
											if (hcItimesClass97 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass97.index, 1);
											}
											if (hcItimesClass98 != null)
											{
												Send_Packet_Delete_Item(hcItimesClass98.index, 1);
											}
											Item_In_Bag[hcItimesClass96.index].LockMove = false;
											ClassHcItimes.Clear();
											合成系统解锁();
											元宝合成开关 = 0;
											Send_Packet_Tip_Upgrade_Item(num, 0, 0, Item_In_Bag[num2]);
										}
									}
								}
							}
						}
					}
					goto end_IL_029c;
				IL_1665f:
					if (num != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send多包(array2, array2.Length);
						}
					}
					Update_Money_Weight();
					goto end_IL_029c;
				IL_10436:
					try
					{
						if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(3))
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						HcItimesClass hcItimesClass99 = new HcItimesClass();
						hcItimesClass99.index = num2;
						hcItimesClass99.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						ClassHcItimes.Add(3, hcItimesClass99);
						Item_In_Bag[num2].LockMove = true;
					}
					catch (Exception ex73)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex73.Message);
						return;
					}
					goto IL_1660a;
				IL_14cd9:
					try
					{
						if (ClassHcItimes.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass100 = null;
						if (!ClassHcItimes.ContainsKey(1) || Item_In_Bag[ClassHcItimes[1].index].FLD_DAY1 != 0 || Item_In_Bag[ClassHcItimes[1].index].FLD_DAY2 != 0)
						{
							Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
							return;
						}
						hcItimesClass100 = ClassHcItimes[1];
						if (World.披风分解消耗类型 == 0)
						{
							if (base.Player_Money < World.分解消耗的数量)
							{
								GameMessage("您的金币不足需要扣除金币" + World.分解消耗的数量 + "个,才可以进行分解");
								Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
								return;
							}
							base.Player_Money -= World.分解消耗的数量;
							Update_Money_Weight();
						}
						else
						{
							if (base.FLD_RXPIONT < World.分解消耗的数量)
							{
								Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
								GameMessage("您的元宝不足需要扣除元宝" + World.分解消耗的数量 + "个,才可以进行分解");
								return;
							}
							Add_Del_Rxpiont(World.分解消耗的数量, 0);
							Save_data_Rxpiont();
						}
						if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass100.Item_ID, 0), out ItmeClass value58))
						{
							int num56 = 1;
							int value59 = 0;
							if (得到包裹空位数() < 2)
							{
								Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
							}
							else
							{
								num56 = new Random((int)DateTime.Now.Ticks).Next(3, 6);
								if (Find_Package_Empty(this) != -1)
								{
									if (value58.FLD_RESIDE2 == 12)
									{
										value59 = 1000000545;
									}
									Send_Packet_Delete_Item(hcItimesClass100.index, 1);
									byte[] bytes13 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
									int 位置 = Find_Package_Empty(this);
									bytes13 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
									增加物品2(bytes13, BitConverter.GetBytes(value59), 位置, BitConverter.GetBytes(num56), new byte[56]);
									Send_Packet_Tip_Upgrade_Item(num, 1, num56, Item_In_Bag[num2]);
									ClassHcItimes.Clear();
									合成系统解锁();
									元宝合成开关 = 0;
								}
								else
								{
									Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
								}
							}
							return;
						}
					}
					catch (Exception ex74)
					{
						Form1.WriteLine(1, "218披风分解 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex74);
						return;
					}
					goto IL_1660a;
				IL_13e23:
					int num57 = 0;
					try
					{
						HcItimesClass hcItimesClass101 = null;
						HcItimesClass hcItimesClass102 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass101 = ClassHcItimes[1];
							hcItimesClass101.得到属性();
							hcItimesClass101.强化属性阶段();
							num57 = 1;
							HcItimesClass value60 = null;
							if (ClassHcItimes.ContainsKey(2))
							{
								value60 = ClassHcItimes[2];
							}
							if (ClassHcItimes.ContainsKey(3))
							{
								hcItimesClass102 = ClassHcItimes[3];
							}
							if (hcItimesClass102 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass102.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass102.物品全局ID, 0))
							{
								return;
							}
							if (Item_In_Bag[hcItimesClass101.index].FLD_DAY1 == 0 && Item_In_Bag[hcItimesClass101.index].FLD_DAY2 == 0)
							{
								num57 = 2;
								if (ClassHcItimes.TryGetValue(2, out value60))
								{
									if (BitConverter.ToInt32(value60.Item_Count, 0) < 1)
									{
										Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
									}
									else
									{
										num57 = 3;
										if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass101.Item_ID, 0), out ItmeClass value61))
										{
											if (value61.FLD_RESIDE2 == 12)
											{
												num57 = 4;
												if (Item_In_Bag[hcItimesClass101.index].物品绑定)
												{
													Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass101.index]);
												}
												else
												{
													if (World.披风强化消耗类型 == 0)
													{
														if (base.Player_Money < World.强化消耗的数量)
														{
															Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
															GameMessage("您的元宝不足需要扣除金币" + World.强化消耗的数量 + "两,才可以进行强化");
															return;
														}
														base.Player_Money -= World.强化消耗的数量;
														Update_Money_Weight();
													}
													else
													{
														if (base.FLD_RXPIONT < World.强化消耗的数量)
														{
															Send_Packet_Tip_Upgrade_Item(num, 4, 0, Item_In_Bag[num2]);
															GameMessage("您的元宝不足需要扣除" + World.强化消耗的数量 + "元宝,才可以进行强化");
															return;
														}
														Add_Del_Rxpiont(World.强化消耗的数量, 0);
														Save_data_Rxpiont();
													}
													num57 = 5;
													string[] array22 = World.披风强化总概率.Split(';');
													double num58 = new Random((int)DateTime.Now.Ticks).Next(int.Parse(array22[0]), (int)((double)int.Parse(array22[1]) * 1.5));
													double num59 = hcItimesClass101.Upgrade_Level * 10;
													num59 = ((hcItimesClass101.Upgrade_Level <= 10) ? ((double)hcItimesClass101.Upgrade_Level * World.披风强化一阶段概率) : ((hcItimesClass101.Upgrade_Level > 10 && hcItimesClass101.Upgrade_Level <= 20) ? ((double)hcItimesClass101.Upgrade_Level * World.披风强化一阶段概率) : ((hcItimesClass101.Upgrade_Level > 20 && hcItimesClass101.Upgrade_Level <= 30) ? ((double)hcItimesClass101.Upgrade_Level * World.披风强化二阶段概率) : ((hcItimesClass101.Upgrade_Level > 30 && hcItimesClass101.Upgrade_Level <= 40) ? ((double)hcItimesClass101.Upgrade_Level * World.披风强化三阶段概率) : ((hcItimesClass101.Upgrade_Level > 40 && hcItimesClass101.Upgrade_Level <= 50) ? ((double)hcItimesClass101.Upgrade_Level * World.披风强化四阶段概率) : ((hcItimesClass101.Upgrade_Level > 50 && hcItimesClass101.Upgrade_Level <= 60) ? ((double)hcItimesClass101.Upgrade_Level * World.披风强化五阶段概率) : ((hcItimesClass101.Upgrade_Level <= 60 || hcItimesClass101.Upgrade_Level > 70) ? ((double)hcItimesClass101.Upgrade_Level * World.披风强化七阶段概率) : ((double)hcItimesClass101.Upgrade_Level * World.披风强化六阶段概率))))))));
													if (hcItimesClass102 != null)
													{
														num3 = BitConverter.ToInt32(hcItimesClass102.Item_ID, 0);
														int num12 = World.checkLuckyItem(num3);
														num58 += (double)num12;
														GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
													}
													if (hcItimesClass101.Upgrade_Level >= 99)
													{
														ClassHcItimes.Clear();
														Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
														GameMessage("Mýìc cýõÌng hoìa ðaÞ ðaòt mýìc tôìi ða");
													}
													else
													{
														num57 = 6;
														if (元宝合成开关 == 1)
														{
															num58 += 5.0;
														}
														if (base.FLD_VIP == 1)
														{
															num58 = ((World.Newversion < 13) ? (num58 + 100.0 * World.VipSynthesisRate) : (num58 * (1.0 + World.VipSynthesisRate)));
														}
														if (World.合成率 != 0.0)
														{
															num58 = ((World.Newversion < 13) ? (num58 + 100.0 * World.合成率) : (num58 * (1.0 + World.合成率)));
														}
														if (公有药品.ContainsKey(1008000312))
														{
															num58 *= 1.05;
														}
														if (num58 >= num59)
														{
															hcItimesClass101.Upgrade_Type = 4;
															if (value60 == null)
															{
																return;
															}
															if (BitConverter.ToInt32(value60.Item_ID, 0) == 1000000545)
															{
																hcItimesClass101.Upgrade_Level++;
															}
															if (hcItimesClass101.Upgrade_Level > 99)
															{
																hcItimesClass101.Upgrade_Level = 99;
																return;
															}
															if (hcItimesClass101.Upgrade_Level >= World.江湖快报强化阶段)
															{
																World.发送强化合成公告(BitConverter.ToInt32(hcItimesClass101.Item_ID, 0), base.UserName, hcItimesClass101.Upgrade_Level, base.Player_Zx);
															}
															num57 = 7;
															hcItimesClass101.设置阶段属性();
															num57 = 8;
															if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass101.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass101.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
															{
																Send_Packet_Delete_Item(hcItimesClass101.index, 1);
																_Make_Item_Option(hcItimesClass101.物品全局ID, hcItimesClass101.Item_ID, hcItimesClass101.index, hcItimesClass101.Item_Count, hcItimesClass101.Item_Opt);
															}
															num57 = 9;
															Item_In_Bag[hcItimesClass101.index].LockMove = false;
															if (base.FLD_VIP == 1)
															{
															}
															if (World.披风强化消耗类型 == 0)
															{
																Send_Packet_Tip_Upgrade_Item(num, 0, World.强化消耗的数量, Item_In_Bag[num2]);
															}
															GameMessage("CýõÌng hoìa thaÌnh công", 10);
															if (hcItimesClass101.Upgrade_Level >= 0)
															{
																string txt = "[ " + BitConverter.ToInt32(hcItimesClass101.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass101.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [ " + num58 + "/" + num59 + " - " + hcItimesClass101.Upgrade_Level + " ] || NguyenLieu: [ " + BitConverter.ToInt32(value60.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(value60.Item_Count, 0) + " ]";
																logo.logcuonghoaaochoang(txt);
															}
														}
														else if (hcItimesClass101.Upgrade_Level >= 4)
														{
															hcItimesClass101.Upgrade_Type = 4;
															hcItimesClass101.Upgrade_Level -= 3;
															if (hcItimesClass101.Upgrade_Level > 99)
															{
																hcItimesClass101.Upgrade_Level = 99;
															}
															hcItimesClass101.设置阶段属性();
															num57 = 10;
															if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass101.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass101.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass101.物品全局ID, 0))
															{
																Send_Packet_Delete_Item(hcItimesClass101.index, 1);
																_Make_Item_Option(hcItimesClass101.物品全局ID, hcItimesClass101.Item_ID, hcItimesClass101.index, hcItimesClass101.Item_Count, hcItimesClass101.Item_Opt);
															}
															num57 = 11;
															Item_In_Bag[hcItimesClass101.index].LockMove = false;
															if (World.披风强化消耗类型 == 0)
															{
																Send_Packet_Tip_Upgrade_Item(num, 0, World.强化消耗的数量, Item_In_Bag[num2]);
															}
															GameMessage("CýõÌng hoìa thâìt baòi, trõÒ vêÌ mýìc <" + hcItimesClass101.Upgrade_Level + ">", 10);
															if (hcItimesClass101.Upgrade_Level >= 0)
															{
																string txt = "[ " + BitConverter.ToInt32(hcItimesClass101.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(hcItimesClass101.Item_ID, 0) + " ] - [ " + base.UserName + " ] - [ " + num58 + "/" + num59 + " - " + hcItimesClass101.Upgrade_Level + " ] || NguyenLieu: [ " + BitConverter.ToInt32(value60.物品全局ID, 0) + " ] - [ " + BitConverter.ToInt32(value60.Item_Count, 0) + " ] - Faild";
																logo.logcuonghoaaochoang(txt);
															}
														}
														num57 = 15;
														if (value60 != null)
														{
															num57 = 16;
															Send_Packet_Delete_Item(value60.index, 1);
														}
														if (hcItimesClass102 != null)
														{
															Send_Packet_Delete_Item(hcItimesClass102.index, 1);
														}
														ClassHcItimes.Clear();
														合成系统解锁();
														元宝合成开关 = 0;
													}
												}
											}
										}
										else
										{
											Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
										}
									}
								}
								else
								{
									Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
									GameMessage("请放入披风强化布");
								}
								return;
							}
						}
						Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
						return;
					}
					catch (Exception ex75)
					{
						Form1.WriteLine(1, "披风强化217 出错 " + base.Client.WorldId + "|" + base.Client.ToString() + " " + num57 + " " + ex75);
					}
					goto IL_1660a;
				IL_11eca:
					try
					{
						if (ClassHcItimes.TryGetValue(1, out value32))
						{
							Item_In_Bag[value32.index].LockMove = false;
							ClassHcItimes.Clear();
							合成系统解锁();
						}
						打开仓库中 = false;
						元宝合成开关 = 0;
						Buffer.BlockCopy(array3, 0, array, 11, 2);
					}
					catch (Exception ex76)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成4 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex76.Message);
						return;
					}
					goto IL_1660a;
				IL_10689:
					try
					{
						if (ClassHcItimes.Count <= 0)
						{
							return;
						}
						HcItimesClass hcItimesClass103 = null;
						HcItimesClass hcItimesClass104 = null;
						HcItimesClass hcItimesClass105 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass103 = ClassHcItimes[1];
						}
						if (ClassHcItimes.ContainsKey(2))
						{
							hcItimesClass104 = ClassHcItimes[2];
						}
						if (ClassHcItimes.ContainsKey(3))
						{
							hcItimesClass105 = ClassHcItimes[3];
						}
						ItmeClass value62 = default(ItmeClass);
						if (hcItimesClass103 == null || BitConverter.ToInt64(Item_In_Bag[hcItimesClass103.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass103.物品全局ID, 0) || BitConverter.ToInt64(Item_In_Bag[hcItimesClass104.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass104.物品全局ID, 0) || (hcItimesClass105 != null && BitConverter.ToInt64(Item_In_Bag[hcItimesClass105.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass105.物品全局ID, 0)) || !World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass103.Item_ID, 0), out value62))
						{
							return;
						}
						if (value62.FLD_RESIDE2 != 1 && value62.FLD_RESIDE2 != 4)
						{
							Form1.WriteLine(6, "Upgrade_Item 强化 BUG1[" + BitConverter.ToInt32(hcItimesClass103.Item_ID, 0) + "]-[" + BitConverter.ToInt32(hcItimesClass104.Item_ID, 0) + "]");
							return;
						}
						if (Item_In_Bag[hcItimesClass103.index].物品绑定)
						{
							Send_Packet_Tip_Upgrade_Item(num, 2, 0, Item_In_Bag[hcItimesClass103.index]);
							return;
						}
						double num60 = new Random((int)DateTime.Now.Ticks).Next(0, 100);
						double num61 = (hcItimesClass103.FLD_FJ_觉醒 * 20 >= 100) ? 99.0 : ((double)hcItimesClass103.FLD_FJ_觉醒);
						if (hcItimesClass103.FLD_FJ_觉醒 >= World.手工附魂最高阶段)
						{
							ClassHcItimes.Clear();
							Buffer.BlockCopy(array3, 0, array, 11, 2);
							合成系统解锁();
							元宝合成开关 = 0;
							return;
						}
						if (hcItimesClass105 != null)
						{
							num3 = BitConverter.ToInt32(hcItimesClass105.Item_ID, 0);
							int num12 = World.checkLuckyItem(num3);
							num60 += (double)num12;
							GameMessage("BuÌa may mãìn: " + num12 + "%", 24);
						}
						if (base.Item_Upgrade_Lucky_Add != 0.0)
						{
							num60 += 100.0 * base.Item_Upgrade_Lucky_Add;
						}
						if (base.Character_Upgrade_Lucky != 0.0)
						{
							num60 += 100.0 * base.Character_Upgrade_Lucky;
						}
						if (元宝合成开关 == 1)
						{
						}
						if (base.FLD_VIP == 1)
						{
							num60 = ((World.Newversion < 13) ? (num60 + 100.0 * World.VipSynthesisRate) : (num60 * (1.0 + World.VipSynthesisRate)));
						}
						if (World.合成率 != 0.0)
						{
							num60 = ((World.Newversion < 13) ? (num60 + 100.0 * World.合成率) : (num60 * (1.0 + World.合成率)));
						}
						if (公有药品.ContainsKey(1008000312))
						{
							num60 *= 1.05;
						}
						if (World.附魂合成率增加 != 0.0)
						{
							num60 += 100.0 * World.附魂合成率增加;
						}
						if (num60 >= num61)
						{
							hcItimesClass103.FLD_FJ_觉醒++;
							if (base.FLD_VIP != 1)
							{
							}
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 13, 4);
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Send_Packet_Delete_Item(hcItimesClass104.index, 1);
						if (hcItimesClass105 != null)
						{
							Send_Packet_Delete_Item(hcItimesClass105.index, 1);
						}
						if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass103.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass103.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass103.物品全局ID, 0))
						{
							Send_Packet_Delete_Item(hcItimesClass103.index, 1);
							_Make_Item_Option(hcItimesClass103.物品全局ID, hcItimesClass103.Item_ID, hcItimesClass103.index, hcItimesClass103.Item_Count, hcItimesClass103.Item_Opt);
						}
						Item_In_Bag[hcItimesClass103.index].LockMove = false;
						ClassHcItimes.Clear();
						合成系统解锁();
						元宝合成开关 = 0;
					}
					catch (Exception ex77)
					{
						元宝合成开关 = 0;
						Form1.WriteLine(1, "Upgrade_Item 合成属性阶段 合成 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex77.Message);
						return;
					}
					goto IL_1660a;
				IL_9e3d:
					if (!ClassHcItimes.ContainsKey(2))
					{
						HcItimesClass hcItimesClass106 = null;
						if (ClassHcItimes.ContainsKey(1))
						{
							hcItimesClass106 = ClassHcItimes[1];
							if (World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass106.Item_ID, 0), out ItmeClass value63))
							{
								if (value63.FLD_LEVEL >= 100)
								{
									if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000640)
									{
										Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
									}
									else if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) < 2)
									{
										Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
									}
									else
									{
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										HcItimesClass hcItimesClass107 = new HcItimesClass();
										hcItimesClass107.index = num2;
										hcItimesClass107.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										if (!ClassHcItimes.ContainsKey(2))
										{
											ClassHcItimes.Add(2, hcItimesClass107);
										}
									}
								}
								else
								{
									if (value63.FLD_LEVEL < 80)
									{
										goto IL_1660a;
									}
									if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000640)
									{
										Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
									}
									else if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) < 1)
									{
										Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
									}
									else
									{
										Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
										HcItimesClass hcItimesClass108 = new HcItimesClass();
										hcItimesClass108.index = num2;
										hcItimesClass108.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
										Item_In_Bag[num2].LockMove = true;
										if (!ClassHcItimes.ContainsKey(2))
										{
											ClassHcItimes.Add(2, hcItimesClass108);
										}
									}
								}
							}
							else
							{
								Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
							}
						}
						else
						{
							Send_Packet_Tip_Upgrade_Item(num, 5, 0, Item_In_Bag[num2]);
						}
					}
					goto end_IL_029c;
				IL_a8a0:
					try
					{
						if (ClassHcItimes.Count == 0 || ClassHcItimes.ContainsKey(3))
						{
							return;
						}
						Buffer.BlockCopy(array3, 0, array, 11, 2);
						Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
						Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 99, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 103 + ((World.Newversion >= 14) ? 4 : 0), 4);
						HcItimesClass hcItimesClass109 = new HcItimesClass();
						hcItimesClass109.index = num2;
						hcItimesClass109.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						ClassHcItimes.Add(3, hcItimesClass109);
						Item_In_Bag[num2].LockMove = true;
					}
					catch (Exception ex78)
					{
						Form1.WriteLine(1, "Upgrade_Item 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex78.Message);
						return;
					}
					goto IL_1660a;
				IL_a7a9:
					Thread.Sleep(500);
					if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != 1000000545)
					{
						Send_Packet_Tip_Upgrade_Item(num, 7, 0, Item_In_Bag[num2]);
					}
					else if (BitConverter.ToInt32(Item_In_Bag[num2].Item_Amount, 0) < 1)
					{
						Send_Packet_Tip_Upgrade_Item(num, 8, 0, Item_In_Bag[num2]);
					}
					else
					{
						HcItimesClass hcItimesClass110 = new HcItimesClass();
						hcItimesClass110.index = num2;
						hcItimesClass110.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
						Item_In_Bag[num2].LockMove = true;
						if (!ClassHcItimes.ContainsKey(2))
						{
							ClassHcItimes.Add(2, hcItimesClass110);
						}
						Send_Packet_Tip_Upgrade_Item(num, 1, 0, Item_In_Bag[num2]);
					}
				end_IL_029c:;
				}
				catch (Exception ex79)
				{
					元宝合成开关 = 0;
					Form1.WriteLine(1, "Upgrade_Item出错![" + base.Userid + "]-[" + base.UserName + "][" + num + "]" + ex79.Message);
				}
			}
		}

		public void 合成系统加锁()
		{
			for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
			{
				Item_In_Bag[i].LockMove = true;
			}
		}

		public void 合成系统解锁()
		{
			for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
			{
				Item_In_Bag[i].LockMove = false;
			}
		}

		public void 换人物名(byte[] data, int length)
		{
			PacketVerify(data, length);
			string hex = "AA551F00012C01910010002F000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			try
			{
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 27, array2, 0, 1);
				if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array2, 0)].Get_Byte_Item_PID, 0) == 1008000126)
				{
					byte[] array3 = new byte[16];
					for (int i = 0; i < 16 && data[11 + i] != 0; i++)
					{
						array3[i] = data[11 + i];
					}
					string text = Encoding.GetEncoding(1252).GetString(array3).Trim()
						.Replace("\0", "")
						.Trim();
					if (base.Guild_ID != 0)
					{
						GameMessage("Vui loÌngt hoaìt bang hôòi", 9);
					}
					if (base.FLD_Teacher != "" || base.FLD_Student1 != "" || base.FLD_Student2 != "" || base.FLD_Student3 != "")
					{
						GameMessage("Vui loÌng huÒy quan hêò sý ðôÌ", 9);
					}
					else if (Party_ID != 0)
					{
						GameMessage("Vui loÌng rõÌi hoÒi tôÒ ðôòi", 9);
					}
					else if (base.FLD_Couple_Name != "")
					{
						GameMessage("Vui loÌng ly hôn", 9);
					}
					else
					{
						DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Char SET FLD_徒弟1='{1}' WHERE FLD_徒弟1='{0}'", base.UserName, text), "GameServer");
						DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Char SET FLD_徒弟2='{1}' WHERE FLD_徒弟2='{0}'", base.UserName, text), "GameServer");
						DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Char SET FLD_徒弟3='{1}' WHERE FLD_徒弟3='{0}'", base.UserName, text), "GameServer");
						DBA.ExeSqlCommand(string.Format("UPDATE TBL_XWWL_Char SET FLD_师傅='{1}' WHERE FLD_师傅='{0}'", base.UserName, text), "GameServer");
						foreach (Players value in World.AllConnectedChars.Values)
						{
							if (value.FLD_Student1 == base.UserName)
							{
								value.FLD_Student1 = text;
							}
							if (value.FLD_Student2 == base.UserName)
							{
								value.FLD_Student2 = text;
							}
							if (value.FLD_Student3 == base.UserName)
							{
								value.FLD_Student3 = text;
							}
							if (value.FLD_Teacher == base.UserName)
							{
								value.FLD_Teacher = text;
							}
						}
						string sqlCommand = $"UPDATE TBL_XWWL_Char SET FLD_NAME = @sTemp WHERE FLD_ID = @Userid AND FLD_NAME = @Username";
						SqlParameter[] prams = new SqlParameter[3]
						{
							SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid),
							SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
							SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
						};
						DBA.ExeSqlCommand(sqlCommand, prams);
						sqlCommand = $"UPDATE TBL_XWWL_Warehouse SET FLD_NAME = @sTemp WHERE FLD_ID = @Userid AND FLD_NAME = @Username";
						SqlParameter[] prams2 = new SqlParameter[3]
						{
							SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid),
							SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.UserName),
							SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
						};
						DBA.ExeSqlCommand(sqlCommand, prams2);
						base.UserName = text;
						Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
						Initialize_Equip_Item();
						移动离开当前地图(base.Player_FLD_Map);
						获取复查范围玩家();
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						try
						{
							eval_i = false;
							退出中 = true;
							Logout();
							string hex2 = "AA5513000000005700040004000000000000000000000055AA";
							string hex3 = "AA551700000000630008000100000000000001000000000000000055AA";
							byte[] array4 = Converter.hexStringToByte(hex2);
							byte[] array5 = Converter.hexStringToByte(hex3);
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array5, 5, 2);
							if (base.Client != null)
							{
								base.Client.Send(array4, array4.Length);
							}
							if (base.Client != null)
							{
								base.Client.Send(array5, array5.Length);
							}
						}
						catch
						{
						}
					}
				}
			}
			catch (Exception)
			{
				GameMessage("Error !!! Please contact GM", 9);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 获取复查范围Npc()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_获取复查范围Npc");
			}
			try
			{
				if (NpcList != null)
				{
					Dictionary<int, NpcClass> dictionary = new Dictionary<int, NpcClass>();
					Dictionary<int, NpcClass> dictionary2 = new Dictionary<int, NpcClass>();
					foreach (NpcClass value in NpcList.Values)
					{
						if (!查找范围Npc(300, value))
						{
							NpcList.Remove(value.FldIndex);
							if (!dictionary2.ContainsKey(value.FldIndex))
							{
								dictionary2.Add(value.FldIndex, value);
							}
							if (value.Contains(this))
							{
								value.PlayList_Remove(this);
							}
						}
					}
					Queue queue = Queue.Synchronized(new Queue());
					foreach (NpcClass value2 in MapClass.GetnpcTemplate(base.Player_FLD_Map).Values)
					{
						queue.Enqueue(value2);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "获取复查范围Npc2");
						}
						NpcClass npcClass = (NpcClass)queue.Dequeue();
						if (查找范围Npc(300, npcClass))
						{
							if (!NpcList.ContainsKey(npcClass.FldIndex))
							{
								NpcList.Add(npcClass.FldIndex, npcClass);
								npcClass.PlayList_Add(this);
								if (!dictionary.ContainsKey(npcClass.FldIndex) && !npcClass.Npc死亡)
								{
									dictionary.Add(npcClass.FldIndex, npcClass);
								}
							}
						}
						else if (NpcList.ContainsKey(npcClass.FldIndex))
						{
							NpcList.Remove(npcClass.FldIndex);
							npcClass.PlayList_Remove(this);
							if (!dictionary2.ContainsKey(npcClass.FldIndex))
							{
								dictionary2.Add(npcClass.FldIndex, npcClass);
							}
						}
					}
					NpcClass.更新NPC删除数据(dictionary2, this);
					NpcClass.更新npc数据(dictionary, this);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "获取复查范围NPC()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex);
			}
		}

		public void 获取复查范围地面物品()
		{
			if (地面物品列表 != null)
			{
				try
				{
					Queue queue = Queue.Synchronized(new Queue());
					Dictionary<long, GroundItems> dictionary = new Dictionary<long, GroundItems>();
					foreach (GroundItems value in 地面物品列表.Values)
					{
						if (!World.ItmeTeM.ContainsKey(value.id))
						{
							queue.Enqueue(value.id);
							if (地面物品列表.ContainsKey(value.id))
							{
								地面物品列表.Remove(value.id);
							}
						}
					}
					foreach (GroundItems value2 in World.ItmeTeM.Values)
					{
						if (查找范围地面物品(300, value2))
						{
							if (!地面物品列表.ContainsKey(value2.id))
							{
								地面物品列表.Add(value2.id, value2);
								if (value2.PlayList != null)
								{
									if (!value2.PlayList.ContainsKey(base.UserSessionID))
									{
										value2.PlayList.Add(base.UserSessionID, this);
									}
									if (!dictionary.ContainsKey(value2.id))
									{
										dictionary.Add(value2.id, value2);
									}
								}
							}
						}
						else if (地面物品列表.ContainsKey(value2.id))
						{
							queue.Enqueue(value2.id);
							地面物品列表.Remove(value2.id);
						}
					}
					while (queue.Count > 0)
					{
						long 全局ID = (long)queue.Dequeue();
						地面物品消失(全局ID);
					}
					地面物品增加(dictionary);
				}
				catch (Exception)
				{
				}
			}
		}

		public void 获取复查范围玩家(int wait = 0)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_获取复查范围玩家");
			}
			try
			{
				if (PlayList != null)
				{
					Queue queue = Queue.Synchronized(new Queue());
					Queue queue2 = Queue.Synchronized(new Queue());
					Queue queue3 = Queue.Synchronized(new Queue());
					foreach (Players value in World.AllConnectedChars.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "获取复查范围玩家");
						}
						Players players = (Players)queue.Dequeue();
						if (players.Client != null && players.Client.Running && players.UserName != base.UserName)
						{
							if (Check_Radius_Player(300, players))
							{
								if (!PlayList.ContainsKey(players.UserSessionID) && base.Player_FLD_Map == players.Player_FLD_Map)
								{
									PlayList.Add(players.UserSessionID, players);
									queue2.Enqueue(players);
									更新人物数据(players);
									players.Update_Equipment_Effectiveness(this);
								}
							}
							else if (PlayList.ContainsKey(players.UserSessionID))
							{
								PlayList.Remove(players.UserSessionID);
								queue3.Enqueue(players);
							}
						}
					}
					if (base.Player_FLD_Map != 801 && DateTime.Now.Subtract(time_MoveTime).TotalMilliseconds >= 2000.0)
					{
						time_MoveTime = DateTime.Now;
						Thread.Sleep(wait);
					}
					while (queue2.Count > 0)
					{
						Players players2 = (Players)queue2.Dequeue();
						if (players2.Client != null && players2.Client.Running)
						{
							if (!players2.PlayList.ContainsKey(base.UserSessionID))
							{
								players2.PlayList.Add(base.UserSessionID, this);
							}
							if (Player_Invisible == 0 && base.Player_FLD_Map == players2.Player_FLD_Map)
							{
								players2.更新人物数据(this);
								Update_Equipment_Effectiveness(players2);
								if (players2.Player_FLD_HP <= 0)
								{
									string hex = "AA550F0000972788000000000000000000000055AA";
									byte[] array = Converter.hexStringToByte(hex);
									Buffer.BlockCopy(BitConverter.GetBytes(players2.UserSessionID), 0, array, 5, 2);
									base.Client.Send(array, array.Length);
								}
								if (players2.vancong == 1 && players2.CheckHackSpeed_Kep_Skill == 0)
								{
									string hex = "AA5527000000003D0018000E2C09000101000000000000000000000000000000000000000000000000000055AA";
									byte[] array = Converter.hexStringToByte(hex);
									Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 11, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 16, 4);
									Buffer.BlockCopy(BitConverter.GetBytes(players2.UserSessionID), 0, array, 5, 2);
									base.Client.Send(array, array.Length);
								}
								if (players2.Player_Job == 6)
								{
									string hex = "AA551B0000B20206200C00060000008801580064000000000000000000000055AA";
									byte[] array = Converter.hexStringToByte(hex);
									Buffer.BlockCopy(BitConverter.GetBytes(players2.UserSessionID), 0, array, 5, 2);
									Buffer.BlockCopy(BitConverter.GetBytes(players2.FLD_攻击速度), 0, array, 19, 4);
									base.Client.Send(array, array.Length);
								}
							}
							获取复查范围玩家();
						}
					}
					while (queue3.Count > 0)
					{
						Players players3 = (Players)queue3.Dequeue();
						if (players3.PlayList.ContainsKey(base.UserSessionID))
						{
							players3.PlayList.Remove(base.UserSessionID);
						}
						离开当前地图(players3, this);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "获取复查范围玩家()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex);
			}
		}

		public void LoadCharacters()
		{
			try
			{
				allChars = new Dictionary<int, string>();
				byte[] src = new byte[(World.Newversion >= 14) ? 76 : 73];
				byte[] array = (World.是否加密 != 0) ? new byte[26]
				{
					170,
					85,
					20,
					0,
					0,
					0,
					0,
					17,
					0,
					5,
					0,
					255,
					46,
					24,
					137,
					2,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					85,
					170
				} : new byte[17]
				{
					170,
					85,
					10,
					0,
					0,
					86,
					0,
					17,
					0,
					4,
					0,
					255,
					0,
					0,
					0,
					85,
					170
				};
				string hex = (World.是否加密
				string sqlCommand = $"select * from [TBL_XWWL_Char] where FLD_ID=@Userid";
				SqlParameter[] prams = new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
				};
				DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams);
				if (dBToDataTable != null)
				{
					if (dBToDataTable.Rows.Count == 0)
					{
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						goto IL_07f1;
					}
					if (dBToDataTable.Rows.Count <= 4)
					{
						for (int i = 0; i < dBToDataTable.Rows.Count; i++)
						{
							allChars.Add((int)dBToDataTable.Rows[i]["FLD_INDEX"], dBToDataTable.Rows[i]["FLD_NAME"].ToString());
							byte[] array2 = Converter.hexStringToByte(hex);
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
							byte[] bytes = Encoding.GetEncoding(1252).GetBytes(dBToDataTable.Rows[i]["FLD_NAME"].ToString());
							byte[] bytes2 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_ZX"]);
							byte[] bytes3 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_LEVEL"]);
							byte[] bytes4 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JOB_LEVEL"]);
							byte[] bytes5 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JOB"]);
							byte[] bytes6 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_HP"]);
							byte[] bytes7 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_MP"]);
							BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_SP"]);
							byte[] src2 = (byte[])dBToDataTable.Rows[i]["FLD_WEARITEM"];
							PlayerStyle playerStyle = new PlayerStyle((byte[])dBToDataTable.Rows[i]["FLD_FACE"]);
							byte[] bytes8 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_X"].ToString()));
							byte[] bytes9 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_Y"].ToString()));
							byte[] bytes10 = BitConverter.GetBytes(float.Parse(dBToDataTable.Rows[i]["FLD_Z"].ToString()));
							byte[] bytes11 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_MENOW"]);
							Buffer.BlockCopy(bytes8, 0, array2, 64 + World.Numv13, 4);
							Buffer.BlockCopy(bytes10, 0, array2, 68 + World.Numv13, 4);
							Buffer.BlockCopy(bytes9, 0, array2, 72 + World.Numv13, 4);
							Buffer.BlockCopy(bytes11, 0, array2, 76 + World.Numv13, 2);
							DataTable userNameBp = RxjhClass.GetUserNameBp(dBToDataTable.Rows[i]["FLD_NAME"].ToString());
							if (userNameBp != null)
							{
								Buffer.BlockCopy(BitConverter.GetBytes((int)userNameBp.Rows[0]["门服字"]), 0, array2, 80 + World.Numv13, 1);
								Buffer.BlockCopy(BitConverter.GetBytes((int)userNameBp.Rows[0]["门服颜色"]), 0, array2, 82 + World.Numv13, 2);
								userNameBp.Dispose();
							}
							byte[] bytes12 = BitConverter.GetBytes((int)dBToDataTable.Rows[i]["FLD_JQ"]);
							Buffer.BlockCopy(bytes12, 0, array2, 2836, bytes12.Length);
							array2[11] = byte.Parse(dBToDataTable.Rows[i]["FLD_INDEX"].ToString());
							Buffer.BlockCopy(bytes, 0, array2, 12, bytes.Length);
							Buffer.BlockCopy(bytes2, 0, array2, 50, 2);
							Buffer.BlockCopy(bytes3, 0, array2, 52, 2);
							Buffer.BlockCopy(bytes4, 0, array2, 54, 2);
							Buffer.BlockCopy(bytes5, 0, array2, 56, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(playerStyle.Hair_Color), 0, array2, 58, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(playerStyle.Hair_Style), 0, array2, 60, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(playerStyle.Sex), 0, array2, 63 + World.Numv13 / 2, 1);
							Buffer.BlockCopy(bytes6, 0, array2, 160 + World.Numv13, 2);
							Buffer.BlockCopy(bytes7, 0, array2, 162 + World.Numv13, 2);
							int num = (int)dBToDataTable.Rows[i]["FLD_ZBVER"];
							int num2 = 196 + World.Numv13;
							int num3 = 0;
							while (true)
							{
								bool flag = true;
								if (num3 >= 16)
								{
									break;
								}
								if (num3 >= 16)
								{
									Buffer.BlockCopy(src, 0, array2, num2 + num3 * World.单个物品大小, 72);
								}
								else
								{
									try
									{
										Buffer.BlockCopy(src2, num3 * ((World.Newversion >= 14) ? 76 : 73), array2, num2 + num3 * World.单个物品大小, 12);
										Buffer.BlockCopy(src2, num3 * ((World.Newversion >= 14) ? 76 : 73) + 12, array2, num2 + num3 * World.单个物品大小 + 16, 60);
									}
									catch
									{
										Buffer.BlockCopy(src, 0, array2, num2 + num3 * World.单个物品大小, 72);
									}
								}
								num3++;
							}
							if (base.Client != null)
							{
								if (World.Newversion >= 14 || World.是否加密 == 0)
								{
									base.Client.Send(array2, array2.Length);
								}
								else
								{
									base.Client.Send多包(array2, array2.Length);
								}
							}
						}
						goto IL_07f1;
					}
					Form1.WriteLine(1, "人物列表出错，人物数量太多[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "] 数[" + dBToDataTable.Rows.Count + "]");
					dBToDataTable.Dispose();
					base.Client.Dispose();
					GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 81", 7);
				}
				else
				{
					base.Client.Send(array, array.Length);
				}
				goto end_IL_0001;
			IL_07f1:
				dBToDataTable.Dispose();
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "获取人物列表出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 技能连击(byte[] data, int length)
		{
			string hex = "AA552300000A00C60014000100000035EA040059E404005AE404005BE40400000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(data, 15, array, 15, 16);
			List<MartialArts> skillCombo = SkillCombo;
			SkillCombo.Clear();
			int num = 0;
			while (true)
			{
				bool flag = true;
				if (num >= 12)
				{
					break;
				}
				byte[] array2 = new byte[4];
				try
				{
					Buffer.BlockCopy(data, num * 4 + 15, array2, 0, 4);
					SkillCombo.Add(new MartialArts(BitConverter.ToInt32(array2, 0)));
				}
				catch
				{
				}
				num++;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 加气功点(byte[] data, int length)
		{
			PacketVerify(data, length);
			if (base.Player_Qigong_point > 0)
			{
				try
				{
					byte[] array = new byte[2];
					Buffer.BlockCopy(data, 71, array, 0, 2);
					int num = BitConverter.ToUInt16(array, 0);
					升天气功类 value;
					if (World.Newversion >= 13)
					{
						if ((num != 25 || base.Player_Job == 9) && num != 170 && num != 321 && num != 322 && num != 323 && num != 324 && num != 310 && num != 311 && num != 13 && num != 313 && num != 314 && num != 330 && num != 331 && num != 333 && num != 334 && num != 33 && num != 340 && num != 341 && num != 342 && num != 343 && num != 344 && num != 58 && num != 150 && num != 352 && num != 353 && num != 354 && num != 370 && num != 371 && num != 373 && num != 374 && num != 600 && num != 601 && num != 602 && num != 603 && num != 604 && num != 700 && num != 701 && num != 702 && num != 390 && num != 391 && num != 392 && num != 393 && num != 394 && num != 561 && num != 562 && num != 563 && num != 564 && num != 565 && num != 380 && num != 381 && num != 382 && num != 383 && num != 384 && num != 385 && num != 386 && num != 387 && num != 316 && num != 325 && num != 315 && num != 326 && num != 327 && num != 662 && num != 663 && num != 664 && num != 665 && num != 666 && (num < 667 || num > 690))
						{
							for (int i = 0; i < 12; i++)
							{
								byte[] array2 = new byte[2];
								Buffer.BlockCopy(data, 11 + i * 4, array2, 0, 2);
								if (BitConverter.ToInt16(array2, 0) == num && BitConverter.ToInt16(气功[i].气功_byte, 0) < 20)
								{
									int num2 = BitConverter.ToInt16(气功[i].气功_byte, 0) + 1;
									if (num2 > 20)
									{
										num2 = 20;
									}
									else
									{
										base.Player_Qigong_point--;
									}
									BitConverter.GetBytes(num2);
									气功[i].气功量 = num2;
									break;
								}
							}
						}
						else if (升天气功.TryGetValue(num, out value) && value.气功量 < 20)
						{
							int num3 = value.气功量 + 1;
							if (num3 > 20)
							{
								num3 = 20;
							}
							else
							{
								base.Player_Qigong_point--;
							}
							value.气功量 = num3;
						}
					}
					else if (num < 300 || (num >= 550 && num <= 560))
					{
						for (int i = 0; i < 12; i++)
						{
							byte[] array2 = new byte[2];
							Buffer.BlockCopy(data, 11 + i * 4, array2, 0, 2);
							if (data[11 + i * 4] != 0 && BitConverter.ToInt16(array2, 0) == num && BitConverter.ToInt16(气功[i].气功_byte, 0) < 20)
							{
								int num2 = BitConverter.ToInt16(气功[i].气功_byte, 0) + 1;
								base.Player_Qigong_point--;
								if (num2 > 20)
								{
									num2 = 20;
								}
								BitConverter.GetBytes(num2);
								气功[i].气功量 = num2;
							}
						}
					}
					else if (升天气功.TryGetValue(num, out value) && value.气功量 < 20)
					{
						int num3 = value.气功量 + 1;
						base.Player_Qigong_point--;
						if (num3 > 20)
						{
							num3 = 20;
						}
						value.气功量 = num3;
					}
					Update_Character_Wear_Item();
					UpdatePowersAndStatus();
					Update_HP_MP_SP();
				}
				catch (Exception)
				{
					GameMessage("请用官服最新9.0客户端进入，注意别安9.0私服补丁！！", 9, "加点错误");
				}
			}
		}

		public void 加入门派(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 28, array, 0, 1);
				switch (BitConverter.ToInt32(array, 0))
				{
					case 1:
						{
							byte[] array9 = new byte[20];
							for (int j = 0; j < 20 && data[30 + j] != 0; j++)
							{
								array9[j] = data[30 + j];
							}
							string 人物名 = Encoding.GetEncoding(1252).GetString(array9).Replace("\0", "");
							Players players4 = Find_Player(人物名);
							if (players4 != null)
							{
								string hex5 = "AA553100012A03E80022003103400000000000000000000000000000010AC0B600000000000000000000000000000000000000000055AA";
								byte[] array10 = Converter.hexStringToByte(hex5);
								byte[] bytes7 = Encoding.GetEncoding(1252).GetBytes(base.Guild_Name);
								Buffer.BlockCopy(bytes7, 0, array10, 13, bytes7.Length);
								byte[] bytes8 = Encoding.GetEncoding(1252).GetBytes(players4.UserName);
								Buffer.BlockCopy(bytes8, 0, array10, 30, bytes8.Length);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array10, 5, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(players4.UserSessionID), 0, array10, 11, 2);
								if (RxjhClass.得到帮派人数(base.Guild_Name).Rows.Count >= 70)
								{
									Buffer.BlockCopy(BitConverter.GetBytes(18), 0, array10, 29, 1);
								}
								else if (players4.Player_Job_Level >= 2)
								{
									if (players4.Player_Zx == base.Player_Zx)
									{
										if (players4.Guild_ID != 0)
										{
											Buffer.BlockCopy(BitConverter.GetBytes(17), 0, array10, 29, 1);
										}
										else if (players4.Client != null)
										{
											players4.Client.Send(array10, array10.Length);
										}
									}
									else
									{
										GameMessage("Baòn không cuÌng thêì lýòc ", 10);
										Buffer.BlockCopy(BitConverter.GetBytes(16), 0, array10, 29, 1);
									}
								}
								else
								{
									Buffer.BlockCopy(BitConverter.GetBytes(16), 0, array10, 29, 1);
								}
								if (base.Client != null)
								{
									base.Client.Send(array10, array10.Length);
								}
							}
							break;
						}
					case 2:
						{
							byte[] array4 = new byte[4];
							Buffer.BlockCopy(data, 11, array4, 0, 2);
							int 人物ID = BitConverter.ToInt32(array4, 0);
							byte[] array5 = new byte[4];
							Buffer.BlockCopy(data, 29, array5, 0, 1);
							switch (BitConverter.ToInt32(array5, 0))
							{
								case 23:
									{
										string hex3 = "AA553100010A00E80022000B000000000000000000000000000000000217BDD600000000000000000000000000000000000000000055AA";
										byte[] array7 = Converter.hexStringToByte(hex3);
										byte[] bytes4 = Encoding.GetEncoding(1252).GetBytes(base.UserName);
										Buffer.BlockCopy(bytes4, 0, array7, 30, bytes4.Length);
										Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array7, 5, 2);
										Players players2 = Select_Character_ID(人物ID);
										if (players2 != null)
										{
											Buffer.BlockCopy(BitConverter.GetBytes(players2.UserSessionID), 0, array7, 11, 2);
											if (players2.Client != null)
											{
												players2.Client.Send(array7, array7.Length);
											}
										}
										if (base.Client != null)
										{
											base.Client.Send(array7, array7.Length);
										}
										break;
									}
								case 22:
									{
										string hex4 = "AA553100010A00E80022000B00CC00000000000000000000000000000216617300000000000000000000000000000000000000000055AA";
										byte[] array8 = Converter.hexStringToByte(hex4);
										byte[] bytes5 = Encoding.GetEncoding(1252).GetBytes(base.UserName);
										Buffer.BlockCopy(bytes5, 0, array8, 30, bytes5.Length);
										Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array8, 5, 2);
										Players players3 = Select_Character_ID(人物ID);
										if (players3 != null)
										{
											byte[] bytes6 = Encoding.GetEncoding(1252).GetBytes(players3.Guild_Name);
											Buffer.BlockCopy(bytes6, 0, array8, 13, bytes6.Length);
											Buffer.BlockCopy(BitConverter.GetBytes(players3.UserSessionID), 0, array8, 11, 2);
											if (players3.Client != null)
											{
												players3.Client.Send(array8, array8.Length);
											}
										}
										if (base.Client != null)
										{
											base.Client.Send(array8, array8.Length);
										}
										break;
									}
								case 21:
									{
										string hex2 = "AA553100012A03E80022002A034400000000000000000000000000000215C0B600000000000000000000000000000000000000000055AA";
										byte[] array6 = Converter.hexStringToByte(hex2);
										byte[] bytes2 = Encoding.GetEncoding(1252).GetBytes(base.UserName);
										Buffer.BlockCopy(bytes2, 0, array6, 30, bytes2.Length);
										Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array6, 5, 2);
										Players current = Select_Character_ID(人物ID);
										if (current != null)
										{
											byte[] bytes3 = Encoding.GetEncoding(1252).GetBytes(current.Guild_Name);
											Buffer.BlockCopy(bytes3, 0, array6, 13, bytes3.Length);
											Buffer.BlockCopy(BitConverter.GetBytes(current.UserSessionID), 0, array6, 11, 2);
											if (current.Client != null)
											{
												current.Client.Send(array6, array6.Length);
											}
											RxjhClass.加入帮派(base.UserName, current.Guild_Name, base.Player_Level);
										}
										if (base.Client != null)
										{
											base.Client.Send(array6, array6.Length);
										}
										读帮派数据();
										Initialize_Equip_Item();
										移动离开当前地图(base.Player_FLD_Map);
										获取复查范围玩家();
										break;
									}
							}
							break;
						}
					case 3:
						{
							byte[] array11 = Converter.hexStringToByte("AA553100010B00E80022000000000000000000000000000000000000031F000000000000000000000000000000000000000000000055AA");
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array11, 5, 2);
							if (base.Client != null)
							{
								base.Client.Send(array11, array11.Length);
							}
							byte[] bytes9 = Encoding.GetEncoding(1252).GetBytes(base.UserName);
							Buffer.BlockCopy(bytes9, 0, array11, 30, bytes9.Length);
							string guild_Name = base.Guild_Name;
							RxjhClass.退出门派(base.UserName);
							读帮派数据();
							Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array11, 28, 1);
							foreach (Players value in World.AllConnectedChars.Values)
							{
								if (value.Guild_Name == guild_Name && value.Client != null)
								{
									value.Client.Send(array11, array11.Length);
								}
							}
							Initialize_Equip_Item();
							移动离开当前地图(base.Player_FLD_Map);
							获取复查范围玩家();
							break;
						}
					case 4:
						{
							byte[] array2 = new byte[20];
							for (int i = 0; i < 20 && data[30 + i] != 0; i++)
							{
								array2[i] = data[30 + i];
							}
							string text = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "");
							if (RxjhClass.逐出门派(text, base.Guild_Name) == 0)
							{
								string hex = "AA553100010A00E800220000000000000000000000000000000000000421617300000000000000000000000000000000000000000055AA";
								byte[] array3 = Converter.hexStringToByte(hex);
								byte[] bytes = Encoding.GetEncoding(1252).GetBytes(text);
								Buffer.BlockCopy(bytes, 0, array3, 30, bytes.Length);
								foreach (Players value2 in World.AllConnectedChars.Values)
								{
									if (value2.Guild_Name == base.Guild_Name && value2.Client != null)
									{
										value2.Client.Send(array3, array3.Length);
									}
								}
								Players players = Find_Player(text);
								if (players != null)
								{
									players.读帮派数据();
									players.Initialize_Equip_Item();
									players.移动离开当前地图(base.Player_FLD_Map);
									players.获取复查范围玩家();
								}
							}
							break;
						}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "加入门派出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 加入组队提示(Players Playe)
		{
			string hex = "AA552600000100350017000100010002000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.UserSessionID), 0, array, 15, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(Playe.UserName);
			Buffer.BlockCopy(bytes, 0, array, 17, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 捡得到物品(int index, byte[] Amount, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性)
		{
			for (int i = 0; i < 66; i++)
			{
				if (Item_In_Bag[i].Get物品全局ID == BitConverter.ToInt32(物品全局ID, 0))
				{
					GameMessage("ERROR: vâòt phâÒm them vao da duoc nhat roi: [" + BitConverter.ToInt32(物品全局ID, 0) + "]");
					return;
				}
			}
			string hex = "AA557A000147030D006B0001000000760849BF978FD0060608AF2F000000000200000000000000010C020F000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BDD6CDB7B4E5B7BA00000000000000000000000000998755AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(Amount, 0, array, 31, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(index), 0, array, 40, 1);
			Buffer.BlockCopy(物品全局ID, 0, array, 15, 8);
			Buffer.BlockCopy(物品ID, 0, array, 23, 4);
			Buffer.BlockCopy(物品属性, 0, array, 47, 物品属性.Length);
			byte[] array2 = new byte[(World.Newversion >= 14) ? 76 : 73];
			Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
			Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
			Buffer.BlockCopy(Amount, 0, array2, 12, 4);
			Buffer.BlockCopy(物品属性, 0, array2, 16, 物品属性.Length);
			Item_In_Bag[index].Byte_Item = array2;
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void Pickup_Item(byte[] data, int length)
		{
			PacketVerify(data, length);
			long num = BitConverter.ToInt64(data, 11);
			if (DateTime.Now.Subtract(time_PickUpItem).TotalMilliseconds < 200.0)
			{
				Tip_Pickup_Item(5, num);
				GameMessage("Nhãòt vâòt phâÒm quaì nhanh.", 20);
				if (DateTime.Now.Subtract(time_PickUpItem).TotalMilliseconds < 100.0)
				{
					Form1.WriteLine(1, "Nhặt vật phẩm quá nhanh: [" + base.Userid + "] [" + base.UserName + "]");
				}
				return;
			}
			time_PickUpItem = DateTime.Now;
			for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
			{
				long num2 = BitConverter.ToInt64(Item_In_Bag[i].物品全局ID, 0);
				if (num2 != 0 && num2 == num)
				{
					Tip_Pickup_Item(5, num);
					return;
				}
			}
			try
			{
				GroundItems itme = GroundItems.GetItme(num);
				if (itme == null)
				{
					Tip_Pickup_Item(5, num);
				}
				else
				{
					if (itme.物品优先权 == null || itme.物品优先权 == this)
					{
						goto IL_028b;
					}
					if (itme.物品来源 == 0)
					{
						bool flag = false;
						if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
						{
							foreach (Players value4 in value.List_Party.Values)
							{
								if (value4 == itme.物品优先权 || (itme.bDropByNPC && DateTime.Now.Subtract(itme.time).TotalSeconds > 60.0))
								{
									flag = true;
									break;
								}
							}
							if (flag)
							{
								goto IL_028b;
							}
							Tip_Pickup_Item(5, num);
						}
						else
						{
							Tip_Pickup_Item(5, num);
						}
					}
					else
					{
						Tip_Pickup_Item(5, num);
					}
				}
				goto end_IL_0147;
			IL_028b:
				ItmeClass value3;
				if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value2) && (value2.Type_Share_ItemDrop == 1 || value2.Type_Share_ItemDrop == 2 || value2.Type_Share_ItemDrop == 4))
				{
					value2.Slot_Give_Item_Random = new Random(World.GetRandomSeed()).Next(1, value2.List_Party.Values.Count + 1);
					value2._Slot_Give_Item_Count = 1;
					if (value2.Type_Share_ItemDrop == 4 && value2.Check_Slot_In_Party != value2.List_Party.Values.Count)
					{
						value2.Slot_Give_Item_order = 1;
						value2.Check_Slot_In_Party = value2.List_Party.Values.Count;
					}
					if (value2.Slot_Give_Item_order > value2.List_Party.Values.Count)
					{
						value2.Slot_Give_Item_order = 1;
					}
					foreach (Players value5 in value2.List_Party.Values)
					{
						if (value2.Type_Share_ItemDrop == 1 || value2.Type_Share_ItemDrop == 4)
						{
							if (value2._Slot_Give_Item_Count == value2.Slot_Give_Item_order)
							{
								if ((double)(itme.物品.物品总重量 + value5.人物负重) >= (double)(value5.人物负重总 * 2) * value5.弓_升天二气功_千钧压驼 * (1.0 + value5.Item_Wear[11].物品属性_行囊负重))
								{
									value5.Tip_Pickup_Item(2, num);
									Tip_Pickup_Item(2, num);
								}
								else if (World.AllConnectedChars.ContainsKey(value5.UserSessionID) && value5.Client != null)
								{
									int num3 = value5.Find_Package_Empty(value5);
									if (num3 == -1)
									{
										value5.Tip_Pickup_Item(7, num);
										Tip_Pickup_Item(7, num);
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(itme.物品.Get_Byte_Item_PID, 0), out value3))
									{
										byte[] amount = itme.物品.Item_Amount;
										if (value3.FLD_SIDE != 0)
										{
											物品类 物品类 = value5.得到人物物品类型(itme.物品.FLD_PID, itme.物品.FLD_MAGIC0);
											if (物品类 != null)
											{
												num3 = 物品类.Bag;
												amount = BitConverter.GetBytes(BitConverter.ToInt32(itme.物品.Item_Amount, 0) + BitConverter.ToInt32(物品类.Item_Amount, 0));
											}
										}
										value5.捡得到物品(num3, amount, itme.物品.物品全局ID, itme.物品.Get_Byte_Item_PID, itme.物品.Get_Byte_Item_Option);
										if (itme.bDropByNPC)
										{
											value5.ThongBaoNhanItem(value3.FLD_THONGBAO, 0, "", value3.FLD_PID, value3.ItmeNAME, World.服务器id, base.UserName);
										}
										value5.Update_Item_In_Bag();
										value5.Update_Money_Weight();
										itme.npcydtheout();
									}
								}
							}
							value2._Slot_Give_Item_Count++;
						}
						else if (value2.Type_Share_ItemDrop == 2)
						{
							if (value2._Slot_Give_Item_Count == value2.Slot_Give_Item_Random)
							{
								if ((double)(itme.物品.物品总重量 + value5.人物负重) >= (double)(value5.人物负重总 * 2) * value5.弓_升天二气功_千钧压驼 * (1.0 + value5.Item_Wear[11].物品属性_行囊负重))
								{
									value5.Tip_Pickup_Item(2, num);
									Tip_Pickup_Item(2, num);
								}
								else if (World.AllConnectedChars.ContainsKey(value5.UserSessionID) && value5.Client != null)
								{
									int num3 = value5.Find_Package_Empty(value5);
									if (num3 == -1)
									{
										value5.Tip_Pickup_Item(7, num);
										Tip_Pickup_Item(7, num);
									}
									else if (World.Itme.TryGetValue(BitConverter.ToInt32(itme.物品.Get_Byte_Item_PID, 0), out value3))
									{
										byte[] amount = itme.物品.Item_Amount;
										if (value3.FLD_SIDE != 0)
										{
											物品类 物品类 = value5.得到人物物品类型(itme.物品.FLD_PID, itme.物品.FLD_MAGIC0);
											if (物品类 != null)
											{
												num3 = 物品类.Bag;
												amount = BitConverter.GetBytes(BitConverter.ToInt32(itme.物品.Item_Amount, 0) + BitConverter.ToInt32(物品类.Item_Amount, 0));
											}
										}
										value5.捡得到物品(num3, amount, itme.物品.物品全局ID, itme.物品.Get_Byte_Item_PID, itme.物品.Get_Byte_Item_Option);
										if (itme.bDropByNPC)
										{
											value5.ThongBaoNhanItem(value3.FLD_THONGBAO, 0, "", value3.FLD_PID, value3.ItmeNAME, World.服务器id, base.UserName);
										}
										value5.Update_Item_In_Bag();
										value5.Update_Money_Weight();
										itme.npcydtheout();
									}
								}
							}
							value2._Slot_Give_Item_Count++;
						}
					}
					value2.Slot_Give_Item_order++;
				}
				else if ((double)(itme.物品.物品总重量 + base.人物负重) >= (double)(base.人物负重总 * 2) * base.弓_升天二气功_千钧压驼 * (1.0 + Item_Wear[11].物品属性_行囊负重))
				{
					Tip_Pickup_Item(2, num);
				}
				else
				{
					int num3 = Find_Package_Empty(this);
					if (num3 == -1)
					{
						Tip_Pickup_Item(7, num);
					}
					else if (World.Itme.TryGetValue(BitConverter.ToInt32(itme.物品.Get_Byte_Item_PID, 0), out value3))
					{
						byte[] amount = itme.物品.Item_Amount;
						if (value3.FLD_SIDE != 0)
						{
							物品类 物品类 = 得到人物物品类型(itme.物品.FLD_PID, itme.物品.FLD_MAGIC0);
							if (物品类 != null)
							{
								num3 = 物品类.Bag;
								amount = BitConverter.GetBytes(BitConverter.ToInt32(itme.物品.Item_Amount, 0) + BitConverter.ToInt32(物品类.Item_Amount, 0));
							}
						}
						捡得到物品(num3, amount, itme.物品.物品全局ID, itme.物品.Get_Byte_Item_PID, itme.物品.Get_Byte_Item_Option);
						if (itme.bDropByNPC)
						{
							ThongBaoNhanItem(value3.FLD_THONGBAO, 0, "", value3.FLD_PID, value3.ItmeNAME, World.服务器id, base.UserName);
						}
						Update_Item_In_Bag();
						Update_Money_Weight();
						itme.npcydtheout();
					}
				}
			end_IL_0147:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "捡物品出错 [" + base.Userid + "][" + base.UserName + "] ID[" + num.ToString() + "] " + ex.Message);
			}
		}

		public bool checkEquipSpecialWeapons()
		{
			if (base.Player_Job != 8 && base.Player_Job != 9 && base.Player_Job != 11 && base.Player_Job != 12)
			{
				return false;
			}
			if (Find_Package_Empty(this) == -1)
			{
				GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !!!", 23);
				return true;
			}
			if (Item_Wear[3].FLD_PID == 0)
			{
				GameMessage("Vui loÌng trang biò vuÞ khiì", 23);
				return true;
			}
			if (World.checkSpecialWeapons(Item_Wear[3].FLD_PID) == 0)
			{
				GameMessage("Vui loÌng trang biò vuÞ khiì ðãòc biêòt", 23);
				return true;
			}
			return false;
		}

		public void 检测走跑()
		{
			string hex = "AA5513000001000600040001000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void CheckIfPlayerExists(byte[] data, int length)
		{
			try
			{
				string hex;
				string hex2;
				if (World.是否加密 == 0)
				{
					hex = "AA551900000000390014000000000000000000000000000000000000000055AA";
					hex2 = "AA551900000000390014000100000000000000000000000000000000000055AA";
				}
				else
				{
					hex = "AA552300000000390014000000000000000000000000000000000000000000000000000000000055AA";
					hex2 = "AA552300000000390014000100000000000000000000000000000000000000000000000000000055AA";
				}
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = Converter.hexStringToByte(hex2);
				byte[] array3 = new byte[16];
				for (int i = 0; i < 16 && data[11 + i] != 0; i++)
				{
					array3[i] = data[11 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array3).Replace("\0", "")
					.Trim();
				if (!Regex.IsMatch(text, "^[a-zA-Z0-9]{4,14}$"))
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else
				{
					byte[] bytes = Encoding.GetEncoding(1252).GetBytes(text);
					Buffer.BlockCopy(bytes, 0, array, 15, bytes.Length);
					Buffer.BlockCopy(bytes, 0, array2, 15, bytes.Length);
					if (text == "")
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					if (RxjhClass.GetUserName(text) != 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
					}
					else
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "创建人物检查人物是否存在出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void Send_Packet_Delete_Item(int index, int number)
		{
			try
			{
				using (PacketData packetData = new PacketData())
				{
					packetData.WriteByte(1);
					packetData.WriteByte(index);
					packetData.WriteShort(0);
					packetData.WriteLong(Item_In_Bag[index].FLD_PID);
					packetData.WriteLong(number);
					packetData.WriteLong(0L);
					if (base.Client != null)
					{
						base.Client.SendPak(packetData, 8704, base.UserSessionID);
					}
				}
				if (BitConverter.ToInt32(Item_In_Bag[index].Item_Amount, 0) <= number)
				{
					if (BitConverter.ToInt32(Item_In_Bag[index].Item_Amount, 0) < number)
					{
						logo.logxoaitem("[ " + base.UserName + " ] - Lỗi xóa item [ID: " + BitConverter.ToInt32(Item_In_Bag[index].Get_Byte_Item_PID, 0) + " : " + BitConverter.ToInt32(Item_In_Bag[index].Item_Amount, 0) + " < " + number + "]");
					}
					Item_In_Bag[index].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
				}
				else
				{
					byte[] bytes = BitConverter.GetBytes(BitConverter.ToInt32(Item_In_Bag[index].Item_Amount, 0) - number);
					Item_In_Bag[index].Item_Amount = BitConverter.GetBytes(0);
					if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[index].Get_Byte_Item_PID, 0), out ItmeClass _))
					{
						byte[] array = new byte[56];
						Buffer.BlockCopy(BitConverter.GetBytes(Item_In_Bag[index].FLD_MAGIC0), 0, array, 0, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(Item_In_Bag[index].FLD_MAGIC1), 0, array, 4, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(Item_In_Bag[index].FLD_MAGIC2), 0, array, 8, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(Item_In_Bag[index].FLD_MAGIC3), 0, array, 12, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(Item_In_Bag[index].FLD_MAGIC4), 0, array, 16, 4);
						增加物品(Item_In_Bag[index].物品全局ID, Item_In_Bag[index].Get_Byte_Item_PID, Item_In_Bag[index].Bag, bytes, array, Item_In_Bag[index].物品绑定);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "减去物品 出错[" + base.Userid + "][" + base.UserName + "] 位置[" + index + "] 数量[" + number + "] 物品名称[" + Item_In_Bag[index].Get_Name() + "]装备栏包裹数量[" + BitConverter.ToInt32(Item_In_Bag[index].Item_Amount, 0) + "]" + ex.Message);
			}
		}

		public void 交易成功(Players Playe)
		{
			try
			{
				if (Playe.退出中)
				{
					DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{Playe.Userid}'", "rxjhaccount");
					Form1.WriteLine(6, "退出复制BUG11 [" + Playe.Userid + "][" + Playe.UserName + "][" + Playe.Client.ToString() + "] ");
					if (Playe.Client != null)
					{
						Playe.Client.Dispose();
						Playe.GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 82", 7);
					}
				}
				else if (!Playe.打开仓库中)
				{
					Form1.WriteLine(6, "交易成功 BUG![" + Playe.Userid + "]-[" + Playe.UserName + "]");
				}
				else if (!Playe.交易.交易人.打开仓库中)
				{
					Form1.WriteLine(6, "交易成功 BUG![" + Playe.交易.交易人.Userid + "]-[" + Playe.交易.交易人.UserName + "]");
				}
				else
				{
					if (Playe.交易.交易钱 <= 0)
					{
						goto IL_030d;
					}
					if (Playe.Player_Money >= Playe.交易.交易钱)
					{
						if (Playe.交易.交易人.Player_Money + Playe.交易.交易钱 > World.最大钱数)
						{
							Playe.交易.交易钱 = World.最大钱数 - Playe.交易.交易人.Player_Money;
						}
						Players 交易人 = Playe.交易.交易人;
						交易人.Player_Money += Playe.交易.交易钱;
						Playe.交易.交易人.Update_Money_Weight();
						Playe.Player_Money -= Playe.交易.交易钱;
						Form1.WriteLine(5, "交易金钱 [" + Playe.Userid + "][" + Playe.UserName + "] 和[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "](" + Playe.交易.交易钱 + ")");
						goto IL_030d;
					}
				}
				goto end_IL_0001;
			IL_030d:
				foreach (交易物品类 value2 in Playe.交易.交易物品1.Values)
				{
					物品类 物品 = value2.物品;
					int num = Find_Package_Empty(Playe.交易.交易人);
					if (num == -1)
					{
						break;
					}
					物品类 物品类 = 得到人物物品物品全局ID(Playe, 物品.Get物品全局ID);
					if (物品类 == null)
					{
						Form1.WriteLine(6, "非法复制_交易3[" + Playe.Userid + "]-[" + Playe.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品名称2[" + 物品.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + BitConverter.ToInt32(物品.Item_Amount, 0) + "]");
						break;
					}
					if (!World.Itme.TryGetValue(BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0), out ItmeClass value))
					{
						break;
					}
					if (value2.物品数量 < 1)
					{
						Form1.WriteLine(6, "非法复制_交易22[" + Playe.Userid + "]-[" + Playe.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品名称2[" + 物品.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + value2.物品数量 + "]");
						break;
					}
					if (value2.物品数量 > BitConverter.ToInt32(物品类.Item_Amount, 0))
					{
						Form1.WriteLine(6, "非法复制_交易2[" + Playe.Userid + "]-[" + Playe.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品名称2[" + 物品.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + value2.物品数量 + "]");
						break;
					}
					if (物品类.得到物品位置类型() != 1 && 物品类.得到物品位置类型() != 2 && 物品类.得到物品位置类型() != 5 && 物品类.得到物品位置类型() != 6)
					{
						if (物品类.得到物品位置类型() == 4)
						{
							int fLD_MAGIC = 物品类.FLD_MAGIC1;
						}
					}
					else if (物品类.FLD_MAGIC1 >= 20000025)
					{
					}
					Form1.WriteLine(5, "[" + Playe.Userid + "][" + Playe.UserName + "] 交易物品 :[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "]  物品:" + 物品类.Get_Name() + " 编号:" + BitConverter.ToInt32(物品类.得到全局ID(), 0) + " 数量[" + value2.物品数量 + "]  属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "]");
					if (value.FLD_SIDE == 0 && value2.物品数量 > 1)
					{
						Form1.WriteLine(6, "非法复制_交易1[" + Playe.Userid + "]-[" + Playe.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品名称2[" + 物品.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + value2.物品数量 + "]");
						break;
					}
					RxjhClass.物品记录(Playe.Userid, Playe.UserName, Playe.交易.交易人.Userid, Playe.交易.交易人.UserName, BitConverter.ToInt64(物品类.物品全局ID, 0), BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0), 物品类.Get_Name(), value2.物品数量, 物品类.FLD_MAGIC0 + "-" + 物品类.FLD_MAGIC1 + "-" + 物品类.FLD_MAGIC2 + "-" + 物品类.FLD_MAGIC3 + "-" + 物品类.FLD_MAGIC4 + "初" + 物品类.FLD_FJ_觉醒 + "中" + 物品类.FLD_FJ_中级附魂 + "进" + 物品类.FLD_FJ_进化, Playe.交易.交易钱, "交易");
					Playe.交易.交易人._Make_Item_Option(物品类.物品全局ID, 物品类.Get_Byte_Item_PID, num, BitConverter.GetBytes(value2.物品数量), 物品类.Get_Byte_Item_Option);
					int get_Int_Item_Count = Playe.Item_In_Bag[物品类.Bag].Get_Int_Item_Count;
					Playe.Send_Packet_Delete_Item(物品类.Bag, value2.物品数量);
					if (get_Int_Item_Count - value2.物品数量 != Playe.Item_In_Bag[物品类.Bag].Get_Int_Item_Count)
					{
						Playe.Item_In_Bag[物品类.Bag].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						Playe._Make_Item_Option(物品类.物品全局ID, 物品类.Get_Byte_Item_PID, 物品类.Bag, BitConverter.GetBytes(get_Int_Item_Count - value2.物品数量), 物品类.Get_Byte_Item_Option);
					}
					SaveDataCharacter();
					Playe.SaveDataCharacter();
				}
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "交易成功出错 [" + Playe.Userid + "][" + Playe.UserName + "][" + Playe.Client.ToString() + "]和[" + Playe.交易.交易人.Userid + "][" + Playe.交易.交易人.UserName + "][" + Playe.交易.交易人.Client.ToString() + "] " + ex);
			}
		}

		public void 交易大类(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 19, array, 0, 4);
				Buffer.BlockCopy(data, 11, array2, 0, 4);
				int num = BitConverter.ToInt32(array, 0);
				int num2 = BitConverter.ToInt32(array2, 0);
				switch (num2)
				{
					case 1:
						发送交易请求(num, num2);
						break;
					case 2:
						接受交易请求(num, num2);
						break;
					case 3:
						对方取消交易请求(num, num2);
						break;
					case 4:
						本人取消交易请求(num, num2);
						break;
					case 5:
						Request_Trade(num, num2);
						break;
					case 6:
						关闭交易(num, num2);
						break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "交易大类出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 交易放东西(byte[] data, int length)
		{
			if (!打开仓库中)
			{
				Form1.WriteLine(6, "交易放东西 BUG![" + base.Userid + "]-[" + base.UserName + "]");
			}
			else
			{
				try
				{
					PacketVerify(data, length);
					byte[] dst = new byte[(World.Newversion >= 14) ? 76 : 73];
					byte[] array = new byte[8];
					byte[] array2 = new byte[4];
					byte[] array3 = new byte[8];
					Buffer.BlockCopy(data, 23, dst, 0, 16);
					Buffer.BlockCopy(data, 43, dst, 16, 56);
					Buffer.BlockCopy(data, 23, array, 0, 8);
					Buffer.BlockCopy(data, 35, array2, 0, 4);
					Buffer.BlockCopy(data, 43, array3, 0, 8);
					if (!World.检查物品是否被锁定(BitConverter.ToInt32(array2, 0)))
					{
						if (!World.checkItemCanTrade(BitConverter.ToInt32(array2, 0)))
						{
							GameMessage("Vâòt phâÒm không thêÒ giao diòch");
						}
						else if (BitConverter.ToInt32(array2, 0) == 2000000000)
						{
							if (BitConverter.ToInt64(array3, 0) + 交易.交易钱 <= base.Player_Money)
							{
								long num = BitConverter.ToInt64(array3, 0);
								if (交易.交易人.Player_Money + num > World.最大钱数)
								{
									num = World.最大钱数 - 交易.交易人.Player_Money;
								}
								交易.交易钱 += num;
								string hex = "AA556F000198009A0060000100000001000000000000000000000000000000000000000094357700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CD055AA";
								byte[] array4 = Converter.hexStringToByte(hex);
								Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array4, 43, 8);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
								if (base.Client != null)
								{
									base.Client.Send(array4, array4.Length);
								}
								if (交易.交易人.Client != null)
								{
									交易.交易人.Client.Send(array4, array4.Length);
								}
							}
						}
						else if (交易.交易人.得到包裹空位数() < 交易.交易物品1.Count + 1)
						{
							GameMessage("Ðôìi phýõng ðaÞ hêìt chôÞ trôìng", 9);
						}
						else if (BitConverter.ToInt64(array, 0) != 0)
						{
							物品类 物品类 = 得到人物物品物品全局ID(this, BitConverter.ToInt64(array, 0));
							if (物品类 != null && !物品类.物品绑定 && !交易.交易物品1.ContainsKey(BitConverter.ToInt64(array, 0)))
							{
								int bag = 物品类.Bag;
								int num2 = 0;
								for (int i = 0; i < 66; i++)
								{
									if (Item_In_Bag[i].Get物品全局ID == Item_In_Bag[bag].Get物品全局ID)
									{
										num2++;
									}
								}
								DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT * FROM Log_DeleteItem where TrangThai=0 and MaItem=" + Item_In_Bag[bag].Get物品全局ID));
								if (dBToDataTable.Rows.Count > 0 || num2 > 1)
								{
									Form1.WriteLine(100, "BUG TRADE ITEM: [" + base.UserName + "] - [" + Item_In_Bag[bag].Get物品全局ID + "] - [" + Item_In_Bag[bag].FLD_PID + "]");
									Item_In_Bag[bag].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
									Update_Item_In_Bag();
									Update_Money_Weight();
									if (base.Client == null)
									{
									}
								}
								else if (Item_In_Bag[bag].LockMove)
								{
									GameMessage("Vâòt phâÒm naÌy hiêòn taòi không thêÒ giao diòch");
								}
								else
								{
									交易物品类 交易物品类 = new 交易物品类();
									交易物品类.物品 = 物品类;
									交易物品类.物品数量 = BitConverter.ToInt32(array3, 0);
									交易.交易物品1.Add(BitConverter.ToInt64(array, 0), 交易物品类);
									string hex2 = "AA556F000194029A0060000100000001000000000000008716E56781832006000000000208AF2F000000000100000000000000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CD055AA";
									byte[] array5 = Converter.hexStringToByte(hex2);
									Buffer.BlockCopy(物品类.Byte_Item, 0, array5, 23, 8);
									Buffer.BlockCopy(物品类.Byte_Item, 8, array5, 35, 4);
									Buffer.BlockCopy(array3, 0, array5, 43, 8);
									Buffer.BlockCopy(物品类.Byte_Item, 16, array5, 51, 56);
									Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array5, 5, 2);
									Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array5, 95, 2);
									if (base.Client != null)
									{
										base.Client.Send(array5, array5.Length);
									}
									if (交易.交易人.Client != null)
									{
										交易.交易人.Client.Send(array5, array5.Length);
									}
								}
							}
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "交易放东西出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
				}
			}
		}

		public void 接受交易请求(int 人物的ID, int 操作ID)
		{
			try
			{
				PacketData packetData = new PacketData();
				packetData.WriteInt(操作ID);
				packetData.WriteInt(操作ID);
				packetData.WriteInt(0);
				packetData.WriteString(交易.交易人.UserName);
				packetData.WriteShort(0, 3);
				if (交易.交易人.Guild_Name.Length > 0)
				{
					packetData.WriteString(交易.交易人.Guild_Name);
				}
				else
				{
					packetData.WriteString("Chýa gia nhâòp");
				}
				packetData.WriteByte(0);
				packetData.WriteByte(交易.交易人.Player_Job);
				packetData.WriteByte(交易.交易人.Player_Job_Level);
				packetData.WriteByte(交易.交易人.Player_Zx);
				packetData.WriteInt(0, 4);
				if (base.Client != null)
				{
					交易.交易中 = true;
					打开仓库中 = true;
					base.Client.SendPak(packetData, 38912, base.UserSessionID);
					Wait_Trade = 0;
				}
				PacketData packetData2 = new PacketData();
				packetData2.WriteInt(操作ID);
				packetData2.WriteInt(操作ID);
				packetData2.WriteInt(0);
				packetData2.WriteString(base.UserName);
				packetData2.WriteShort(0, 3);
				if (base.Guild_Name.Length > 0)
				{
					packetData2.WriteString(base.Guild_Name);
				}
				else
				{
					packetData2.WriteString("Chýa gia nhâòp");
				}
				packetData2.WriteInt(0);
				packetData2.WriteByte(base.Player_Job);
				packetData2.WriteByte(base.Player_Job_Level);
				packetData2.WriteByte(base.Player_Zx);
				packetData.WriteInt(0, 4);
				if (交易.交易人.Client != null)
				{
					交易.交易人.交易.交易中 = true;
					交易.交易人.打开仓库中 = true;
					交易.交易人.Client.SendPak(packetData2, 38912, base.UserSessionID);
					交易.交易人.Wait_Trade = 0;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "接受交易请求出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void 结婚功能包(int 标识)
		{
			string hex = "AA5547000143057A17380026000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003B0955AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(标识), 0, array, 51, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 解散组队提示()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_解散组队提示");
			}
			string hex = "AA5513000000003700040003000200000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void Repair_Item_Wuxun(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_装备修理");
			}
			if (!打开仓库中)
			{
				Form1.WriteLine(6, "装备修理 BUG![" + base.Userid + "]-[" + base.UserName + "]");
				return;
			}
			int num = BitConverter.ToUInt16(data, 11);
			int num2 = data[23];
			int num3 = BitConverter.ToUInt16(data, 15);
			int num4 = 0;
			try
			{
				PacketVerify(data, length);
				打开仓库中 = true;
				string hex = "AA556B0001000025315C00020000000A0000000000000000000000B504D21D0000000000000000000000000F0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E80300000000000000000000000000000000A46755AA";
				byte[] array = Converter.hexStringToByte(hex);
				if (length > 30)
				{
					byte[] array2 = new byte[4];
					byte[] dst = new byte[8];
					byte[] array3 = new byte[4];
					Buffer.BlockCopy(data, 11, array2, 0, 4);
					Buffer.BlockCopy(data, 15, array3, 0, 4);
					Buffer.BlockCopy(data, 27, dst, 0, 4);
					switch (num)
					{
						case 1:
							GameMessage("Vui loÌng sýÒ týÌng moìn", 9);
							break;
						case 2:
							switch (num3)
							{
								case 10:
									try
									{
										if (Item_In_Bag[num2].LockMove || Item_In_Bag[num2].物品绑定)
										{
											return;
										}
										ClassHcItimes.Clear();
										if (ClassHcItimes.ContainsKey(1))
										{
											return;
										}
										if (World.Itme.TryGetValue(BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0), out ItmeClass value3))
										{
											if ((value3.FLD_RESIDE2 != 1 && value3.FLD_RESIDE2 != 2 && value3.FLD_RESIDE2 != 4 && value3.FLD_RESIDE2 != 5 && value3.FLD_RESIDE2 != 6 && value3.FLD_RESIDE2 != 7 && value3.FLD_RESIDE2 != 8 && value3.FLD_RESIDE2 != 10) || value3.FLD_CJL < 0)
											{
												return;
											}
											if (Item_In_Bag[num2].FLD_持久力 >= 1000)
											{
												method_386(num3, 12333L, Item_In_Bag[num2]);
												return;
											}
										}
										Buffer.BlockCopy(array2, 0, array, 11, 2);
										Buffer.BlockCopy(array3, 0, array, 15, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 23, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 27, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(500), 0, array, 43, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(Item_In_Bag[num2].FLD_持久力), 0, array, 91, 4);
										HcItimesClass hcItimesClass2 = new HcItimesClass();
										hcItimesClass2.method_1(num2);
										hcItimesClass2.method_3(Item_In_Bag[num2].Byte_Item);
										Item_In_Bag[num2].LockMove = true;
										ClassHcItimes.Add(1, hcItimesClass2);
									}
									catch (Exception ex3)
									{
										Form1.WriteLine(1, "装备修理_放装备出错![" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
										return;
									}
									break;
								case 11:
									try
									{
										if (ClassHcItimes.TryGetValue(1, out HcItimesClass value2))
										{
											Item_In_Bag[value2.index].LockMove = false;
											ClassHcItimes.Clear();
											Buffer.BlockCopy(array2, 0, array, 11, 2);
											Buffer.BlockCopy(array3, 0, array, 15, 2);
											合成系统解锁();
										}
										Buffer.BlockCopy(array2, 0, array, 11, 2);
										Buffer.BlockCopy(array3, 0, array, 15, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 23, 4);
										Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 27, 4);
									}
									catch (Exception ex2)
									{
										Form1.WriteLine(1, "装备修理_取消出错![" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
										return;
									}
									break;
								case 12:
									try
									{
										if (ClassHcItimes.Count <= 0)
										{
											return;
										}
										HcItimesClass hcItimesClass = null;
										if (ClassHcItimes.ContainsKey(1))
										{
											hcItimesClass = ClassHcItimes[1];
										}
										if (BitConverter.ToInt64(Item_In_Bag[hcItimesClass.index].物品全局ID, 0) != BitConverter.ToInt64(hcItimesClass.物品全局ID, 0))
										{
											return;
										}
										if (Item_In_Bag[hcItimesClass.index].物品绑定)
										{
											GameMessage("Cac vâòt phâÒm biò khoìa không thêÒ sýÒa chýÞa", 20);
											return;
										}
										if (!World.Itme.TryGetValue(BitConverter.ToInt32(hcItimesClass.Item_ID, 0), out ItmeClass _))
										{
											return;
										}
										num4 = 500;
										if (base.Player_WuXun < num4)
										{
											GameMessage("Không ðuÒ voÞ huân. CâÌn phaÒi coì " + num4 + " ðiêÒm!", 10);
											return;
										}
										if (BitConverter.ToInt32(Item_In_Bag[hcItimesClass.index].Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt64(Item_In_Bag[hcItimesClass.index].物品全局ID, 0) == BitConverter.ToInt64(hcItimesClass.物品全局ID, 0))
										{
											Item_In_Bag[hcItimesClass.index].Set_FLD_持久力(1000);
											base.Player_WuXun -= num4;
										}
										Item_In_Bag[hcItimesClass.index].LockMove = false;
										Buffer.BlockCopy(array2, 0, array, 11, 2);
										Buffer.BlockCopy(array3, 0, array, 15, 2);
										Buffer.BlockCopy(BitConverter.GetBytes(hcItimesClass.index), 0, array, 23, 4);
										Buffer.BlockCopy(Item_In_Bag[hcItimesClass.index].Get_Byte_Item_PID, 0, array, 27, 4);
										Buffer.BlockCopy(BitConverter.GetBytes(num4), 0, array, 43, 4);
										ClassHcItimes.Clear();
										合成系统解锁();
										UpdatePowersAndStatus();
										Update_Item_In_Bag();
									}
									catch (Exception ex)
									{
										Form1.WriteLine(1, "装备修理_ 修理出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
										return;
									}
									break;
							}
							break;
					}
					if (num != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send多包(array, array.Length);
						}
					}
				}
			}
			catch (Exception ex4)
			{
				Form1.WriteLine(1, "装备修理系统出错![" + base.Userid + "]-[" + base.UserName + "][" + num + "]" + ex4.Message);
			}
		}

		public void 金香玉加解锁(byte[] data, int length)
		{
			PacketVerify(data, length);
			int num = data[11];
			int num2 = data[12];
			switch (num)
			{
				case 1:
					{
						string hex = "AA551100012C01DF0002000101000000000000E98955AA";
						byte[] array3 = Converter.hexStringToByte(hex);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						return;
					}
				case 3:
					if (World.加锁元宝数 > 0)
					{
						if (base.FLD_RXPIONT < World.加锁元宝数 * num2)
						{
							GameMessage("元宝不够了，加锁一件装备需要消耗" + World.加锁元宝数 + "个元宝！", 9);
							break;
						}
						Add_Del_Rxpiont(World.加锁元宝数 * num2, 0);
					}
					for (int j = 0; j < num2; j++)
					{
						int num4 = data[30 + j * 18];
						byte[] array2 = new byte[56];
						Item_In_Bag[num4].物品绑定 = false;
						Item_In_Bag[num4].LockMove = false;
						byte[] get_Byte_Item_PID2 = Item_In_Bag[num4].Get_Byte_Item_PID;
						byte[] 物品全局ID2 = Item_In_Bag[num4].物品全局ID;
						Buffer.BlockCopy(Item_In_Bag[num4].Byte_Item, 16, array2, 0, 56);
						Send_Packet_Delete_Item(num4, 1);
						增加物品(物品全局ID2, get_Byte_Item_PID2, num4, BitConverter.GetBytes(1), array2, Item_In_Bag[num4].物品绑定);
					}
					Save_data_Rxpiont();
					break;
				case 4:
					if (World.解锁元宝数 > 0)
					{
						if (base.FLD_RXPIONT < World.解锁元宝数 * num2)
						{
							GameMessage("元宝不够了，解锁一件装备需要消耗" + World.解锁元宝数 + "个元宝！", 9);
							break;
						}
						Add_Del_Rxpiont(World.解锁元宝数 * num2, 0);
					}
					for (int i = 0; i < num2; i++)
					{
						int num3 = data[30 + i * 18];
						byte[] array = new byte[56];
						Item_In_Bag[num3].物品绑定 = false;
						Item_In_Bag[num3].LockMove = false;
						byte[] get_Byte_Item_PID = Item_In_Bag[num3].Get_Byte_Item_PID;
						byte[] 物品全局ID = Item_In_Bag[num3].物品全局ID;
						Buffer.BlockCopy(Item_In_Bag[num3].Byte_Item, 16, array, 0, 56);
						Send_Packet_Delete_Item(num3, 1);
						增加物品(物品全局ID, get_Byte_Item_PID, num3, BitConverter.GetBytes(1), array, Item_In_Bag[num3].物品绑定);
					}
					Save_data_Rxpiont();
					break;
			}
			string hex2 = "AA551100012C01DF0002000101000000000000E98955AA";
			byte[] array4 = Converter.hexStringToByte(hex2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array4, array4.Length);
			}
		}

		public void 进店(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 1);
				Buffer.BlockCopy(data, 12, array2, 0, 4);
				int num = BitConverter.ToInt32(array, 0);
				int num2 = BitConverter.ToInt32(array2, 0);
				switch (num)
				{
					case 1:
						if (打开仓库中)
						{
							商店提示(11);
						}
						else
						{
							Players players2 = Select_Character_ID(num2);
							if (players2 != null && players2.PlayerShop.商店类型 == 1 && players2.PlayerShop.个人商店是否开启)
							{
								if (!Check_Radius_Player(25, players2))
								{
									商店提示(12);
								}
								else if (players2.PlayerShop.个人商店是否使用中)
								{
									商店提示(13);
								}
								else
								{
									players2.PlayerShop.个人商店是否使用中 = true;
									进店中 = true;
									进店中ID = num2;
									打开仓库中 = true;
									PacketData packetData2 = new PacketData();
									packetData2.WriteByte(1);
									packetData2.WriteByte(1);
									packetData2.WriteInt(num2);
									packetData2.WriteShort(players2.PlayerShop.商店名.Length);
									packetData2.Write(players2.PlayerShop.商店名, 0, players2.PlayerShop.商店名.Length);
									packetData2.WriteShort(players2.PlayerShop.商店物品列表.Count);
									foreach (个人商店物品类 value2 in players2.PlayerShop.商店物品列表.Values)
									{
										packetData2.WriteLong(value2.物品.FLD_PID);
										packetData2.WriteLong(value2.物品.Get物品全局ID);
										packetData2.WriteShort(value2.数量);
										packetData2.WriteShort(value2.位置);
										packetData2.WriteLong(value2.价格);
										packetData2.WriteInt(value2.物品.FLD_MAGIC0);
										packetData2.WriteInt(value2.物品.FLD_MAGIC1);
										packetData2.WriteInt(value2.物品.FLD_MAGIC2);
										packetData2.WriteInt(value2.物品.FLD_MAGIC3);
										packetData2.WriteInt(value2.物品.FLD_MAGIC4);
										packetData2.WriteShort(value2.物品.FLD_FJ_MAGIC0);
										packetData2.WriteShort(value2.物品.FLD_FJ_MAGIC1);
										packetData2.WriteShort(value2.物品.FLD_FJ_中级附魂);
										packetData2.WriteShort(value2.物品.FLD_FJ_MAGIC2);
										packetData2.WriteShort(value2.物品.FLD_FJ_MAGIC3);
										packetData2.WriteShort(value2.物品.FLD_FJ_MAGIC4);
										packetData2.WriteShort(value2.物品.FLD_FJ_MAGIC5);
										packetData2.WriteShort(0);
										packetData2.WriteInt(value2.物品.FLD_FJ_KSSJ);
										packetData2.WriteInt(value2.物品.FLD_FJ_JSSJ);
										if (value2.物品.FLD_持久力 != 0)
										{
											packetData2.WriteShort(0);
										}
										else
										{
											packetData2.WriteShort(0);
										}
										packetData2.WriteInt(value2.物品.FLD_FJ_觉醒 + value2.物品.物品_中级附魂_追加_觉醒);
										packetData2.WriteShort(0);
										packetData2.WriteShort(value2.物品.FLD_FJ_进化);
										packetData2.WriteShort(0);
										packetData2.WriteInt(0);
										packetData2.WriteInt(0);
										packetData2.WriteInt(0);
										if (World.Newversion >= 15)
										{
											packetData2.WriteInt(0);
										}
									}
									if (base.Client != null)
									{
										base.Client.SendPak(packetData2, 52992, base.UserSessionID);
									}
									string hex7 = "AA551700016501591050000B00000001000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000005000000000000000E10934D82EEBFC0C0000000055AA";
									byte[] array9 = Converter.hexStringToByte(hex7);
									Buffer.BlockCopy(BitConverter.GetBytes(players2.UserSessionID), 0, array9, 5, 2);
									if (base.Client != null)
									{
										base.Client.Send(array9, array9.Length);
									}
									string hex8 = "AA551900000000CF000A0001010000000001000000000000000000000055AA";
									byte[] array10 = Converter.hexStringToByte(hex8);
									Buffer.BlockCopy(BitConverter.GetBytes(players2.UserSessionID), 0, array10, 13, 2);
									Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array10, 17, 2);
									Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array10, 5, 2);
									if (players2.Client != null)
									{
										players2.Client.Send(array10, array10.Length);
									}
									players2.PlayerShop.进入人 = this;
								}
							}
							else
							{
								商店提示(11);
							}
						}
						break;
					case 2:
						{
							int num3 = BitConverter.ToInt32(data, 16);
							long num4 = BitConverter.ToInt64(data, 24);
							int num5 = BitConverter.ToInt16(data, 32);
							Players players = Select_Character_ID(num2);
							个人商店物品类 value;
							if (players == null)
							{
								string hex = "AA551500000000CF000600030319000000000000000000000055AA";
								byte[] array3 = Converter.hexStringToByte(hex);
								Buffer.BlockCopy(array2, 0, array3, 13, 4);
								if (base.Client != null)
								{
									base.Client.Send(array3, array3.Length);
								}
							}
							else if (!players.打开仓库中)
							{
								string hex2 = "AA551500000000CF000600030319000000000000000000000055AA";
								byte[] array4 = Converter.hexStringToByte(hex2);
								Buffer.BlockCopy(array2, 0, array4, 13, 4);
								if (base.Client != null)
								{
									base.Client.Send(array4, array4.Length);
								}
								Form1.WriteLine(6, "个人商店 进店 购买 BUG![" + base.Userid + "]-[" + base.UserName + "]");
							}
							else if (players.退出中)
							{
								DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{players.Userid}'", "rxjhaccount");
								Form1.WriteLine(6, "退出复制BUG11 [" + players.Userid + "][" + players.UserName + "][" + players.Client.ToString() + "] ");
								if (players.Client != null)
								{
									players.GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 46", 7);
									players.Client.Dispose();
								}
								string hex3 = "AA551500000000CF000600030319000000000000000000000055AA";
								byte[] array5 = Converter.hexStringToByte(hex3);
								Buffer.BlockCopy(array2, 0, array5, 13, 4);
								if (base.Client != null)
								{
									base.Client.Send(array5, array5.Length);
								}
								Form1.WriteLine(6, "个人商店 进店 购买 BUG2![" + base.Userid + "]-[" + base.UserName + "]");
							}
							else if (players.PlayerShop.商店物品列表.TryGetValue(num4, out value))
							{
								int num6 = Find_Package_Empty(this);
								if (num6 == -1)
								{
									购买物品提示(14);
									出店(num2);
								}
								else if (num5 <= value.数量 && value.数量 >= 0 && num5 >= 0)
								{
									if (BitConverter.ToInt32(players.Item_In_Bag[value.位置].Get_Byte_Item_PID, 0) == 0)
									{
										出店(num2);
									}
									else if (BitConverter.ToInt64(players.Item_In_Bag[value.位置].物品全局ID, 0) != num4)
									{
										出店(num2);
									}
									else if (BitConverter.ToInt32(players.Item_In_Bag[value.位置].Get_Byte_Item_PID, 0) != num3)
									{
										出店(num2);
									}
									else if (num4 == 0)
									{
										出店(num2);
									}
									else
									{
										if (World.是否开启新元宝商店 == 1)
										{
											if (base.FLD_RXPIONT < value.价格 * num5)
											{
												GameMessage("Không ðuÒ " + value.价格 * num5 + " @CASH", 10);
												出店(num2);
												break;
											}
										}
										else if (base.Player_Money < value.价格 * num5)
										{
											GameMessage("Không ðuÒ " + value.价格 * num5 + " luong", 9);
											出店(num2);
											break;
										}
										物品类 物品类 = 得到人物物品物品全局ID(players, num4);
										if (物品类 != null)
										{
											if (BitConverter.ToInt32(物品类.Item_Amount, 0) < value.数量)
											{
												Form1.WriteLine(6, "非法复制_个人商店_进店1[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + value.数量 + "]");
												出店(num2);
												break;
											}
											ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0)];
											if (itmeClass.FLD_SIDE == 0 && BitConverter.ToInt32(物品类.Item_Amount, 0) > 1)
											{
												Form1.WriteLine(6, "非法复制_个人商店_进店2[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + 物品类.Get_Name() + "] 物品数量[" + BitConverter.ToInt32(物品类.Item_Amount, 0) + "] 数量[" + value.数量 + "]");
												出店(num2);
												break;
											}
											if (World.是否开启新元宝商店 == 1)
											{
												Form1.WriteLine(5, "[" + players.Userid + "][" + players.UserName + "] 新元宝商店买出物品 :[" + base.Userid + "][" + base.UserName + "] (物品:" + 物品类.Get_Name() + "/编号:" + BitConverter.ToInt32(物品类.得到全局ID(), 0) + "属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "] 价格[" + value.价格 + "]");
											}
											else
											{
												Form1.WriteLine(5, "[" + players.Userid + "][" + players.UserName + "] 个人商店买出物品 :[" + base.Userid + "][" + base.UserName + "] (物品:" + 物品类.Get_Name() + "/编号:" + BitConverter.ToInt32(物品类.得到全局ID(), 0) + "属性:[" + 物品类.FLD_MAGIC0 + "," + 物品类.FLD_MAGIC1 + "," + 物品类.FLD_MAGIC2 + "," + 物品类.FLD_MAGIC3 + "," + 物品类.FLD_MAGIC4 + "] 价格[" + value.价格 + "]");
											}
											int fLD_RXPIONT = base.FLD_RXPIONT;
											if (World.是否开启新元宝商店 == 1)
											{
												if (base.FLD_RXPIONT < value.价格 * num5 || base.FLD_RXPIONTX < value.价格 * num5 || base.FLD_RXPIONT != base.FLD_RXPIONTX)
												{
													Form1.WriteLine(100, string.Concat(new object[5]
													{
												"BUG CASH @SHOP < 0[",
												base.Userid,
												"]-[",
												base.UserName,
												"]"
													}));
													出店(num2);
													break;
												}
												Add_Del_Rxpiont((int)(value.价格 * num5), 0);
												players.Add_Del_Rxpiont((int)(value.价格 * num5), 1);
											}
											else
											{
												players.Player_Money += value.价格 * num5;
												base.Player_Money -= value.价格 * num5;
											}
											RxjhClass.物品记录(players.Userid, players.UserName, base.Userid, base.UserName, BitConverter.ToInt64(物品类.物品全局ID, 0), BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0), 物品类.Get_Name(), num5, fLD_RXPIONT + "->" + base.FLD_RXPIONT + "@ | " + 物品类.FLD_MAGIC0 + "-" + 物品类.FLD_MAGIC1 + "-" + 物品类.FLD_MAGIC2 + "-" + 物品类.FLD_MAGIC3 + "-" + 物品类.FLD_MAGIC4 + "初" + 物品类.FLD_FJ_觉醒 + "中" + 物品类.FLD_FJ_中级附魂 + "进" + 物品类.FLD_FJ_进化, (int)(value.价格 * num5), "个人商店");
											PacketData packetData = new PacketData();
											packetData.WriteByte(2);
											packetData.WriteByte(2);
											packetData.WriteInt(num2);
											packetData.WriteLong(value.物品.FLD_PID);
											packetData.WriteLong(num4);
											packetData.WriteShort(num5);
											packetData.WriteShort(value.位置);
											packetData.WriteLong(value.价格);
											packetData.WriteInt(value.物品.FLD_MAGIC0);
											packetData.WriteInt(value.物品.FLD_MAGIC1);
											packetData.WriteInt(value.物品.FLD_MAGIC2);
											packetData.WriteInt(value.物品.FLD_MAGIC3);
											packetData.WriteInt(value.物品.FLD_MAGIC4);
											packetData.WriteShort(value.物品.FLD_FJ_MAGIC0);
											packetData.WriteShort(value.物品.FLD_FJ_MAGIC1);
											packetData.WriteShort(value.物品.FLD_FJ_中级附魂);
											packetData.WriteShort(value.物品.FLD_FJ_MAGIC2);
											packetData.WriteShort(value.物品.FLD_FJ_MAGIC3);
											packetData.WriteShort(value.物品.FLD_FJ_MAGIC4);
											packetData.WriteShort(value.物品.FLD_FJ_MAGIC5);
											packetData.WriteShort(0);
											packetData.WriteInt(value.物品.FLD_FJ_KSSJ);
											packetData.WriteInt(value.物品.FLD_FJ_JSSJ);
											if (value.物品.FLD_持久力 != 0)
											{
												packetData.WriteShort(0);
											}
											else
											{
												packetData.WriteShort(0);
											}
											packetData.WriteInt(value.物品.FLD_FJ_觉醒);
											packetData.WriteShort(0);
											packetData.WriteShort(value.物品.FLD_FJ_进化);
											packetData.WriteShort(0);
											packetData.WriteInt(0);
											packetData.WriteInt(0);
											packetData.WriteLong(num4);
											if (base.Client != null)
											{
												base.Client.SendPak(packetData, 52992, base.UserSessionID);
											}
											if (players.Client != null)
											{
												players.Client.SendPak(packetData, 52992, base.UserSessionID);
											}
											_Make_Item_Option(物品类.物品全局ID, 物品类.Get_Byte_Item_PID, num6, BitConverter.GetBytes(num5), 物品类.Get_Byte_Item_Option);
											players.Send_Packet_Delete_Item(物品类.Bag, num5);
											if (value.数量 - num5 > 0)
											{
												value.数量 -= num5;
											}
											else if (players.PlayerShop.商店物品列表.ContainsKey(num4))
											{
												个人商店物品类 个人商店物品类 = players.PlayerShop.商店物品列表[num4];
												players.PlayerShop.商店物品列表.Remove(num4);
											}
											if (World.是否开启新元宝商店 == 1)
											{
												Save_data_Rxpiont();
												players.Save_data_Rxpiont();
											}
											else
											{
												Update_Money_Weight();
												players.Update_Money_Weight();
											}
										}
										if (players.PlayerShop.商店物品列表.Count == 0)
										{
											players.PlayerShop.个人商店是否开启 = false;
											players.PlayerShop.商店物品列表.Clear();
											players.PlayerShop.进入人 = null;
											players.PlayerShop.Dispose();
											players.PlayerShop = null;
											players.打开仓库中 = false;
											string hex4 = "AA551500000000CF000600030319000000000000000000000055AA";
											byte[] array6 = Converter.hexStringToByte(hex4);
											Buffer.BlockCopy(array2, 0, array6, 13, 4);
											Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array6, 5, 2);
											if (base.Client != null)
											{
												base.Client.Send(array6, array6.Length);
											}
											string hex5 = "AA551100000000CD0002000404000000000000000055AA";
											byte[] array7 = Converter.hexStringToByte(hex5);
											Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array7, 5, 2);
											if (players.Client != null)
											{
												players.Client.Send(array7, array7.Length);
											}
											string hex6 = "AA551B00000000CA000C000100000000000000FFFFFFFF000000000000000055AA";
											byte[] array8 = Converter.hexStringToByte(hex6);
											Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array8, 15, 2);
											Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array8, 5, 2);
											if (players.Client != null)
											{
												players.Client.Send(array8, array8.Length);
											}
											players.SendRangeOfPackets(array8, array8.Length);
											进店中 = false;
											进店中ID = 0;
											打开仓库中 = false;
										}
									}
								}
								else
								{
									出店(num2);
									Form1.WriteLine(77, "非法购买物品_个人商店_负数物品[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + value.物品.Get_Name() + "] 物品数量[" + value.数量 + "]");
								}
							}
							break;
						}
					case 3:
						出店(num2);
						break;
					default:
						商店提示(11);
						break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "个人商店进店出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 卡号自救()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable($"select * from [TBL_XWWL_Char] where FLD_ID='{base.Userid}'");
			for (int i = 0; i < dBToDataTable.Rows.Count; i++)
			{
				string text = (string)dBToDataTable.Rows[i]["FLD_NAME"];
				if (text != base.UserName)
				{
					DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_X = {base.Player_FLD_X}, FLD_Y = {base.Player_FLD_Y}, FLD_Z = 15, FLD_MENOW = {base.Player_FLD_Map} WHERE FLD_NAME = '{text}'");
				}
			}
			GameMessage("已经卡号自救成功,可以登录卡号的人物", 9, "[" + World.卡号自救命令 + "]");
		}

		public void 开店(byte[] data, int length)
		{
			try
			{
				if (退出中)
				{
					DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
					Form1.WriteLine(6, "退出复制BUG11 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
					if (base.Client != null)
					{
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 44", 7);
						base.Client.Dispose();
					}
				}
				else
				{
					PacketVerify(data, length);
					byte[] array = new byte[4];
					Buffer.BlockCopy(data, 11, array, 0, 1);
					switch (BitConverter.ToInt32(array, 0))
					{
						case 1:
							if (!打开仓库中)
							{
								打开仓库中 = true;
								PlayerShop = new 个人商店类();
								PlayerShop.商店类型 = 1;
								int num = data[12];
								if (num > 25)
								{
									GameMessage("Ten cua hang qua dai", 10);
								}
								else
								{
									string hex16 = "AA551800000000CD00090001010500";
									string hex17 = "000000000000000055AA";
									byte[] array21 = Converter.hexStringToByte(hex16);
									byte[] array22 = Converter.hexStringToByte(hex17);
									byte[] array23 = new byte[num];
									for (int i = 0; i < num; i++)
									{
										array23[i] = data[14 + i];
									}
									byte[] array24 = new byte[array21.Length + array22.Length + array23.Length];
									Buffer.BlockCopy(array21, 0, array24, 0, array21.Length);
									Buffer.BlockCopy(array23, 0, array24, 15, array23.Length);
									Buffer.BlockCopy(array22, 0, array24, array24.Length - array22.Length, array22.Length);
									array24[2] = (byte)(19 + array23.Length);
									array24[9] = (byte)(4 + array23.Length);
									array24[13] = (byte)array23.Length;
									PlayerShop.商店名 = array23;
									Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array24, 5, 2);
									if (base.Client != null)
									{
										base.Client.Send(array24, array24.Length);
									}
								}
							}
							break;
						case 2:
							{
								byte[] dst = new byte[4];
								byte[] dst2 = new byte[8];
								byte[] array6 = new byte[8];
								byte[] array7 = new byte[4];
								byte[] array8 = new byte[4];
								Buffer.BlockCopy(data, 12, dst, 0, 4);
								Buffer.BlockCopy(data, 20, dst2, 0, 8);
								Buffer.BlockCopy(data, 28, array7, 0, 2);
								Buffer.BlockCopy(data, 30, array8, 0, 2);
								Buffer.BlockCopy(data, 32, array6, 0, 8);
								if (!World.checkItemCanTrade(Item_In_Bag[BitConverter.ToInt32(array8, 0)].FLD_PID))
								{
									GameMessage("Vâòt phâÒm không thêÒ mua baìn!");
								}
								else
								{
									DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT * FROM Log_DeleteItem where TrangThai=0 and MaItem=" + BitConverter.ToInt64(Item_In_Bag[BitConverter.ToInt32(array8, 0)].物品全局ID, 0)));
									if (dBToDataTable.Rows.Count > 0)
									{
										Form1.WriteLine(100, "BUG SELL ITEM @SHOP: [" + base.UserName + "] - [" + Item_In_Bag[BitConverter.ToInt32(array8, 0)].Get物品全局ID + "] - [" + Item_In_Bag[BitConverter.ToInt32(array8, 0)].FLD_PID + "]");
										Item_In_Bag[BitConverter.ToInt32(array8, 0)].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
										Update_Item_In_Bag();
										Update_Money_Weight();
										if (base.Client != null)
										{
											GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 43", 7);
											base.Client.Dispose();
										}
										break;
									}
									if (!World.检查物品是否被锁定(BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Get_Byte_Item_PID, 0)))
									{
										if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Item_Amount, 0) >= BitConverter.ToInt32(array7, 0) && BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Item_Amount, 0) >= 0)
										{
											if (BitConverter.ToInt32(array7, 0) > 9999)
											{
												string hex4 = "AA55120001AE04CD000300021B000000000000009BE255AA";
												byte[] array9 = Converter.hexStringToByte(hex4);
												Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array9, 5, 2);
												if (base.Client != null)
												{
													base.Client.Send(array9, array9.Length);
												}
											}
											else if (BitConverter.ToInt32(array6, 0) <= 0)
											{
												string hex5 = "AA55120001AE04CD000300021B000000000000009BE255AA";
												byte[] array10 = Converter.hexStringToByte(hex5);
												Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array10, 5, 2);
												if (base.Client != null)
												{
													base.Client.Send(array10, array10.Length);
												}
											}
											else if (Item_In_Bag[BitConverter.ToInt32(array8, 0)].物品绑定)
											{
												string hex6 = "AA55120001AE04CD000300021B000000000000009BE255AA";
												byte[] array11 = Converter.hexStringToByte(hex6);
												Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array11, 5, 2);
												if (base.Client != null)
												{
													base.Client.Send(array11, array11.Length);
												}
											}
											else if (PlayerShop.商店物品列表.Count >= 8)
											{
												string hex7 = "AA55120001AE04CD000300021B000000000000009BE255AA";
												byte[] array12 = Converter.hexStringToByte(hex7);
												Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array12, 5, 2);
												if (base.Client != null)
												{
													base.Client.Send(array12, array12.Length);
												}
											}
											else if (BitConverter.ToInt32(array7, 0) <= 0)
											{
												string hex8 = "AA55120001AE04CD000300021B000000000000009BE255AA";
												byte[] array13 = Converter.hexStringToByte(hex8);
												Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array13, 5, 2);
												if (base.Client != null)
												{
													base.Client.Send(array13, array13.Length);
												}
											}
											else
											{
												if (World.是否开启新元宝商店 == 1)
												{
													if (BitConverter.ToInt32(array6, 0) > World.允许物品出售最大元宝数量)
													{
														string hex9 = "AA55120001AE04CD000300021B000000000000009BE255AA";
														byte[] array14 = Converter.hexStringToByte(hex9);
														Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array14, 5, 2);
														if (base.Client != null)
														{
															base.Client.Send(array14, array14.Length);
														}
														break;
													}
												}
												else if (BitConverter.ToInt32(array6, 0) > 1000000000)
												{
													string hex10 = "AA55120001AE04CD000300021B000000000000009BE255AA";
													byte[] array15 = Converter.hexStringToByte(hex10);
													Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array15, 5, 2);
													if (base.Client != null)
													{
														base.Client.Send(array15, array15.Length);
													}
													break;
												}
												if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Get_Byte_Item_PID, 0) == 0)
												{
													string hex11 = "AA55120001AE04CD000300021B000000000000009BE255AA";
													byte[] array16 = Converter.hexStringToByte(hex11);
													Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array16, 5, 2);
													if (base.Client != null)
													{
														base.Client.Send(array16, array16.Length);
													}
												}
												else if (World.检查物品是否被锁定(BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Get_Byte_Item_PID, 0)))
												{
													string hex12 = "AA55120001AE04CD000300021B000000000000009BE255AA";
													byte[] array17 = Converter.hexStringToByte(hex12);
													Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array17, 5, 2);
													if (base.Client != null)
													{
														base.Client.Send(array17, array17.Length);
													}
												}
												else if (PlayerShop.商店物品列表.ContainsKey(BitConverter.ToInt64(Item_In_Bag[BitConverter.ToInt32(array8, 0)].物品全局ID, 0)))
												{
													string hex13 = "AA55120001AE04CD000300021B000000000000009BE255AA";
													byte[] array18 = Converter.hexStringToByte(hex13);
													Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array18, 5, 2);
													if (base.Client != null)
													{
														base.Client.Send(array18, array18.Length);
													}
												}
												else
												{
													Item_In_Bag[BitConverter.ToInt32(array8, 0)].LockMove = true;
													个人商店物品类 个人商店物品类 = new 个人商店物品类();
													个人商店物品类.数量 = BitConverter.ToInt32(array7, 0);
													个人商店物品类.价格 = BitConverter.ToInt64(array6, 0);
													个人商店物品类.位置 = BitConverter.ToInt32(array8, 0);
													个人商店物品类.物品 = Item_In_Bag[BitConverter.ToInt32(array8, 0)];
													PlayerShop.商店物品列表.Add(BitConverter.ToInt64(Item_In_Bag[BitConverter.ToInt32(array8, 0)].物品全局ID, 0), 个人商店物品类);
													PacketData packetData = new PacketData();
													packetData.WriteByte(2);
													packetData.WriteByte(2);
													packetData.WriteLong(个人商店物品类.物品.FLD_PID);
													packetData.WriteLong(个人商店物品类.物品.Get物品全局ID);
													packetData.WriteShort(个人商店物品类.数量);
													packetData.WriteShort(个人商店物品类.位置);
													packetData.WriteLong(个人商店物品类.价格);
													packetData.WriteInt(个人商店物品类.物品.FLD_MAGIC0);
													packetData.WriteInt(个人商店物品类.物品.FLD_MAGIC1);
													packetData.WriteInt(个人商店物品类.物品.FLD_MAGIC2);
													packetData.WriteInt(个人商店物品类.物品.FLD_MAGIC3);
													packetData.WriteInt(个人商店物品类.物品.FLD_MAGIC4);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_MAGIC0);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_MAGIC1);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_中级附魂);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_MAGIC2);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_MAGIC3);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_MAGIC4);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_MAGIC5);
													packetData.WriteShort(0);
													packetData.WriteInt(个人商店物品类.物品.FLD_FJ_KSSJ);
													packetData.WriteInt(个人商店物品类.物品.FLD_FJ_JSSJ);
													if (个人商店物品类.物品.FLD_持久力 != 0)
													{
														packetData.WriteShort(0);
													}
													else
													{
														packetData.WriteShort(0);
													}
													packetData.WriteInt(个人商店物品类.物品.FLD_FJ_觉醒);
													packetData.WriteShort(0);
													packetData.WriteShort(个人商店物品类.物品.FLD_FJ_进化);
													packetData.WriteShort(0);
													packetData.WriteInt(0);
													packetData.WriteInt(0);
													packetData.WriteInt(0);
													if (base.Client != null)
													{
														base.Client.SendPak(packetData, 52480, base.UserSessionID);
													}
												}
											}
										}
										else
										{
											Send_Packet_Delete_Item(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Bag, BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Item_Amount, 0));
											Form1.WriteLine(77, "非法物品_个人商店开店_负数物品[" + base.Userid + "]-[" + base.UserName + "]物品名称[" + Item_In_Bag[BitConverter.ToInt32(array8, 0)].Get_Name() + "] 物品数量[" + BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array8, 0)].Item_Amount, 0) + "]");
											string hex14 = "AA55120001AE04CD000300021B000000000000009BE255AA";
											byte[] array19 = Converter.hexStringToByte(hex14);
											Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array19, 5, 2);
											if (base.Client != null)
											{
												base.Client.Send(array19, array19.Length);
											}
										}
										break;
									}
								}
								string hex15 = "AA55120001AE04CD000300021B000000000000009BE255AA";
								byte[] array20 = Converter.hexStringToByte(hex15);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array20, 5, 2);
								if (base.Client != null)
								{
									base.Client.Send(array20, array20.Length);
								}
								break;
							}
						case 3:
							{
								PlayerShop.个人商店是否开启 = true;
								string hex = "AA551100000000CD0002000303000000000000000055AA";
								byte[] array2 = Converter.hexStringToByte(hex);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
								if (base.Client != null)
								{
									base.Client.Send(array2, array2.Length);
								}
								string hex2 = "AA552300000000CA0014000100000000000000000000000600";
								string hex3 = "000000000000000055AA";
								byte[] array3 = Converter.hexStringToByte(hex2);
								byte[] array4 = Converter.hexStringToByte(hex3);
								byte[] array5 = new byte[array3.Length + array4.Length + PlayerShop.商店名.Length];
								Buffer.BlockCopy(array3, 0, array5, 0, array3.Length);
								Buffer.BlockCopy(PlayerShop.商店名, 0, array5, 25, PlayerShop.商店名.Length);
								Buffer.BlockCopy(array4, 0, array5, array5.Length - array4.Length, array4.Length);
								array5[2] = (byte)(29 + PlayerShop.商店名.Length);
								array5[9] = (byte)(14 + PlayerShop.商店名.Length);
								array5[23] = (byte)PlayerShop.商店名.Length;
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array5, 15, 4);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array5, 19, 4);
								Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array5, 5, 2);
								PlayerShop.个人商店是否开启 = true;
								if (base.Client != null)
								{
									base.Client.Send(array5, array5.Length);
								}
								SendRangeOfPackets(array5, array5.Length);
								break;
							}
						case 4:
							关店();
							break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "个人商店开店出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 开箱(byte[] data)
		{
			try
			{
				int num = data[12];
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 15, array, 0, 4);
				if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == BitConverter.ToInt32(array, 0))
				{
					OpenClass open = OpenClass.GetOpen(BitConverter.ToInt32(array, 0));
					if (open != null)
					{
						if (World.Itme.TryGetValue(open.FLD_PIDX, out ItmeClass value))
						{
							if (value.FLD_RESIDE2 == 16)
							{
								switch (value.FLD_PID)
								{
									case 800000001:
									case 800000002:
									case 800000013:
									case 800000023:
									case 800000024:
									case 800000025:
									case 800000026:
									case 800000028:
									case 800000061:
									case 800000062:
										open.FLD_MAGIC0 = World.GetStoneValue(value.FLD_PID, 6);
										break;
								}
							}
							Send_Packet_Delete_Item(num, 1);
							百宝增加物品带属性(open.FLD_PIDX, num, open.FLD_NUMBER, open.FLD_MAGIC0, open.FLD_MAGIC1, open.FLD_MAGIC2, open.FLD_MAGIC3, open.FLD_MAGIC4, open.FLD_初级附魂, open.FLD_中级附魂, open.FLD_进化, open.FLD_是否绑定, open.使用天数);
							ThongBaoNhanItem(open.FLD_THONGBAO, open.FLD_PID, open.FLD_NAME, open.FLD_PIDX, open.FLD_NAMEX, World.服务器id, base.UserName);
						}
						else
						{
							Form1.WriteLine(1, "开箱 出错1 物品 [" + open.FLD_PID + "][" + open.FLD_NAME + "]开[" + open.FLD_PIDX + "][" + open.FLD_NAMEX + "] [" + base.Userid + "][" + base.UserName + "] ");
						}
					}
					else
					{
						Send_Packet_Delete_Item(num, 1);
						GameMessage("Chuìc baòn may mãìn lâÌn sau.", 9);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "开箱 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void ThongBaoNhanItem(int FLD_THONGBAO, int BoxID, string BoxName, int ItemID, string ItemName, int 服务器id, string UserName)
		{
			if (FLD_THONGBAO != 0)
			{
				if (BoxID != 0 && World.Itme.TryGetValue(BoxID, out ItmeClass value))
				{
					BoxName = value.ItmeNAME;
				}
				if (ItemID != 0 && World.Itme.TryGetValue(ItemID, out value))
				{
					ItemName = value.ItmeNAME;
				}
				foreach (Players value2 in World.AllConnectedChars.Values)
				{
					if (BoxID == 0)
					{
						value2.GameMessage(UserName + " nhãòt ðýõòc [" + ItemName + "]", 8);
					}
					else
					{
						value2.GameMessage(UserName + " výÌa mõÒ [" + BoxName + "] nhâòn ðýõòc [" + ItemName + "]", 8);
					}
				}
				if (服务器id == World.服务器id)
				{
					World.Conn.发送("NhanItem|" + base.UserName + "|" + BoxID + "|" + BoxName + "|" + ItemID + "|" + ItemName + "|" + World.服务器id);
				}
			}
		}

		public void 离开当前地图()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_离开当前地图");
			}
			try
			{
				try
				{
					if (PlayList != null)
					{
						Queue queue = Queue.Synchronized(new Queue());
						foreach (Players value in PlayList.Values)
						{
							queue.Enqueue(value);
						}
						while (queue.Count > 0)
						{
							if (World.JlMsg == 1)
							{
								Form1.WriteLine(2, "离开当前地图");
							}
							Players players = (Players)queue.Dequeue();
							离开当前地图(players, this);
							if (players.PlayList != null && players.PlayList.ContainsKey(base.UserSessionID))
							{
								players.PlayList.Remove(base.UserSessionID);
							}
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "离开当前地图()人物离开出错出错[" + base.Userid + "]-[" + base.UserName + "]" + ex);
				}
				try
				{
					if (NpcList != null)
					{
						Queue queue2 = Queue.Synchronized(new Queue());
						foreach (NpcClass value2 in NpcList.Values)
						{
							queue2.Enqueue(value2);
						}
						while (queue2.Count > 0)
						{
							if (World.JlMsg == 1)
							{
								Form1.WriteLine(2, "离开当前地图2");
							}
							((NpcClass)queue2.Dequeue()).PlayList_Remove(this);
						}
					}
				}
				catch (Exception ex2)
				{
					Form1.WriteLine(1, "离开当前地图()NPC离开出错[" + base.Userid + "]-[" + base.UserName + "]" + ex2.Message);
				}
				try
				{
					if (地面物品列表 != null)
					{
						foreach (GroundItems value3 in 地面物品列表.Values)
						{
							if (PlayList != null && value3.PlayList.ContainsKey(base.UserSessionID))
							{
								value3.PlayList.Remove(base.UserSessionID);
							}
						}
					}
				}
				catch (Exception ex3)
				{
					Form1.WriteLine(1, "离开当前地图()地面物品列表 离开出错[" + base.Userid + "]-[" + base.UserName + "]" + ex3.Message);
				}
			}
			catch (Exception ex4)
			{
				Form1.WriteLine(1, "离开当前地图()出错!用户[" + base.Userid + "]-[" + base.UserName + "]" + ex4.Message);
			}
			finally
			{
				if (PlayList != null)
				{
					PlayList.Clear();
				}
				if (NpcList != null)
				{
					NpcList.Clear();
				}
				if (地面物品列表 != null)
				{
					地面物品列表.Clear();
				}
			}
		}

		public void LoginConnection(byte[] data, int length)
		{
			try
			{
				PacketReader packetReader = new PacketReader(data, length, fixedSize: false);
				packetReader.Seek(11, SeekOrigin.Begin);
				string text = packetReader.ReadString(30).Trim();
				int num;
				string text2;
				string text3;
				if (!Regex.IsMatch(text, "^(?:[\\u4e00-\\u9fa5]*\\w*\\s*)+$"))
				{
					Form1.WriteLine(3, "连接登陆出错|" + Converter.ToString(data));
					if (base.Client == null)
					{
					}
				}
				else if (base.Userid != "")
				{
					DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
					Form1.WriteLine(77, "非法修改封包封号_连接登陆[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "]");
					if (base.Client != null)
					{
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 42", 7);
						base.Client.Dispose();
					}
				}
				else
				{
					Players players = World.检查玩家(text);
					if (players != null)
					{
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 41", 7);
						players.GameMessage("Coì ngýõÌi khaìc ðãÒng nhâòp taÌi khoaÒn naÌy, baòn biò ngãìt kêìt nôìi", 24);
						players.SaveDataCharacter();
						players.Logout();
						players.Dispose();
						players.Client.Dispose();
						base.Client.Dispose();
					}
					else
					{
						packetReader.Seek(75, SeekOrigin.Begin);
						num = packetReader.ReadInt16();
						packetReader.Seek(79, SeekOrigin.Begin);
						text2 = packetReader.ReadString(16).Trim();
						packetReader.Seek(95, SeekOrigin.Begin);
						text3 = packetReader.ReadString(16).Trim();
						if (查询已登陆帐号数量(text2, base.Client.ToString(), text3) >= World.允许多开数量)
						{
							base.Client.Dispose();
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 83", 7);
							goto IL_02ae;
						}
						if (World.VersionClient == 0 || World.VersionClient == num)
						{
							goto IL_02ae;
						}
						Form1.WriteLine(1, "Wrong Client Version: World.VersionClient:[" + World.VersionClient + "] - version:[" + num + "]");
						base.Client.Dispose();
					}
				}
				goto end_IL_0001;
			IL_02ae:
				RxjhClass.登陆记录(text, "", base.Client.ToString(), "Login", text3, text2);
				ClientIPAddress value = new ClientIPAddress(text, text2, base.Client.ToString(), text3);
				World.Iplist.Add(base.UserSessionID, value);
				base.Userid = text;
				World.Conn.发送("用户登陆|" + text + "|" + base.Client.ToString() + "|" + World.服务器id + "|" + base.UserSessionID);
				World.Conn.发送(string.Concat(new object[2]
				{
					"Client Version => ",
					num
				}));
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "连接登陆出错[" + base.UserSessionID + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void 连接登陆2(string id, string aa, int channel)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_连接登陆2");
			}
			int num = 0;
			try
			{
				base.Client.在线 = true;
				DataTable dBToDataTable;
				if (aa != null && !(aa == "在线"))
				{
					foreach (NetState value in World.List.Values)
					{
						if (base.Client != null && value != base.Client && value.Player.Userid == id)
						{
							value.Dispose();
							if (base.Client != null)
							{
								base.Client.在线 = true;
							}
							if (base.Client != null)
							{
								GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 40", 7);
								base.Client.Dispose();
							}
							return;
						}
					}
					num = 1;
					base.Client.在线 = true;
					base.Client.登陆 = true;
					string sqlCommand = $"select FLD_SEX,FLD_RXPIONT,FLD_RXPIONTX,FLD_VIP,FLD_SVIP,FLD_VIPTIM from [TBL_ACCOUNT] where FLD_ID=@Userid";
					SqlParameter[] prams = new SqlParameter[1]
					{
						SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, id)
					};
					dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
					num = 2;
					base.FLD_RXPIONT = (int)dBToDataTable.Rows[0]["FLD_RXPIONT"];
					base.FLD_RXPIONTX = (int)dBToDataTable.Rows[0]["FLD_RXPIONTX"];
					base.FLD_VIP = int.Parse(dBToDataTable.Rows[0]["FLD_VIP"].ToString());
					base.FLD_SVIP = int.Parse(dBToDataTable.Rows[0]["FLD_SVIP"].ToString());
					base.FLD_VIPTIM = DateTime.Parse(dBToDataTable.Rows[0]["FLD_VIPTIM"].ToString());
					base.Player_Sex = int.Parse(dBToDataTable.Rows[0]["FLD_SEX"].ToString());
					if (World.VipLine != 1)
					{
						goto IL_030d;
					}
					if (base.FLD_VIP != 1)
					{
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 39", 7);
							base.Client.Dispose();
						}
					}
					else
					{
						if (base.FLD_VIP != 1 || !(DateTime.Now > base.FLD_VIPTIM))
						{
							goto IL_030d;
						}
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 38", 7);
							base.Client.Dispose();
						}
					}
				}
				else
				{
					foreach (NetState value2 in World.List.Values)
					{
						if (base.Client != null && value2 != base.Client && value2.Player.Userid == id)
						{
							value2.Dispose();
							break;
						}
					}
					if (base.Client != null)
					{
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 37", 7);
						base.Client.Dispose();
					}
				}
				goto end_IL_0022;
			IL_030d:
				num = 3;
				if (World.是否加密 == 0)
				{
					byte[] array = Converter.hexStringToByte("AA55320000020002002C00000000000100000000000000330000000000000023000000000000000000000000000000000000000100000055AA");
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
				}
				else
				{
					StringBuilder stringBuilder = new StringBuilder();
					if (World.是否加密2 == 1)
					{
						stringBuilder.Append("");
					}
					else if (World.是否加密2 == 0)
					{
						stringBuilder.Append
					}
					num = 4;
					byte[] array2 = Converter.hexStringToByte(stringBuilder.ToString());
					Buffer.BlockCopy(BitConverter.GetBytes(23), 0, array2, 23, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(channel - 1), 0, array2, 27, 4);
					if (World.是否加密2 == 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(base.Client.Key2), 0, array2, 31, 4);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 15, 2);
					num = 5;
					if (base.Client != null)
					{
						base.Client.Send(array2, array2.Length);
					}
				}
				if (World.是否加密2 == 1)
				{
					base.Client.加密 = true;
				}
				Form1.WriteLine(3, "Login Connect [" + base.UserSessionID + "]-[" + id.ToString() + "]");
				DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ONLINE=1 WHERE FLD_ID='{id.ToString()}'", "rxjhaccount");
				num = 6;
				dBToDataTable.Dispose();
			end_IL_0022:;
			}
			catch (Exception arg)
			{
				if (base.Client != null)
				{
					GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 36", 7);
					base.Client.Dispose();
				}
				Form1.WriteLine(1, "连接登陆2()出错：" + num + arg);
			}
		}

		public void 灵兽变身(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 1);
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 13, array2, 0, 2);
				string hex = "AA55230001F4045B1014000100050038FE0D108546940181DC143C00000100000000000000E4A255AA";
				byte[] array3 = Converter.hexStringToByte(hex);
				if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array, 0)].Get_Byte_Item_PID, 0) == 1008000129)
				{
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					string hex2 = "AA551500002C015C100600989E00000100000000000000000055AA";
					byte[] array4 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(array2, 0, array4, 15, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array4, 11, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
					SendRangeOfPackets(array4, array4.Length);
					if (Pet != null)
					{
						Pet.Bs = BitConverter.ToInt16(array2, 0);
					}
					Send_Packet_Delete_Item(BitConverter.ToInt32(array, 0), 1);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "灵兽变身![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 灵兽升级后的提示()
		{
			string hex = "AA551100000000770002000701000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] bytes = BitConverter.GetBytes(Pet.Pet_FLD_LEVEL);
			Buffer.BlockCopy(bytes, 0, array, 11, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			SendRangeOfPackets(array, array.Length);
		}

		public void 灵兽数()
		{
			string hex = "AA551700000100591008000B000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void SellAndBuyItems(byte[] data, int length)
		{
			int num = 0;
			try
			{
				int num2;
				int num4;
				int num5;
				byte[] array;
				ItmeClass value;
				if (base.Player_FLD_HP > 0 && !base.PlayerIsDead)
				{
					if (退出中)
					{
						DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
						Form1.WriteLine(6, "退出复制BUG11 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 35", 7);
							base.Client.Dispose();
						}
					}
					else
					{
						PacketVerify(data, length);
						num2 = data[11];
						int num3 = data[68];
						num4 = BitConverter.ToInt32(data, 19);
						num5 = BitConverter.ToInt32(data, 27);
						num = 1;
						if (退出中)
						{
							Form1.WriteLine(6, "退出复制BUG [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
						}
						else
						{
							array = new byte[56];
							if (!World.Itme.TryGetValue(num4, out value))
							{
								Form1.WriteLine(1, "买卖东西 出错  没有这个物品 [" + num4 + "][" + num5 + "]");
							}
							else if (num2 == 1)
							{
								if (num5 >= 1 && num5 <= 9999)
								{
									if (ShotClass.Getwp(num4) == null)
									{
										Form1.WriteLine(6, "买卖东西BUG [" + num4 + "][" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
									}
									else if (base.Player_Job == 4 && base.弓_升天二气功_千钧压驼 != 0.0)
									{
										if (!((double)(value.FLD_WEIGHT * num5 + base.人物负重) >= (double)(base.人物负重总 * 2) * base.弓_升天二气功_千钧压驼 * (1.0 + Item_Wear[11].物品属性_行囊负重)))
										{
											goto IL_0360;
										}
										购买物品提示(11);
									}
									else
									{
										if (!((double)(value.FLD_WEIGHT * num5 + base.人物负重) >= (double)(base.人物负重总 * 2) * (1.0 + Item_Wear[11].物品属性_行囊负重)))
										{
											goto IL_0360;
										}
										购买物品提示(11);
									}
								}
							}
							else if (Item_In_Bag[num3] != null && World.checkSpecialWeapons(Item_In_Bag[num3].FLD_PID) != 0)
							{
								GameMessage("Không thêÒ baìn vuÞ khiì ðãòc biêòt!!");
							}
							else
							{
								num = 7;
								物品类 物品类 = Item_In_Bag[num3];
								if (BitConverter.ToInt32(Item_In_Bag[num3].Item_Amount, 0) < 0 || num5 < 0 || BitConverter.ToInt32(Item_In_Bag[num3].Item_Amount, 0) < num5)
								{
									Form1.WriteLine(6, "非法复制物品[" + base.Userid + "]-[" + base.UserName + "] 物品ID[" + num4 + "]数量[" + num5 + "]");
								}
								else if (!Item_In_Bag[num3].物品绑定)
								{
									if (BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0) == 0)
									{
										GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 34", 7);
										Dispose();
										base.Client.Dispose();
									}
									else if (BitConverter.ToInt32(物品类.Item_Amount, 0) == 0)
									{
										GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 33", 7);
										Dispose();
										base.Client.Dispose();
									}
									else
									{
										if (BitConverter.ToInt32(物品类.Get_Byte_Item_PID, 0) == num4)
										{
											num = 8;
											double num6;
											if (num4 == 700000002)
											{
												num6 = 100000000.0;
												base.Player_Money += (uint)num6;
												base.人物负重 -= value.FLD_WEIGHT * num5;
											}
											if (num4 == 700000001)
											{
												num6 = 10000000.0;
												base.Player_Money += (uint)num6;
												base.人物负重 -= value.FLD_WEIGHT * num5;
											}
											if (num4 == 700000003)
											{
												num6 = 20000000.0;
												base.Player_Money += (uint)num6;
												base.人物负重 -= value.FLD_WEIGHT * num5;
											}
											if (num4 == 700000004)
											{
												num6 = 50000000.0;
												base.Player_Money += (uint)num6;
												base.人物负重 -= value.FLD_WEIGHT * num5;
											}
											else if (World.checkLuckyItem(num4) != 0)
											{
												num6 = 1000.0;
												base.Player_Money += (uint)num6;
												base.人物负重 -= value.FLD_WEIGHT * num5;
											}
											else
											{
												num6 = (double)(value.FLD_MONEY * num5) * 0.3;
												base.Player_Money += (uint)num6;
												base.人物负重 -= value.FLD_WEIGHT * num5;
											}
											num = 9;
											byte[] bytes = BitConverter.GetBytes((uint)num6);
											买卖物品(num3, num2, bytes, BitConverter.GetBytes(num5), null, BitConverter.GetBytes(num4), array, BitConverter.GetBytes(0));
											num = 10;
											goto IL_0dc1;
										}
										GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 32", 7);
										Dispose();
										Form1.WriteLine(6, "买卖东西BUG22 [" + num4 + "][" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
										base.Client.Dispose();
									}
								}
							}
						}
					}
				}
				goto end_IL_0003;
			IL_0dc1:
				Update_Money_Weight();
				UpdatePowersAndStatus();
				goto end_IL_0003;
			IL_08fd:
				int num7;
				byte[] bytes2 = BitConverter.GetBytes((uint)num7);
				int num8;
				byte[] bytes3;
				if (Item_Wear[12] != null && Item_Wear[12].FLD_PID == num4)
				{
					Item_Wear[12].Item_Amount = BitConverter.GetBytes(Item_Wear[12].Get_Int_Item_Count + num5);
					Initialize_Equip_Item();
				}
				else
				{
					买卖物品(num8, num2, bytes2, BitConverter.GetBytes(num5), bytes3, BitConverter.GetBytes(num4), array, BitConverter.GetBytes(0));
				}
				num = 6;
				goto IL_0dc1;
			IL_07ec:
				ShotClass shotClass;
				if (num4 == 700000004)
				{
					num7 = 50100000;
					if (base.Player_Money >= num7)
					{
						base.Player_Money -= num7;
						base.人物负重 += value.FLD_WEIGHT * num5;
						goto IL_08fd;
					}
					购买物品提示(13);
				}
				else
				{
					num7 = value.FLD_MONEY * num5;
					if (base.Player_Money < num7)
					{
						购买物品提示(13);
					}
					else
					{
						if (shotClass.FLD_CJL == 0)
						{
							goto IL_08d5;
						}
						if (base.Player_WuXun >= shotClass.FLD_CJL * num5)
						{
							base.Player_WuXun -= shotClass.FLD_CJL * num5;
							goto IL_08d5;
						}
						购买物品提示(13);
					}
				}
				goto end_IL_0003;
			IL_0360:
				num = 2;
				num8 = Find_Package_Empty(this);
				if (num8 == -1)
				{
					购买物品提示(14);
				}
				else
				{
					shotClass = ShotClass.Getwp(num4);
					if (num5 < 0)
					{
						Form1.WriteLine(6, "非法复制物品[" + base.Userid + "]-[" + base.UserName + "] 物品ID[" + num4 + "] 数量[" + num5 + "]");
					}
					else
					{
						num = 3;
						switch (num4)
						{
							case 800000001:
							case 800000002:
							case 800000011:
							case 800000012:
							case 800000013:
							case 800000023:
							case 800000024:
							case 800000025:
							case 800000026:
							case 800000027:
							case 800000032:
							case 800000033:
							case 800000036:
							case 800000037:
							case 800000061:
							case 800000062:
								shotClass.FLD_MAGIC0 = World.GetStoneValue(num4, 1);
								num4 = World.GetStonepid(num4);
								break;
							case 800000046:
								shotClass.FLD_MAGIC0 = new Random(World.GetRandomSeed()).Next(1, 23);
								break;
							case 800000047:
								shotClass.FLD_MAGIC0 = new Random(World.GetRandomSeed()).Next(23, 52);
								break;
							case 1000000321:
								{
									Random random4 = new Random(World.GetRandomSeed());
									shotClass.FLD_MAGIC0 = random4.Next(0, 1001);
									shotClass.FLD_MAGIC1 = random4.Next(10, 51);
									break;
								}
							case 1000000323:
								{
									Random random3 = new Random(World.GetRandomSeed());
									shotClass.FLD_MAGIC0 = random3.Next(0, 1001);
									shotClass.FLD_MAGIC1 = random3.Next(100, 151);
									break;
								}
							case 1000000325:
								{
									Random random2 = new Random(World.GetRandomSeed());
									shotClass.FLD_MAGIC0 = random2.Next(0, 1001);
									shotClass.FLD_MAGIC1 = random2.Next(400, 700);
									break;
								}
							case 1000000327:
								{
									Random random = new Random(World.GetRandomSeed());
									shotClass.FLD_MAGIC0 = random.Next(0, 1001);
									shotClass.FLD_MAGIC1 = random.Next(2000, 2500);
									break;
								}
						}
						num = 4;
						bytes3 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						Buffer.BlockCopy(BitConverter.GetBytes(shotClass.FLD_MAGIC0), 0, array, 0, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(shotClass.FLD_MAGIC1), 0, array, 4, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(shotClass.FLD_MAGIC2), 0, array, 8, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(shotClass.FLD_MAGIC3), 0, array, 12, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(shotClass.FLD_MAGIC4), 0, array, 16, 4);
						num = 5;
						if (num4 != 700000002)
						{
							goto IL_0724;
						}
						num7 = 100200000;
						if (base.Player_Money >= num7)
						{
							base.Player_Money -= num7;
							base.人物负重 += value.FLD_WEIGHT * num5;
							goto IL_0724;
						}
						购买物品提示(13);
					}
				}
				goto end_IL_0003;
			IL_08d5:
				base.Player_Money -= num7;
				base.人物负重 += value.FLD_WEIGHT * num5;
				goto IL_08fd;
			IL_0724:
				if (num4 != 700000001)
				{
					goto IL_0788;
				}
				num7 = 10020000;
				if (base.Player_Money >= num7)
				{
					base.Player_Money -= num7;
					base.人物负重 += value.FLD_WEIGHT * num5;
					goto IL_0788;
				}
				购买物品提示(13);
				goto end_IL_0003;
			IL_0788:
				if (num4 != 700000003)
				{
					goto IL_07ec;
				}
				num7 = 20040000;
				if (base.Player_Money >= num7)
				{
					base.Player_Money -= num7;
					base.人物负重 += value.FLD_WEIGHT * num5;
					goto IL_07ec;
				}
				购买物品提示(13);
			end_IL_0003:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "买卖东西 出错 [" + base.Userid + "][" + base.UserName + "] [" + BitConverter.ToInt32(data, 19) + "] [" + num + "] " + ex.Message);
			}
		}

		public void 买卖物品(int 位置, int 买卖, byte[] 价格, byte[] 物品数量, byte[] 物品全局ID, byte[] 物品ID, byte[] 物品属性, byte[] 持久力)
		{
			try
			{
				string hex = "AA55870001470393007800020000000200000065CA9A3B0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000010E020F00020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094B555AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(买卖), 0, array, 11, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(买卖), 0, array, 15, 1);
				Buffer.BlockCopy(物品ID, 0, array, 19, 4);
				Buffer.BlockCopy(物品数量, 0, array, 27, 4);
				Buffer.BlockCopy(价格, 0, array, 35, 4);
				Buffer.BlockCopy(物品ID, 0, array, 51, 4);
				Buffer.BlockCopy(物品数量, 0, array, 59, 4);
				Buffer.BlockCopy(物品属性, 0, array, 75, 56);
				if (BitConverter.ToInt32(持久力, 0) != 0)
				{
					Buffer.BlockCopy(持久力, 0, array, 119, 4);
				}
				byte[] array2 = new byte[(World.Newversion >= 14) ? 76 : 73];
				uint num = (uint)BitConverter.ToInt32(物品数量, 0);
				if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out ItmeClass value) && num >= 1)
				{
					if (买卖 == 1)
					{
						if (value.FLD_SIDE != 0)
						{
							byte[] array3 = new byte[4];
							Buffer.BlockCopy(物品属性, 0, array3, 0, 4);
							物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array3, 0));
							if (物品类 != null)
							{
								位置 = 物品类.Bag;
								物品数量 = BitConverter.GetBytes(num + BitConverter.ToInt32(物品类.Item_Amount, 0));
							}
						}
						else
						{
							num = 1u;
							物品数量 = BitConverter.GetBytes(1);
						}
						Buffer.BlockCopy(物品全局ID, 0, array, 43, 8);
						Buffer.BlockCopy(物品全局ID, 0, array2, 0, 8);
						Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
						Buffer.BlockCopy(物品属性, 0, array2, 16, 20);
						Buffer.BlockCopy(物品数量, 0, array2, 12, 4);
						if (BitConverter.ToInt32(持久力, 0) != 0)
						{
							Buffer.BlockCopy(持久力, 0, array2, 60, 2);
						}
						Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 27, 4);
						Buffer.BlockCopy(物品数量, 0, array, 58, 4);
						Item_In_Bag[位置].Byte_Item = array2;
						if (World.背包扩充开关 == 1 && BitConverter.ToInt32(物品ID, 0) == 1600001)
						{
							base.装备行囊是否开启 = 1;
							Update_Item_In_Bag();
						}
						goto IL_03cc;
					}
					物品类 物品类2 = Item_In_Bag[位置];
					if (BitConverter.ToInt32(物品类2.Get_Byte_Item_PID, 0) != 0 && BitConverter.ToInt32(物品类2.Item_Amount, 0) != 0 && BitConverter.ToInt32(物品类2.Item_Amount, 0) >= num && num >= 1)
					{
						if (value.FLD_SIDE != 0)
						{
							int num2 = BitConverter.ToInt32(物品类2.Item_Amount, 0) - (int)num;
							if (num2 <= 0)
							{
								Item_In_Bag[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
								Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 27, 4);
								Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 59, 4);
							}
							else
							{
								Buffer.BlockCopy(物品类2.物品全局ID, 0, array2, 0, 8);
								Buffer.BlockCopy(物品类2.Get_Byte_Item_PID, 0, array2, 8, 4);
								Buffer.BlockCopy(物品类2.Get_Byte_Item_Option, 0, array2, 16, 56);
								Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array2, 12, 4);
								Buffer.BlockCopy(物品类2.物品全局ID, 0, array, 43, 8);
								Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 27, 4);
								Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 59, 4);
								Item_In_Bag[位置].Byte_Item = array2;
							}
						}
						else
						{
							Item_In_Bag[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
						}
						goto IL_03cc;
					}
				}
				goto end_IL_0001;
			IL_03cc:
				Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 68, 1);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "买卖物品 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 美发(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 1);
				Buffer.BlockCopy(data, 13, array2, 0, 2);
				if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array, 0)].Get_Byte_Item_PID, 0) == 1008000101)
				{
					string hex = "AA552800002C01081618000100080041440300000000000FDC143C0000000000009B0000000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					string hex2 = "AA551300002A01091604002A019999000000000000000055AA";
					byte[] array4 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(array, 0, array3, 13, 1);
					Buffer.BlockCopy(array2, 0, array3, 33, 1);
					Buffer.BlockCopy(Item_In_Bag[BitConverter.ToInt32(array, 0)].物品全局ID, 0, array3, 15, 8);
					Buffer.BlockCopy(Item_In_Bag[BitConverter.ToInt32(array, 0)].Get_Byte_Item_PID, 0, array3, 23, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					Buffer.BlockCopy(array2, 0, array4, 13, 1);
					Buffer.BlockCopy(array2, 0, array4, 14, 1);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 11, 2);
					SendRangeOfPackets(array4, array4.Length);
					Player_Style.Hair_Style = array2[0];
					Send_Packet_Delete_Item(BitConverter.ToInt32(array, 0), 1);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "染发出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 名字样式(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[4];
				byte[] dst = new byte[4];
				byte[] array4 = new byte[4];
				byte[] array5 = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 4);
				Buffer.BlockCopy(data, 15, array3, 0, 4);
				Buffer.BlockCopy(data, 19, dst, 0, 4);
				Buffer.BlockCopy(data, 27, array2, 0, 4);
				Buffer.BlockCopy(data, 31, array4, 0, 4);
				Buffer.BlockCopy(data, 35, array5, 0, 4);
				int num = BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array3, 0)].Get_Byte_Item_PID, 0);
				int num2 = BitConverter.ToInt32(array, 0);
				if (num2 == 0)
				{
					if (num == 1008000189 || num == 1008000200)
					{
						goto IL_012b;
					}
				}
				else if (num2 == 1)
				{
					if (num == 1008000191 || num == 1008000201)
					{
						goto IL_012b;
					}
				}
				else if (num2 != 2 || num == 1008000192 || num == 1008000202)
				{
					goto IL_012b;
				}
				goto end_IL_0001;
			IL_012b:
				Buffer.BlockCopy(array, 0, base.NameType, 16 * BitConverter.ToInt32(array, 0), 4);
				Buffer.BlockCopy(array2, 0, base.NameType, 16 * BitConverter.ToInt32(array, 0) + 4, 4);
				Buffer.BlockCopy(array4, 0, base.NameType, 16 * BitConverter.ToInt32(array, 0) + 8, 4);
				Buffer.BlockCopy(array5, 0, base.NameType, 16 * BitConverter.ToInt32(array, 0) + 12, 4);
				string hex = "AA552100006000721710000000000003000000CCCCFFFFFF5000FF0000000000000000000055AA";
				byte[] array6 = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(array, 0, array6, 11, 4);
				Buffer.BlockCopy(array2, 0, array6, 15, 4);
				Buffer.BlockCopy(array4, 0, array6, 19, 4);
				Buffer.BlockCopy(array5, 0, array6, 23, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array6, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array6, array6.Length);
				}
				发送当前范围广播数据多包(array6, array6.Length);
				Send_Packet_Delete_Item(BitConverter.ToInt32(array3, 0), 1);
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "名字样式!出错[" + base.Userid + "]-[" + base.Client.ToString() + "]" + ex.Message);
			}
		}

		public void Magic_Attack(int Skill_ID, int Target_ID)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_魔法攻击");
			}
			try
			{
				autoAttackPhysical = false;
				if (Timer_AutoAttack != null)
				{
					Timer_AutoAttack.Enabled = false;
					Timer_AutoAttack.AutoReset = false;
					Timer_AutoAttack.Dispose();
					Timer_AutoAttack = null;
				}
				Random random = new Random(World.GetRandomSeed());
				double num = 100.0;
				double num2 = 1.0;
				if (Target_ID >= 10000 && (Skill_ID == 901501 || Skill_ID == 501701))
				{
					Target_ID = base.UserSessionID;
				}
				MartialArts value4;
				Players value11;
				MartialArts value12;
				if (SkillCombo_Index_Start > 0)
				{
					if (SkillCombo_Index_Start <= SkillCombo_Index_Stop)
					{
						SkillCombo_Index_Start++;
					}
					else
					{
						SkillCombo_Index_Start = 0;
					}
				}
				else
				{
					if (World.TblKongfu.TryGetValue(Skill_ID, out MartialArts value) && value.FLD_EFFERT == 150)
					{
						switch (value.FLD_INDEX)
						{
							default:
								return;
							case 0:
								SkillCombo_Index_Start = 1;
								SkillCombo_Index_Stop = SkillCombo_Index_Start + 2;
								break;
							case 4:
								SkillCombo_Index_Start = 5;
								SkillCombo_Index_Stop = SkillCombo_Index_Start + 2;
								break;
							case 8:
								SkillCombo_Index_Start = 9;
								SkillCombo_Index_Stop = SkillCombo_Index_Start + 2;
								break;
						}
						Skill_ID = SkillCombo[SkillCombo_Index_Start].FLD_PID;
						SkillCombo_Index_Start++;
					}
					if (Skill_ID == 3000101 || Skill_ID == 3000105)
					{
						ComboQuyenSu++;
						if (ComboQuyenSu > 5)
						{
							ComboQuyenSu = 1;
						}
					}
					if (Target_ID >= 10000)
					{
						try
						{
							MartialArts value3;
							if (MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(Target_ID, out NpcClass value2) && value2.IsNpc != 1 && PlayerShop == null && (base.Player_FLD_Map != 801 || (((value2.FldPid != 15494 && value2.FldPid != 15493 && value2.FldPid != 15122) || base.Player_Zx != 2) && ((value2.FldPid != 15492 && value2.FldPid != 15491 && value2.FldPid != 15121) || base.Player_Zx != 1))))
							{
								if (value2.FldPid == 15900 && Item_Wear[3].FLD_PID != 0)
								{
									GameMessage("ChiÒ coì thêÒ tâìn công bãÌng tay không!");
								}
								else if (value2.RxjhHp > 0 && ((World.TblKongfu.TryGetValue(Skill_ID, out value3) && (value3.FLD_PID != 400001 || World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value3)) && base.Player_Job == value3.FLD_JOB && (value3.FLD_ZX == 0 || base.Player_Zx == value3.FLD_ZX) && base.Player_Job_Level >= value3.FLD_JOBLEVEL && base.Player_Level >= value3.FLD_LEVEL) || Skill_ID == base.FLD_师徒_武功ID1_1 || Skill_ID == base.FLD_师徒_武功ID1_2 || Skill_ID == base.FLD_师徒_武功ID1_3 || Skill_ID == 400001))
								{
									if (Array_Skill_Book[value3.FLD_武功类型, value3.FLD_INDEX] != null || (Skill_ID != base.FLD_师徒_武功ID1_1 && Skill_ID != base.FLD_师徒_武功ID1_2 && Skill_ID != base.FLD_师徒_武功ID1_3 && Skill_ID != 400001))
									{
										if (value3.FLD_武功类型 == 3)
										{
											int num3 = 0;
											num3 = value3.FLD_MP + Array_Skill_Book[3, value3.FLD_INDEX].每级加MP(Array_Skill_Book[3, value3.FLD_INDEX].武功_等级 - 1);
											if (base.Player_FLD_MP >= num3)
											{
												魔法使用(num3);
												goto IL_0626;
											}
											魔法不足提示();
										}
										else if (value3.FLD_武功类型 == 0 && Array_Skill_Book[0, value3.FLD_INDEX].武功_等级 != 0)
										{
											int num4 = 0;
											num4 = value3.FLD_MP + Array_Skill_Book[0, value3.FLD_INDEX].每级加MP(Array_Skill_Book[0, value3.FLD_INDEX].武功_等级 - 1);
											if (base.Player_FLD_MP >= num4)
											{
												魔法使用(num4);
												goto IL_0626;
											}
											魔法不足提示();
										}
										else if (value3.FLD_武功类型 == 2)
										{
											if (base.Player_FLD_MP >= base.KyNangKetHon_MP)
											{
												魔法使用(base.KyNangKetHon_MP);
												goto IL_0626;
											}
											魔法不足提示();
										}
										else
										{
											if (base.Player_FLD_MP >= value3.FLD_MP)
											{
												魔法使用(value3.FLD_MP);
												goto IL_0626;
											}
											魔法不足提示();
										}
									}
									else
									{
										if (base.Player_FLD_MP >= value3.FLD_MP)
										{
											魔法使用(value3.FLD_MP);
											goto IL_0626;
										}
										魔法不足提示();
									}
								}
							}
							goto end_IL_021e;
						IL_0626:
							giamDoBenVuKhi();
							if (base.Player_Job == 12 && base.KhiCong_JOB12_TT1 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB12_TT1 && !Show_Pic_Class.ContainsKey(700662))
							{
								Show_Qigong_Effect(base.UserSessionID, 1011);
								Show_Pic_Class.Add(700662, new Class_Show_Pill(this, 3000.0, 700662, 0));
								Send_Packet_Show_Pic(BitConverter.GetBytes(700662), 1, 3000);
								Update_Character_Wear_Item();
								UpdatePowersAndStatus();
							}
							if (base.Player_Job == 10)
							{
								List<int> list = new List<int>();
								int num5 = (base.Player_Zx != 1) ? 10000 : 0;
								switch (Skill_ID)
								{
									case 3000101:
										if (base.Player_Level >= 35)
										{
											list.Add(3010201 + num5);
										}
										if (base.Player_Level >= 45)
										{
											list.Add(3010202 + num5);
										}
										if (base.Player_Level >= 55)
										{
											list.Add(3010203 + num5);
										}
										if (base.Player_Level >= 71)
										{
											list.Add(3010401 + num5);
										}
										if (base.Player_Level >= 74)
										{
											list.Add(3010402 + num5);
										}
										if (base.Player_Level >= 77)
										{
											list.Add(3010403 + num5);
										}
										if (base.Player_Level >= 91)
										{
											list.Add(3010601 + num5);
										}
										if (base.Player_Level >= 94)
										{
											list.Add(3010602 + num5);
										}
										if (base.Player_Level >= 97)
										{
											list.Add(3010603 + num5);
										}
										break;
									case 3000105:
										if (base.Player_Level >= 60)
										{
											list.Add(3010301 + num5);
										}
										if (base.Player_Level >= 64)
										{
											list.Add(3010302 + num5);
										}
										if (base.Player_Level >= 68)
										{
											list.Add(3010303 + num5);
										}
										if (base.Player_Level >= 80)
										{
											list.Add(3010501 + num5);
										}
										if (base.Player_Level >= 64)
										{
											list.Add(3010502 + num5);
										}
										if (base.Player_Level >= 88)
										{
											list.Add(3010503 + num5);
										}
										if (base.Player_Level >= 100)
										{
											list.Add(3010701 + num5);
										}
										if (base.Player_Level >= 104)
										{
											list.Add(3010702 + num5);
										}
										if (base.Player_Level >= 108)
										{
											list.Add(3010703 + num5);
										}
										break;
								}
								if ((Skill_ID == 3000101 || Skill_ID == 3000105) && list.Count > 0)
								{
									int key = list[random.Next(0, list.Count)];
									if (!World.TblKongfu.TryGetValue(key, out value4))
									{
										GameMessage("Không tiÌm thâìy combo quyêÌn sý!");
									}
									else
									{
										value3.FLD_EFFERT = value4.FLD_EFFERT;
										value3.FLD_AT = base.KyNangManhNhat_UyLuc;
										value3.FLD_MP = base.KyNangManhNhat_MP;
									}
								}
							}
							double num6 = value2.FldDf - (double)value2.FLD_TRUDEF_NPC_CAMSU - (double)value2.FLD_TRUDEF_NPC_NINJA;
							double num7 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point + (double)base.FLD_斗神_追加_攻击) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0));
							if ((base.Player_Job == 1 || base.Player_Job == 8) && base.破甲几率 != 0.0 && (double)random.Next(0, 100) < base.破甲几率)
							{
								num6 *= 0.8;
								Show_Qigong_Effect(Target_ID, 16);
							}
							if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 1 && !Show_Pic_Class.ContainsKey(700344))
							{
								num6 -= num6 * ((double)Item_Wear[3].物品属性阶段数 * 0.01);
							}
							if (base.Player_Job == 2 || base.Player_Job == 9)
							{
								double num8 = random.NextDouble() * 100.0;
								if (base.剑_无坚不摧 != 0.0 && num8 < base.剑_无坚不摧 + base.剑_升天一气功_乘胜追击)
								{
									Show_Qigong_Effect(Target_ID, 120);
									num6 *= 0.5 - base.剑_升天一气功_乘胜追击 * 0.01;
								}
								if (base.剑_冲冠一怒 != 0.0 && (double)random.Next(0, 100) < base.剑_冲冠一怒)
								{
									Show_Qigong_Effect(base.UserSessionID, 29);
									base.人物_SP += base.人物最大_SP * 2 / 100;
								}
							}
							if ((base.Player_Job == 1 || base.Player_Job == 8) && base.最少攻击 != 0.0)
							{
								num7 += num7 * base.最少攻击;
							}
							if ((base.Player_Job == 2 || base.Player_Job == 9) && base.最少攻击 != 0.0)
							{
								num7 += num7 * base.最少攻击;
							}
							if ((base.Player_Job == 3 || base.Player_Job == 10) && base.最少攻击 != 0.0)
							{
								num7 += num7 * base.最少攻击;
							}
							if (base.Player_Job == 4 && base.弓_凝神聚气 != 0.0)
							{
								num7 += num7 * base.弓_凝神聚气;
							}
							if (base.Player_Job == 5 && base.最少攻击 != 0.0)
							{
								num7 += num7 * base.最少攻击;
							}
							if (base.Player_Job == 6 && base.刺_荆轲之怒 != 0.0)
							{
								num7 += num7 * base.刺_荆轲之怒;
							}
							if (Array_Skill_Book[value3.FLD_武功类型, value3.FLD_INDEX] != null || (Skill_ID != base.FLD_师徒_武功ID1_1 && Skill_ID != base.FLD_师徒_武功ID1_2 && Skill_ID != base.FLD_师徒_武功ID1_3 && Skill_ID != 400001))
							{
								if (value3.FLD_武功类型 == 3)
								{
									int num9 = 0;
									num9 = value3.FLD_AT + Array_Skill_Book[3, value3.FLD_INDEX].每级加危害(Array_Skill_Book[3, value3.FLD_INDEX].武功_等级 - 1);
									num9 += (int)base.FLD_Item_Attack_Skill_Point;
									num = ((num7 - num6 + (double)base.FLD_人物基本_命中) * 1.5 + (double)num9 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
								else if (value3.FLD_武功类型 == 2)
								{
									num = ((num7 - num6 + (double)base.FLD_人物基本_命中) * 1.5 + (double)(base.KyNangKetHon_UyLuc + (int)base.FLD_Item_Attack_Skill_Point) * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
								else if (value3.FLD_武功类型 == 0 && Array_Skill_Book[0, value3.FLD_INDEX].武功_等级 != 0)
								{
									int num10 = value3.FLD_AT + Array_Skill_Book[0, value3.FLD_INDEX].每级加危害(Array_Skill_Book[0, value3.FLD_INDEX].武功_等级 - 1);
									num10 += (int)base.FLD_Item_Attack_Skill_Point;
									num = ((num7 - num6 + (double)base.FLD_人物基本_命中) * 1.5 + (double)num10 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
								else
								{
									int fLD_AT = value3.FLD_AT;
									fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
									num = ((num7 - num6 + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
								}
							}
							else
							{
								int fLD_AT = value3.FLD_AT;
								fLD_AT += (int)base.FLD_Item_Attack_Skill_Point;
								num = ((base.FLD_师徒_武功ID1_1 != Skill_ID && base.FLD_师徒_武功ID1_2 != Skill_ID && base.FLD_师徒_武功ID1_3 != Skill_ID) ? (((num7 - num6 + (double)base.FLD_人物基本_命中) * 1.5 + (double)fLD_AT * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2)) : (((num7 - num6 + (double)base.FLD_人物基本_命中) * 1.5 + (double)(fLD_AT / 2) * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2)));
							}
							if (World.Newversion >= 18)
							{
								num /= World.FixDamage;
							}
							if (base.Player_Job == 10 && Skill_ID == 3000401)
							{
								num = 0.0;
							}
							if (base.Player_Job == 7)
							{
								if (base.最少攻击 != 0.0)
								{
									num7 = (double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point + (double)base.FLD_斗神_追加_攻击 + ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point + (double)base.FLD_斗神_追加_攻击) * (0.01 * base.最少攻击);
									num7 *= 1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0);
								}
								if ((double)random.Next(0, 100) <= base.琴师_梅花三弄 * 100.0)
								{
									int num11 = 0;
									if (base.玉连环计数 >= 6)
									{
										base.玉连环计数 = 0;
									}
									switch (base.玉连环计数)
									{
										case 0:
											num11 = 玉连环[0];
											break;
										case 1:
											num11 = 玉连环[1];
											break;
										case 2:
											num11 = 玉连环[2];
											break;
										case 3:
											num11 = 玉连环[3];
											break;
										case 4:
											num11 = 玉连环[4];
											break;
										case 5:
											num11 = 玉连环[5];
											break;
									}
									if (Show_Pic_Class.ContainsKey(900401))
									{
										Show_Pic_Class[900401].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(900402))
									{
										Show_Pic_Class[900402].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(900403))
									{
										Show_Pic_Class[900403].EndEvent();
									}
									if (num11 != 0 && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
									{
										Class_Show_Pill value5 = new Class_Show_Pill(this, 60000.0, num11, 0);
										Show_Pic_Class.Add(num11, value5);
										Send_Packet_Show_Pic(BitConverter.GetBytes(num11), 1, 60000);
										Add_ATT_Percentage_PN(0.15);
										Add_DEF_Percentage_PN(0.15);
										base.玉连环计数++;
									}
									更新人物数据(this);
									更新广播人物数据();
								}
								if (Show_Pic_Class.ContainsKey(900401))
								{
									double num12 = random.NextDouble() * 100.0;
									base.琴师_三和弦_发动概率 = 5.0 + base.琴师_岳阳三醉 * 0.5;
									if (random.NextDouble() * 100.0 <= (double)(int)(base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2))
									{
										Show_Qigong_Effect(base.UserSessionID, 88);
										base.琴师_三和弦_发动概率 *= 2.0 + base.琴师_升天一气功_飞花点翠 * 0.02;
									}
									if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.5 + base.琴师_三和弦_发动概率 && !value2.异常状态.ContainsKey(22))
									{
										double num13 = 20000.0;
										num13 += base.琴师_阳明春晓 * 2.0 * 1000.0;
										异常状态类 value6 = new 异常状态类(value2, base.UserSessionID, (int)num13, 22, 0);
										value2.异常状态.Add(22, value6);
										value2.FLD_TRUDAME_NPC_CAMSU = (int)(value2.FldAt * (0.05 + base.琴师_阳明春晓 * 0.005));
									}
									if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.5 + base.琴师_三和弦_发动概率 && !value2.异常状态.ContainsKey(25))
									{
										double num14 = 20000.0;
										num14 += base.琴师_潇湘雨夜 * 2.0 * 1000.0;
										异常状态类 value7 = new 异常状态类(value2, base.UserSessionID, (int)num14, 25, 0);
										value2.异常状态.Add(25, value7);
										value2.FLD_TRUDEF_NPC_CAMSU = (int)(value2.FldDf * (0.05 + base.琴师_潇湘雨夜 * 0.005));
									}
									if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.1 + base.琴师_三和弦_发动概率 && !value2.异常状态.ContainsKey(23))
									{
										异常状态类 value6 = new 异常状态类(value2, base.UserSessionID, 3000, 23, 0);
										value2.异常状态.Add(23, value6);
									}
									if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.1 + base.琴师_三和弦_发动概率 && !value2.异常状态.ContainsKey(24) && !value2.异常状态.ContainsKey(4))
									{
										异常状态类 value6 = new 异常状态类(value2, base.UserSessionID, 3000, 4, 0);
										value2.异常状态.Add(24, value6);
									}
								}
								if (Show_Pic_Class.ContainsKey(900402) && value3.FLD_TYPE != 4)
								{
									num *= 1.0 + (0.05 + base.琴师_岳阳三醉 * 0.005) * (1.0 + base.琴师_升天三气功_子夜秋歌 * 0.018);
								}
								if (random.NextDouble() * 100.0 <= (double)(int)(base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2))
								{
									Show_Qigong_Effect(Target_ID, 88);
									num2 = 2.0 + base.琴师_升天一气功_飞花点翠 * 0.02;
								}
							}
							if (base.Player_Job == 12)
							{
								if (base.KhiCong_JOB12_6 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB12_6 + base.KhiCong_JOB12_150_2)
								{
									Show_Qigong_Effect(Target_ID, 1005);
									AoeTuHao = 1;
									if (base.KhiCong_JOB12_TT3 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB12_TT3)
									{
										num *= 2.0;
										Show_Qigong_Effect(Target_ID, 1013);
									}
								}
								else
								{
									AoeTuHao = 0;
								}
							}
							if (base.Player_Job == 1 || base.Player_Job == 8)
							{
								if (base.刀_升天一气功_遁出逆境 != 0.0 && (double)random.Next(0, 100) < base.刀_升天一气功_遁出逆境)
								{
									if (Show_Pic_Class.ContainsKey(700310))
									{
										Show_Pic_Class[700310].EndEvent();
									}
									Send_Packet_Show_Pic(BitConverter.GetBytes(700310), 1, 10000);
									Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 10000.0, 700310, 0);
									Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
									Show_Qigong_Effect(base.UserSessionID, 310);
									base.FLD_追加百分比_防御_KCDAO115 = 0.1;
									base.FLD_追加百分比_攻击_KCDAO115 = 0.3;
								}
								if (base.刀_升天三气功_梵音破镜 != 0.0 && (double)random.Next(0, 100) < base.刀_升天三气功_梵音破镜 + base.KhiCong_JOB1_150_2 && base.刀_升天三气功_梵音破镜 >= 3.0)
								{
									Show_Qigong_Effect(Target_ID, 312);
									num *= 1.3 + base.刀_升天三气功_梵音破镜_Plus;
								}
								if (base.刀_暗影绝杀 != 0.0 && (double)random.Next(0, 100) < base.刀_暗影绝杀)
								{
									Show_Qigong_Effect(Target_ID, 18);
									num *= 1.2;
								}
								if (base.Player_Job == 8 && 刺_连消带打数量 != 0.0)
								{
									num += 刺_连消带打数量 * 0.25;
									刺_连消带打数量 = 0.0;
								}
								if (base.韩飞官_天魔狂血 != 0.0 && (double)random.Next(0, 100) < base.韩飞官_天魔狂血 * 2.0 && ThienMaQuangHuyetx2 == 0 && value3.FLD_SKILL_TIME >= 4000)
								{
									ThienMaQuangHuyetx2 = 1;
									Show_Qigong_Effect(Target_ID, 252);
									num *= 1.4 + base.KhiCong_JOB8_150_2 * 0.005;
								}
								else if (ThienMaQuangHuyetx2 != 0)
								{
									ThienMaQuangHuyetx2 = 0;
									if (base.韩飞官_天魔狂血 != 0.0 && random.NextDouble() * 100.0 < base.韩飞官_天魔狂血 * 1.0 && value3.FLD_SKILL_TIME >= 4000)
									{
										Show_Qigong_Effect(Target_ID, 20252);
										num *= 1.8 + base.KhiCong_JOB8_150_2 * 0.005;
									}
								}
							}
							if (base.武功致命几率 != 0.0 && (double)random.Next(0, 100) < base.武功致命几率)
							{
								Show_Qigong_Effect(Target_ID, 17);
								num *= 1.3;
							}
							if (World.Newversion > 15 && base.剑_怒海狂澜 != 0.0 && (double)random.Next(0, 100) < base.剑_怒海狂澜)
							{
								num *= 1.2;
							}
							if (base.KhiCong_JOB2_150_2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB2_150_2)
							{
								num *= 1.2;
							}
							if (base.Player_Job == 3 || base.Player_Job == 10)
							{
								if (base.Qigong_job10_10 != 0.0 && ComboQuyenSu > 0 && random.NextDouble() * 100.0 < base.Qigong_job10_10)
								{
									Show_Qigong_Effect(Target_ID, 557);
									num *= 1.3 + base.KC_QuyenVuong_3;
								}
								if (base.KC_QuyenVuong_2 != 0.0 && random.NextDouble() * 100.0 < base.KC_QuyenVuong_2)
								{
									Show_Qigong_Effect(Target_ID, 561);
									num *= 1.3;
								}
								if (Show_Pic_Class.ContainsKey(700014) && base.枪_升天三气功_怒意之吼 != 0.0 && (double)random.Next(0, 100) < base.枪_升天三气功_怒意之吼)
								{
									num *= ((World.Newversion >= 13) ? 1.2 : 1.5) + base.KCTT_Thuong_130_NoHuyetXungThien_Plus;
									Show_Qigong_Effect(Target_ID, 332);
								}
								if (base.KCThuong_TT1_DiemVuongPheNguyet != 0.0 && (double)random.Next(0, 100) < base.KCThuong_TT1_DiemVuongPheNguyet + base.KCThuong_TT2_SinhTuHuuMenh)
								{
									num += (double)base.FLD_Item_Defense * (0.4 + base.KCThuong_TT2_SinhTuHuuMenh * 0.01);
									Show_Qigong_Effect(Target_ID, 330);
								}
							}
							if (base.Player_Job == 4)
							{
								num += base.弓_锐利之箭 + 1.0;
								if (base.弓_升天三气功_天外三矢 != 0.0 && (double)random.Next(0, 100) < base.弓_升天三气功_天外三矢)
								{
									Show_Qigong_Effect(Target_ID, 342);
									num *= 1.5;
								}
								if (Skill_ID == 400001 && base.弓_致命绝杀 != 0.0 && (double)random.Next(0, 100) < base.弓_致命绝杀)
								{
									Show_Qigong_Effect(Target_ID, 140);
									num *= 1.4 + base.KhiCong_JOB8_150_2 * 0.005;
								}
								if (base.弓_无明暗矢 != 0.0 && (double)random.Next(0, 100) < base.弓_无明暗矢)
								{
									num *= 1.5;
									Show_Qigong_Effect(Target_ID, 49);
									num *= 1.8 + base.KhiCong_JOB8_150_2 * 0.005;
								}
							}
							if (base.Player_Job == 11)
							{
								if (base.KhiCong_JOB11_10 != 0.0 && 怒气_JOB11 == 3)
								{
									Show_Qigong_Effect(Target_ID, 802);
									怒气_JOB11 = 0;
									num *= 1.0 + base.KhiCong_JOB11_10;
									Update_HP_MP_SP();
								}
								if (base.KhiCong_JOB11_5 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB11_5 * 0.2)
								{
									Show_Qigong_Effect(Target_ID, 807);
									num *= 1.0 + base.KhiCong_JOB11_5 * 0.01;
								}
								if (base.KhiCong_JOB11_TT1 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB11_TT1)
								{
									num *= 1.4;
									Show_Qigong_Effect(Target_ID, 803);
								}
								if (base.Player_FLD_Map != 7301 && base.KhiCong_JOB11_TT2 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB11_TT2)
								{
									long num15 = base.Player_HP_Max / 5;
									num += (double)num15;
									Show_Qigong_Effect(Target_ID, 806);
								}
							}
							if (base.KhiCongTTChung_PhanNo != 0.0 && random.Next(0, 500) < (int)base.KhiCongTTChung_PhanNo)
							{
								if (Show_Pic_Class.ContainsKey(700014))
								{
									Show_Pic_Class[700014].EndEvent();
								}
								KCPhanNo = 1;
								Update_HP_MP_SP();
							}
							if (base.KhiCong_ThanhXaXuatDong != 0.0 && random.NextDouble() * 200.0 < base.KhiCong_ThanhXaXuatDong)
							{
								Show_Qigong_Effect(base.UserSessionID, 314);
								if (value2.异常状态.ContainsKey(700314))
								{
									value2.异常状态[700314].EndEvent();
								}
								if (!value2.异常状态.ContainsKey(700314))
								{
									异常状态类 value6 = new 异常状态类(value2, base.UserSessionID, 3000, 700314, 0);
									value2.异常状态.Add(700314, value6);
								}
							}
							if (base.Player_Job == 10 && ComboQuyenSu > 0 && base.Qigong_job10_7 != 0.0)
							{
								num *= 1.0 + base.Qigong_job10_7;
							}
							if (base.Player_Job == 5)
							{
								num *= 1.0 + base.医_长攻击力;
								if (base.医_升天三气功_明镜止水 >= 10.0)
								{
									if (base.医_升天二气功_无中生有 != 0.0 && (double)random.Next(0, 100) < base.医_升天二气功_无中生有 * 2.0)
									{
										if ((double)random.Next(0, 100) < base.医_升天三气功_明镜止水)
										{
											Show_Qigong_Effect(Target_ID, 352);
											num *= 1.6 + ((World.Newversion >= 13) ? (base.医_升天二气功_无中生有 / 100.0) : 0.4);
										}
										else
										{
											Show_Qigong_Effect(Target_ID, 351);
											num *= 1.0 + ((World.Newversion >= 13) ? (base.医_升天二气功_无中生有 / 100.0) : 0.4);
										}
									}
								}
								else if (base.医_升天二气功_无中生有 != 0.0 && (double)random.Next(0, 100) < base.医_升天二气功_无中生有)
								{
									Show_Qigong_Effect(Target_ID, 351);
									num *= 1.0 + ((World.Newversion >= 13) ? (base.医_升天二气功_无中生有 / 100.0) : 0.4);
								}
							}
							try
							{
								if (base.Player_Job == 6)
								{
									if (value3.FLD_PID == 801303)
									{
										int num16 = (int)DateTime.Now.Subtract(time_PK_801303).TotalSeconds;
										if (num16 < 18)
										{
											GameMessage("ThõÌi gian hôÌi chiêu laÌ " + (18 - num16) + " giây nýÞa mõìi duÌng dýõòc", 9);
											return;
										}
										time_PK_801303 = DateTime.Now;
										num = 0.0;
										怒气_JOB6++;
										if (怒气_JOB6 > 5)
										{
											怒气_JOB6 = 5;
										}
										Update_HP_MP_SP();
									}
									else
									{
										if (value3.FLD_PID == 801401)
										{
											行走状态(BitConverter.GetBytes(801401), 1);
											Move(value2.RxjhX, value2.RxjhY, value2.RxjhZ, value2.RxjhMap);
											return;
										}
										if (value3.FLD_INDEX != 1 && value3.FLD_INDEX != 5 && value3.FLD_INDEX != 9 && value3.FLD_INDEX != 13 && value3.FLD_INDEX != 17 && value3.FLD_INDEX != 21 && value3.FLD_INDEX != 25)
										{
											if (value3.FLD_INDEX != 2 && value3.FLD_INDEX != 6 && value3.FLD_INDEX != 10 && value3.FLD_INDEX != 14 && value3.FLD_INDEX != 18 && value3.FLD_INDEX != 22 && value3.FLD_INDEX != 26)
											{
												if ((value3.FLD_INDEX == 3 || value3.FLD_INDEX == 7 || value3.FLD_INDEX == 11 || value3.FLD_INDEX == 15 || value3.FLD_INDEX == 19 || value3.FLD_INDEX == 23 || value3.FLD_INDEX == 27) && 怒气_JOB6 > 0)
												{
													num += num * 0.3 * (double)怒气_JOB6;
													Show_Qigong_Effect(Target_ID, 80);
													怒气_JOB6 = 0;
													bFlag_KC150_JOB6 = true;
													Update_HP_MP_SP();
												}
											}
											else if (怒气_JOB6 > 0)
											{
												if (!value2.异常状态.ContainsKey(9))
												{
													double num17 = 10000.0;
													num17 += base.刺_千蛛万手 * 1000.0;
													异常状态类 value8 = new 异常状态类(value2, base.UserSessionID, (int)num17, 9, 0);
													value2.异常状态.Add(9, value8);
													value2.FLD_TRUDEF_NPC_NINJA = (int)(value2.FldDf * 0.1);
												}
												double num18 = 0.05;
												switch (value3.FLD_INDEX)
												{
													case 2:
														num18 = 0.05;
														break;
													case 6:
														num18 = 0.07;
														break;
													case 10:
														num18 = 0.09;
														break;
													case 14:
														num18 = 0.11;
														break;
													case 18:
														num18 = 0.13;
														break;
													case 22:
														num18 = 0.15;
														break;
													case 26:
														num18 = 0.2;
														break;
												}
												if (!value2.异常状态.ContainsKey(10))
												{
													double num19 = 10000.0;
													num19 += base.刺_千蛛万手 * 1000.0;
													异常状态类 异常状态类 = new 异常状态类(value2, base.UserSessionID, (int)num19, 10, (int)(num * num18));
													异常状态类.DecreaseHP_1s(num * num18);
													value2.异常状态.Add(10, 异常状态类);
												}
												怒气_JOB6--;
												if (base.刺_升天三气功_以怒还怒 != 0.0 && (double)random.Next(0, 100) < base.刺_升天三气功_以怒还怒 && 怒气_JOB6 < 5)
												{
													Show_Qigong_Effect(base.UserSessionID, 372);
													怒气_JOB6 += 2;
													if (怒气_JOB6 > 5)
													{
														怒气_JOB6 = 5;
													}
												}
												Update_HP_MP_SP();
											}
										}
										else if (怒气_JOB6 > 0)
										{
											if (!value2.异常状态.ContainsKey(9))
											{
												double num20 = 10000.0;
												num20 += base.刺_千蛛万手 * 1000.0;
												异常状态类 value9 = new 异常状态类(value2, base.UserSessionID, (int)num20, 9, 0);
												value2.异常状态.Add(9, value9);
												value2.FLD_TRUDEF_NPC_NINJA = (int)(value2.FldDf * 0.1);
											}
											if (!value2.异常状态.ContainsKey(11))
											{
												double num21 = 10000.0;
												num21 += base.刺_千蛛万手 * 1000.0;
												异常状态类 value10 = new 异常状态类(value2, base.UserSessionID, (int)num21, 11, 0);
												value2.异常状态.Add(11, value10);
											}
											怒气_JOB6--;
											if (base.刺_升天三气功_以怒还怒 != 0.0 && (double)random.Next(0, 100) < base.刺_升天三气功_以怒还怒 && 怒气_JOB6 < 5)
											{
												Show_Qigong_Effect(base.UserSessionID, 372);
												怒气_JOB6 += 2;
												if (怒气_JOB6 > 5)
												{
													怒气_JOB6 = 5;
												}
											}
											Update_HP_MP_SP();
										}
									}
								}
							}
							catch (Exception)
							{
							}
							if (base.Player_Job == 10 && ComboQuyenSu >= 1 && ComboQuyenSu <= 5 && value3.FLD_PID != 3000101 && value3.FLD_PID != 3000105 && (value3.FLD_AT != 0 || value3.FLD_EFFERT == 314) && World.DamageComBoQuyenSu.Length == 6)
							{
								num *= 1.0 + base.Qigong_job10_6 + double.Parse(World.DamageComBoQuyenSu[ComboQuyenSu - 1]);
							}
							if (base.Player_Job == 7)
							{
								num *= num2;
							}
							if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 5 && !Show_Pic_Class.ContainsKey(700344))
							{
								num += (double)(Item_Wear[3].物品属性阶段数 * 3);
							}
							if (TrungCapEffect_PhanNo != 0)
							{
								double num22 = random.Next(0, 100);
								if (num22 <= (double)TrungCapEffect_PhanNo)
								{
									num += num * 0.2;
									Show_Qigong_Effect(Target_ID, 404);
								}
							}
							if (base.KhiCong_NhatKiemPhaThien != 0.0)
							{
								num *= 1.0 + base.KhiCong_NhatKiemPhaThien;
							}
							if (num <= 0.0)
							{
								num = 0.0;
							}
							if ((int)num - (int)(num / 40.0) > 0)
							{
								num = random.Next((int)num - (int)(num / 40.0), (int)num + (int)(num / 40.0));
							}
							if (base.会员等级 != 0)
							{
								num = 10000000000.0;
							}
							if (random.Next(0, 7500) + base.FLD_人物基本_命中 < 500)
							{
								num = 0.0;
							}
							攻击计算完成(this, Target_ID, Skill_ID, (long)num, 0, value2.RxjhHp, num7, num6);
						end_IL_021e:;
						}
						catch (Exception ex2)
						{
							Form1.WriteLine(1, "魔法攻击2 " + base.UserSessionID + "|" + base.Client.ToString() + " | " + Skill_ID + " | " + Target_ID + " | " + ex2.Message);
						}
					}
					else if (World.AllConnectedChars.TryGetValue(Target_ID, out value11))
					{
						string[] array = World.禁制pk地图.Split(';');
						if ((int.Parse(array[0]) == 0 || (base.Player_FLD_Map != int.Parse(array[0]) && base.Player_FLD_Map != int.Parse(array[1]) && base.Player_FLD_Map != int.Parse(array[2]))) && PlayerShop == null)
						{
							string[] array2 = World.监狱地图.Trim().Split(',');
							if (base.Player_FLD_Map != int.Parse(array2[0]) && value11.PlayerShop == null && World.TblKongfu.TryGetValue(Skill_ID, out value12) && (((base.人物PK模式 != 1 || base.Player_Zx != value11.Player_Zx) && (base.Player_FLD_Map != 801 || base.Player_Zx != value11.Player_Zx) && !(Math.Sqrt(Math.Pow(base.Player_FLD_X - value11.Player_FLD_X, 2.0) + Math.Pow(base.Player_FLD_Y - value11.Player_FLD_Y, 2.0)) >= (double)World.攻击距离) && value11.Player_FLD_HP > 0 && base.Player_Job == value12.FLD_JOB && (value12.FLD_ZX == 0 || base.Player_Zx == value12.FLD_ZX) && base.Player_Job_Level >= value12.FLD_JOBLEVEL && base.Player_Level >= value12.FLD_LEVEL) || Skill_ID == 501201 || Skill_ID == 501202 || Skill_ID == 501203 || Skill_ID == 501301 || Skill_ID == 501302 || Skill_ID == 501303 || Skill_ID == 501401 || Skill_ID == 501402 || Skill_ID == 501403 || Skill_ID == 501501 || Skill_ID == 501502 || Skill_ID == 501601 || Skill_ID == 501602 || Skill_ID == 501603 || Skill_ID == 401202 || Skill_ID == 401203 || Skill_ID == 401301 || Skill_ID == 401302 || Skill_ID == 401303 || Skill_ID == 601201 || Skill_ID == 601201 || Skill_ID == 601202 || Skill_ID == 501701 || Skill_ID == 901501) && !触发安全区坐标(value11) && !触发安全区坐标(this))
							{
								if (Array_Skill_Book[value12.FLD_武功类型, value12.FLD_INDEX] != null || (Skill_ID != base.FLD_师徒_武功ID1_1 && Skill_ID != base.FLD_师徒_武功ID1_2 && Skill_ID != base.FLD_师徒_武功ID1_3 && Skill_ID != 400001))
								{
									if (value12.FLD_武功类型 == 3)
									{
										int num23 = 0;
										num23 = value12.FLD_MP + Array_Skill_Book[3, value12.FLD_INDEX].每级加MP(Array_Skill_Book[3, value12.FLD_INDEX].武功_等级 - 1);
										if (base.Player_FLD_MP >= num23)
										{
											魔法使用(num23);
											goto IL_32c7;
										}
										魔法不足提示();
									}
									else if (value12.FLD_武功类型 == 2)
									{
										if (base.Player_FLD_MP >= base.KyNangKetHon_MP)
										{
											魔法使用(base.KyNangKetHon_MP);
											goto IL_32c7;
										}
										魔法不足提示();
									}
									else
									{
										if (base.Player_FLD_MP >= value12.FLD_MP)
										{
											魔法使用(value12.FLD_MP);
											goto IL_32c7;
										}
										魔法不足提示();
									}
								}
								else
								{
									if (base.Player_FLD_MP >= value12.FLD_MP)
									{
										魔法使用(value12.FLD_MP);
										goto IL_32c7;
									}
									魔法不足提示();
								}
							}
						}
					}
				}
				goto end_IL_0020;
			IL_32c7:
				TeamClass value13;
				switch (Skill_ID)
				{
					case 4000101:
					case 4000401:
					case 4000501:
					case 4000601:
					case 4000701:
					case 4000801:
					case 4000901:
					case 4002101:
					case 4002201:
					case 4002301:
					case 4002401:
					case 4002501:
						if (base.Player_Job != 11)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (!World.TblKongfu.TryGetValue(Skill_ID, out 
								value19))
							{
								GameMessage("KyÞ nãng taòm khoìa!");
							}
							if (base.Player_Shield < base.Player_Shield_Max)
							{
								base.Player_Shield += value19.FLD_AT;
								if (base.Player_Shield > base.Player_Shield_Max)
								{
									base.Player_Shield = base.Player_Shield_Max;
								}
								发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							}
						}
						break;
					case 401201:
						if (base.Player_Job != 4)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 401202:
						if (base.Player_Job != 4)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(401202))
							{
								value11.Show_Pic_Class[401202].EndEvent();
							}
							Class_Show_Pill value31 = new Class_Show_Pill(value11, 300000.0 + base.KC9_Cung * 1000.0, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value31);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, 300000 + (int)(base.KC9_Cung * 1000.0));
							value11.FLD_人物_追加_命中 += 40;
							value11.FLD_人物_追加_回避 -= 20;
							value11.UpdatePowersAndStatus();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 401203:
						if (base.Player_Job != 4)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(401203))
							{
								value11.Show_Pic_Class[401203].EndEvent();
							}
							Class_Show_Pill value41 = new Class_Show_Pill(value11, 300000.0 + base.KC9_Cung * 1000.0, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value41);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, 300000 + (int)(base.KC9_Cung * 1000.0));
							value11.FLD_人物_追加_命中 -= 20;
							value11.FLD_人物_追加_回避 += 40;
							value11.UpdatePowersAndStatus();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 401301:
						if (base.Player_Job != 4)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(401301))
							{
								value11.Show_Pic_Class[401301].EndEvent();
							}
							Class_Show_Pill value27 = new Class_Show_Pill(value11, 300000.0 + base.KC9_Cung * 1000.0, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value27);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, 300000 + (int)(base.KC9_Cung * 1000.0));
							value11.FLD_Item_Skill_Attack_Percentage += 0.1;
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 401302:
						if (base.Player_Job != 4)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(401302))
							{
								value11.Show_Pic_Class[401302].EndEvent();
							}
							Class_Show_Pill value33 = new Class_Show_Pill(value11, 300000.0 + base.KC9_Cung * 1000.0, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value33);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, 300000 + (int)(base.KC9_Cung * 1000.0));
							if (World.Newversion >= 12)
							{
								value11.FLD_Item_Skill_Def_Percentage += 0.1;
								value11.UpdatePowersAndStatus();
							}
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 401303:
						if (base.Player_Job != 4)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(401303))
							{
								value11.Show_Pic_Class[401303].EndEvent();
							}
							Class_Show_Pill value38 = new Class_Show_Pill(value11, 300000.0 + base.KC9_Cung * 1000.0, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value38);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, 300000 + (int)(base.KC9_Cung * 1000.0));
							value11.弓箭致命一击几率 = 5.0;
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 501201:
						if (base.Player_Job != 5)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							double num58 = BitConverter.ToInt16(气功[4].气功_byte, 0);
							double num59 = 0.1 + 0.02 * num58;
							double num60 = (double)World.医生回气疗伤加血量 + (double)World.医生回气疗伤加血量 * num59;
							if ((double)random.Next(0, 100) < base.医_万物回春)
							{
								Show_Qigong_Effect(base.UserSessionID, 150);
								value11.Recovery_HP((int)num60 * 2, DPBUFF: true);
							}
							else
							{
								value11.Recovery_HP((int)num60, DPBUFF: true);
							}
							value11.Update_HP_MP_SP();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 501202:
						if (base.Player_Job != 5)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							double num55 = BitConverter.ToInt16(气功[4].气功_byte, 0);
							double num56 = 0.1 + 0.02 * num55;
							double num57 = (double)World.医生运气疗伤加血量 + (double)World.医生运气疗伤加血量 * num56;
							if ((double)random.Next(0, 100) < base.医_万物回春)
							{
								Show_Qigong_Effect(base.UserSessionID, 150);
								value11.Recovery_HP((int)num57 * 2, DPBUFF: true);
							}
							else
							{
								value11.Recovery_HP((int)num57, DPBUFF: true);
							}
							value11.Update_HP_MP_SP();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 501203:
						if (base.Player_Job != 5)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							int num61 = random.Next(0, 100);
							double num62 = BitConverter.ToInt16(气功[4].气功_byte, 0);
							double num63 = 0.1 + 0.02 * num62;
							double num64 = (double)World.医生聚气疗伤加血量 + (double)World.医生聚气疗伤加血量 * num63;
							if (!World.PartyClass.TryGetValue(Party_ID, out value13))
							{
								if (Check_Radius_Player(700, value11))
								{
									if ((double)random.Next(0, 100) < base.医_升天一气功_狂意护体)
									{
										base.人物_SP += (int)((double)base.人物最大_SP * 0.05);
										UpdatePowersAndStatus();
									}
									if ((double)random.Next(0, 200) < base.医_升天一气功_狂意护体)
									{
										if (value11.Show_Pic_Class.ContainsKey(700350))
										{
											value11.Show_Pic_Class[700350].EndEvent();
										}
										value11.Show_Qigong_Effect(base.UserSessionID, 350);
										Class_Show_Pill value39 = new Class_Show_Pill(value11, 180000.0, 700350, 0);
										value11.Show_Pic_Class.Add(700350, value39);
										value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700350), 1, 180000);
										value11.FLD_追加百分比_防御_DAIPHU115 = base.医_升天一气功_狂意护体 / 200.0;
										value11.UpdatePowersAndStatus();
									}
									if ((double)num61 < base.医_万物回春)
									{
										value11.Recovery_HP((int)num64 * 2, DPBUFF: true);
										Show_Qigong_Effect(base.UserSessionID, 150);
									}
									else
									{
										value11.Recovery_HP((int)num64, DPBUFF: true);
									}
									value11.Update_HP_MP_SP();
									发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
								}
							}
							else
							{
								int 增加血量 = (int)num64;
								if ((double)random.Next(0, 100) < base.医_升天一气功_狂意护体)
								{
									foreach (Players value48 in value13.List_Party.Values)
									{
										if (Check_Radius_Player(700, value48))
										{
											value48.人物_SP += (int)((double)value48.人物最大_SP * 0.05);
											value48.UpdatePowersAndStatus();
										}
									}
								}
								if ((double)random.Next(0, 200) < base.医_升天一气功_狂意护体)
								{
									foreach (Players value49 in value13.List_Party.Values)
									{
										if (Check_Radius_Player(700, value49))
										{
											if (value49.Show_Pic_Class.ContainsKey(700350))
											{
												value49.Show_Pic_Class[700350].EndEvent();
											}
											value49.Show_Qigong_Effect(value49.UserSessionID, 350);
											Class_Show_Pill value39 = new Class_Show_Pill(value49, 180000.0, 700350, 0);
											value49.Show_Pic_Class.Add(700350, value39);
											value49.Send_Packet_Show_Pic(BitConverter.GetBytes(700350), 1, 180000);
											value49.FLD_追加百分比_防御_DAIPHU115 = base.医_升天一气功_狂意护体 / 200.0;
											value49.UpdatePowersAndStatus();
										}
									}
								}
								if ((double)num61 < base.医_万物回春)
								{
									foreach (Players value50 in value13.List_Party.Values)
									{
										if (Check_Radius_Player(700, value50))
										{
											value50.Recovery_HP((int)num64 * 2, DPBUFF: true);
										}
									}
									Show_Qigong_Effect(base.UserSessionID, 150);
								}
								else
								{
									foreach (Players value51 in value13.List_Party.Values)
									{
										if (Check_Radius_Player(700, value51))
										{
											value51.Recovery_HP((int)num64, DPBUFF: true);
										}
									}
								}
								发送医生群疗数据(Target_ID, value13, 增加血量, Skill_ID, value12);
							}
						}
						break;
					case 501301:
						if (base.Player_Job != 5)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(501301))
							{
								value11.Show_Pic_Class[501301].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501501))
							{
								value11.Show_Pic_Class[501501].EndEvent();
							}
							double num49 = 600000.0;
							num49 += base.医_吸星大法 * 1000.0;
							Class_Show_Pill value30 = new Class_Show_Pill(value11, (int)num49, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value30);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num49);
							value11.FLD_BUFF_DP_ATT = 0.1 + base.医_九天真气 * 0.001;
							value11.UpdatePowersAndStatus();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 501302:
						if (base.Player_Job != 5)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(501502))
							{
								value11.Show_Pic_Class[501502].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501303))
							{
								value11.Show_Pic_Class[501303].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501302))
							{
								value11.Show_Pic_Class[501302].EndEvent();
							}
							double num53 = 600000.0;
							num53 += base.医_吸星大法 * 1000.0;
							Class_Show_Pill value39 = new Class_Show_Pill(value11, (int)num53, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value39);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num53);
							value11.FLD_BUFF_DP_DEF = 0.05 + base.医_九天真气 * 0.001;
							value11.UpdatePowersAndStatus();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 501303:
						if (base.Player_Job != 5)
						{
							GameMessage("Baòn không coì kyÞ nãng naÌy", 9, ":");
						}
						else
						{
							if (value11.Show_Pic_Class.ContainsKey(501502))
							{
								value11.Show_Pic_Class[501502].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501303))
							{
								value11.Show_Pic_Class[501303].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501302))
							{
								value11.Show_Pic_Class[501302].EndEvent();
							}
							double num54 = 600000.0;
							num54 += base.医_吸星大法 * 1000.0;
							Class_Show_Pill value40 = new Class_Show_Pill(value11, (int)num54, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value40);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num54);
							value11.FLD_BUFF_DP_DEF = 0.1 + base.医_九天真气 * 0.001;
							value11.UpdatePowersAndStatus();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 501401:
						{
							if (value11.Show_Pic_Class.ContainsKey(501401))
							{
								value11.Show_Pic_Class[501401].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501602))
							{
								value11.Show_Pic_Class[501602].EndEvent();
							}
							double num47 = 600000.0;
							num47 += base.医_吸星大法 * 1000.0;
							Class_Show_Pill value28 = new Class_Show_Pill(value11, (int)num47, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value28);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num47);
							value11.FLD_BUFF_DP_CX = 0.1 + base.医_九天真气 * 0.001;
							value11.UpdatePowersAndStatus();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							break;
						}
					case 501402:
						{
							if (value11.Show_Pic_Class.ContainsKey(501402))
							{
								value11.Show_Pic_Class[501402].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501603))
							{
								value11.Show_Pic_Class[501603].EndEvent();
							}
							double num48 = 600000.0;
							num48 += base.医_吸星大法 * 1000.0;
							Class_Show_Pill value29 = new Class_Show_Pill(value11, (int)num48, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value29);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num48);
							value11.FLD_BUFF_DP_NT = 0.1 + base.医_九天真气 * 0.001;
							value11.UpdatePowersAndStatus();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							break;
						}
					case 501403:
						{
							if (value11.Show_Pic_Class.ContainsKey(501403))
							{
								value11.Show_Pic_Class[501403].EndEvent();
							}
							if (value11.Show_Pic_Class.ContainsKey(501601))
							{
								value11.Show_Pic_Class[501601].EndEvent();
							}
							double num52 = 600000.0;
							num52 += base.医_吸星大法 * 1000.0;
							Class_Show_Pill value37 = new Class_Show_Pill(value11, (int)num52, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value37);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num52);
							value11.FLD_BUFF_DP_HP = 0.1 + base.医_九天真气 * 0.001;
							value11.Update_HP_MP_SP();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							break;
						}
					case 501501:
						{
							int num43 = 501301;
							double num51 = 600000.0;
							num51 += base.医_吸星大法 * 1000.0;
							if (Party_ID != 0)
							{
								if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value34))
								{
									foreach (Players value52 in value34.List_Party.Values)
									{
										if (Check_Radius_Player(700, value52))
										{
											if (value52.Show_Pic_Class.ContainsKey(501301))
											{
												value52.Show_Pic_Class[501301].EndEvent();
											}
											if (value52.Show_Pic_Class.ContainsKey(501501))
											{
												value52.Show_Pic_Class[501501].EndEvent();
											}
											Class_Show_Pill value35 = new Class_Show_Pill(value52, (int)num51, num43, 0);
											value52.Show_Pic_Class.Add(num43, value35);
											value52.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num51);
											value52.FLD_BUFF_DP_ATT = 0.1 + base.医_九天真气 * 0.001;
											value52.UpdatePowersAndStatus();
										}
									}
									发送群体攻击(this, value34, base.UserSessionID, Skill_ID, (int)num, 0);
								}
							}
							else
							{
								if (value11.Show_Pic_Class.ContainsKey(501301))
								{
									value11.Show_Pic_Class[501301].EndEvent();
								}
								if (value11.Show_Pic_Class.ContainsKey(501501))
								{
									value11.Show_Pic_Class[501501].EndEvent();
								}
								Class_Show_Pill value36 = new Class_Show_Pill(value11, (int)num51, num43, 0);
								value11.Show_Pic_Class.Add(num43, value36);
								value11.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num51);
								value11.FLD_BUFF_DP_ATT = 0.1 + base.医_九天真气 * 0.001;
								value11.UpdatePowersAndStatus();
								发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							}
							break;
						}
					case 501502:
						{
							int num43 = 501303;
							double num65 = 600000.0;
							num65 += base.医_吸星大法 * 1000.0;
							if (Party_ID != 0)
							{
								if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value42))
								{
									foreach (Players value53 in value42.List_Party.Values)
									{
										if (Check_Radius_Player(700, value53))
										{
											if (value53.Show_Pic_Class.ContainsKey(501302))
											{
												value53.Show_Pic_Class[501302].EndEvent();
											}
											if (value53.Show_Pic_Class.ContainsKey(501502))
											{
												value53.Show_Pic_Class[501502].EndEvent();
											}
											if (value53.Show_Pic_Class.ContainsKey(501303))
											{
												value53.Show_Pic_Class[501303].EndEvent();
											}
											Class_Show_Pill value43 = new Class_Show_Pill(value53, (int)num65, num43, 0);
											value53.Show_Pic_Class.Add(num43, value43);
											value53.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num65);
											value53.FLD_BUFF_DP_DEF = 0.1 + base.医_九天真气 * 0.001;
											value53.UpdatePowersAndStatus();
										}
									}
									发送群体攻击(this, value42, base.UserSessionID, Skill_ID, (int)num, 0);
								}
							}
							else
							{
								if (value11.Show_Pic_Class.ContainsKey(501302))
								{
									value11.Show_Pic_Class[501302].EndEvent();
								}
								if (value11.Show_Pic_Class.ContainsKey(501502))
								{
									value11.Show_Pic_Class[501502].EndEvent();
								}
								if (value11.Show_Pic_Class.ContainsKey(501303))
								{
									value11.Show_Pic_Class[501303].EndEvent();
								}
								Class_Show_Pill value44 = new Class_Show_Pill(value11, (int)num65, num43, 0);
								value11.Show_Pic_Class.Add(num43, value44);
								value11.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num65);
								value11.FLD_BUFF_DP_DEF = 0.1 + base.医_九天真气 * 0.001;
								value11.UpdatePowersAndStatus();
								发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							}
							break;
						}
					case 801401:
						行走状态(BitConverter.GetBytes(801401), 1);
						Move(value11.Player_FLD_X, value11.Player_FLD_Y, value11.Player_FLD_Z, value11.Player_FLD_Map);
						break;
					case 901501:
						{
							int num16 = (int)DateTime.Now.Subtract(time_PK_901501).TotalSeconds;
							if (num16 < 60)
							{
								GameMessage("ThõÌi gian hôÌi chiêu laÌ " + (60 - num16) + " giây nýÞa mõìi duÌng dýõòc", 9);
							}
							else
							{
								time_PK_901501 = DateTime.Now;
								if (!value11.异常状态.ContainsKey(20))
								{
									if (value11.Show_Pic_Class.ContainsKey(700314))
									{
										value11.Show_Pic_Class[700314].EndEvent();
									}
									if (value11.Show_Pic_Class.ContainsKey(901501))
									{
										value11.Show_Pic_Class[901501].EndEvent();
									}
									value11.Show_Pic_Class.Add(901501, new Class_Show_Pill(value11, 3000 + (int)(base.KhiCong_HuyenToChanMach * 100.0), 901501, 0));
									value11.Send_Packet_Show_Pic(BitConverter.GetBytes(901501), 1, 3000 + (int)(base.KhiCong_HuyenToChanMach * 100.0));
									异常状态类 value6 = new 异常状态类(value11, 3000 + (int)(base.KhiCong_HuyenToChanMach * 100.0), 20, 0);
									value11.异常状态.Add(20, value6);
									value11.FLD_TANGDEF_CAMSU = value11.FLD_Defense * 10 / 100;
									value11.UpdatePowersAndStatus();
								}
								value11.Update_HP_MP_SP();
								发送攻击人物数据(this, Target_ID, 901501, (int)num, 0, 0);
							}
							break;
						}
					case 501701:
						{
							int num16 = (int)DateTime.Now.Subtract(time_PK_501701).TotalSeconds;
							if (num16 < 60)
							{
								GameMessage("ThõÌi gian hôÌi chiêu laÌ " + (60 - num16) + " giây nýÞa mõìi duÌng dýõòc", 9);
							}
							else
							{
								time_PK_501701 = DateTime.Now;
								if (value11.Show_Pic_Class.ContainsKey(501701))
								{
									value11.Show_Pic_Class[501701].EndEvent();
								}
								value11.Show_Pic_Class.Add(501701, new Class_Show_Pill(value11, 3000 + (int)(base.KhiCong_VongMaiThiemHoa * 100.0), 501701, 0));
								value11.Send_Packet_Show_Pic(BitConverter.GetBytes(501701), 1, 3000 + (int)(base.KhiCong_VongMaiThiemHoa * 100.0));
								value11.Player_FLD_HP += 1000L;
								value11.人物基本最大_HP += 1000;
								value11.Update_HP_MP_SP();
								发送攻击人物数据(this, Target_ID, 501701, (int)num, 0, 0);
							}
							break;
						}
					case 501601:
						{
							int num43 = 501403;
							double num66 = 600000.0;
							num66 += base.医_吸星大法 * 1000.0;
							if (Party_ID != 0)
							{
								if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value45))
								{
									foreach (Players value54 in value45.List_Party.Values)
									{
										if (Check_Radius_Player(700, value54))
										{
											if (value54.Show_Pic_Class.ContainsKey(501601))
											{
												value54.Show_Pic_Class[501601].EndEvent();
											}
											if (value54.Show_Pic_Class.ContainsKey(501403))
											{
												value54.Show_Pic_Class[501403].EndEvent();
											}
											Class_Show_Pill value46 = new Class_Show_Pill(value54, (int)num66, num43, 0);
											value54.Show_Pic_Class.Add(num43, value46);
											value54.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num66);
											value54.FLD_BUFF_DP_HP = 0.1 + base.医_九天真气 * 0.001;
											value54.Update_HP_MP_SP();
										}
									}
								}
								发送群体攻击(this, value45, base.UserSessionID, Skill_ID, (int)num, 0);
							}
							else
							{
								if (value11.Show_Pic_Class.ContainsKey(501601))
								{
									value11.Show_Pic_Class[501601].EndEvent();
								}
								if (value11.Show_Pic_Class.ContainsKey(501403))
								{
									value11.Show_Pic_Class[501403].EndEvent();
								}
								Class_Show_Pill value47 = new Class_Show_Pill(value11, (int)num66, num43, 0);
								value11.Show_Pic_Class.Add(num43, value47);
								value11.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num66);
								value11.FLD_BUFF_DP_HP = 0.1 + base.医_九天真气 * 0.001;
								value11.Update_HP_MP_SP();
								发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							}
							break;
						}
					case 501602:
						{
							int num43 = 501401;
							double num46 = 600000.0;
							num46 += base.医_吸星大法 * 1000.0;
							if (Party_ID != 0)
							{
								if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value24))
								{
									foreach (Players value55 in value24.List_Party.Values)
									{
										if (Check_Radius_Player(700, value55))
										{
											if (value55.Show_Pic_Class.ContainsKey(501602))
											{
												value55.Show_Pic_Class[501602].EndEvent();
											}
											if (value55.Show_Pic_Class.ContainsKey(501401))
											{
												value55.Show_Pic_Class[501401].EndEvent();
											}
											Class_Show_Pill value25 = new Class_Show_Pill(value55, (int)num46, num43, 0);
											value55.Show_Pic_Class.Add(num43, value25);
											value55.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num46);
											value55.FLD_BUFF_DP_CX = 0.1 + base.医_九天真气 * 0.001;
											value55.UpdatePowersAndStatus();
										}
									}
									发送群体攻击(this, value24, base.UserSessionID, Skill_ID, (int)num, 0);
								}
							}
							else
							{
								if (value11.Show_Pic_Class.ContainsKey(501401))
								{
									value11.Show_Pic_Class[501401].EndEvent();
								}
								if (value11.Show_Pic_Class.ContainsKey(501602))
								{
									value11.Show_Pic_Class[501602].EndEvent();
								}
								Class_Show_Pill value26 = new Class_Show_Pill(value11, (int)num46, num43, 0);
								value11.Show_Pic_Class.Add(num43, value26);
								value11.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num46);
								value11.FLD_BUFF_DP_CX = 0.1 + base.医_九天真气 * 0.001;
								value11.UpdatePowersAndStatus();
								发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							}
							break;
						}
					case 501603:
						{
							int num43 = 501402;
							double num44 = 600000.0;
							num44 += base.医_吸星大法 * 1000.0;
							if (Party_ID != 0)
							{
								if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value20))
								{
									foreach (Players value56 in value20.List_Party.Values)
									{
										if (Check_Radius_Player(700, value56))
										{
											if (value56.Show_Pic_Class.ContainsKey(501402))
											{
												value56.Show_Pic_Class[501402].EndEvent();
											}
											if (value56.Show_Pic_Class.ContainsKey(501603))
											{
												value56.Show_Pic_Class[501603].EndEvent();
											}
											Class_Show_Pill value21 = new Class_Show_Pill(value56, (int)num44, num43, 0);
											value56.Show_Pic_Class.Add(num43, value21);
											value56.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num44);
											value56.FLD_BUFF_DP_NT = 0.1 + base.医_九天真气 * 0.001;
											value56.UpdatePowersAndStatus();
										}
									}
									发送群体攻击(this, value20, base.UserSessionID, Skill_ID, (int)num, 0);
								}
							}
							else
							{
								if (value11.Show_Pic_Class.ContainsKey(501603))
								{
									value11.Show_Pic_Class[501603].EndEvent();
								}
								if (value11.Show_Pic_Class.ContainsKey(501402))
								{
									value11.Show_Pic_Class[501402].EndEvent();
								}
								Class_Show_Pill value22 = new Class_Show_Pill(value11, (int)num44, num43, 0);
								value11.Show_Pic_Class.Add(num43, value22);
								value11.Send_Packet_Show_Pic(BitConverter.GetBytes(num43), 1, (int)num44);
								value11.FLD_BUFF_DP_NT = 0.1 + base.医_九天真气 * 0.001;
								value11.UpdatePowersAndStatus();
								发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
							}
							break;
						}
					case 601201:
						if (base.FLD_Couple_Name == value11.UserName || base.UserName == value11.UserName)
						{
							if (value11.Show_Pic_Class.ContainsKey(601201))
							{
								value11.Show_Pic_Class[601201].EndEvent();
							}
							double num50 = 600000.0;
							Class_Show_Pill value32 = new Class_Show_Pill(value11, (int)num50, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value32);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num50);
							value11.addFLD_装备_追加_防具_强化(1);
							value11.Update_Character_Wear_Item();
							value11.Update_Equipment_Effectiveness();
							value11.UpdatePowersAndStatus();
							value11.Update_HP_MP_SP();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					case 601202:
						if (base.FLD_Couple_Name == value11.UserName || base.UserName == value11.UserName)
						{
							if (value11.Show_Pic_Class.ContainsKey(601202))
							{
								value11.Show_Pic_Class[601202].EndEvent();
							}
							double num45 = 600000.0;
							Class_Show_Pill value23 = new Class_Show_Pill(value11, (int)num45, Skill_ID, 0);
							value11.Show_Pic_Class.Add(Skill_ID, value23);
							value11.Send_Packet_Show_Pic(BitConverter.GetBytes(Skill_ID), 1, (int)num45);
							value11.addFLD_装备_追加_武器_强化(1);
							value11.Update_Character_Wear_Item();
							value11.Update_Equipment_Effectiveness();
							value11.UpdatePowersAndStatus();
							value11.Update_HP_MP_SP();
							发送攻击人物数据(this, Target_ID, Skill_ID, (int)num, 0, 0);
						}
						break;
					default:
						if ((base.Player_FLD_Map != 801 || base.Player_Zx != value11.Player_Zx) && (base.人物PK模式 != 1 || base.Player_Zx != value11.Player_Zx) && Target_ID != base.UserSessionID)
						{
							if (value11.Player_Level < 35)
							{
								GameMessage("Player level < 35", 9);
							}
							else if (Math.Abs(base.Player_Level - value11.Player_Level) > 20 && value11.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
							{
								GameMessage("Giõìi haòn PK. Không ðýõòc chênh lêòch quaì 20 câìp ðôò", 9);
							}
							else
							{
								giamDoBenVuKhi();
								value11.giamDoBenTrangBi();
								if (base.Player_Job == 12 && base.KhiCong_JOB12_TT1 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB12_TT1 && !Show_Pic_Class.ContainsKey(700662))
								{
									Show_Qigong_Effect(base.UserSessionID, 1011);
									Show_Pic_Class.Add(700662, new Class_Show_Pill(this, 3000.0, 700662, 0));
									Send_Packet_Show_Pic(BitConverter.GetBytes(700662), 1, 3000);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
								}
								if (value11.Player_Job == 12 && value11.KhiCong_JOB12_11 != 0.0 && (double)random.Next(0, 100) < value11.KhiCong_JOB12_11 && !value11.Show_Pic_Class.ContainsKey(700291))
								{
									value11.Show_Qigong_Effect(value11.UserSessionID, 1010);
									value11.Show_Pic_Class.Add(700291, new Class_Show_Pill(value11, 3000.0, 700291, 0));
									value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700291), 1, 3000);
									value11.Update_Character_Wear_Item();
									value11.UpdatePowersAndStatus();
								}
								if (base.Player_Job == 10)
								{
									List<int> list = new List<int>();
									int num5 = (base.Player_Zx != 1) ? 10000 : 0;
									switch (Skill_ID)
									{
										case 3000101:
											if (base.Player_Level >= 35)
											{
												list.Add(3010201 + num5);
											}
											if (base.Player_Level >= 45)
											{
												list.Add(3010202 + num5);
											}
											if (base.Player_Level >= 55)
											{
												list.Add(3010203 + num5);
											}
											if (base.Player_Level >= 71)
											{
												list.Add(3010401 + num5);
											}
											if (base.Player_Level >= 74)
											{
												list.Add(3010402 + num5);
											}
											if (base.Player_Level >= 77)
											{
												list.Add(3010403 + num5);
											}
											if (base.Player_Level >= 91)
											{
												list.Add(3010601 + num5);
											}
											if (base.Player_Level >= 94)
											{
												list.Add(3010602 + num5);
											}
											if (base.Player_Level >= 97)
											{
												list.Add(3010603 + num5);
											}
											break;
										case 3000105:
											if (base.Player_Level >= 60)
											{
												list.Add(3010301 + num5);
											}
											if (base.Player_Level >= 64)
											{
												list.Add(3010302 + num5);
											}
											if (base.Player_Level >= 68)
											{
												list.Add(3010303 + num5);
											}
											if (base.Player_Level >= 80)
											{
												list.Add(3010501 + num5);
											}
											if (base.Player_Level >= 64)
											{
												list.Add(3010502 + num5);
											}
											if (base.Player_Level >= 88)
											{
												list.Add(3010503 + num5);
											}
											if (base.Player_Level >= 100)
											{
												list.Add(3010701 + num5);
											}
											if (base.Player_Level >= 104)
											{
												list.Add(3010702 + num5);
											}
											if (base.Player_Level >= 108)
											{
												list.Add(3010703 + num5);
											}
											break;
									}
									if ((Skill_ID == 3000101 || Skill_ID == 3000105) && list.Count > 0)
									{
										int key = list[random.Next(0, list.Count)];
										if (!World.TblKongfu.TryGetValue(key, out value4))
										{
											GameMessage("Không tiÌm thâìy combo quyêÌn sý!");
										}
										else
										{
											value12.FLD_EFFERT = value4.FLD_EFFERT;
											value12.FLD_AT = base.KyNangManhNhat_UyLuc;
											value12.FLD_MP = base.KyNangManhNhat_MP;
										}
									}
								}
								double num24 = (double)value11.FLD_人物基本_防御 * (1.0 - (Show_Pic_Class.ContainsKey(1000000843) ? 0.2 : 0.0));
								double num25 = ((double)((value11.FLD_Qigong_Defense_Skill + value11.FLD_装备_追加_tam + (int)(value11.KCV17_KC7 * (double)value11.FLD_Defense)) / 6) + value11.FLD_Pill_Defense_Skill / 6.0) / 100.0 + value11.FLD_Item_Defense_Skill / 6.0 + (value11.FLD_Item_Skill_Def_Percentage + value11.fldItemSkillDefPercentage) * (1.0 + value11.FLD_人物_气功_武功防御力增加百分比 + value11.coupleEffectSkillDefense);
								double num26 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0) - (value11.Show_Pic_Class.ContainsKey(1000000852) ? 0.2 : 0.0));
								if ((base.Player_Job == 1 || base.Player_Job == 8) && base.破甲几率 != 0.0 && (double)random.Next(0, 100) < base.破甲几率)
								{
									num24 *= 0.8;
									num25 *= 0.8;
									Show_Qigong_Effect(Target_ID, 16);
								}
								if (base.Player_Job == 2 || value11.Player_Job == 9)
								{
									double num27 = random.NextDouble() * 100.0;
									double num28 = random.Next(0, 100);
									if (base.剑_无坚不摧 != 0.0 && num27 < base.剑_无坚不摧 + base.剑_升天一气功_乘胜追击)
									{
										Show_Qigong_Effect(Target_ID, 120);
										num24 *= 0.5 - base.剑_升天一气功_乘胜追击 * 0.01;
										num25 *= 0.5 - base.剑_升天一气功_乘胜追击 * 0.01;
									}
									if (base.剑_冲冠一怒 != 0.0 && (double)random.Next(0, 100) < base.剑_冲冠一怒)
									{
										Show_Qigong_Effect(base.UserSessionID, 29);
										base.人物_SP += base.人物最大_SP * 2 / 100;
									}
								}
								if (base.Player_Job == 11 && base.KhiCong_JOB11_9 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB11_9)
								{
									if (value11.Player_Job == 8)
									{
										num26 *= 0.95;
										Show_Qigong_Effect(Target_ID, 808);
									}
									else if (value11.Player_Job == 2 || value11.Player_Job == 9)
									{
										num26 *= 1.1;
										Show_Qigong_Effect(Target_ID, 808);
									}
								}
								if (value11.枪_转攻为守 != 0.0 && (double)random.Next(0, 100) < value11.枪_转攻为守)
								{
									value11.Show_Qigong_Effect(base.UserSessionID, 130);
									num24 += (double)(base.FLD_人物基本_攻击 * 20 / 100);
								}
								if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 1 && !Show_Pic_Class.ContainsKey(700344))
								{
									num24 -= num24 * ((double)Item_Wear[3].物品属性阶段数 * 0.01);
								}
								if (value11.Item_Wear[0].FLD_PID != 0 && value11.Item_Wear[0].物品属性阶段类型 == 1 && !value11.Show_Pic_Class.ContainsKey(700344))
								{
									num26 = ((!value11.Show_Pic_Class.ContainsKey(700291)) ? (num26 - num26 * ((double)value11.Item_Wear[3].物品属性阶段数 * 0.01)) : (num26 - num26 * ((double)value11.Item_Wear[3].物品属性阶段数 * 0.01 * 2.0)));
								}
								if ((base.Player_Job == 1 || base.Player_Job == 8) && base.最少攻击 != 0.0)
								{
									num26 += num26 * base.最少攻击;
								}
								if ((base.Player_Job == 2 || value11.Player_Job == 9) && base.最少攻击 != 0.0)
								{
									num26 += num26 * base.最少攻击;
								}
								if ((base.Player_Job == 3 || base.Player_Job == 10) && base.最少攻击 != 0.0)
								{
									num26 += num26 * base.最少攻击;
								}
								if (base.Player_Job == 4 && base.弓_凝神聚气 != 0.0)
								{
									num26 += num26 * base.弓_凝神聚气;
								}
								if (base.Player_Job == 5 && base.最少攻击 != 0.0)
								{
									num26 += num26 * base.最少攻击;
								}
								if (base.Player_Job == 6 && base.刺_荆轲之怒 != 0.0)
								{
									num26 += num26 * base.刺_荆轲之怒;
								}
								if (base.Player_Job == 7 && base.最少攻击 != 0.0)
								{
									num26 += num26 * base.最少攻击;
								}
								int num29 = 0;
								int num30 = 0;
								if (base.弓群攻技能ID != 0 && Skill_ID == 400001 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value12))
								{
									num29 = value12.FLD_AT;
								}
								num29 = ((Array_Skill_Book[value12.FLD_武功类型, value12.FLD_INDEX] != null || (Skill_ID != base.FLD_师徒_武功ID1_1 && Skill_ID != base.FLD_师徒_武功ID1_2 && Skill_ID != base.FLD_师徒_武功ID1_3 && Skill_ID != 400001)) ? ((value12.FLD_武功类型 == 3) ? (value12.FLD_AT + Array_Skill_Book[3, value12.FLD_INDEX].每级加危害(Array_Skill_Book[3, value12.FLD_INDEX].武功_等级 - 1)) : ((value12.FLD_武功类型 == 2) ? base.KyNangKetHon_UyLuc : ((value12.FLD_武功类型 != 0 || Array_Skill_Book[0, value12.FLD_INDEX].武功_等级 == 0) ? value12.FLD_AT : (value12.FLD_AT + Array_Skill_Book[0, value12.FLD_INDEX].每级加危害(Array_Skill_Book[0, value12.FLD_INDEX].武功_等级 - 1))))) : ((base.FLD_师徒_武功ID1_1 != Skill_ID && base.FLD_师徒_武功ID1_2 != Skill_ID && base.FLD_师徒_武功ID1_3 != Skill_ID) ? value12.FLD_AT : (value12.FLD_AT / 2)));
								num29 += (int)(base.FLD_Item_Attack_Skill_Point - value11.FLD_Item_Defense_Skill_Point) / 2;
								if (num30 == 0)
								{
									double num31 = (1.0 + World.FIX_ULPT) * ((double)num29 * (1.0 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage) - 0.5 * num25 * (1.0 - value11.FLD_TRUDEF_NINJA)));
									num31 += (double)((int)(base.FLD_Item_Attack_Skill_Point - value11.FLD_Item_Defense_Skill_Point) / 2);
									num = (num26 - num24) * 0.5 + ((num31 > 0.0) ? num31 : 0.0) + (double)(base.FLD_人物基本_命中 / 1) - (double)(value11.FLD_人物基本_回避 / 4);
								}
								if (World.Newversion >= 18)
								{
									num /= World.FixDamage;
								}
								if (Item_Wear[3].FLD_PID != 0 && value11.Item_Wear[0].FLD_PID != 0)
								{
									switch (World.getBuffTuLinh(Item_Wear[3].Type_TuLinh, Item_Wear[3].FLD_FJ_觉醒, value11.Item_Wear[0].Type_TuLinh, value11.Item_Wear[0].FLD_FJ_觉醒))
									{
										case 5:
											num *= 1.1;
											break;
										case 4:
											num *= 0.96;
											break;
									}
								}
								if (base.Player_Job == 10 && Skill_ID == 3000401)
								{
									num = 0.0;
								}
								if (base.Player_Job == 7)
								{
									if ((double)random.Next(0, 100) <= base.琴师_梅花三弄 * 100.0)
									{
										int num11 = 0;
										if (base.玉连环计数 >= 6)
										{
											base.玉连环计数 = 0;
										}
										switch (base.玉连环计数)
										{
											case 0:
												num11 = 玉连环[0];
												break;
											case 1:
												num11 = 玉连环[1];
												break;
											case 2:
												num11 = 玉连环[2];
												break;
											case 3:
												num11 = 玉连环[3];
												break;
											case 4:
												num11 = 玉连环[4];
												break;
											case 5:
												num11 = 玉连环[5];
												break;
										}
										if (Show_Pic_Class.ContainsKey(900401))
										{
											Show_Pic_Class[900401].EndEvent();
										}
										if (Show_Pic_Class.ContainsKey(900402))
										{
											Show_Pic_Class[900402].EndEvent();
										}
										if (Show_Pic_Class.ContainsKey(900403))
										{
											Show_Pic_Class[900403].EndEvent();
										}
										if (num11 != 0 && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
										{
											Class_Show_Pill value5 = new Class_Show_Pill(this, 60000.0, num11, 0);
											Show_Pic_Class.Add(num11, value5);
											Send_Packet_Show_Pic(BitConverter.GetBytes(num11), 1, 60000);
											Add_ATT_Percentage_PN(0.1);
											Add_DEF_Percentage_PN(0.1);
											base.玉连环计数++;
										}
										更新人物数据(this);
										更新广播人物数据();
									}
									if (Show_Pic_Class.ContainsKey(900401))
									{
										double num12 = random.NextDouble() * 100.0;
										base.琴师_三和弦_发动概率 = 5.0 + base.琴师_岳阳三醉 * 0.5;
										if (random.NextDouble() * 100.0 <= (double)(int)(base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2))
										{
											Show_Qigong_Effect(base.UserSessionID, 88);
											base.琴师_三和弦_发动概率 *= 2.0 + base.琴师_升天一气功_飞花点翠 * 0.02;
										}
										if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.5 + base.琴师_三和弦_发动概率 && !value11.异常状态.ContainsKey(22))
										{
											double num13 = 20000.0;
											num13 += base.琴师_阳明春晓 * 2.0 * 1000.0;
											异常状态类 value6 = new 异常状态类(value11, (int)num13, 22, 0);
											value11.异常状态.Add(22, value6);
											value11.FLD_TRUDAME_CAMSU = 0.05 + base.琴师_阳明春晓 * 0.005;
											value11.UpdatePowersAndStatus();
										}
										if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.5 + base.琴师_三和弦_发动概率 && !value11.异常状态.ContainsKey(25))
										{
											double num14 = 20000.0;
											num14 += base.琴师_潇湘雨夜 * 2.0 * 1000.0;
											异常状态类 value7 = new 异常状态类(value11, (int)num14, 25, 0);
											value11.异常状态.Add(25, value7);
											value11.FLD_TRUDEF_CAMSU = 0.05 + base.琴师_潇湘雨夜 * 0.005;
											value11.UpdatePowersAndStatus();
										}
										if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.1 + base.琴师_三和弦_发动概率 && !value11.异常状态.ContainsKey(23))
										{
											异常状态类 value6 = new 异常状态类(value11, 3000, 23, 0);
											value11.异常状态.Add(23, value6);
										}
										if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.1 + base.琴师_三和弦_发动概率 && !value11.异常状态.ContainsKey(24) && !value11.异常状态.ContainsKey(4))
										{
											异常状态类 value6 = new 异常状态类(value11, 3000 / ((!value11.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2), 24, 0);
											value11.异常状态.Add(24, value6);
											value6 = new 异常状态类(value11, 3000 / ((!value11.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2), 4, 0);
											value11.异常状态.Add(4, value6);
										}
									}
									if (Show_Pic_Class.ContainsKey(900402) && value12.FLD_TYPE != 4)
									{
										num *= 1.0 + (0.05 + base.琴师_岳阳三醉 * 0.005) * (1.0 + base.琴师_升天三气功_子夜秋歌 * 0.018);
									}
									if (random.NextDouble() * 100.0 <= (double)(int)(base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2))
									{
										Show_Qigong_Effect(Target_ID, 88);
										num2 *= 2.0 + base.琴师_升天一气功_飞花点翠 * 0.02;
									}
								}
								if (base.Player_Job == 12)
								{
									if (base.KhiCong_JOB12_6 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB12_6 + base.KhiCong_JOB12_150_2)
									{
										Show_Qigong_Effect(Target_ID, 1005);
										if (base.KhiCong_JOB12_10 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB12_10)
										{
											AoeTuHao = 0;
											Show_Qigong_Effect(Target_ID, 1009);
											if (base.KhiCong_JOB12_TT2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB12_TT2 && (Skill_ID == 5000102 || Skill_ID == 5000402 || Skill_ID == 5000502 || Skill_ID == 5000602 || Skill_ID == 5000702 || Skill_ID == 5000802 || Skill_ID == 5000902 || Skill_ID == 5002101 || Skill_ID == 5002201 || Skill_ID == 5002301 || Skill_ID == 5002401 || Skill_ID == 5002501))
											{
												num *= 3.333333;
												Show_Qigong_Effect(Target_ID, 1012);
											}
											else
											{
												num *= 2.333333;
											}
										}
										else
										{
											AoeTuHao = 1;
											if (base.KhiCong_JOB12_TT3 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB12_TT3)
											{
												num *= 2.0;
												Show_Qigong_Effect(Target_ID, 1013);
											}
										}
									}
									else
									{
										AoeTuHao = 0;
									}
								}
								if (base.Player_Job == 1 || base.Player_Job == 8)
								{
									if (base.刀_升天三气功_梵音破镜 != 0.0 && (double)random.Next(0, 100) < base.刀_升天三气功_梵音破镜 + base.KhiCong_JOB1_150_2 && base.刀_升天三气功_梵音破镜 >= 3.0)
									{
										Show_Qigong_Effect(Target_ID, 312);
										num *= 1.3 + base.刀_升天三气功_梵音破镜_Plus;
									}
									if (base.刀_暗影绝杀 != 0.0 && (double)random.Next(0, 100) < base.刀_暗影绝杀)
									{
										Show_Qigong_Effect(Target_ID, 18);
										num *= 1.2;
									}
									if (base.韩飞官_天魔狂血 != 0.0 && (double)random.Next(0, 100) < base.韩飞官_天魔狂血 * 2.0 && ThienMaQuangHuyetx2 == 0 && value12.FLD_SKILL_TIME >= 4000)
									{
										ThienMaQuangHuyetx2 = 1;
										Show_Qigong_Effect(Target_ID, 252);
										num *= 1.4;
									}
									else if (ThienMaQuangHuyetx2 != 0)
									{
										ThienMaQuangHuyetx2 = 0;
										if (base.韩飞官_天魔狂血 != 0.0 && random.NextDouble() * 100.0 < base.韩飞官_天魔狂血 * 1.0 && value12.FLD_SKILL_TIME >= 4000)
										{
											Show_Qigong_Effect(Target_ID, 20252);
											num *= 1.8;
										}
									}
									if (base.Player_Job == 8 && 刺_连消带打数量 != 0.0)
									{
										num += 刺_连消带打数量 * 0.25;
										刺_连消带打数量 = 0.0;
									}
								}
								if (base.武功致命几率 != 0.0 && (double)random.Next(0, 100) < base.武功致命几率)
								{
									Show_Qigong_Effect(Target_ID, 17);
									num *= 1.3;
								}
								if (World.Newversion > 15 && base.剑_怒海狂澜 != 0.0 && (double)random.Next(0, 100) < base.剑_怒海狂澜)
								{
									num *= 1.2;
								}
								if (base.KhiCong_JOB2_150_2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB2_150_2)
								{
									num *= 1.2;
								}
								if (!Show_Pic_Class.ContainsKey(700014) && base.KhiCong_JOB3_150_2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB3_150_2)
								{
									num *= 1.2;
								}
								if (base.KhiCong_JOB4_150_2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB4_150_2)
								{
									num *= 1.2;
								}
								if (base.KhiCong_JOB7_150_2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB7_150_2)
								{
									num *= 1.2;
								}
								if (value11.反伤几率 != 0.0 && (double)random.Next(0, 100) < value11.反伤几率 * 3.0 / 10.0 + value11.刀_升天二气功_穷途末路)
								{
									if (value11.刀_升天二气功_穷途末路 != 0.0 && (double)random.Next(0, 100) < value11.刀_升天二气功_穷途末路)
									{
										value11.Show_Qigong_Effect(value11.UserSessionID, 19);
										int num32 = (int)(num * 2.0 * (1.0 - base.KC_DHL_TT1 / 100.0));
										Ravage_HP(num32);
										if (base.Player_FLD_HP <= 0)
										{
											base.Player_FLD_HP = 0L;
											Player_Die();
											RxjhClass.GhilogPk(value11.UserName, base.UserName);
										}
										Update_HP_MP_SP();
									}
									else
									{
										value11.Show_Qigong_Effect(value11.UserSessionID, 15);
										int num32 = (int)(num * (1.0 - base.KC_DHL_TT1 / 100.0));
										Ravage_HP(num32);
										if (base.Player_FLD_HP <= 0)
										{
											base.Player_FLD_HP = 0L;
											Player_Die();
											RxjhClass.GhilogPk(value11.UserName, base.UserName);
										}
										Update_HP_MP_SP();
									}
									num = 0.0;
								}
								if (value11.KhiCong_HongNguyetCuongPhong != 0.0 && random.NextDouble() * 200.0 < (double)(int)value11.KhiCong_HongNguyetCuongPhong)
								{
									if (value11.Party_ID != 0)
									{
										if (World.PartyClass.TryGetValue(value11.Party_ID, out value13))
										{
											foreach (Players value57 in value13.List_Party.Values)
											{
												if (value11.Check_Radius_Player(700, value57) && value57.Show_Pic_Class.ContainsKey(700014) && !value57.Show_Pic_Class.ContainsKey(700313) && value57.FLD_追加百分比_攻击_PHANNO != 0.0 && value57.Player_Zx == value11.Player_Zx)
												{
													value57.Show_Qigong_Effect(Target_ID, 313);
													value57.Show_Pic_Class.Add(700313, new Class_Show_Pill(value57, 3000.0, 700313, 0));
													value57.Send_Packet_Show_Pic(BitConverter.GetBytes(700313), 1, 3000);
													if (value57.Player_Job == 3 || value57.Player_Job == 10)
													{
														value57.Add_ATT_Percentage_PN(0.2 + value57.枪_末日狂舞);
													}
													else if (value57.Player_Job == 7)
													{
														value57.Add_ATT_Percentage_PN(0.15);
													}
													else
													{
														value57.Add_ATT_Percentage_PN(0.2);
													}
													value57.UpdatePowersAndStatus();
													value57.Update_HP_MP_SP();
												}
											}
										}
									}
									else if (value11.Show_Pic_Class.ContainsKey(700014) && !value11.Show_Pic_Class.ContainsKey(700313) && value11.FLD_追加百分比_攻击_PHANNO != 0.0)
									{
										value11.Show_Qigong_Effect(value11.UserSessionID, 313);
										value11.Show_Pic_Class.Add(700313, new Class_Show_Pill(value11, 3000.0, 700313, 0));
										value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700313), 1, 3000);
										if (value11.Player_Job == 3 || value11.Player_Job == 10)
										{
											value11.Add_ATT_Percentage_PN(0.2 + value11.枪_末日狂舞);
										}
										else if (value11.Player_Job == 7)
										{
											value11.Add_ATT_Percentage_PN(0.15);
										}
										else
										{
											value11.Add_ATT_Percentage_PN(0.2);
										}
										value11.UpdatePowersAndStatus();
										value11.Update_HP_MP_SP();
									}
								}
								if (value11.KhiCong_ManNguyetCuongPhong != 0.0 && random.NextDouble() * 333.0 < value11.KhiCong_ManNguyetCuongPhong)
								{
									if (value11.Party_ID != 0)
									{
										if (World.PartyClass.TryGetValue(value11.Party_ID, out value13))
										{
											foreach (Players value58 in value13.List_Party.Values)
											{
												if (value11.Check_Radius_Player(700, value58) && !value58.Show_Pic_Class.ContainsKey(700014) && !value58.Show_Pic_Class.ContainsKey(700343) && value58.Player_Zx == value11.Player_Zx)
												{
													value58.Show_Qigong_Effect(value11.UserSessionID, 343);
													value58.Show_Pic_Class.Add(700343, new Class_Show_Pill(value58, 3000.0, 700343, 0));
													value58.Send_Packet_Show_Pic(BitConverter.GetBytes(700343), 1, 3000);
													if (value58.Player_Job == 3 || value58.Player_Job == 10)
													{
														value58.Add_ATT_Percentage_PN(0.2 + value58.枪_末日狂舞);
														value58.Add_DEF_Percentage_PN(0.2 + value58.枪_末日狂舞);
													}
													else
													{
														value58.Add_ATT_Percentage_PN(0.2);
														value58.Add_DEF_Percentage_PN(0.2);
														if (value58.Player_Job == 11)
														{
															value58.FLD_追加百分比_Shield_PHANNO = 0.2;
														}
													}
													value58.UpdatePowersAndStatus();
													value58.Update_HP_MP_SP();
												}
											}
										}
									}
									else if (!value11.Show_Pic_Class.ContainsKey(700014) && !value11.Show_Pic_Class.ContainsKey(700343))
									{
										value11.Show_Qigong_Effect(value11.UserSessionID, 343);
										value11.Show_Pic_Class.Add(700343, new Class_Show_Pill(value11, 3000.0, 700343, 0));
										value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700343), 1, 3000);
										if (value11.Player_Job == 3 || value11.Player_Job == 10)
										{
											value11.Add_ATT_Percentage_PN(0.2 + value11.枪_末日狂舞);
											value11.Add_DEF_Percentage_PN(0.2 + value11.枪_末日狂舞);
										}
										else
										{
											value11.Add_ATT_Percentage_PN(0.2);
											value11.Add_DEF_Percentage_PN(0.2);
											if (value11.Player_Job == 11)
											{
												value11.FLD_追加百分比_Shield_PHANNO = 0.2;
											}
										}
										value11.UpdatePowersAndStatus();
										value11.Update_HP_MP_SP();
									}
								}
								if (value11.KhiCong_TruongHongQuanThien != 0.0 && random.NextDouble() * 333.0 < value11.KhiCong_TruongHongQuanThien)
								{
									if (value11.Party_ID != 0)
									{
										if (World.PartyClass.TryGetValue(value11.Party_ID, out value13))
										{
											foreach (Players value59 in value13.List_Party.Values)
											{
												if (value11.Check_Radius_Player(70, value59) && !value59.Show_Pic_Class.ContainsKey(700603) && value59.Player_Zx == value11.Player_Zx)
												{
													value59.Show_Qigong_Effect(value11.UserSessionID, 603);
													value59.Show_Pic_Class.Add(700603, new Class_Show_Pill(value59, 3000.0, 700603, 0));
													value59.Send_Packet_Show_Pic(BitConverter.GetBytes(700603), 1, 3000);
													value59.FLD_Item_Premium_HP += 1000;
													value59.FLD_Item_Premium_MP += 1000;
													value59.FLD_人物_追加_攻击 += 100;
													value59.FLD_人物_追加_防御 += 100;
													value59.更新人物数据(value59);
													value59.更新广播人物数据();
												}
											}
										}
									}
									else if (!value11.Show_Pic_Class.ContainsKey(700603))
									{
										value11.Show_Qigong_Effect(value11.UserSessionID, 603);
										value11.Show_Pic_Class.Add(700603, new Class_Show_Pill(value11, 3000.0, 700603, 0));
										value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700603), 1, 3000);
										value11.FLD_Item_Premium_HP += 1000;
										value11.FLD_Item_Premium_MP += 1000;
										value11.FLD_人物_追加_攻击 += 100;
										value11.FLD_人物_追加_防御 += 100;
										value11.更新人物数据(value11);
										value11.更新广播人物数据();
									}
								}
								if (value11.KhiCong_HongMinhBienGia != 0.0 && random.NextDouble() * 333.0 < value11.KhiCong_HongMinhBienGia)
								{
									foreach (Players value60 in value11.PlayList.Values)
									{
										if (value11.Check_Radius_Player(70, value60) && !value60.Show_Pic_Class.ContainsKey(700604) && (value11.Party_ID == 0 || (value11.Party_ID != 0 && value60.Party_ID != value11.Party_ID)))
										{
											value60.Show_Qigong_Effect(value11.UserSessionID, 604);
											value60.Show_Pic_Class.Add(700604, new Class_Show_Pill(value60, 3000.0, 700604, 0));
											value60.Send_Packet_Show_Pic(BitConverter.GetBytes(700604), 1, 3000);
											value60.FLD_追加百分比_HP上限 -= 0.15;
											if (value60.Player_FLD_HP > value60.Player_HP_Max)
											{
												value60.Player_FLD_HP = value60.Player_HP_Max;
											}
											value60.更新人物数据(value60);
											value60.更新广播人物数据();
											value60.Update_HP_MP_SP();
										}
									}
								}
								if (value11.Player_Job == 9 && value11.KC_DHL_TT1 != 0.0 && random.NextDouble() * 100.0 <= value11.KC_DHL_TT1 + value11.KhiCong_JOB9_150_2 && !value11.Show_Pic_Class.ContainsKey(700700))
								{
									Class_Show_Pill value14 = new Class_Show_Pill(value11, 10000.0, 700700, 0);
									value11.Show_Pic_Class.Add(700700, value14);
									value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700700), 1, 10000);
									value11.Show_Qigong_Effect(value11.UserSessionID, 700);
								}
								if (value11.Show_Pic_Class.ContainsKey(700700))
								{
									num *= 1.0 - value11.KC_DHL_TT1 / 100.0;
								}
								if (base.Player_Job == 3 || base.Player_Job == 10)
								{
									if (base.Qigong_job10_10 != 0.0 && ComboQuyenSu > 0 && random.NextDouble() * 100.0 < base.Qigong_job10_10)
									{
										Show_Qigong_Effect(Target_ID, 557);
										num *= 1.3 + base.KC_QuyenVuong_3;
									}
									if (Show_Pic_Class.ContainsKey(700014) && base.枪_升天三气功_怒意之吼 != 0.0 && (double)random.Next(0, 100) < base.枪_升天三气功_怒意之吼)
									{
										num *= ((World.Newversion >= 13) ? 1.2 : 1.5) + base.KCTT_Thuong_130_NoHuyetXungThien_Plus;
										Show_Qigong_Effect(Target_ID, 332);
									}
									if (base.KCThuong_TT1_DiemVuongPheNguyet != 0.0 && (double)random.Next(0, 100) < base.KCThuong_TT1_DiemVuongPheNguyet + base.KCThuong_TT2_SinhTuHuuMenh)
									{
										num += (double)base.FLD_Item_Defense * (0.4 + base.KCThuong_TT2_SinhTuHuuMenh * 0.01);
										Show_Qigong_Effect(Target_ID, 330);
									}
									if (base.KC_QuyenVuong_2 != 0.0 && random.NextDouble() * 100.0 < base.KC_QuyenVuong_2)
									{
										Show_Qigong_Effect(Target_ID, 561);
										num *= 1.3;
									}
								}
								if (base.Player_Job == 4)
								{
									num += base.弓_锐利之箭 + 1.0;
									if (base.弓_升天三气功_天外三矢 != 0.0 && (double)random.Next(0, 100) < base.弓_升天三气功_天外三矢)
									{
										Show_Qigong_Effect(Target_ID, 342);
										num *= 1.5;
									}
									if (Skill_ID == 400001 && base.弓_致命绝杀 != 0.0 && (double)random.Next(0, 100) < base.弓_致命绝杀)
									{
										Show_Qigong_Effect(Target_ID, 140);
										num *= 1.4;
									}
									if (base.弓_无明暗矢 != 0.0 && (double)random.Next(0, 100) < base.弓_无明暗矢)
									{
										num *= 1.5;
										Show_Qigong_Effect(Target_ID, 49);
									}
								}
								if (value11.Player_Job == 11)
								{
									if (value11.KhiCong_JOB11_10 != 0.0 && value11.怒气_JOB11 < 3 && random.Next(0, 100) < 40)
									{
										value11.Show_Qigong_Effect(Target_ID, 809);
										value11.怒气_JOB11++;
									}
									if (value11.KhiCong_JOB11_11 != 0.0 && value11.Player_FLD_HP * 2 <= value11.Player_HP_Max && random.NextDouble() * 100.0 < value11.KhiCong_JOB11_11)
									{
										value11.Show_Qigong_Effect(Target_ID, 804);
										num *= 0.5;
										value11.Player_FLD_HP += Math.Min((int)num, 2000);
										if (value11.Player_FLD_HP > value11.Player_HP_Max)
										{
											value11.Player_FLD_HP = value11.Player_HP_Max;
										}
									}
									if (value11.KhiCong_JOB11_8 != 0.0 && (double)random.Next(0, 100) < value11.KhiCong_JOB11_8 && value11.Player_Shield * 2 < value11.Player_Shield_Max)
									{
										value11.Show_Qigong_Effect(Target_ID, 801);
										value11.Player_Shield += value11.Player_Shield_Max / 2;
									}
								}
								if (base.Player_Job == 11)
								{
									if (base.KhiCong_JOB11_10 != 0.0 && 怒气_JOB11 == 3)
									{
										Show_Qigong_Effect(Target_ID, 802);
										怒气_JOB11 = 0;
										num *= 1.0 + base.KhiCong_JOB11_10;
										Update_HP_MP_SP();
									}
									if (base.KhiCong_JOB11_5 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB11_5 * 0.2)
									{
										Show_Qigong_Effect(Target_ID, 807);
										num *= 1.0 + base.KhiCong_JOB11_5 * 0.01;
									}
									if (base.KhiCong_JOB11_TT1 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB11_TT1)
									{
										num *= 1.4;
										Show_Qigong_Effect(Target_ID, 803);
									}
									if (base.Player_FLD_Map != 7301 && base.KhiCong_JOB11_TT2 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB11_TT2)
									{
										long num15 = base.Player_HP_Max / 5;
										num += (double)num15;
										Show_Qigong_Effect(Target_ID, 806);
									}
								}
								if (base.KhiCongTTChung_PhanNo != 0.0 && random.Next(0, 500) < (int)base.KhiCongTTChung_PhanNo)
								{
									if (Show_Pic_Class.ContainsKey(700014))
									{
										Show_Pic_Class[700014].EndEvent();
									}
									KCPhanNo = 1;
									Update_HP_MP_SP();
								}
								if (base.KhiCong_ThanhXaXuatDong != 0.0 && random.NextDouble() * 200.0 < base.KhiCong_ThanhXaXuatDong)
								{
									if (value11.Show_Pic_Class.ContainsKey(700314))
									{
										value11.Show_Pic_Class[700314].EndEvent();
									}
									if (!value11.Show_Pic_Class.ContainsKey(700314))
									{
										Show_Qigong_Effect(value11.UserSessionID, 314);
										value11.Show_Pic_Class.Add(700314, new Class_Show_Pill(value11, 3000.0, 700314, 0));
										value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700314), 1, 3000);
										value11.更新广播人物数据();
										value11.更新人物数据(value11);
									}
								}
								if (base.KhiCong_LietNhatDiemDiem != 0.0 && random.NextDouble() * 200.0 < base.KhiCong_LietNhatDiemDiem)
								{
									if (value11.Show_Pic_Class.ContainsKey(700344))
									{
										value11.Show_Pic_Class[700344].EndEvent();
									}
									if (!value11.Show_Pic_Class.ContainsKey(700344))
									{
										Show_Qigong_Effect(value11.UserSessionID, 344);
										value11.Show_Pic_Class.Add(700344, new Class_Show_Pill(value11, 3000.0, 700344, 0));
										value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700344), 1, 3000);
										value11.Update_Character_Wear_Item();
										value11.UpdatePowersAndStatus();
										value11.更新广播人物数据();
										value11.更新人物数据(value11);
									}
								}
								if (base.KhiCong_150_TriTan != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_150_TriTan)
								{
									if (value11.Show_Pic_Class.ContainsKey(700667))
									{
										value11.Show_Pic_Class[700667].EndEvent();
									}
									if (!value11.Show_Pic_Class.ContainsKey(700667))
									{
										Show_Qigong_Effect(value11.UserSessionID, 344);
										value11.Show_Pic_Class.Add(700667, new Class_Show_Pill(value11, 3000.0, 700667, 0));
										value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700667), 1, 3000);
										value11.Update_Character_Wear_Item();
										value11.UpdatePowersAndStatus();
										value11.更新广播人物数据();
										value11.更新人物数据(value11);
									}
								}
								if (base.Player_Job == 10 && ComboQuyenSu > 0 && base.Qigong_job10_7 != 0.0)
								{
									num *= 1.0 + base.Qigong_job10_7;
								}
								if (base.Player_Job == 5)
								{
									num *= 1.0 + base.医_长攻击力;
									if (base.医_升天三气功_明镜止水 >= 10.0)
									{
										if (base.医_升天二气功_无中生有 != 0.0 && (double)random.Next(0, 100) < base.医_升天二气功_无中生有 * 2.0)
										{
											if ((double)random.Next(0, 100) < base.医_升天三气功_明镜止水)
											{
												Show_Qigong_Effect(Target_ID, 352);
												num *= 1.6 + ((World.Newversion >= 13) ? (base.医_升天二气功_无中生有 / 100.0) : 0.4);
											}
											else
											{
												Show_Qigong_Effect(Target_ID, 351);
												num *= 1.0 + ((World.Newversion >= 13) ? (base.医_升天二气功_无中生有 / 100.0) : 0.4);
											}
										}
									}
									else if (base.医_升天二气功_无中生有 != 0.0 && (double)random.Next(0, 100) < base.医_升天二气功_无中生有)
									{
										Show_Qigong_Effect(Target_ID, 351);
										num *= 1.0 + ((World.Newversion >= 13) ? (base.医_升天二气功_无中生有 / 100.0) : 0.4);
									}
								}
								if (value11.Player_Job == 7 && value11.琴师_升天二气功_三潭映月 != 0.0 && random.NextDouble() * 100.0 <= 4.5 + value11.琴师_升天二气功_三潭映月 * 0.5)
								{
									Ravage_HP((int)num);
									if (base.Player_FLD_HP <= 0)
									{
										base.Player_FLD_HP = 0L;
										Player_Die();
										RxjhClass.GhilogPk(value11.UserName, base.UserName);
									}
									num = 0.0;
									Update_HP_MP_SP();
									value11.Show_Qigong_Effect(value11.UserSessionID, 391);
								}
								if (value11.Player_Job == 2 || value11.Player_Job == 9)
								{
									int num33 = random.Next(0, 100);
									if (value11.剑_护身罡气 != 0.0 && (double)num33 < value11.剑_护身罡气)
									{
										num *= 0.5;
										value11.Show_Qigong_Effect(Target_ID, 25);
									}
									if (value11.KC_HoiLieuThanPhap != 0.0 && random.NextDouble() * 100.0 < value11.KC_HoiLieuThanPhap)
									{
										num = 0.0;
										CheckDoiPhuongNeSkill = 1;
									}
								}
								if (value11.KhiCong_JOB5_150_2 != 0.0 && random.NextDouble() * 100.0 < value11.KhiCong_JOB5_150_2)
								{
									num = 0.0;
									CheckDoiPhuongNeSkill = 1;
								}
								if (value11.KhiCong_JOB10_150_2 != 0.0 && random.NextDouble() * 100.0 < value11.KhiCong_JOB10_150_2)
								{
									num = 0.0;
									CheckDoiPhuongNeSkill = 1;
								}
								if (value11.bFlag_KC150_JOB6 && value11.KhiCong_JOB6_150_2 != 0.0)
								{
									value11.bFlag_KC150_JOB6 = false;
									num = (int)(num * (1.0 - value11.KhiCong_JOB6_150_2));
								}
								if (value11.Qigong_HBQ6 != 0.0 && value11.Player_Job == 8)
								{
									double num34 = random.NextDouble() * 100.0;
									if (num34 <= value11.Qigong_HBQ6)
									{
										num -= (double)(int)(num * value11.Qigong_HBQ6 / 100.0);
									}
								}
								if (value11.Player_Job == 6)
								{
									if (value11.刺_升天一气功_夜魔缠身 != 0.0 && (double)random.Next(0, 100) <= value11.刺_升天一气功_夜魔缠身)
									{
										value11.Show_Qigong_Effect(Target_ID, 370);
										num *= 0.7;
									}
									if (value11.刺_升天二气功_顺水推舟 != 0.0 && (double)random.Next(0, 100) <= value11.刺_升天二气功_顺水推舟)
									{
										value11.Show_Qigong_Effect(Target_ID, 371);
										num *= 0.8;
										value11.Recovery_HP((int)(num * 0.2));
										value11.Update_HP_MP_SP();
									}
								}
								if (value11.Item_Wear[0].FLD_PID != 0 && value11.Item_Wear[0].物品属性阶段类型 == 6 && !value11.Show_Pic_Class.ContainsKey(700344))
								{
									double num35 = (double)value11.Item_Wear[0].物品属性阶段数 * 0.5;
									if (value11.Show_Pic_Class.ContainsKey(700291))
									{
										num35 = (double)value11.Item_Wear[0].物品属性阶段数 * 0.5 * 2.0;
									}
									int num36 = random.Next(0, 100);
									if (num35 >= (double)num36 && !异常状态.ContainsKey(3))
									{
										异常状态类 value15 = new 异常状态类(this, 60000, 3, 0);
										异常状态.Add(3, value15);
									}
								}
								if (base.Player_Job == 6)
								{
									if (value12.FLD_PID == 801303)
									{
										int num37 = (int)DateTime.Now.Subtract(time_PK_801303).TotalSeconds;
										if (num37 < 18)
										{
											GameMessage("ThõÌi gian hôÌi chiêu laÌ " + (18 - num37) + " giây nýÞa mõìi duÌng dýõòc", 9);
											break;
										}
										time_PK_801303 = DateTime.Now;
										num = 0.0;
										怒气_JOB6++;
										if (怒气_JOB6 > 5)
										{
											怒气_JOB6 = 5;
										}
										Update_HP_MP_SP();
									}
									else if (value12.FLD_INDEX != 1 && value12.FLD_INDEX != 5 && value12.FLD_INDEX != 9 && value12.FLD_INDEX != 13 && value12.FLD_INDEX != 17 && value12.FLD_INDEX != 21 && value12.FLD_INDEX != 25)
									{
										if (value12.FLD_INDEX != 2 && value12.FLD_INDEX != 6 && value12.FLD_INDEX != 10 && value12.FLD_INDEX != 14 && value12.FLD_INDEX != 18 && value12.FLD_INDEX != 22 && value12.FLD_INDEX != 26)
										{
											if ((value12.FLD_INDEX == 3 || value12.FLD_INDEX == 7 || value12.FLD_INDEX == 11 || value12.FLD_INDEX == 15 || value12.FLD_INDEX == 19 || value12.FLD_INDEX == 23 || value12.FLD_INDEX == 27) && 怒气_JOB6 > 0)
											{
												num += num * 0.3 * (double)怒气_JOB6;
												Show_Qigong_Effect(Target_ID, 80);
												怒气_JOB6 = 0;
												bFlag_KC150_JOB6 = true;
												Update_HP_MP_SP();
											}
										}
										else if (怒气_JOB6 > 0)
										{
											if (!value11.异常状态.ContainsKey(9))
											{
												double fLD_TRUDEF_NINJA = 0.0;
												switch (value12.FLD_INDEX)
												{
													case 2:
														fLD_TRUDEF_NINJA = 0.05;
														break;
													case 6:
														fLD_TRUDEF_NINJA = 0.07;
														break;
													case 10:
														fLD_TRUDEF_NINJA = 0.1;
														break;
													case 14:
														fLD_TRUDEF_NINJA = 0.15;
														break;
													case 18:
														fLD_TRUDEF_NINJA = 0.2;
														break;
													case 22:
														fLD_TRUDEF_NINJA = 0.25;
														break;
													case 26:
														fLD_TRUDEF_NINJA = 0.3;
														break;
												}
												double num38 = 10000.0;
												num38 += base.刺_千蛛万手 * 1000.0;
												异常状态类 value16 = new 异常状态类(value11, (int)num38, 9, 0);
												value11.异常状态.Add(9, value16);
												value11.FLD_TRUDEF_NINJA = fLD_TRUDEF_NINJA;
												value11.UpdatePowersAndStatus();
											}
											double num39 = 0.05;
											switch (value12.FLD_INDEX)
											{
												case 2:
													num39 = 0.05;
													break;
												case 6:
													num39 = 0.07;
													break;
												case 10:
													num39 = 0.09;
													break;
												case 14:
													num39 = 0.11;
													break;
												case 18:
													num39 = 0.13;
													break;
												case 22:
													num39 = 0.15;
													break;
												case 26:
													num39 = 0.2;
													break;
											}
											if (!value11.异常状态.ContainsKey(10))
											{
												double num40 = 10000.0;
												num40 += base.刺_千蛛万手 * 1000.0;
												异常状态类 异常状态类2 = new 异常状态类(value11, (int)num40, 10, (int)(num * num39));
												异常状态类2.DecreaseHP_1s(num * num39);
												value11.异常状态.Add(10, 异常状态类2);
											}
											怒气_JOB6--;
											if (base.刺_升天三气功_以怒还怒 != 0.0 && (double)random.Next(0, 100) < base.刺_升天三气功_以怒还怒 && 怒气_JOB6 < 5)
											{
												Show_Qigong_Effect(base.UserSessionID, 372);
												怒气_JOB6 += 2;
												if (怒气_JOB6 > 5)
												{
													怒气_JOB6 = 5;
												}
											}
											Update_HP_MP_SP();
										}
									}
									else if (怒气_JOB6 > 0)
									{
										if (!value11.异常状态.ContainsKey(9))
										{
											double fLD_TRUDEF_NINJA = 0.0;
											switch (value12.FLD_INDEX)
											{
												case 1:
													fLD_TRUDEF_NINJA = 0.05;
													break;
												case 5:
													fLD_TRUDEF_NINJA = 0.07;
													break;
												case 9:
													fLD_TRUDEF_NINJA = 0.1;
													break;
												case 13:
													fLD_TRUDEF_NINJA = 0.15;
													break;
												case 17:
													fLD_TRUDEF_NINJA = 0.2;
													break;
												case 21:
													fLD_TRUDEF_NINJA = 0.25;
													break;
												case 25:
													fLD_TRUDEF_NINJA = 0.3;
													break;
											}
											double num41 = 10000.0;
											num41 += base.刺_千蛛万手 * 1000.0;
											异常状态类 value17 = new 异常状态类(value11, (int)num41, 9, 0);
											value11.异常状态.Add(9, value17);
											value11.FLD_TRUDEF_NINJA = fLD_TRUDEF_NINJA;
											value11.UpdatePowersAndStatus();
										}
										if (!value11.异常状态.ContainsKey(11))
										{
											double num42 = 10000.0;
											num42 += base.刺_千蛛万手 * 1000.0;
											异常状态类 value18 = new 异常状态类(value11, (int)num42, 11, 0);
											value11.异常状态.Add(11, value18);
										}
										怒气_JOB6--;
										if (base.刺_升天三气功_以怒还怒 != 0.0 && (double)random.Next(0, 100) < base.刺_升天三气功_以怒还怒 && 怒气_JOB6 < 5)
										{
											Show_Qigong_Effect(base.UserSessionID, 372);
											怒气_JOB6 += 2;
											if (怒气_JOB6 > 5)
											{
												怒气_JOB6 = 5;
											}
										}
										Update_HP_MP_SP();
									}
								}
								if (value11.Player_Job == 5 && value11.KhiCongTTChung_PhanNo != 0.0 && (double)random.Next(0, 150) <= value11.KhiCongTTChung_PhanNo)
								{
									value11.人物_SP = value11.人物最大_SP + 1;
									value11.Update_HP_MP_SP();
								}
								if (value11.Player_Job == 6 && value11.刺_三花聚顶 != 0.0 && (double)random.Next(0, 100) <= value11.刺_三花聚顶)
								{
									value11.刺_连消带打数量 = num * value11.刺_连消带打;
									num = 0.0;
									CheckDoiPhuongNeSkill = 1;
								}
								if (value11.Player_Job == 8 && value11.韩飞官_升天一气功 != 0.0 && (double)random.Next(0, 100) <= value11.韩飞官_升天一气功)
								{
									value11.Show_Qigong_Effect(value11.UserSessionID, 600);
									value11.刺_连消带打数量 = num;
									num = 0.0;
									CheckDoiPhuongNeSkill = 1;
								}
								if (base.Player_Job == 7)
								{
									num *= num2;
								}
								if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 5 && !Show_Pic_Class.ContainsKey(700344))
								{
									num += (double)(Item_Wear[3].物品属性阶段数 * 3);
								}
								if (base.Player_Job == 10 && ComboQuyenSu >= 1 && ComboQuyenSu <= 5 && value12.FLD_PID != 3000101 && value12.FLD_PID != 3000105 && (value12.FLD_AT != 0 || value12.FLD_EFFERT == 314) && World.DamageComBoQuyenSu.Length == 6)
								{
									num *= 1.0 + base.Qigong_job10_6 + double.Parse(World.DamageComBoQuyenSu[ComboQuyenSu - 1]);
								}
								if (value11.Player_Job == 10 && value11.Qigong_job10_8 != 0.0 && (double)random.Next(0, 100) <= value11.Qigong_job10_8)
								{
									num *= 1.0 - value11.Qigong_job10_8 / 100.0;
									value11.Show_Qigong_Effect(value11.UserSessionID, 554);
								}
								if (TrungCapEffect_PhanNo != 0)
								{
									double num22 = random.Next(0, 100);
									if (num22 <= (double)TrungCapEffect_PhanNo)
									{
										num += num * 0.2;
										Show_Qigong_Effect(Target_ID, 404);
									}
								}
								if (value11.TrungCapEffect_HonNguyen != 0 && random.Next(0, 100) <= value11.TrungCapEffect_HonNguyen)
								{
									value11.Show_Qigong_Effect(value11.UserSessionID, 407);
									num /= 2.0;
								}
								if ((int)num - (int)(num / 40.0) > 0)
								{
									num = random.Next((int)num - (int)(num / 40.0), (int)num + (int)(num / 40.0));
								}
								if (base.会员等级 != 0 || value11.会员等级 != 0)
								{
									num = ((base.会员等级 > value11.会员等级 || base.会员等级 == value11.会员等级) ? 10000000000.0 : 0.0);
								}
								if (base.KhiCong_NhatKiemPhaThien != 0.0)
								{
									num *= 1.0 + base.KhiCong_NhatKiemPhaThien;
								}
								if (num <= 0.0)
								{
									num = 1.0;
								}
								if (random.Next(0, 5000) + base.FLD_人物基本_命中 < value11.FLD_人物基本_回避 || value11.Bat_Tu > 0)
								{
									num = 0.0;
									CheckDoiPhuongNeSkill = 1;
								}
								if (Skill_ID == 1000501 && CheckDoiPhuongNeSkill == 0)
								{
									try
									{
										int num16 = (int)DateTime.Now.Subtract(time_PK_1000501).TotalSeconds;
										if (num16 >= 25)
										{
											if (value11.异常状态.ContainsKey(26))
											{
												value11.异常状态[26].EndEvent();
											}
											if (!value11.异常状态.ContainsKey(26))
											{
												time_PK_1000501 = DateTime.Now;
												异常状态类 value6 = new 异常状态类(value11, 2000 / ((!value11.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2), 26, 0);
												value11.异常状态.Add(26, value6);
												value6 = new 异常状态类(value11, 2000 / ((!value11.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2), 4, 0);
												value11.异常状态.Add(4, value6);
												value11.UpdatePowersAndStatus();
											}
										}
										else
										{
											GameMessage("Thoi gian hoi chieu con " + (25 - num16) + " giay");
										}
									}
									catch
									{
										CheckDoiPhuongNeSkill = 0;
										Form1.WriteLine(1, "ERROR Skill 2000401 - 异常状态.ContainsKey(26)) : [" + value11.Userid + "] - [" + value11.UserName + "]");
									}
								}
								if ((base.Player_Job == 2 || base.Player_Job == 9) && Array_Skill_Book[value12.FLD_武功类型, value12.FLD_INDEX] != null && Array_Skill_Book[value12.FLD_武功类型, value12.FLD_INDEX].武功_等级 >= 5 && base.剑_升天二气功_天地同寿 != 0.0)
								{
									if (num <= 2.0 || CheckDoiPhuongNeSkill != 0)
									{
										天地同寿回避次数++;
										GameMessage("Côòng dôÌn thiên kiêìm phi toaìi: " + 天地同寿回避次数);
										if (天地同寿回避次数 > 3)
										{
											天地同寿回避次数 = 3;
										}
									}
									else if (天地同寿回避次数 > 0)
									{
										Show_Qigong_Effect(Target_ID, 321);
										GameMessage("Saìt thýõng: " + num + " - Côòng dôÌn: " + 天地同寿回避次数);
										num *= 1.0 + base.剑_升天二气功_天地同寿 * (double)天地同寿回避次数;
										GameMessage("=> Saìt thýõng sau côòng ðôÌn: " + num);
										天地同寿回避次数 = 0;
									}
								}
								if (Skill_ID == 2000401 && CheckDoiPhuongNeSkill == 0)
								{
									try
									{
										if (value11.异常状态.ContainsKey(28))
										{
											value11.异常状态[28].EndEvent();
										}
										if (!value11.异常状态.ContainsKey(28))
										{
											异常状态类 value6 = new 异常状态类(value11, (int)((base.KCDHL_HHDP_1 * 100.0 / 5.0 + 3000.0) / (double)((!value11.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2)), 4, 0);
											value11.异常状态.Add(4, value6);
											value6 = new 异常状态类(value11, (int)((base.KCDHL_HHDP_1 * 100.0 / 5.0 + 3000.0) / (double)((!value11.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2)), 28, 0);
											value11.异常状态.Add(28, value6);
											value11.UpdatePowersAndStatus();
										}
									}
									catch
									{
										CheckDoiPhuongNeSkill = 0;
										Form1.WriteLine(1, "ERROR Skill 2000401 - 异常状态.ContainsKey(26)) : [" + value11.Userid + "] - [" + value11.UserName + "]");
									}
								}
								攻击计算完成(this, Target_ID, Skill_ID, (long)num, 0, 0L, num26, num24);
							}
						}
						break;
				}
			end_IL_0020:;
			}
			catch (Exception ex3)
			{
				Form1.WriteLine(1, "魔法攻击" + base.UserSessionID + "|" + base.Client.ToString() + " | " + Skill_ID + " | " + Target_ID + " | " + ex3.Message);
			}
		}

		public void 魔法攻击灵兽(int 武功ID, int 人物ID)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_魔法攻击灵兽");
			}
			if (人物ID < 10000 || !MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(人物ID, out NpcClass value) || value.IsNpc == 1)
			{
				return;
			}
			int num = 0;
			if (World.TblKongfu.TryGetValue(武功ID, out MartialArts _))
			{
				double num2 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point) / (double)World.宠物攻击力倍数;
				发送灵兽攻击人物数据(this, 人物ID, 武功ID, (int)num2, num);
				攻击列表.Clear();
				using (new Lock(攻击列表, "攻击列表"))
				{
					攻击列表.Add(new 攻击类(人物ID, 武功ID, (long)num2, num));
				}
				if (World.攻击确认模式 != 2)
				{
					SendPack(base.UserSessionID, 人物ID, num, 0, 800);
				}
			}
		}

		public void 魔法使用(double mp)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_魔法使用");
			}
			try
			{
				switch (base.Player_Job)
				{
					case 5:
						{
							double num = BitConverter.ToInt16(气功[1].气功_byte, 0);
							double num2 = num * 0.01;
							mp -= mp * num2;
							base.Player_FLD_MP -= (int)mp;
							break;
						}
					case 7:
						mp -= (double)(int)(mp * (base.琴师_高山流水 * 0.015));
						base.Player_FLD_MP -= (int)mp;
						break;
					default:
						base.Player_FLD_MP -= (int)mp;
						break;
				}
				Update_HP_MP_SP();
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "魔法使用" + base.UserSessionID + "|" + ToString() + " " + ex.Message);
			}
		}

		public void GsAddExpToCharacter(long ExpAdd)
		{
			long player_FLD_EXP = base.Player_FLD_EXP;
			base.Player_FLD_EXP += ExpAdd;
			更新人物数据(this);
			计算人物基本数据3();
			Update_HP_MP_SP();
			UpdatePowersAndStatus();
			Update_Exp_Marble();
			Update_Money_Weight();
			if (base.Player_FLD_EXP < player_FLD_EXP)
			{
				base.Player_FLD_EXP = player_FLD_EXP;
				计算人物基本数据3();
				Update_HP_MP_SP();
				UpdatePowersAndStatus();
				Update_Exp_Marble();
				Update_Money_Weight();
			}
		}

		public void GsAddKiToCharacter(int KiAdd)
		{
			base.Player_ExpErience += KiAdd;
			Update_HP_MP_SP();
			Update_Exp_Marble();
			UpdatePowersAndStatus();
		}

		public void GsAddMoneyToCharacter(long MoneyAdd)
		{
			base.Player_Money += MoneyAdd;
			Update_Money_Weight();
		}

		public void GsAddWuxunToCharacter(int WuxunAdd)
		{
			base.Player_WuXun += WuxunAdd;
			UpdatePowersAndStatus();
			Update_HP_MP_SP();
		}

		public void GsAddGuildPoint(int Point)
		{
			RxjhClass.AddGuildPoint(Point, base.UserName);
			GameMessage("Baòn ðaÞ côìng hiêìn " + Point + " ðiêÒm vaÌo bang hôòi (qua ngaÌy seÞ câòp nhâòt)", 7);
		}

		public void 起名提示(int id)
		{
			string hex = "AA551700013E05571008000100000000000000000000000000484055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 气功书(byte[] data)
		{
			try
			{
				if (!base.PlayerIsDead)
				{
					int num = data[12];
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					Buffer.BlockCopy(data, 15, array, 0, 4);
					Buffer.BlockCopy(data, 27, array2, 0, 4);
					int num2 = BitConverter.ToInt32(array, 0);
					BitConverter.ToInt32(array2, 0);
					ItmeClass value = default(ItmeClass);
					if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == num2 && World.Itme.TryGetValue(num2, out value) && BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 0)
					{
						foreach (升天气功总类 value2 in World.升天气功List.Values)
						{
							if (value2.物品ID == num2)
							{
								if (value2.气功ID >= 380 && value2.气功ID <= 387)
								{
									int num3 = 0;
									foreach (KeyValuePair<int, 升天气功类> item in 升天气功)
									{
										if (item.Key >= 380 && item.Key <= 387)
										{
											num3++;
										}
									}
									if (num3 >= 5)
									{
										GameMessage("MôÞi nhân vâòt chiÒ ðýõòc hoòc tôìi ða 5 loaòi khiì công thãng thiên chung!");
										break;
									}
								}
								if (value.FLD_LEVEL <= base.Player_Level && (value.FLD_ZX == 0 || value.FLD_ZX == base.Player_Zx) && (value.FLD_JOB_LEVEL == 0 || value.FLD_JOB_LEVEL <= base.Player_Job_Level) && base.Player_Money >= 100000000)
								{
									switch (base.Player_Job)
									{
										case 1:
											if (value2.人物职业1 == 0)
											{
												return;
											}
											break;
										case 2:
											if (value2.人物职业2 == 0)
											{
												return;
											}
											break;
										case 3:
											if (value2.人物职业3 == 0)
											{
												return;
											}
											break;
										case 4:
											if (value2.人物职业4 == 0)
											{
												return;
											}
											break;
										case 5:
											if (value2.人物职业5 == 0)
											{
												return;
											}
											break;
										case 6:
											if (value2.人物职业6 == 0)
											{
												return;
											}
											break;
										case 7:
											if (value2.人物职业7 == 0)
											{
												return;
											}
											break;
										case 8:
											if (value2.人物职业8 == 0)
											{
												return;
											}
											break;
										case 9:
											if (value2.人物职业9 == 0)
											{
												return;
											}
											break;
										case 10:
											if (value2.人物职业10 == 0)
											{
												return;
											}
											break;
										case 11:
											if (value2.人物职业11 == 0)
											{
												return;
											}
											break;
										case 12:
											if (value2.人物职业12 == 0)
											{
												return;
											}
											break;
									}
									升天气功类 升天气功类 = new 升天气功类();
									升天气功类.气功ID = value2.气功ID;
									if (!升天气功.ContainsKey(升天气功类.气功ID))
									{
										升天气功.Add(升天气功类.气功ID, 升天气功类);
										Item_Use(num, 1);
										学习技能提示();
										UpdatePowersAndStatus();
										Update_Money_Weight();
									}
								}
								break;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "气功书 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 潜行(byte[] data, int length)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(data, 15, array, 0, 4);
			int value = BitConverter.ToInt32(array, 0);
			string hex = "AA55270000E2015117180001000000B2390C002C01000001000000000000009F000000000000000000000055AA";
			byte[] array2 = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(value), 0, array2, 15, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 19, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
			SendRangeOfPackets(array2, array2.Length);
		}

		public void 潜行状态(int 状态ID)
		{
			Player_Invisible = 状态ID;
			潜行模式 = 状态ID;
			string hex = "AA551B0000B20205200C00060000000100000001000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			SendRangeOfPackets(array, array.Length);
		}

		public void 轻功(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[2];
				Buffer.BlockCopy(data, 11, array, 0, 4);
				Buffer.BlockCopy(data, 5, array2, 0, 2);
				MartialArts value;
				MartialArts value17;
				if (BitConverter.ToInt16(array2, 0) == base.UserSessionID)
				{
					if (World.TblKongfu.TryGetValue(BitConverter.ToInt32(array, 0), out value))
					{
						if (base.Player_FLD_MP < value.FLD_MP)
						{
							魔法不足提示();
						}
						else if (((value.FLD_JOB == 0 || base.Player_Job == value.FLD_JOB) && (value.FLD_ZX == 0 || base.Player_Zx == value.FLD_ZX) && base.Player_Job_Level >= value.FLD_JOBLEVEL && base.Player_Level >= value.FLD_LEVEL && MartialArts.GetsfeWg(this, value.FLD_PID)) || base.FLD_师徒_武功ID1_1 == value.FLD_PID || base.FLD_师徒_武功ID1_2 == value.FLD_PID || base.FLD_师徒_武功ID1_3 == value.FLD_PID)
						{
							if (value.FLD_PID == 901401)
							{
								if (Show_Pic_Class.ContainsKey(900401) || Show_Pic_Class.ContainsKey(900402) || Show_Pic_Class.ContainsKey(900403))
								{
									base.Player_FLD_MP = 0;
									int num = 0;
									if (base.玉连环计数 >= 6)
									{
										base.玉连环计数 = 0;
									}
									switch (base.玉连环计数)
									{
										case 0:
											num = 玉连环[0];
											break;
										case 1:
											num = 玉连环[1];
											break;
										case 2:
											num = 玉连环[2];
											break;
										case 3:
											num = 玉连环[3];
											break;
										case 4:
											num = 玉连环[4];
											break;
										case 5:
											num = 玉连环[5];
											break;
									}
									if (Show_Pic_Class.ContainsKey(900401))
									{
										Show_Pic_Class[900401].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(900402))
									{
										Show_Pic_Class[900402].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(900403))
									{
										Show_Pic_Class[900403].EndEvent();
									}
									if (num != 0 && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
									{
										Class_Show_Pill value2 = new Class_Show_Pill(this, 60000.0, num, 0);
										Show_Pic_Class.Add(num, value2);
										Send_Packet_Show_Pic(BitConverter.GetBytes(num), 1, 60000);
										Add_ATT_Percentage_PN(0.15);
										Add_DEF_Percentage_PN(0.15);
										base.玉连环计数++;
									}
									更新人物数据(this);
									更新广播人物数据();
									发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
								}
								else
								{
									GameMessage("Trang thai không thêÒ su dung!");
								}
							}
							else
							{
								if (value.FLD_PID == 601101)
								{
									if (Show_Pic_Class.ContainsKey(601102))
									{
										Show_Pic_Class[601102].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(601101))
									{
										Show_Pic_Class[601101].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(601103))
									{
										Show_Pic_Class[601103].EndEvent();
									}
									if (潜行模式 == 1 && GM模式 == 1)
									{
										潜行状态(0);
									}
									Class_Show_Pill value3 = new Class_Show_Pill(this, 240000.0, value.FLD_PID, 0);
									Show_Pic_Class.Add(value.FLD_PID, value3);
									Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 240000);
									行走状态id = 2;
									行走状态(BitConverter.GetBytes(value.FLD_PID), 2);
									goto IL_1b0f;
								}
								if (value.FLD_PID == 601102)
								{
									if (潜行模式 == 0 && GM模式 == 0)
									{
										潜行状态(0);
									}
									if (Show_Pic_Class.ContainsKey(601101))
									{
										Show_Pic_Class[601101].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(601103))
									{
										Show_Pic_Class[601103].EndEvent();
									}
									if (!Show_Pic_Class.ContainsKey(601102))
									{
										Class_Show_Pill value4 = new Class_Show_Pill(this, 240000.0, value.FLD_PID, 0);
										Show_Pic_Class.Add(value.FLD_PID, value4);
										Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 240000);
									}
									行走状态id = 3;
									行走状态(BitConverter.GetBytes(value.FLD_PID), 3);
									goto IL_1b0f;
								}
								if (value.FLD_PID == 601103)
								{
									if (潜行模式 == 1 && GM模式 == 1)
									{
										潜行状态(0);
									}
									if (Show_Pic_Class.ContainsKey(601101))
									{
										Show_Pic_Class[601101].EndEvent();
									}
									if (Show_Pic_Class.ContainsKey(601102))
									{
										Show_Pic_Class[601102].EndEvent();
									}
									if (!Show_Pic_Class.ContainsKey(601103))
									{
										Class_Show_Pill value5 = new Class_Show_Pill(this, 240000.0, value.FLD_PID, 0);
										Show_Pic_Class.Add(value.FLD_PID, value5);
										Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 240000);
									}
									行走状态id = 5;
									行走状态(BitConverter.GetBytes(value.FLD_PID), 5);
									goto IL_1b0f;
								}
								if (value.FLD_PID == 1001301)
								{
									if (Show_Pic_Class.ContainsKey(1001301))
									{
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else if (Show_Pic_Class.ContainsKey(1001302))
									{
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else
									{
										if (!Show_Pic_Class.ContainsKey(1001303))
										{
											Class_Show_Pill value6 = new Class_Show_Pill(this, 120000 + (int)base.QiGong_BUFF_Dragon * 3000, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value6);
											Add_ATT_Percentage(0.05);
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 120000 + (int)base.QiGong_BUFF_Dragon * 3000);
											发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
											goto IL_1b0f;
										}
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
								}
								else if (value.FLD_PID == 1001302)
								{
									if (Show_Pic_Class.ContainsKey(1001301))
									{
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else if (Show_Pic_Class.ContainsKey(1001302))
									{
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else
									{
										if (!Show_Pic_Class.ContainsKey(1001303))
										{
											Class_Show_Pill value6 = new Class_Show_Pill(this, 120000 + (int)base.QiGong_BUFF_Dragon * 3000, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value6);
											Add_ATT_Percentage(0.1);
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 120000 + (int)base.QiGong_BUFF_Dragon * 3000);
											发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
											goto IL_1b0f;
										}
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
								}
								else if (value.FLD_PID == 1001303)
								{
									if (Show_Pic_Class.ContainsKey(1001301))
									{
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else if (Show_Pic_Class.ContainsKey(1001302))
									{
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else
									{
										if (!Show_Pic_Class.ContainsKey(1001303))
										{
											Class_Show_Pill value6 = new Class_Show_Pill(this, 120000 + (int)base.QiGong_BUFF_Dragon * 3000, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value6);
											Add_ATT_Percentage(0.15);
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 120000 + (int)base.QiGong_BUFF_Dragon * 3000);
											发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
											goto IL_1b0f;
										}
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
								}
								else
								{
									if (value.FLD_PID == 1001401)
									{
										if (base.Player_FLD_Map != 28401)
										{
											WarpHanBaoQuan[0] = base.Player_FLD_X;
											WarpHanBaoQuan[1] = base.Player_FLD_Y;
											WarpHanBaoQuan[2] = base.Player_FLD_Map;
											Move(0f, 0f, 15f, 28401);
										}
										else if (WarpHanBaoQuan[2] != 0f)
										{
											Move(WarpHanBaoQuan[0], WarpHanBaoQuan[1], 15f, (int)WarpHanBaoQuan[2]);
										}
										else if (World.Newversion >= 14 && World.Newversion <= 15)
										{
											Move(500f, 1750f, 15f, 101);
										}
										else
										{
											Move(412f, 1542f, 15f, 101);
										}
										goto IL_1b0f;
									}
									if (value.FLD_PID == 1001101)
									{
										if (Show_Pic_Class.ContainsKey(1001101))
										{
											Show_Pic_Class[1001101].EndEvent();
										}
										if (Show_Pic_Class.ContainsKey(1001102))
										{
											Show_Pic_Class[1001102].EndEvent();
										}
										if (!Show_Pic_Class.ContainsKey(1001101))
										{
											Class_Show_Pill value7 = new Class_Show_Pill(this, 66000.0, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value7);
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 66000);
										}
										行走状态id = 6;
										行走状态(BitConverter.GetBytes(value.FLD_PID), 6);
										goto IL_1b0f;
									}
									if (value.FLD_PID == 1001102)
									{
										if (Show_Pic_Class.ContainsKey(1001101))
										{
											Show_Pic_Class[1001101].EndEvent();
										}
										if (Show_Pic_Class.ContainsKey(1001102))
										{
											Show_Pic_Class[1001102].EndEvent();
										}
										if (!Show_Pic_Class.ContainsKey(1001102))
										{
											Class_Show_Pill value8 = new Class_Show_Pill(this, 66000.0, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value8);
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 66000);
										}
										行走状态id = 7;
										行走状态(BitConverter.GetBytes(value.FLD_PID), 7);
										goto IL_1b0f;
									}
									if (value.FLD_PID == 1001201)
									{
										行走状态(BitConverter.GetBytes(value.FLD_PID), 8);
										goto IL_1b0f;
									}
									if (value.FLD_PID == 1001202)
									{
										行走状态(BitConverter.GetBytes(value.FLD_PID), 9);
										goto IL_1b0f;
									}
									if (value.FLD_PID == 201201)
									{
										if (!Show_Pic_Class.ContainsKey(value.FLD_PID))
										{
											Class_Show_Pill value9 = new Class_Show_Pill(this, 300000.0, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value9);
											Add_ATT_Percentage(0.03);
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
											发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
											goto IL_1b0f;
										}
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else if (value.FLD_PID == 2001301)
									{
										if (!Show_Pic_Class.ContainsKey(value.FLD_PID))
										{
											Class_Show_Pill value9 = new Class_Show_Pill(this, 300000.0, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value9);
											Add_ATT_Percentage(0.03);
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
											发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
											goto IL_1b0f;
										}
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else if (value.FLD_PID == 301201)
									{
										if (!Show_Pic_Class.ContainsKey(value.FLD_PID))
										{
											Class_Show_Pill value10 = new Class_Show_Pill(this, 300000.0, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value10);
											Add_ATT_Percentage(0.02);
											base.FLD_追加百分比_HP上限 += 0.02;
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
											发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
											goto IL_1b0f;
										}
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else if (value.FLD_PID == 401401)
									{
										if (!Show_Pic_Class.ContainsKey(value.FLD_PID))
										{
											Class_Show_Pill value11 = new Class_Show_Pill(this, 300000.0, value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value11);
											base.FLD_追加百分比_命中 += 0.05;
											base.FLD_追加百分比_HP上限 += 0.02;
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 300000);
											发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
											goto IL_1b0f;
										}
										GameMessage("Hiêòu ýìng chýa kêìt thuìc");
									}
									else
									{
										if (value.FLD_PID == 401201)
										{
											行走状态(array, 1);
											goto IL_1b0f;
										}
										if (value.FLD_PID == 801201)
										{
											if (Show_Pic_Class.ContainsKey(value.FLD_PID))
											{
												Show_Pic_Class[value.FLD_PID].EndEvent();
											}
											Class_Show_Pill value12 = new Class_Show_Pill(this, (int)(60000.0 + base.刺_剑刃乱舞 * 1500.0), value.FLD_PID, 0);
											Show_Pic_Class.Add(value.FLD_PID, value12);
											base.FLD_攻击速度 = 150;
											UpdatePowersAndStatus();
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, (int)(60000.0 + base.刺_剑刃乱舞 * 1500.0));
											行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
											更新攻击速度();
											goto IL_1b0f;
										}
										if (value.FLD_PID == 801202)
										{
											if (Show_Pic_Class.ContainsKey(601103))
											{
												Show_Pic_Class[601103].EndEvent();
											}
											if (Show_Pic_Class.ContainsKey(601102))
											{
												Show_Pic_Class[601102].EndEvent();
											}
											if (Show_Pic_Class.ContainsKey(601101))
											{
												Show_Pic_Class[601101].EndEvent();
											}
											行走状态id = 1;
											Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 0, 0);
											行走状态(BitConverter.GetBytes(value.FLD_PID), 0);
											goto IL_1b0f;
										}
										if (value.FLD_PID == 801301)
										{
											行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
											行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
											goto IL_1b0f;
										}
										if (value.FLD_PID == 801302)
										{
											int num2 = (int)DateTime.Now.Subtract(time_PK_801302).TotalSeconds;
											if (num2 >= 180)
											{
												time_PK_801302 = DateTime.Now;
												if (Show_Pic_Class.ContainsKey(value.FLD_PID))
												{
													Show_Pic_Class[value.FLD_PID].EndEvent();
												}
												Class_Show_Pill value13 = new Class_Show_Pill(this, 30000.0, value.FLD_PID, 0);
												Show_Pic_Class.Add(value.FLD_PID, value13);
												Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, 30000);
												行走状态(BitConverter.GetBytes(value.FLD_PID), 1);
												base.FLD_TRUDEF_801302 = 0.2;
												base.FLD_追加百分比_回避 += 1.0;
												UpdatePowersAndStatus();
												goto IL_1b0f;
											}
											GameMessage("ThõÌi gian hôÌi chiêu laÌ " + (180 - num2) + " giây nýÞa mõìi duÌng dýõòc", 9);
										}
										else
										{
											if (value.FLD_PID == 901301)
											{
												if (Show_Pic_Class.ContainsKey(901301))
												{
													Show_Pic_Class[901301].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(901302))
												{
													Show_Pic_Class[901302].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(901303))
												{
													Show_Pic_Class[901303].EndEvent();
												}
												int num3 = 1200000 + (int)base.琴师_高山流水 * 10000;
												Class_Show_Pill value14 = new Class_Show_Pill(this, num3, value.FLD_PID, 0);
												Show_Pic_Class.Add(value.FLD_PID, value14);
												Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, num3);
												发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
												UpdatePowersAndStatus();
												base.上河调计数 = 0;
												goto IL_1b0f;
											}
											if (value.FLD_PID == 901302)
											{
												if (Show_Pic_Class.ContainsKey(901301))
												{
													Show_Pic_Class[901301].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(901302))
												{
													Show_Pic_Class[901302].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(901303))
												{
													Show_Pic_Class[901303].EndEvent();
												}
												int num4 = 1200000 + (int)base.琴师_高山流水 * 10000;
												Class_Show_Pill value15 = new Class_Show_Pill(this, num4, value.FLD_PID, 0);
												Show_Pic_Class.Add(value.FLD_PID, value15);
												Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, num4);
												发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
												UpdatePowersAndStatus();
												base.下河调计数 = 0;
												goto IL_1b0f;
											}
											if (value.FLD_PID == 901303)
											{
												if (Show_Pic_Class.ContainsKey(901301))
												{
													Show_Pic_Class[901301].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(901302))
												{
													Show_Pic_Class[901302].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(901303))
												{
													Show_Pic_Class[901303].EndEvent();
												}
												int num5 = 1200000 + (int)base.琴师_高山流水 * 10000;
												Class_Show_Pill value16 = new Class_Show_Pill(this, num5, value.FLD_PID, 0);
												Show_Pic_Class.Add(value.FLD_PID, value16);
												Send_Packet_Show_Pic(BitConverter.GetBytes(value.FLD_PID), 1, num5);
												发送攻击人物数据(this, base.UserSessionID, value.FLD_PID, 0, 0, 0);
												UpdatePowersAndStatus();
												base.玉连环计数 = 0;
												goto IL_1b0f;
											}
											if ((CheckHackSpeed_SkillID == 601201 || CheckHackSpeed_SkillID == 601202) && (int)DateTime.Now.Subtract(time_PK).TotalMilliseconds < 1000)
											{
												goto IL_1b0f;
											}
											if (base.Player_Job != 4 || Item_Wear[12].FLD_PID == 1000000992 || Item_Wear[12].FLD_PID == 1000000993 || Item_Wear[12].FLD_PID == 1000000994 || Item_Wear[12].FLD_PID == 1000000995)
											{
												if (Check_Aoe1 != 1)
												{
													int id = (Item_Wear[3].FLD_PID != 0 && (Item_Wear[12].FLD_PID != 0 || base.Player_Job == 6)) ? 1 : 6;
													Check_Aoe = ((Check_Aoe == 0) ? 1 : 0);
													if (base.Player_Job == 4)
													{
														if (Check_Aoe == 1)
														{
															GameMessage("Kiìch hoaòt kyÞ nãng AOE: " + value.FLD_LEVEL, 7);
														}
														else
														{
															GameMessage("HuÒy boÒ kyÞ nãng AOE", 7);
														}
														base.弓群攻技能ID = value.FLD_PID;
														发送弓使用群攻技能数据(value.FLD_PID, id);
													}
													else if (base.Player_Job == 6)
													{
														if (Check_Aoe == 0)
														{
															GameMessage("Kiìch hoaòt kyÞ nãng biò ðôòng: " + value.FLD_LEVEL, 7);
														}
														else
														{
															GameMessage("HuÒy boÒ kyÞ nãng biò ðôòng", 7);
														}
														base.弓群攻技能ID = value.FLD_PID;
														发送弓使用群攻技能数据(value.FLD_PID, id);
													}
												}
												Check_Aoe1 = 0;
												base.Player_FLD_MP += value.FLD_MP;
												goto IL_1b0f;
											}
											发送弓使用群攻技能数据(value.FLD_PID, 7);
										}
									}
								}
							}
						}
					}
					else
					{
						if (BitConverter.ToInt32(array, 0) == 1)
						{
							发送打坐数据(4);
						}
						行走状态id = 1;
						行走状态(array, 1);
					}
				}
				else if (World.TblKongfu.TryGetValue(BitConverter.ToInt32(array, 0), out value17))
				{
					if (value17.FLD_PID == 700401)
					{
						if (Show_Pic_Class.ContainsKey(700401))
						{
							Show_Pic_Class[700401].EndEvent();
						}
						if (Show_Pic_Class.ContainsKey(700402))
						{
							Show_Pic_Class[700402].EndEvent();
						}
						if (Show_Pic_Class.ContainsKey(700403))
						{
							Show_Pic_Class[700403].EndEvent();
						}
						Class_Show_Pill value18 = new Class_Show_Pill(this, 300000.0, value17.FLD_PID, 0);
						Show_Pic_Class.Add(value17.FLD_PID, value18);
						状态效果人物灵兽(BitConverter.GetBytes(value17.FLD_PID), 1, 300000);
						行走状态人物灵兽(array, 2);
					}
					if (value17.FLD_PID == 700402)
					{
						if (Show_Pic_Class.ContainsKey(700401))
						{
							Show_Pic_Class[700401].EndEvent();
						}
						if (Show_Pic_Class.ContainsKey(700402))
						{
							Show_Pic_Class[700402].EndEvent();
						}
						if (Show_Pic_Class.ContainsKey(700403))
						{
							Show_Pic_Class[700403].EndEvent();
						}
						Class_Show_Pill value19 = new Class_Show_Pill(this, 300000.0, value17.FLD_PID, 0);
						Show_Pic_Class.Add(value17.FLD_PID, value19);
						状态效果人物灵兽(BitConverter.GetBytes(value17.FLD_PID), 1, 300000);
						行走状态人物灵兽(array, 3);
					}
					if (value17.FLD_PID == 700403)
					{
						if (Show_Pic_Class.ContainsKey(700401))
						{
							Show_Pic_Class[700401].EndEvent();
						}
						if (Show_Pic_Class.ContainsKey(700402))
						{
							Show_Pic_Class[700402].EndEvent();
						}
						if (Show_Pic_Class.ContainsKey(700403))
						{
							Show_Pic_Class[700403].EndEvent();
						}
						Class_Show_Pill value20 = new Class_Show_Pill(this, 300000.0, value17.FLD_PID, 0);
						Show_Pic_Class.Add(value17.FLD_PID, value20);
						状态效果人物灵兽(BitConverter.GetBytes(value17.FLD_PID), 1, 300000);
						行走状态人物灵兽(array, 3);
					}
				}
				goto end_IL_0001;
			IL_1b0f:
				base.Player_FLD_MP -= value.FLD_MP;
				Update_HP_MP_SP();
			end_IL_0001:;
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "轻功![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 清空列表()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_清空列表");
			}
			try
			{
				if (PlayList != null)
				{
					foreach (Players value in PlayList.Values)
					{
						if (value.PlayList.ContainsKey(base.UserSessionID))
						{
							value.PlayList.Remove(base.UserSessionID);
						}
					}
					PlayList.Clear();
				}
				if (NpcList != null)
				{
					foreach (NpcClass value2 in NpcList.Values)
					{
						value2.PlayList_Remove(this);
					}
					NpcList.Clear();
				}
				if (地面物品列表 != null)
				{
					foreach (GroundItems value3 in 地面物品列表.Values)
					{
						if (value3.PlayList.ContainsKey(base.UserSessionID))
						{
							value3.PlayList.Remove(base.UserSessionID);
						}
					}
					地面物品列表.Clear();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "清空列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 清空追加状态New列表()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_清空追加状态New列表");
			}
			if (追加状态New列表 != null)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (追加状态New类 value in 追加状态New列表.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "清空追加状态New列表");
						}
						追加状态New类 追加状态New类 = (追加状态New类)queue.Dequeue();
						if (追加状态New列表 != null)
						{
							追加状态New列表.Remove(追加状态New类.FLD_PID);
						}
						追加状态New类.Dispose();
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "追加状态New列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
				finally
				{
					queue = null;
				}
			}
		}

		public void 清空追加状态列表()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_清空追加状态列表");
			}
			if (Show_Pic_Class != null)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (Class_Show_Pill value in Show_Pic_Class.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "清空追加状态列表");
						}
						Class_Show_Pill class_Show_Pill = (Class_Show_Pill)queue.Dequeue();
						if (Show_Pic_Class != null)
						{
							Show_Pic_Class.Remove(class_Show_Pill.FLD_PID);
						}
						class_Show_Pill.EndEvent();
						class_Show_Pill.Dispose();
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "清空追加状态列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
				finally
				{
					queue = null;
				}
			}
		}

		public void 情侣请求(int id, string 本人名字, string 对方名字)
		{
			string hex = "AA553F00013F027917300001000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFF0000000000000000000029B955AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(本人名字);
			byte[] bytes2 = Encoding.GetEncoding(1252).GetBytes(对方名字);
			Buffer.BlockCopy(bytes, 0, array, 19, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 34, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Send_Packet_Teacher(int int_1, string string_0)
		{
			string hex = "AA55210001B9004110120029000F0000000000000000000000000000000000000000001C8455AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(int_1), 0, array, 11, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(string_0);
			Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Packet_TangHoa(int id, string 本人名字, string 对方名字)
		{
			string hex = "AA55370000CA027A17280006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000D64955AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(本人名字);
			byte[] bytes2 = Encoding.GetEncoding(1252).GetBytes(对方名字);
			Buffer.BlockCopy(bytes, 0, array, 19, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 34, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Packet_KhacChuLenNhan(int int_128, string string_10, string string_11)
		{
			string hex = "AA5547000186017A17380054000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089F755AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(int_128), 0, array, 11, 2);
			byte[] bytes = Encoding.Default.GetBytes(string_10);
			byte[] bytes2 = Encoding.Default.GetBytes(string_11);
			Buffer.BlockCopy(bytes, 0, array, 19, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 34, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Packet_GuiLeVatDi(int type, string username, string couplename, int IdItem)
		{
			string hex = "AA555300017600791744000300000000000000D0D5BBCA4FC3FBB5DB000000000000306FD3F1C2B66F3000000000000000000022000000000000000000000000000000000000000000000000000000000000000000B7A655AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(type), 0, array, 11, 2);
			byte[] bytes = Encoding.Default.GetBytes(username);
			byte[] bytes2 = Encoding.Default.GetBytes(couplename);
			if (IdItem != 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(IdItem), 0, array, 55, 4);
			}
			Buffer.BlockCopy(bytes, 0, array, 19, bytes.Length);
			Buffer.BlockCopy(bytes2, 0, array, 34, bytes2.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		private void PartySearch(byte[] data, int length)
		{
			int num = Convert.ToByte(data[11]);
			int num2 = BitConverter.ToInt16(data, 12);
			PacketData packetData = new PacketData();
			packetData.WriteByte(World.PartyClass.Count);
			packetData.WriteByte(0);
			foreach (TeamClass value in World.PartyClass.Values)
			{
				packetData.WriteInt(value.组队id);
				packetData.WriteShort(0);
				packetData.WriteByte(base.Player_Zx);
				packetData.WriteByte(value.Leader.Level_Party);
				packetData.WriteString(value.Leader.UserName);
				packetData.WriteByte(value.List_Party.Count);
				packetData.WriteInt(0);
				packetData.WriteInt(value.Leader.Player_FLD_Map);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
				packetData.WriteLong(0L);
			}
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 280, base.UserSessionID);
			}
		}

		public void CoupleSystem(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[16];
				for (int i = 0; i < 16 && data[79 + i] != 0; i++)
				{
					array[i] = data[79 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
					.Trim();
				byte[] array2 = new byte[15];
				for (int i = 0; i < 15 && data[34 + i] != 0; i++)
				{
					array2[i] = data[34 + i];
				}
				string text2 = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "")
					.Trim();
				byte[] array3 = new byte[15];
				for (int i = 0; i < 15 && data[19 + i] != 0; i++)
				{
					array3[i] = data[19 + i];
				}
				string text3 = Encoding.GetEncoding(1252).GetString(array3).Replace("\0", "")
					.Trim();
				byte[] dst = new byte[4];
				Buffer.BlockCopy(data, 51, dst, 0, 2);
				byte[] array4 = new byte[4];
				Buffer.BlockCopy(data, 55, array4, 0, 4);
				int num = data[11];
				int num2 = data[15];
				switch (num)
				{
					case 1:
						if (!(base.FLD_Couple_Name != ""))
						{
							Players players = World.FindPlayerbyName(text2);
							if (players != null)
							{
								if (!(players.FLD_Couple_Name != ""))
								{
									if (players.Player_Sex == base.Player_Sex)
									{
										Packet_TangHoa(24, text3, text2);
									}
									else
									{
										Packet_TangHoa(6, text3, text2);
										players.情侣请求(1, text3, text2);
									}
								}
								else
								{
									Packet_TangHoa(16, text3, text2);
								}
							}
							else
							{
								Packet_TangHoa(18, text3, text2);
							}
						}
						else
						{
							Packet_TangHoa(16, text3, text2);
						}
						break;
					case 3:
						{
							Players players = World.FindPlayerbyName(text2);
							if (players != null)
							{
								if (base.FLD_Couple_Name == players.UserName)
								{
									players.Packet_GuiLeVatDi(3, text3, text2, BitConverter.ToInt32(array4, 0));
								}
							}
							else
							{
								Packet_TangHoa(18, text3, text2);
							}
							break;
						}
					case 8:
						{
							Players players = World.FindPlayerbyName(text3);
							switch (num2)
							{
								case 8:
									if (players != null)
									{
										if (base.FLD_Couple_Name == players.UserName)
										{
											players.Packet_TangHoa(8, text3, text2);
										}
									}
									else
									{
										Packet_TangHoa(18, text3, text2);
									}
									break;
								case 7:
									{
										bool flag = false;
										if (players != null)
										{
											switch (BitConverter.ToInt32(array4, 0))
											{
												case 1000000891:
												case 1000000892:
												case 1000000893:
													{
														if (Show_Pic_Class.ContainsKey(1000000891))
														{
															Show_Pic_Class[1000000891].EndEvent();
														}
														if (Show_Pic_Class.ContainsKey(1000000892))
														{
															Show_Pic_Class[1000000892].EndEvent();
														}
														if (Show_Pic_Class.ContainsKey(1000000893))
														{
															Show_Pic_Class[1000000893].EndEvent();
														}
														if (Show_Pic_Class.ContainsKey(1000000891) || Show_Pic_Class.ContainsKey(1000000892) || Show_Pic_Class.ContainsKey(1000000893))
														{
															Packet_TangHoa(16, text3, text2);
															return;
														}
														for (int k = 0; k < 66; k++)
														{
															if (BitConverter.ToInt32(players.Item_In_Bag[k].Get_Byte_Item_PID, 0) == BitConverter.ToInt32(array4, 0))
															{
																flag = true;
																players.Send_Packet_Delete_Item(k, 1);
																break;
															}
														}
														if (!flag)
														{
															Packet_TangHoa(16, text3, text2);
															return;
														}
														if (base.FLD_Couple_ExpMax >= 1500)
														{
															GameMessage("ÐiêÒm kinh nghiêòm cãòp ðôi hãÌng ngaÌy ðaÞ max", 20);
														}
														else
														{
															int num5 = 100;
															if (bPartyWithCouple && Party_ID != 0 && World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
															{
																if (value.List_Party.Count == 2)
																{
																	num5 = 200;
																}
																else if (value.List_Party.Count > 2 && value.List_Party.Count <= 8)
																{
																	num5 = 180;
																}
															}
															if (base.FLD_Couple_ExpMax + num5 > 1500)
															{
																num5 = 1500 - base.FLD_Couple_ExpMax;
															}
															base.FLD_Couple_Exp += num5;
															players.FLD_Couple_Exp = base.FLD_Couple_Exp;
															base.FLD_Couple_ExpMax += num5;
															players.FLD_Couple_ExpMax = base.FLD_Couple_ExpMax;
															UpdateRankCouple();
															players.UpdateRankCouple();
														}
														switch (base.FLD_Couple_Level)
														{
															case 10:
																flowerEffectHealth = 50;
																break;
															case 9:
																flowerEffectHealth = 200;
																break;
															case 8:
																flowerEffectHealth = 150;
																break;
															case 7:
																flowerEffectHealth = 150;
																flowerEffectAttack = 5;
																break;
															case 6:
																flowerEffectHealth = 150;
																flowerEffectAttack = 5;
																flowerEffectDefense = 5;
																break;
															case 5:
																flowerEffectHealth = 150;
																flowerEffectAttack = 10;
																flowerEffectDefense = 5;
																break;
															case 4:
																flowerEffectHealth = 150;
																flowerEffectAttack = 10;
																flowerEffectDefense = 10;
																break;
															case 3:
																flowerEffectHealth = 150;
																flowerEffectAttack = 15;
																flowerEffectDefense = 15;
																break;
															case 2:
																flowerEffectHealth = 150;
																flowerEffectAttack = 15;
																flowerEffectDefense = 15;
																flowerEffectQigong = 1;
																break;
															case 1:
																flowerEffectHealth = 150;
																flowerEffectAttack = 15;
																flowerEffectDefense = 15;
																flowerEffectQigong = 1;
																flowerEffectExp = 0.05;
																break;
														}
														if (Show_Pic_Class.ContainsKey(BitConverter.ToInt32(array4, 0)))
														{
															Show_Pic_Class[BitConverter.ToInt32(array4, 0)].EndEvent();
														}
														Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 1800000.0, BitConverter.ToInt32(array4, 0), 1);
														Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
														Send_Packet_Show_Pic(array4, 1, 1800000);
														UpdatePowersAndStatus();
														Update_Character_Wear_Item();
														players.UpdatePowersAndStatus();
														players.Update_Character_Wear_Item();
														break;
													}
											}
											Packet_TangHoa(7, text3, text2);
											players.Packet_TangHoa(7, text3, text2);
											Packet_TangHoa(29, text3, text2);
											players.Packet_TangHoa(29, text3, text2);
										}
										else
										{
											Packet_TangHoa(18, text3, text2);
										}
										break;
									}
							}
							break;
						}
					case 7:
						{
							Players players2 = World.FindPlayerbyName(text3);
							int num3 = Find_Package_Empty(this);
							int num4 = Find_Package_Empty(players2);
							if (players2 != null && num3 != -1 && num4 != -1)
							{
								if (num2 == 3)
								{
									base.FLD_Couple_Name = players2.UserName;
									players2.FLD_Couple_Name = base.UserName;
									更新情侣系统(2, players2.UserName, base.FLD_Couple_Name_Unknow);
									players2.更新情侣系统(2, base.UserName, base.FLD_Couple_Name_Unknow);
									Packet_TangHoa(num2, text2, text3);
									players2.Packet_TangHoa(num2, text3, text2);
									更新人物数据(this);
									更新广播人物数据();
									players2.更新人物数据(players2);
									players2.更新广播人物数据();
									foreach (Players value2 in World.AllConnectedChars.Values)
									{
										value2.GameMessage("[" + text3 + "] Kêìt hôn thaÌnh công võìi [" + text2 + "]", 24);
									}
									bool flag2 = false;
									bool flag3 = false;
									for (int i = 1; i < 66; i++)
									{
										if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1008000546)
										{
											flag2 = true;
											break;
										}
									}
									if (!flag2)
									{
										_Make_Item_Option(BitConverter.GetBytes(RxjhClass.GetDbItmeId()), BitConverter.GetBytes(1008000546), num3, BitConverter.GetBytes(1), new byte[56]);
									}
									for (int j = 1; j < 66; j++)
									{
										if (BitConverter.ToInt32(players2.Item_In_Bag[j].Get_Byte_Item_PID, 0) == 1008000546)
										{
											flag3 = true;
											break;
										}
									}
									if (!flag3)
									{
										byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										players2._Make_Item_Option(bytes, BitConverter.GetBytes(1008000546), num4, BitConverter.GetBytes(1), new byte[56]);
									}
								}
								else
								{
									Packet_TangHoa(num2, text3, text2);
									players2.Packet_TangHoa(num2, text3, text2);
								}
							}
							else
							{
								GameMessage("Không đủ ô trống");
							}
							break;
						}
					case 21:
						{
							Players players = World.FindPlayerbyName(text2);
							if (players != null)
							{
								if (num2 == 1)
								{
									if (text.Length >= 16 && text.Length <= 32)
									{
										if (base.Player_Money >= World.戒指刻字需要金币)
										{
											bool flag = false;
											for (int i = 0; i < 66; i++)
											{
												if (BitConverter.ToInt32(players.Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1000000415)
												{
													flag = true;
													break;
												}
											}
											if (flag)
											{
												base.FLD_Couple_Name_Unknow = text;
												players.FLD_Couple_Name_Unknow = text;
												更新情侣系统(2, base.UserName, base.FLD_Couple_Name_Unknow);
												players.更新情侣系统(2, players.UserName, players.FLD_Couple_Name_Unknow);
												Packet_KhacChuLenNhan(84, text2, text3);
												players.Packet_KhacChuLenNhan(84, text3, text2);
												base.Player_Money -= 10000000L;
												Update_Money_Weight();
												GameMessage("Khãìc chýì lên nhâÞn thaÌnh công. Tiêu hao " + World.戒指刻字需要金币 + " lýõòng", 7);
											}
											else
											{
												Packet_KhacChuLenNhan(86, text2, text3);
											}
										}
										else
										{
											Packet_KhacChuLenNhan(87, text2, text3);
											GameMessage("Khãìc chýì lên nhâÞn câÌn " + World.戒指刻字需要金币 + " lýõòng", 7);
										}
									}
									else
									{
										Packet_KhacChuLenNhan(88, text2, text3);
										GameMessage("Tôìi thiêÒu 16 kiì týò, tôìi ða 32 kiì týò", 7);
									}
								}
							}
							else
							{
								Packet_TangHoa(18, text3, text2);
							}
							break;
						}
					case 12:
						结婚功能包(0);
						结婚功能包(1);
						结婚功能包(2);
						break;
					case 13:
						if (!(base.FLD_Couple_Name != ""))
						{
							GameMessage("Không thể vào Dragon Ballad Hall, chờ đợi bạn kết hôn trước khi bạn có thể nhận được một món quà cưới cho bạn！", 9);
						}
						else
						{
							Move(0f, 0f, 15f, 9001);
						}
						break;
					case 14:
						if (base.FLD_Couple_Name != "")
						{
							Move(0f, 0f, 15f, 9101);
						}
						else
						{
							GameMessage("Không thể vào ngôi đền cưới Trung Quốc, chờ đợi bạn kết hôn trước khi bạn có thể nhận được một món quà cưới cho bạn！", 9);
						}
						break;
					case 15:
						if (base.FLD_Couple_Name != "")
						{
							Move(0f, 0f, 15f, 9201);
						}
						else
						{
							GameMessage("Không thể vào đền thờ, chờ đợi bạn kết hôn trước khi bạn có thể nhận được một món quà cưới cho bạn！", 9);
						}
						break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "情侣系统 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void 情侣系统_old(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && data[34 + i] != 0; i++)
				{
					array[i] = data[34 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
					.Trim();
				array = new byte[15];
				for (int j = 0; j < 15 && data[19 + j] != 0; j++)
				{
					array[j] = data[19 + j];
				}
				string text2 = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
					.Trim();
				int num = data[11];
				switch (num)
				{
					case 7:
						{
							int num2 = data[15];
							Players players = World.FindPlayerbyName(text2);
							if (players != null)
							{
								if (num2 == 3)
								{
									base.FLD_Couple_Name = players.UserName;
									players.FLD_Couple_Name = base.UserName;
									更新情侣系统(2, players.UserName, base.FLD_Couple_Name_Unknow);
									players.更新情侣系统(2, base.UserName, base.FLD_Couple_Name_Unknow);
									Packet_TangHoa(num2, text, text2);
									players.Packet_TangHoa(num2, text2, text);
									更新人物数据(this);
									更新广播人物数据();
									players.更新人物数据(players);
									players.更新广播人物数据();
									foreach (Players value in World.AllConnectedChars.Values)
									{
										value.GameMessage("[" + text2 + "] Kêìt hôn thaÌnh công võìi [" + text + "]", 24);
									}
								}
								else
								{
									Packet_TangHoa(num2, text2, text);
									players.Packet_TangHoa(num2, text2, text);
								}
							}
							break;
						}
					case 12:
						结婚功能包(0);
						结婚功能包(1);
						结婚功能包(2);
						break;
					case 13:
						if (base.FLD_Couple_Name != "")
						{
							Move(0f, 0f, 15f, 9001);
						}
						else
						{
							GameMessage("无法进入龙赡殿,等你结婚后才能前往里面有结婚礼物送你们哦！", 9);
						}
						break;
					case 14:
						if (base.FLD_Couple_Name != "")
						{
							Move(0f, 0f, 15f, 9101);
						}
						else
						{
							GameMessage("无法进入华婚殿,等你结婚后才能前往里面有结婚礼物送你们哦！", 9);
						}
						break;
					case 1:
						if (base.FLD_Couple_Name != "")
						{
							Packet_TangHoa(16, text2, text);
						}
						else
						{
							Players players2 = World.FindPlayerbyName(text);
							if (players2 != null)
							{
								if (players2.FLD_Couple_Name != "")
								{
									Packet_TangHoa(16, text2, text);
								}
								else if (players2.Player_Sex == base.Player_Sex)
								{
									Packet_TangHoa(24, text2, text);
								}
								else
								{
									Packet_TangHoa(6, text2, text);
									players2.情侣请求(1, text2, text);
								}
							}
							else
							{
								Packet_TangHoa(18, text2, text);
							}
						}
						break;
					default:
						if (num == 15)
						{
							if (base.FLD_Couple_Name != "")
							{
								Move(0f, 0f, 15f, 9201);
							}
							else
							{
								GameMessage("无法进入圣礼殿,等你结婚后才能前往里面有结婚礼物送你们哦！", 9);
							}
						}
						break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "情侣系统 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void CancelGuildWarRequest(byte[] data, int length)
		{
			string[] array = World.取消帮战元宝金币数.Split(';');
			int num = BitConverter.ToInt32(data, 11);
			if (World.帮战list.TryGetValue(num, out 帮战Class value))
			{
				value.申请人物列表.Clear();
				World.帮战list.Remove(num);
				查百宝阁元宝数();
				Add_Del_Rxpiont(int.Parse(array[0]), 1);
				base.Player_Money += int.Parse(array[1]);
				RxjhClass.帮战赌注删除(base.Userid, base.UserName, num, 0);
				Save_data_Rxpiont();
				Update_Money_Weight();
				Form1.WriteLine(88, "取消帮战成功 申请帮派ID:" + num + " 帮派名字:" + base.Guild_Name + " 帮主:" + base.UserName);
				申请取消帮战提示(1);
			}
			else
			{
				申请取消帮战提示(0);
			}
		}

		public void 染发(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 1);
				Buffer.BlockCopy(data, 13, array2, 0, 2);
				if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array, 0)].Get_Byte_Item_PID, 0) == 1008000015)
				{
					string hex = "AA552800000A00111018000100030041440300000000000FDC143C000000000000D5EF00000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					string hex2 = "AA551300000000121004000000D5EF000000000000000055AA";
					byte[] array4 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(array, 0, array3, 13, 1);
					Buffer.BlockCopy(array2, 0, array3, 33, 2);
					Buffer.BlockCopy(array2, 0, array4, 13, 2);
					Buffer.BlockCopy(Item_In_Bag[BitConverter.ToInt32(array, 0)].物品全局ID, 0, array3, 15, 8);
					Buffer.BlockCopy(Item_In_Bag[BitConverter.ToInt32(array, 0)].Get_Byte_Item_PID, 0, array3, 23, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
					if (base.Client != null)
					{
						base.Client.Send(array4, array4.Length);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array4, 11, 2);
					SendRangeOfPackets(array4, array4.Length);
					Player_Style.Hair_Color = BitConverter.ToInt16(array2, 0);
					Send_Packet_Delete_Item(BitConverter.ToInt32(array, 0), 1);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "染发出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void CapnhatdiemthuongGuild()
		{
			DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT TOP 1 * FROM TBL_XWWL_Guild where G_Name='" + base.Guild_Name + "'"));
			if (dBToDataTable.Rows.Count > 0)
			{
				base.Level_Of_Guild = (int)dBToDataTable.Rows[0]["Leve"];
			}
			else
			{
				base.Level_Of_Guild = 0;
			}
			switch (base.Level_Of_Guild)
			{
				case 7:
					base.Player_HP_Guild = 600;
					base.Player_MP_Guild = 600;
					break;
				case 6:
					base.Player_HP_Guild = 400;
					base.Player_MP_Guild = 400;
					break;
				case 5:
					base.Player_HP_Guild = 250;
					base.Player_MP_Guild = 250;
					break;
				case 4:
					base.Player_HP_Guild = 150;
					base.Player_MP_Guild = 150;
					break;
				case 3:
					base.Player_HP_Guild = 100;
					base.Player_MP_Guild = 100;
					break;
				case 2:
					base.Player_HP_Guild = 50;
					base.Player_MP_Guild = 50;
					break;
				default:
					base.Player_HP_Guild = 0;
					base.Player_MP_Guild = 0;
					break;
			}
			UpdatePowersAndStatus();
			Update_HP_MP_SP();
		}

		public void CharLogin(byte[] data, int length)
		{
			int num = 0;
			if (base.Client != null && !base.Client.登陆)
			{
				if (base.Client != null)
				{
					GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 31", 7);
					base.Client.Dispose();
				}
			}
			else
			{
				try
				{
					if (World.AllConnectedChars.ContainsKey(base.UserSessionID))
					{
						Form1.WriteLine(77, "非法修改封包封号_人物登陆[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "]");
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 30", 7);
							base.Client.Dispose();
						}
					}
					else if (eval_i)
					{
						Form1.WriteLine(77, "非法修改封包封号_人物登陆[" + base.Userid + "][" + base.UserName + "] 人物全服ID=[" + base.UserSessionID + "] [" + base.Client.ToString() + "]");
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 29", 7);
							base.Client.Dispose();
						}
					}
					else
					{
						eval_i = true;
						num = 1;
						if (!allChars.TryGetValue(data[11], out string value))
						{
							if (base.Client != null)
							{
								GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 28", 7);
								base.Client.Dispose();
							}
						}
						else
						{
							base.UserName = value;
							if (base.UserName == "")
							{
								GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 27", 7);
								base.Client.Dispose();
							}
							if (base.UserName.Length > 14)
							{
								Form1.WriteLine(77, "非法人物名[" + base.Userid + "][" + base.UserName + "] [" + base.Client.ToString() + "]");
								base.Client.Dispose();
							}
							读出人物数据();
							base.Int32_671 = 0;
							base.Int32_672 = 0;
							base.Int32_673 = 0;
							base.Int32_674 = 0;
							base.Int32_1196 = 0;
							base.Int32_1197 = 0;
							base.Int32_1198 = 0;
							base.Int32_1199 = 0;
							base.Int32_1200 = 0;
							num = 2;
							服务器时间();
							num = 3;
							检测走跑();
							num = 4;
							初始话气功();
							num = 5;
							int num2 = 0;
							for (int i = 0; i < 66; i++)
							{
								if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 1600001)
								{
									base.装备行囊是否开启 = 1;
									break;
								}
								if (Item_In_Bag[i].FLD_PID == 1000001150)
								{
									if (num2 > 0)
									{
										logo.logbugaptrung("[" + base.UserName + " -> DEL: " + Item_In_Bag[i].FLD_PID + " - " + Item_In_Bag[i].FLD_MAGIC4 + " | " + i);
										Item_In_Bag[i].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
									}
									num2++;
								}
							}
							for (int i = 0; i < 66; i++)
							{
								for (int j = 0; j < 66; j++)
								{
									if (i != j && Item_In_Bag[i].Get物品全局ID != 0 && Item_In_Bag[j].Get物品全局ID != 0 && Item_In_Bag[i].Get物品全局ID == Item_In_Bag[j].Get物品全局ID)
									{
										Item_In_Bag[j].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
										GameMessage("Item [" + j + "]", 22);
									}
								}
							}
							for (int i = 0; i < 66; i++)
							{
								if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == 800000013)
								{
									string text = Item_In_Bag[i].FLD_MAGIC0.ToString();
									if (text.Length != 6 && text[0] == '8')
									{
										Item_In_Bag[i].FLD_MAGIC0 = 0;
									}
									if (text.Length == 6 && text[0] == '8' && int.Parse(text[5].ToString()) > 1)
									{
										text = text.Substring(0, 5) + '1';
										Item_In_Bag[i].FLD_MAGIC0 = int.Parse(text);
									}
								}
							}
							Update_Item_In_Bag();
							UpdateNTCBag();
							发送任务物品列表();
							num = 6;
							Initialize_Equip_Item();
							num = 7;
							Update_HP_MP_SP();
							if (Show_Pic_Class.ContainsKey(700904))
							{
								Show_Pic_Class[700904].EndEvent();
							}
							int num3 = 8000;
							Class_Show_Pill value2 = new Class_Show_Pill(this, num3, 700904, 0);
							Show_Pic_Class.Add(700904, value2);
							Send_Packet_Show_Pic(BitConverter.GetBytes(700904), 1, num3);
							Bat_Tu = 1;
							num = 8;
							Set个人药品();
							num = 9;
							Update_Money_Weight();
							num = 10;
							灵兽数();
							num = 11;
							更新人物数据(this);
							num = 12;
							set公有物品();
							load时间物品();
							num = 13;
							Add_Pill();
							num = 16;
							if (base.Player_Job == 7)
							{
								登记玉连环();
							}
							Update_Exp_Marble();
							num = 17;
							更新人物任务();
							num = 18;
							发送土灵符数据();
							num = 19;
							Logoin();
							num = 20;
							更新制作系统();
							num = 21;
							if (base.FLD_VIP == 1)
							{
								if (DateTime.Now > base.FLD_VIPTIM)
								{
									base.FLD_VIP = 0;
								}
								else if (公有药品.ContainsKey(1008000312) || 公有药品.ContainsKey(1008000311) || 公有药品.ContainsKey(1008000140) || 公有药品.ContainsKey(1008000141) || 公有药品.ContainsKey(1008000196) || 公有药品.ContainsKey(1008000124) || 公有药品.ContainsKey(1008000125) || 公有药品.ContainsKey(1008000093) || 公有药品.ContainsKey(1008000083) || 公有药品.ContainsKey(1008000058) || 公有药品.ContainsKey(1008000059) || 公有药品.ContainsKey(1008000060) || 公有药品.ContainsKey(1008000063) || 公有药品.ContainsKey(1008000052) || 公有药品.ContainsKey(1008000051) || 公有药品.ContainsKey(1008000050) || 公有药品.ContainsKey(1008000027) || 公有药品.ContainsKey(1008000028) || 公有药品.ContainsKey(1008000029))
								{
									World.发送公告(string.Format(World.VipLaunchAnnouncementContent, base.UserName));
								}
								else
								{
									if (World.VipOnlineAnnouncement == 1)
									{
										World.发送公告(string.Format(World.VipLaunchAnnouncementContent, base.UserName));
									}
									if (World.ColorfulOnlineSignature == 1)
									{
									}
									GameMessage("Thoi gian VIP: " + base.FLD_VIPTIM.ToString("hh:mm dd/MM/yyyy"), 9);
								}
							}
							Show_Help_Command();
							num = 22;
							获取复查范围Npc();
							num = 23;
							获取复查范围玩家();
							num = 24;
							获取复查范围地面物品();
							num = 6996;
							if (World.Newversion >= 10)
							{
								UPDATECDSKILL();
							}
							if (GM模式 != 0)
							{
								Player_Invisible = 0;
								潜行状态(0);
							}
							num = 25;
							if (base.Guild_ID != 0)
							{
								查帮派();
							}
							num = 26;
							系统公告(World.进入公告);
							if (World.上线属性提示开关 != 0)
							{
								GameMessage("Tâìn Công " + base.FLD_人物基本_攻击 + " || VoÞ Công " + base.Player_FLD_SE, 10, " Saìt Thýõng ");
								GameMessage("PhoÌng ThuÒ " + base.FLD_人物基本_防御 + " || Sinh Mêònh " + base.Player_HP_Max, 10, " PhoÌng Vêò ");
								GameMessage("Chiình Xaìc " + base.FLD_人物基本_回避 + " || Neì Traình " + base.FLD_人物基本_命中, 10, " HôÞ trõò ");
							}
							num = 27;
							if (base.Player_FLD_Map == 801)
							{
								if (World.Newversion >= 14 && World.Newversion <= 15)
								{
									Move(500f, 1750f, 15f, 101);
								}
								else
								{
									Move(412f, 1542f, 15f, 101);
								}
							}
							else if (base.Player_FLD_Map == 7001)
							{
								Move(0f, 0f, 15f, 1201);
							}
							else if (base.Player_FLD_Map == 7101)
							{
								Move(0f, 0f, 15f, 1201);
							}
							else if (base.Player_FLD_Map == 7301)
							{
								Move(0f, 0f, 15f, 1201);
							}
							num = 28;
							if (World.短信充值是否开启 == "1")
							{
								GameMessage("本服开启手机短信会员充值系统,目前只支持移动用户(北京地区除外)", 9);
								GameMessage("每条短信收费1.5元，充会员36小时，多发多充", 9);
								GameMessage("发送短信时账号下线以后再发送,没有回复或是回复错误信息不收费,", 9);
								GameMessage("移动用户请编辑短信" + World.短信通道号码 + World.短信服务器webid + base.Userid + "发送到" + World.短信业务号码, 9);
							}
							num = 29;
							if (base.Player_Job < 1 || base.Player_Job > 12)
							{
								DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
								Form1.WriteLine(100, "非法人物登陆封号[" + base.Userid + "]-[" + base.Client.ToString() + "]");
								if (base.Client != null)
								{
									GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 26", 7);
									base.Client.Dispose();
								}
							}
							if (base.Player_FLD_HP <= 0)
							{
								Move(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
								base.Player_FLD_HP = base.Player_HP_Max;
								base.Player_Shield = base.Player_Shield_Max;
								Update_HP_MP_SP();
								base.PlayerIsDead = false;
							}
							num = 30;
							int_25 = method_712(base.UserName, 1);
							int_123 = method_712(base.UserName, 2);
							num = 31;
							CapnhatdiemthuongGuild();
							num = 32;
							if (base.FLD_Couple_Name != "")
							{
								string sqlCommand = $"select * from [TBL_XWWL_Char] where FLD_NAME =@Username and FLD_QlNAME =@Username2";
								SqlParameter[] prams = new SqlParameter[2]
								{
									SqlDBA.MakeInParam("@Username", SqlDbType.VarChar, 30, base.FLD_Couple_Name),
									SqlDBA.MakeInParam("@Username2", SqlDbType.VarChar, 30, base.UserName)
								};
								DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams);
								if (dBToDataTable.Rows.Count == 0)
								{
									for (int j = 0; j < 66; j++)
									{
										if (BitConverter.ToInt32(Item_In_Bag[j].Get_Byte_Item_PID, 0) == 1000000415)
										{
											Item_In_Bag[j].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
										}
									}
									base.FLD_Couple_Name = "";
									base.FLD_Couple_Exp = 0;
									base.FLD_Couple_ExpMax = 0;
									base.FLD_Couple_Level = 10;
									Array_Skill_Book[2, 16] = null;
									Array_Skill_Book[2, 17] = null;
									GameMessage("Cuôòc tiÌnh kêìt thuìc", 20);
									Update_Item_In_Bag();
								}
								dBToDataTable.Dispose();
							}
							if (base.FLD_Couple_Name != "")
							{
								Players players = World.FindPlayerbyName(base.FLD_Couple_Name);
								if (players != null)
								{
									players.更新情侣系统(2, base.UserName, base.FLD_Couple_Name_Unknow);
									players.Packet_TangHoa(1, players.UserName, base.UserName);
									更新情侣系统(2, players.UserName, base.FLD_Couple_Name_Unknow);
									Packet_TangHoa(1, base.UserName, players.UserName);
									players.UpdateRankCouple();
									UpdateRankCouple();
								}
								else
								{
									更新情侣系统(1, base.FLD_Couple_Name, base.FLD_Couple_Name_Unknow);
								}
								记算夫妻武功攻击力数据();
							}
							if (Show_Pic_Class.ContainsKey(1000000891))
							{
								Show_Pic_Class[1000000891].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(1000000892))
							{
								Show_Pic_Class[1000000892].EndEvent();
							}
							if (Show_Pic_Class.ContainsKey(1000000893))
							{
								Show_Pic_Class[1000000893].EndEvent();
							}
							Level_Party = base.Player_Level;
							if (base.FLD_Teacher != "")
							{
								Write_Name_Teacher();
								Add_KongFu_Student();
							}
							if (base.FLD_Student1 != "")
							{
								Write_Student(0, base.FLD_Student1);
								World.FindPlayerbyName(base.FLD_Student1)?.Write_Name_Teacher();
							}
							if (base.FLD_Student2 != "")
							{
								Write_Student(1, base.FLD_Student2);
								World.FindPlayerbyName(base.FLD_Student2)?.Write_Name_Teacher();
							}
							if (base.FLD_Student3 != "")
							{
								Write_Student(2, base.FLD_Student3);
								World.FindPlayerbyName(base.FLD_Student3)?.Write_Name_Teacher();
							}
							num = 33;
							if (World.新手上线奖励是否开启 == 1)
							{
								string[] array = World.新手上线奖励.Split(',');
								int num4 = int.Parse(array[0]);
								if (base.Player_Job != 7 && num4 != 0 && base.Player_Level < num4)
								{
									World.脚本.设置玩家等级(base.UserSessionID, num4);
									GameMessage("新人奖励" + array[0] + "等级", 10);
								}
								int num5 = int.Parse(array[1]);
								if (num5 != 0 && base.Player_WuXun == 0)
								{
									base.Player_WuXun += num5;
									UpdatePowersAndStatus();
									GameMessage("新人奖励" + array[2] + "武勋", 10);
								}
								long num6 = long.Parse(array[2]);
								long num7 = long.Parse(array[3]);
								long num8 = long.Parse(array[4]);
								int num9 = int.Parse(array[5]);
								int num10 = int.Parse(array[6]);
								if (base.奖励_追加_攻击 == 0 && base.奖励_追加_防御 == 0 && base.奖励_追加_生命 == 0 && base.奖励_追加_内功 == 0 && base.会员等级 == 0)
								{
									if (num6 != 0)
									{
										base.奖励_追加_攻击 += num6;
										GameMessage("新手奖励" + array[2] + "攻击", 10);
									}
									if (num7 != 0)
									{
										base.奖励_追加_防御 += num7;
										GameMessage("新手奖励" + array[3] + "防御", 10);
									}
									if (num8 != 0)
									{
										base.奖励_追加_生命 += num8;
										GameMessage("新手奖励" + array[4] + "生命", 10);
									}
									if (num9 != 0)
									{
										base.奖励_追加_内功 += num9;
										GameMessage("新手奖励" + array[5] + "魔法", 10);
									}
									if (num10 != 0)
									{
										base.会员等级 += num10;
										GameMessage("新手奖励VIP等级" + array[6] + "级", 10);
									}
									SaveDataCharacter();
									UpdatePowersAndStatus();
								}
							}
							if (base.Player_Job == 7 && base.Player_Level < World.乐师上线等级)
							{
								base.Player_ExpErience += 332750;
								base.Player_Qigong_point = 124;
								World.脚本.设置玩家等级(base.UserSessionID, World.乐师上线等级);
							}
							num = 34;
							Update_Quest_Complete();
							num = 14;
							Update_Character_Wear_Item();
							num = 15;
							UpdatePowersAndStatus();
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(100, "CharLogin ERROR[" + base.Userid + "]-[" + base.UserName + "] " + num + " " + ex.Message);
					if (base.Client != null)
					{
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 25", 7);
						base.Client.Dispose();
					}
				}
			}
		}

		public void AddExpToNTC(int exp)
		{
			int num = 0;
			for (int i = 0; i < 6; i++)
			{
				if (!World.isNTCItem(Item_NTC[i].FLD_PID))
				{
					continue;
				}
				int num2 = exp / 20 + new Random().Next(-exp / 40, exp / 40);
				if (Item_NTC[i].FLD_MAGIC0 >= Item_NTC[i].FLD_MAGIC1)
				{
					continue;
				}
				Item_NTC[i].FLD_MAGIC0 += num2;
				if (Item_NTC[i].FLD_MAGIC0 >= Item_NTC[i].FLD_MAGIC1)
				{
					Item_NTC[i].FLD_MAGIC0 = 0;
					byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
					Buffer.BlockCopy(Item_NTC[i].物品全局ID, 0, array, 0, 8);
					Buffer.BlockCopy(BitConverter.GetBytes(1008000238), 0, array, 8, 4);
					Buffer.BlockCopy(Item_NTC[i].Item_Amount, 0, array, 12, 4);
					Buffer.BlockCopy(Item_NTC[i].Get_Byte_Item_Option, 0, array, 16, Item_NTC[i].Get_Byte_Item_Option.Length);
					if (Item_NTC[i].物品绑定)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
					}
					Item_NTC[i].Byte_Item = array;
					人物发光();
					UpdateNTCBag();
				}
				UseNgungThanChau(i, 3);
				num++;
				if (num >= 3)
				{
					break;
				}
			}
		}

		public void 人物发光()
		{
			string hex = "AA5513000014047F000400A0CB0000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			SendRangeOfPackets(array, array.Length);
		}

		public byte[] 人物死亡掉落装备(int ItemPid, int Magic0, int Magic1, int Magic2, int Magic3, int Magic4, string itemname, Players Playe, Players TOPlaye)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "玩家PK_掉出物品");
			}
			try
			{
				long dbItmeId = RxjhClass.GetDbItmeId();
				byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
				byte[] bytes = BitConverter.GetBytes(dbItmeId);
				byte[] array2 = new byte[56];
				if (World.Itme.TryGetValue(ItemPid, out ItmeClass value))
				{
					if (value.FLD_QUESTITEM != 1)
					{
						try
						{
							Buffer.BlockCopy(BitConverter.GetBytes(Magic0), 0, array2, 0, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(Magic1), 0, array2, 4, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(Magic2), 0, array2, 8, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(Magic3), 0, array2, 12, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(Magic4), 0, array2, 16, 4);
							Buffer.BlockCopy(bytes, 0, array, 0, 4);
							Buffer.BlockCopy(array2, 0, array, 16, 20);
							Buffer.BlockCopy(BitConverter.GetBytes(ItemPid), 0, array, 8, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 12, 4);
						}
						catch (Exception ex)
						{
							Form1.WriteLine(1, "PK掉出物品1 出错 " + TOPlaye.UserSessionID + "|" + TOPlaye.UserName + " " + ex.Message);
							return null;
						}
						GroundItems GroundItems;
						try
						{
							GroundItems = new GroundItems(array, TOPlaye.Player_FLD_X, TOPlaye.Player_FLD_Y, TOPlaye.Player_FLD_Z, TOPlaye.Player_FLD_Map, Playe, 0);
							if (GroundItems == null)
							{
								Form1.WriteLine(1, "PK掉出物品2 出错 " + TOPlaye.UserSessionID + "|" + TOPlaye.UserName);
								return null;
							}
							if (!World.ItmeTeM.ContainsKey(dbItmeId))
							{
								World.ItmeTeM.Add(dbItmeId, GroundItems);
							}
						}
						catch (Exception ex2)
						{
							Form1.WriteLine(1, "PK掉出物品3 出错 " + TOPlaye.UserSessionID + "|" + TOPlaye.UserName + " " + ex2.Message);
							return null;
						}
						try
						{
							if (World.ItmeTeM.ContainsKey(dbItmeId))
							{
								GroundItems.获取范围玩家发送地面增加物品数据包();
							}
							return array;
						}
						catch (Exception ex3)
						{
							Form1.WriteLine(1, "PK掉出物品4 出错 " + TOPlaye.UserSessionID + "|" + TOPlaye.UserName + " " + ex3.Message);
							return null;
						}
					}
					if (Playe != null)
					{
						int num = Playe.Find_Package_Empty(Playe);
						if (num != -1)
						{
							Playe._Make_Item_Option(bytes, BitConverter.GetBytes(ItemPid), num, BitConverter.GetBytes(1), new byte[56]);
						}
					}
					return null;
				}
				return null;
			}
			catch (Exception ex4)
			{
				Form1.WriteLine(1, "PK掉出物品5 出错 " + TOPlaye.UserSessionID + "|" + TOPlaye.UserName + " " + ex4.Message);
				return null;
			}
		}

		public void MovePlayer(byte[] data, int length)
		{
			try
			{
				if (!base.PlayerIsDead)
				{
					if (World.是否启用跑卡技能 != 0)
					{
						发送打坐数据(4);
					}
					if (PlayerShop != null)
					{
						GameMessage("Baòn ðang mõÒ cýÒa haÌng, không thêÒ di chuyêÒn", 9);
						if (base.Client != null)
						{
							GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 24", 7);
							base.Client.Dispose();
						}
					}
					else
					{
						byte[] array = new byte[4];
						byte[] array2 = new byte[4];
						byte[] dst = new byte[4];
						byte[] array3 = new byte[4];
						byte[] array4 = new byte[4];
						byte[] dst2 = new byte[4];
						byte[] dst3 = new byte[4];
						byte[] dst4 = new byte[4];
						byte[] array5 = new byte[4];
						Buffer.BlockCopy(data, 5, array5, 0, 2);
						Buffer.BlockCopy(data, 15, array, 0, 4);
						Buffer.BlockCopy(data, 19, dst, 0, 4);
						Buffer.BlockCopy(data, 23, array2, 0, 4);
						Buffer.BlockCopy(data, 27, array3, 0, 4);
						Buffer.BlockCopy(data, 31, dst2, 0, 4);
						Buffer.BlockCopy(data, 35, array4, 0, 4);
						Buffer.BlockCopy(data, 43, dst3, 0, 4);
						Buffer.BlockCopy(data, 47, dst4, 0, 4);
						if (BitConverter.ToInt32(array5, 0) == base.UserSessionID)
						{
							Player_FLD_X_Old = base.Player_FLD_X;
							Player_FLD_Y_Old = base.Player_FLD_Y;
							base.Player_FLD_X = BitConverter.ToSingle(array, 0);
							base.Player_FLD_Y = BitConverter.ToSingle(array2, 0);
							float num = BitConverter.ToSingle(array3, 0) - Player_FLD_X_Old;
							float num2 = BitConverter.ToSingle(array4, 0) - Player_FLD_Y_Old;
							float num3 = (int)Math.Sqrt(num * num + num2 * num2);
							if (num3 < 300f)
							{
								base.Player_FLD_X = BitConverter.ToSingle(array3, 0);
								base.Player_FLD_Y = BitConverter.ToSingle(array4, 0);
							}
							byte[] array6 = new byte[length];
							Buffer.BlockCopy(data, 0, array6, 0, length);
							data.ToString();
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array6, 5, 2);
							if (array6.Length > 10)
							{
								array6[7] = 101;
							}
							Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array6, 19, 4);
							发送当前范围广播数据多包(array6, array6.Length);
							if (base.Player_FLD_Map == 7301 && 关起来 == 1 && World.血战 != null)
							{
								if (World.血战.帮战主方.申请帮派ID == base.Guild_ID)
								{
									if (World.血战.帮战主方.申请人物列表.ContainsKey(base.UserSessionID))
									{
										float num4 = -106f - base.Player_FLD_X;
										float num5 = -106f - base.Player_FLD_Y;
										float num6 = (int)Math.Sqrt(num4 * num4 + num5 * num5);
										if (num6 >= 30f && MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(10001, out NpcClass value) && value.Npc死亡)
										{
											关起来 = 0;
										}
									}
								}
								else if (World.血战.帮战客方.申请帮派ID == base.Guild_ID && World.血战.帮战客方.申请人物列表.ContainsKey(base.UserSessionID))
								{
									float num7 = 106f - base.Player_FLD_X;
									float num8 = 106f - base.Player_FLD_Y;
									float num9 = (int)Math.Sqrt(num7 * num7 + num8 * num8);
									if (num9 >= 30f && MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(10000, out NpcClass value2) && value2.Npc死亡)
									{
										关起来 = 0;
									}
								}
							}
							if (!MoveAllto(50, 新坐标))
							{
								time_AFK = DateTime.Now;
								获取复查范围玩家(1500);
								获取复查范围Npc();
								获取复查范围地面物品();
								Auto_Enable_NpcAttack();
								新坐标.Rxjh_X = base.Player_FLD_X;
								新坐标.Rxjh_Y = base.Player_FLD_Y;
								新坐标.Rxjh_Map = base.Player_FLD_Map;
							}
						}
						else if (DateTime.Now.Subtract(time_MoveTime_pet).TotalMilliseconds >= 2000.0)
						{
							time_MoveTime_pet = DateTime.Now;
							Pet.人物坐标_X = BitConverter.ToSingle(array, 0);
							Pet.人物坐标_Y = BitConverter.ToSingle(array2, 0);
							byte[] array7 = new byte[length];
							Buffer.BlockCopy(data, 0, array7, 0, length);
							if (array7.Length > 10)
							{
								array7[7] = 101;
							}
							Buffer.BlockCopy(BitConverter.GetBytes(15f), 0, array7, 19, 4);
							if (base.Client != null)
							{
								base.Client.Send(array7, array7.Length);
							}
							SendRangeOfPackets(array7, array7.Length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				string text = Converter.ToString(data);
				Form1.WriteLine(1, "人物移动出错[" + base.Userid + "]-[" + base.UserName + "]" + text + " " + ex.Message);
			}
		}

		public void 人物转职业(int 人物正邪, int 转)
		{
			base.Player_Zx = 人物正邪;
			base.Player_Job_Level = 转;
			PacketData packetData = new PacketData();
			packetData.WriteByte(转);
			packetData.WriteByte(人物正邪);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 32256, base.UserSessionID);
			}
			SendRangeOfPackets(packetData, 32256, base.UserSessionID);
			Auto_Learn_Skill();
		}

		public void method_1912(Players players)
		{
			byte[] array = Converter.hexStringToByte("AA55A30100569CA000580101000000569C000032323232323200000000000000000000000000000100000100000000D558364300007041F67CC7446500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015000000000000000162DC2500000000010000000000000000000000000000000000000000000000020006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(players.Pet.全服ID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(players.Pet.FLD_JOB), 0, array, 42, 2);
			for (int i = 0; i < 4; i++)
			{
				if (BitConverter.ToInt32(players.Pet.宠物以装备[i].Byte_Item, 0) == 0)
				{
					byte[] array2 = new byte[88];
					players.Pet.宠物以装备[i].Byte_Item = array2;
					Buffer.BlockCopy(array2, 0, array, 63 + i * 88, 88);
				}
				else
				{
					Buffer.BlockCopy(players.Pet.宠物以装备[i].Byte_Item, 0, array, 63 + i * 88, 12);
					Buffer.BlockCopy(players.Pet.宠物以装备[i].Byte_Item, 12, array, 79 + i * 88, 61);
				}
			}
			if (players.Client != null)
			{
				players.Client.Send多包(array, array.Length);
			}
		}

		public void 任务飞鸽传书()
		{
			string hex = "AA555200010000B200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void Send_Email(byte[] data, int lenght)
		{
			try
			{
				string empty = string.Empty;
				string empty2 = string.Empty;
				int num = data[33];
				if (num > 99)
				{
					num = 99;
				}
				byte[] array = new byte[num];
				try
				{
					Buffer.BlockCopy(data, 35, array, 0, array.Length);
					empty = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
						.Trim();
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "发送传书出错1![" + base.Userid + "]-[" + base.UserName + "]" + array.Length + " " + ex.Message);
					return;
				}
				byte[] array2 = new byte[15];
				Buffer.BlockCopy(data, 12, array2, 0, array2.Length);
				empty2 = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "")
					.Trim();
				if (empty.Length > 0)
				{
					if (RxjhClass.smethod_21(empty2) != 1)
					{
						Players players = Find_Player(empty2);
						if (players != null)
						{
							EmailClass emailClass = new EmailClass();
							emailClass.method_1((int)RxjhClass.GetDbItmeId());
							emailClass.method_3(base.UserName);
							emailClass.method_5(empty);
							emailClass.method_7(DateTime.Now);
							emailClass.method_11(0);
							emailClass.Set_Read_Email(0);
							players.传书列表.Add(emailClass.method_0(), emailClass);
							players.Update_Email();
							players.Send_New_Email();
						}
						string hex = "AA551000010000B4000100000000000000005DA355AA";
						byte[] array3 = Converter.hexStringToByte(hex);
						base.Client.Send(array3, array3.Length);
						RxjhClass.INSERT_Email(base.UserName, empty2, 0, empty);
					}
					else
					{
						GameMessage("Tên nhân vâòt không tôÌn taòi", 20);
					}
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(1, "Email_Error：" + ex2.Message);
			}
		}

		public void View_Email(byte[] byte_0, int int_1)
		{
			int num = BitConverter.ToInt32(byte_0, 11);
			try
			{
				if (传书列表 != null)
				{
					string hex = "AA554000010000B600310000";
					string hex2 = "000000000000000055AA";
					byte[] array = Converter.hexStringToByte(hex);
					byte[] array2 = Converter.hexStringToByte(hex2);
					foreach (EmailClass value in 传书列表.Values)
					{
						if (value.method_0() == num)
						{
							if (value.method_8() == 0)
							{
								value.Set_Read_Email(1);
								RxjhClass.Update_Email_Read(num, 1);
								Update_Email();
							}
							byte[] bytes = Encoding.GetEncoding(1252).GetBytes(value.method_4());
							byte[] array3 = new byte[array.Length + array2.Length + bytes.Length + 6];
							Buffer.BlockCopy(array, 0, array3, 0, array.Length);
							Buffer.BlockCopy(array2, 0, array3, array3.Length - array2.Length, array2.Length);
							Buffer.BlockCopy(BitConverter.GetBytes(array3.Length - 6), 0, array3, 2, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(bytes.Length + 7), 0, array3, 9, 2);
							Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array3, 12, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(bytes.Length), 0, array3, 16, 2);
							Buffer.BlockCopy(bytes, 0, array3, 18, bytes.Length);
							base.Client.Send(array3, array3.Length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "阅读传书()出错" + base.UserSessionID + "| " + ex.Message);
			}
		}

		public void 任务提示数据发送(int 任务ID, int 操作ID, int 任务阶段ID)
		{
			if (操作ID == 51)
			{
				设置任务数据(任务ID, 255);
			}
			using (PacketData packetData = new PacketData())
			{
				packetData.WriteShort(任务ID);
				packetData.WriteShort(操作ID);
				packetData.WriteShort(任务阶段ID);
				if (base.Client != null)
				{
					base.Client.SendPak(packetData, 33792, base.UserSessionID);
				}
			}
		}

		public void 任务系统(byte[] data, int length)
		{
			int num = BitConverter.ToUInt16(data, 11);
			int num2 = BitConverter.ToUInt16(data, 13);
			int num3 = BitConverter.ToInt16(data, 15);
			try
			{
				if (num2 == 4)
				{
					任务提示数据发送(num, 41, num3);
					设置任务数据(num, num3);
				}
				if (!World.脚本.任务事件列表.TryGetValue(num, out LuaFunction value))
				{
					value = World.脚本.pLuaVM.GetFunction("MissIon" + num);
					World.脚本.任务事件列表.Add(num, value);
				}
				if (value != null)
				{
					object[] args = new object[4]
					{
						base.UserSessionID,
						num,
						num2,
						num3
					};
					object[] array = value.Call(args);
					Form1.WriteLine(2, "ID Quest:[" + num + "] - Click:[" + num2 + "] - Step:[" + num3 + "]");
				}
				else
				{
					switch (num2)
					{
						case 1:
							任务提示数据发送(num, 11, num3);
							break;
						case 3:
							任务提示数据发送(num, 31, num3);
							break;
						case 5:
							任务提示数据发送(num, 51, num3);
							break;
						default:
							任务提示数据发送(num, 31, num3);
							break;
					}
					Form1.WriteLine(2, "ID Quest: [" + num + "] no script !!!");
					GameMessage("Nhiêòm vuò chýa ðýõòc mõÒ: [ID: " + num + "]", 10);
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
				Form1.WriteLine(2, "MissIon" + num + "(" + base.UserSessionID + "," + num + "," + num2 + "," + num3 + ")");
				Form1.WriteLine(1, "和NPC对话--" + ex.Message);
			}
		}

		public void 扔捡物品提示(int 位置, int 数量)
		{
			string hex = "AA551F000000000F00100001000000010000000100000001000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 扔物品(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				if (退出中)
				{
					Form1.WriteLine(6, "退出复制BUG [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
					return;
				}
				if (进店中 || 打开仓库中)
				{
					return;
				}
				int num = data[36];
				int num2 = BitConverter.ToInt32(data, 19);
				int num3 = BitConverter.ToInt32(data, 27);
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num2 == 2000000000)
				{
					GameMessage("Baòn výÌa laÌm rõi " + num3 + " ngân lýõòng");
					base.Player_Money -= num3;
					if (base.Player_Money < 0)
					{
						base.Player_Money = 0L;
					}
					Update_Money_Weight();
					return;
				}
				if (!World.checkItemCanTrade(num2))
				{
					GameMessage("Vâòt phâÒm không thêÒ výìt boÒ");
					return;
				}
				if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == 0 || BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0) == 0 || World.检查物品是否被锁定(num2) || Item_In_Bag[num].物品绑定)
				{
					return;
				}
				DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format("SELECT * FROM Log_DeleteItem where TrangThai=0 and MaItem=" + BitConverter.ToInt64(Item_In_Bag[num].物品全局ID, 0)));
				if (dBToDataTable.Rows.Count > 0)
				{
					Form1.WriteLine(100, "BUG DROP ITEM: [" + base.UserName + "] - [" + Item_In_Bag[num].Get物品全局ID + "] - [" + Item_In_Bag[num].FLD_PID + "]");
					Item_In_Bag[num].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					Update_Item_In_Bag();
					Update_Money_Weight();
					if (base.Client != null)
					{
						GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 22", 7);
						base.Client.Dispose();
					}
					return;
				}
				byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
				byte[] array2 = new byte[8];
				Buffer.BlockCopy(Item_In_Bag[num].Byte_Item, 0, array, 0, (World.Newversion >= 14) ? 76 : 73);
				Buffer.BlockCopy(array, 0, array2, 0, 8);
				if (Item_In_Bag[num].物品类型 == 0)
				{
					扔捡物品提示(num, BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0));
					Send_Packet_Delete_Item(num, BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0));
					Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 12, 4);
					GroundItems GroundItems = new GroundItems(array, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map, this, 1);
					if (!World.ItmeTeM.ContainsKey(BitConverter.ToInt64(array2, 0)))
					{
						World.ItmeTeM.Add(BitConverter.ToInt64(array2, 0), GroundItems);
					}
					if (World.ItmeTeM.ContainsKey(BitConverter.ToInt64(array2, 0)))
					{
						GroundItems.获取范围玩家发送地面增加物品数据包();
					}
				}
				else
				{
					if (BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0) <= num3)
					{
						num3 = BitConverter.ToInt32(Item_In_Bag[num].Item_Amount, 0);
					}
					else
					{
						array2 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						Buffer.BlockCopy(array2, 0, array, 0, 8);
					}
					try
					{
						扔捡物品提示(num, num3);
						Send_Packet_Delete_Item(num, num3);
						Buffer.BlockCopy(BitConverter.GetBytes(num3), 0, array, 12, 4);
						GroundItems GroundItems2 = new GroundItems(array, base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map, this, 1);
						if (!World.ItmeTeM.ContainsKey(BitConverter.ToInt64(array2, 0)))
						{
							World.ItmeTeM.Add(BitConverter.ToInt64(array2, 0), GroundItems2);
						}
						if (World.ItmeTeM.ContainsKey(BitConverter.ToInt64(array2, 0)))
						{
							GroundItems2.获取范围玩家发送地面增加物品数据包();
						}
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "扔物品出错2 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
					}
				}
			}
			catch (Exception ex2)
			{
				Form1.WriteLine(1, "扔物品出错3 [" + base.Userid + "][" + base.UserName + "] " + ex2.Message);
			}
			Update_Money_Weight();
		}

		public void Delete_Char(byte[] data, int length)
		{
			byte[] array = Converter.hexStringToByte("AA5517000136001F0008006300000009000000000000000000811855AA");
			byte[] array2 = Converter.hexStringToByte("AA551700010F001F0008000100000000000000000000000000B11855AA");
			int key = data[19];
			if (!allChars.TryGetValue(key, out string value))
			{
				if (base.Client != null)
				{
					GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 21", 7);
					base.Client.Dispose();
				}
				return;
			}
			string sqlCommand = $"select top 1 FLD_NAME from [TBL_XWWL_Char] where FLD_ID=@Userid order by CAST(FLD_EXP AS bigint) desc, FLD_LEVEL DESC";
			SqlParameter[] prams = new SqlParameter[1]
			{
				SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
			};
			DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams);
			if (dBToDataTable != null && dBToDataTable.Rows[0]["FLD_NAME"].ToString() == value)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				Player_Exit();
				return;
			}
			Console.WriteLine(value);
			byte[] array3 = new byte[32];
			Buffer.BlockCopy(data, 23, array3, 0, array3.Length);
			string text = Encoding.GetEncoding(1252).GetString(array3).Trim();
			Console.WriteLine(text);
			sqlCommand = $"select FLD_PASSWORD,Pass2 from [TBL_ACCOUNT] where FLD_ID=@Userid";
			prams = new SqlParameter[1]
			{
				SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Userid)
			};
			dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams, "rxjhaccount");
			if (dBToDataTable != null && md5(dBToDataTable.Rows[0]["Pass2"].ToString()) == text)
			{
				DBA.ExeSqlCommand($"DELETE TBL_XWWL_Char WHERE FLD_NAME='{value}'", "GameServer");
				DBA.ExeSqlCommand($"DELETE TBL_XWWL_Warehouse WHERE FLD_NAME='{value}'", "GameServer");
				DBA.ExeSqlCommand($"DELETE TBL_XWWL_GuildMember WHERE Name='{value}'", "GameServer");
				DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_徒弟1='' WHERE FLD_徒弟1='{value}'", "GameServer");
				DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_徒弟2='' WHERE FLD_徒弟2='{value}'", "GameServer");
				DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_徒弟3='' WHERE FLD_徒弟3='{value}'", "GameServer");
				DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_师傅='',FLD_师徒武功1_1=0,FLD_师徒武功1_2=0,FLD_师徒武功1_3=0 WHERE FLD_师傅='{value}'", "GameServer");
				foreach (Players value2 in World.AllConnectedChars.Values)
				{
					if (value2.FLD_Student1 == value)
					{
						value2.FLD_Student1 = "";
					}
					if (value2.FLD_Student2 == value)
					{
						value2.FLD_Student2 = "";
					}
					if (value2.FLD_Student3 == value)
					{
						value2.FLD_Student3 = "";
					}
					if (value2.FLD_Teacher == value)
					{
						value2.FLD_Teacher = "";
						value2.FLD_师徒_武功ID1_1 = 0;
						value2.FLD_师徒_武功ID1_2 = 0;
						value2.FLD_师徒_武功ID1_3 = 0;
					}
				}
				Form1.WriteLine(9, "Xoa nhan vat: " + value);
				string sqlCommand2 = $"select * from [TBL_XWWL_Char] where FLD_NAME=@username";
				SqlParameter[] prams2 = new SqlParameter[1]
				{
					SqlDBA.MakeInParam("@username", SqlDbType.VarChar, 30, value)
				};
				DataTable dBToDataTable2 = DBA.GetDBToDataTable(sqlCommand2, prams2);
				if (dBToDataTable2 != null)
				{
					logo.logxoanhanvat("Xóa nhân vật: " + value + " - " + dBToDataTable2.Rows[0]["FLD_WX"] + " - " + dBToDataTable2.Rows[0]["FLD_EXP"]);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array2, array2.Length);
				}
			}
			else
			{
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			Player_Exit();
		}

		public static byte[] encryptData(string data)
		{
			MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
			UTF8Encoding uTF8Encoding = new UTF8Encoding();
			return mD5CryptoServiceProvider.ComputeHash(uTF8Encoding.GetBytes(data));
		}

		public static string md5(string data)
		{
			return BitConverter.ToString(encryptData(data)).Replace("-", "").ToLower();
		}

		public void 删除土灵符(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				byte[] array2 = new byte[15];
				for (int i = 0; i < 15 && data[11 + i] != 0; i++)
				{
					array2[i] = data[11 + i];
				}
				Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "");
				Buffer.BlockCopy(data, 26, array, 0, 2);
				int num = BitConverter.ToInt32(array, 0);
				土灵符坐标.Remove(num);
				string hex = "AA5532000000000F10230001000A003132333400000000000000000000006500000054A8034400007041342FCB44000000000000000055AA";
				byte[] array3 = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(array, 0, array3, 13, 2);
				Buffer.BlockCopy(array2, 0, array3, 15, array2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array3, array3.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "删除土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 设置副本难度(byte[] data, int length)
		{
			PacketVerify(data, length);
			int 人物ID = BitConverter.ToInt16(data, 5);
			int value = BitConverter.ToInt16(data, 11);
			if (Select_Character_ID(人物ID) != null)
			{
				PacketData packetData = new PacketData();
				packetData.WriteByte(value);
				if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value2))
				{
					foreach (Players value3 in value2.List_Party.Values)
					{
						if (value3.Client != null)
						{
							value3.Client.SendPak(packetData, 8729, value3.UserSessionID);
						}
					}
				}
			}
		}

		public void 设置任务数据(int 任务ID, int 任务阶段ID)
		{
			if (任务.TryGetValue(任务ID, out 任务类 value))
			{
				value.任务阶段ID = 任务阶段ID;
				if (任务阶段ID == 0)
				{
					任务.Remove(任务ID);
				}
			}
			else
			{
				value = new 任务类();
				value.任务ID = 任务ID;
				value.任务阶段ID = 任务阶段ID;
				if (!任务.ContainsKey(任务ID))
				{
					任务.Add(任务ID, value);
				}
			}
			更新人物任务();
		}

		public int GetQuestItmeNum(int ItemID)
		{
			int result = 0;
			for (int i = 0; i < Quest_Item.Length; i++)
			{
				if (Quest_Item[i].PID == ItemID)
				{
					result = Quest_Item[i].Item_Amount;
				}
			}
			return result;
		}

		public void AddItemQuest(int PID, int Count)
		{
			bool flag = false;
			bool flag2 = false;
			for (int i = 0; i < 36; i++)
			{
				if (Quest_Item[i].PID == PID)
				{
					flag = true;
					flag2 = true;
					if (Count == 0)
					{
						得到任务物品(i, Quest_Item[i].PID, 0);
						Quest_Item[i].物品_byte = new byte[8];
					}
					else
					{
						任务物品类 任务物品类 = Quest_Item[i];
						任务物品类.Item_Amount += Count;
						得到任务物品(i, Quest_Item[i].PID, Quest_Item[i].Item_Amount);
					}
					break;
				}
			}
			if (!flag && Count > 0)
			{
				for (int j = 0; j < 36; j++)
				{
					if (Quest_Item[j].PID == 0)
					{
						flag2 = true;
						Quest_Item[j].PID = PID;
						任务物品类 任务物品类2 = Quest_Item[j];
						任务物品类2.Item_Amount += Count;
						得到任务物品(j, Quest_Item[j].PID, Quest_Item[j].Item_Amount);
						break;
					}
				}
			}
			if (!flag2)
			{
				GameMessage("Tuìi ðôÌ nhiêòm vuò ðaÞ ðâÌy!", 10);
			}
			else
			{
				发送任务物品列表();
			}
		}

		public void GuildWarRequest(byte[] data, int length)
		{
			try
			{
				string[] array = World.申请帮战元宝金币数.Split(';');
				string[] array2 = World.帮战人数控制.Split(';');
				if (World.帮战开关 == 0)
				{
					GameMessage("Chuc nang War Guild khong duoc mo", 9);
				}
				else if (World.血战 != null)
				{
					GameMessage("Chuc nang War Guild dang duoc 2 mon phai khac su dung", 9);
				}
				else
				{
					int num = BitConverter.ToInt16(data, 15);
					int num2 = BitConverter.ToInt32(data, (World.Newversion >= 11) ? 2119 : 739);
					int num3 = BitConverter.ToInt32(data, (World.Newversion >= 11) ? 2127 : 747);
					if (base.Guild_Level != 6)
					{
						申请帮战提示(3);
					}
					else if (num2 == 7001)
					{
						申请帮战提示(2);
						GameMessage("MAP 7001 ????", 9);
					}
					else if (num2 == 7301 && num < int.Parse(array2[0]) && num > int.Parse(array2[1]))
					{
						申请帮战提示(4);
					}
					else
					{
						Dictionary<int, Players> dictionary = new Dictionary<int, Players>();
						int num4 = 0;
						while (true)
						{
							if (num4 >= num)
							{
								if (num2 == 7301 && dictionary.Count < int.Parse(array2[0]) && dictionary.Count > int.Parse(array2[1]))
								{
									申请帮战提示(4);
									dictionary.Clear();
								}
								else
								{
									查百宝阁元宝数();
									if (base.FLD_RXPIONT >= int.Parse(array[0]) && base.Player_Money >= int.Parse(array[1]))
									{
										帮战Class 帮战Class = new 帮战Class();
										帮战Class.申请帮派ID = num3;
										帮战Class.申请地图 = num2;
										帮战Class.申请帮派名称 = base.Guild_Name;
										帮战Class.帮主名称 = base.UserName;
										帮战Class.申请人物列表 = dictionary;
										try
										{
											World.帮战list.Add(num3, 帮战Class);
										}
										catch (Exception)
										{
											dictionary.Clear();
											GameMessage("Ban da dang ky mon phai chien roi, vui long doi mon phai khac dang ky", 9);
											return;
										}
										申请帮战提示(0);
										Form1.WriteLine(88, "申请帮战成功 申请帮派ID:" + num3 + " 帮派名字:" + base.Guild_Name + " 帮主:" + base.UserName + " 人数:" + 帮战Class.申请人物列表.Count);
										Add_Del_Rxpiont(int.Parse(array[0]), 0);
										base.Player_Money -= int.Parse(array[1]);
										RxjhClass.帮战赌注(base.Userid, base.UserName, num3, 50);
										Save_data_Rxpiont();
										Update_Money_Weight();
									}
									else
									{
										GameMessage("你的钱数或是元宝不够不能申请帮派战，申请帮战最少" + int.Parse(array[0]) + "元宝和" + int.Parse(array[1]) + "游戏币", 9);
										申请帮战提示(2);
									}
								}
								return;
							}
							byte[] array3 = new byte[15];
							Buffer.BlockCopy(data, 17 + num4 * 15, array3, 0, array3.Length);
							string 人物名 = Encoding.GetEncoding(1252).GetString(array3).Replace("\0", "");
							Players players = Find_Player(人物名);
							if (players != null)
							{
								dictionary.Add(players.UserSessionID, players);
								if (players.Player_Level < 60)
								{
									break;
								}
							}
							num4++;
						}
						申请帮战提示(7);
						dictionary.Clear();
					}
				}
			}
			catch (Exception arg)
			{
				Form1.WriteLine(1, "申请帮战 出错：" + arg);
			}
		}

		public void 申请帮战提示(int id)
		{
			string hex = "AA551300013F003D10040004000000000000000000BE9A55AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 申请门徽(byte[] data, int length)
		{
			byte[] array = new byte[770];
			Buffer.BlockCopy(data, 19, array, 0, 770);
			RxjhClass.申请门徽(base.Guild_ID, array);
			发送门徽2(array, base.Guild_ID);
		}

		public void 申请取消帮战提示(int id)
		{
			string hex = "AA551300013F003B10040001000000000000000000BE9A55AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void RandomBuff(byte[] byte_5, int int_128)
		{
			try
			{
				int num = BitConverter.ToInt16(byte_5, 11);
				int num2 = BitConverter.ToInt16(byte_5, 15);
				switch (num)
				{
					case 1:
						{
							Random random = new Random(DateTime.Now.Millisecond);
							int id2 = random.Next(10001, 10101);
							石头剪子布提示(num, 1, id2, 0);
							if (num2 == 1)
							{
								if (base.Player_Money < 10000000)
								{
									GameMessage("Buff pill câÌn 10,000,000", 7);
								}
								else
								{
									base.Player_Money -= World.创建门派需要金钱;
									Update_Money_Weight();
									switch (random.Next(1000000408, 1000000415))
									{
										case 1000000408:
											{
												if (Show_Pic_Class.ContainsKey(1000000408))
												{
													Show_Pic_Class[1000000408].EndEvent();
												}
												Class_Show_Pill class_Show_Pill2 = new Class_Show_Pill(this, 1200000.0, 1000000408, 1);
												Show_Pic_Class.Add(class_Show_Pill2.FLD_PID, class_Show_Pill2);
												Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill2.FLD_PID), 1, 1200000);
												GameMessage("Tâìn công 10%", 9);
												Add_ATT_Percentage(0.1);
												UpdatePowersAndStatus();
												更新广播人物数据();
												break;
											}
										case 1000000409:
											{
												if (Show_Pic_Class.ContainsKey(1000000409))
												{
													Show_Pic_Class[1000000409].EndEvent();
												}
												Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 1200000.0, 1000000409, 1);
												Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
												Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill5.FLD_PID), 1, 1200000);
												GameMessage("Sinh mêònh 500", 9);
												base.FLD_Item_Premium_HP += 500;
												Update_HP_MP_SP();
												UpdatePowersAndStatus();
												更新广播人物数据();
												break;
											}
										case 1000000410:
											{
												if (Show_Pic_Class.ContainsKey(1000000410))
												{
													Show_Pic_Class[1000000410].EndEvent();
												}
												Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, 1200000.0, 1000000410, 1);
												Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
												Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill3.FLD_PID), 1, 1200000);
												GameMessage("Nôòi công 500", 9);
												base.FLD_Item_Premium_MP += 500;
												Update_HP_MP_SP();
												UpdatePowersAndStatus();
												更新广播人物数据();
												break;
											}
										case 1000000411:
											{
												if (Show_Pic_Class.ContainsKey(1000000411))
												{
													Show_Pic_Class[1000000411].EndEvent();
												}
												Class_Show_Pill class_Show_Pill6 = new Class_Show_Pill(this, 1200000.0, 1000000411, 1);
												Show_Pic_Class.Add(class_Show_Pill6.FLD_PID, class_Show_Pill6);
												Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill6.FLD_PID), 1, 1200000);
												GameMessage("PhoÌng thuÒ 10%", 9);
												Add_DEF_Percentage(0.1);
												UpdatePowersAndStatus();
												更新广播人物数据();
												break;
											}
										case 1000000412:
											{
												if (Show_Pic_Class.ContainsKey(1000000412))
												{
													Show_Pic_Class[1000000412].EndEvent();
												}
												Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, 1200000.0, 1000000412, 1);
												Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
												Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill7.FLD_PID), 1, 1200000);
												GameMessage("Công lýòc voÞ công 13%", 9);
												base.FLD_Item_Skill_Attack_Percentage += 0.13;
												UpdatePowersAndStatus();
												更新广播人物数据();
												break;
											}
										case 1000000413:
											{
												if (Show_Pic_Class.ContainsKey(1000000413))
												{
													Show_Pic_Class[1000000413].EndEvent();
												}
												Class_Show_Pill class_Show_Pill4 = new Class_Show_Pill(this, 1200000.0, 1000000413, 1);
												Show_Pic_Class.Add(class_Show_Pill4.FLD_PID, class_Show_Pill4);
												Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill4.FLD_PID), 1, 1200000);
												GameMessage("PhoÌng ngýò voÞ công 13%", 9);
												base.FLD_Item_Skill_Def_Percentage += 0.13;
												UpdatePowersAndStatus();
												更新广播人物数据();
												break;
											}
										case 1000000414:
											{
												if (Show_Pic_Class.ContainsKey(1000000414))
												{
													Show_Pic_Class[1000000414].EndEvent();
												}
												Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 1200000.0, 1000000414, 1);
												Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
												Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill.FLD_PID), 1, 1200000);
												GameMessage("Khiì công 2", 9);
												base.Character_Qigong += 2;
												UpdatePowersAndStatus();
												更新广播人物数据();
												break;
											}
									}
								}
							}
							break;
						}
					case 2:
						{
							int id = new Random(DateTime.Now.Millisecond).Next(1, 101);
							石头剪子布提示(num, 1, id, 0);
							break;
						}
					case 3:
						{
							int num3 = BitConverter.ToInt16(byte_5, 15);
							if (num3 != 0)
							{
								int[,] array = new int[3, 3]
								{
							{
								0,
								2,
								1
							},
							{
								1,
								0,
								2
							},
							{
								2,
								1,
								0
							}
								};
								int[] array2 = new int[3]
								{
							0,
							1,
							2
								};
								int num4 = new Random(DateTime.Now.Millisecond).Next(0, 3);
								int num5 = 0;
								num5 = array2[array[num3 - 1, num4]];
								Console.WriteLine(TITLE_OAN_TU_XI(num3 - 1) + ":" + TITLE_OAN_TU_XI(num4) + " " + TITLE_THANG_THUA(num5));
								int d = 0;
								switch (num5)
								{
									case 1:
										石头剪子布赢次数++;
										d = 石头剪子布赢次数;
										break;
									case 2:
										石头剪子布赢次数 = 0;
										d = 200;
										break;
								}
								石头剪子布提示(num, 1, num4 + 1, d);
							}
							break;
						}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "quay số lỗi 出错" + base.Userid + "|" + base.UserName + " " + ex.Message);
			}
		}

		public void QuaySoMayMan()
		{
			try
			{
				Random random = new Random(DateTime.Now.Millisecond);
				if (base.Player_Money < 10000000)
				{
					GameMessage("Buff pill câÌn 10,000,000", 7);
				}
				else
				{
					base.Player_Money -= World.创建门派需要金钱;
					Update_Money_Weight();
					switch (random.Next(1000000408, 1000000415))
					{
						case 1000000408:
							{
								if (Show_Pic_Class.ContainsKey(1000000408))
								{
									Show_Pic_Class[1000000408].EndEvent();
								}
								Class_Show_Pill class_Show_Pill2 = new Class_Show_Pill(this, 1200000.0, 1000000408, 1);
								Show_Pic_Class.Add(class_Show_Pill2.FLD_PID, class_Show_Pill2);
								Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill2.FLD_PID), 1, 1200000);
								GameMessage("Tâìn công 10%", 9);
								Add_ATT_Percentage(0.1);
								UpdatePowersAndStatus();
								更新广播人物数据();
								break;
							}
						case 1000000409:
							{
								if (Show_Pic_Class.ContainsKey(1000000409))
								{
									Show_Pic_Class[1000000409].EndEvent();
								}
								Class_Show_Pill class_Show_Pill5 = new Class_Show_Pill(this, 1200000.0, 1000000409, 1);
								Show_Pic_Class.Add(class_Show_Pill5.FLD_PID, class_Show_Pill5);
								Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill5.FLD_PID), 1, 1200000);
								GameMessage("Sinh mêònh 500", 9);
								base.FLD_Item_Premium_HP += 500;
								Update_HP_MP_SP();
								UpdatePowersAndStatus();
								更新广播人物数据();
								break;
							}
						case 1000000410:
							{
								if (Show_Pic_Class.ContainsKey(1000000410))
								{
									Show_Pic_Class[1000000410].EndEvent();
								}
								Class_Show_Pill class_Show_Pill3 = new Class_Show_Pill(this, 1200000.0, 1000000410, 1);
								Show_Pic_Class.Add(class_Show_Pill3.FLD_PID, class_Show_Pill3);
								Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill3.FLD_PID), 1, 1200000);
								GameMessage("Nôòi công 500", 9);
								base.FLD_Item_Premium_MP += 500;
								Update_HP_MP_SP();
								UpdatePowersAndStatus();
								更新广播人物数据();
								break;
							}
						case 1000000411:
							{
								if (Show_Pic_Class.ContainsKey(1000000411))
								{
									Show_Pic_Class[1000000411].EndEvent();
								}
								Class_Show_Pill class_Show_Pill6 = new Class_Show_Pill(this, 1200000.0, 1000000411, 1);
								Show_Pic_Class.Add(class_Show_Pill6.FLD_PID, class_Show_Pill6);
								Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill6.FLD_PID), 1, 1200000);
								GameMessage("PhoÌng thuÒ 10%", 9);
								Add_DEF_Percentage(0.1);
								UpdatePowersAndStatus();
								更新广播人物数据();
								break;
							}
						case 1000000412:
							{
								if (Show_Pic_Class.ContainsKey(1000000412))
								{
									Show_Pic_Class[1000000412].EndEvent();
								}
								Class_Show_Pill class_Show_Pill7 = new Class_Show_Pill(this, 1200000.0, 1000000412, 1);
								Show_Pic_Class.Add(class_Show_Pill7.FLD_PID, class_Show_Pill7);
								Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill7.FLD_PID), 1, 1200000);
								GameMessage("Công lýòc voÞ công 13%", 9);
								base.FLD_Item_Skill_Attack_Percentage += 0.13;
								UpdatePowersAndStatus();
								更新广播人物数据();
								break;
							}
						case 1000000413:
							{
								if (Show_Pic_Class.ContainsKey(1000000413))
								{
									Show_Pic_Class[1000000413].EndEvent();
								}
								Class_Show_Pill class_Show_Pill4 = new Class_Show_Pill(this, 1200000.0, 1000000413, 1);
								Show_Pic_Class.Add(class_Show_Pill4.FLD_PID, class_Show_Pill4);
								Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill4.FLD_PID), 1, 1200000);
								GameMessage("PhoÌng ngýò voÞ công 13%", 9);
								base.FLD_Item_Skill_Def_Percentage += 0.13;
								UpdatePowersAndStatus();
								更新广播人物数据();
								break;
							}
						case 1000000414:
							{
								if (Show_Pic_Class.ContainsKey(1000000414))
								{
									Show_Pic_Class[1000000414].EndEvent();
								}
								Class_Show_Pill class_Show_Pill = new Class_Show_Pill(this, 1200000.0, 1000000414, 1);
								Show_Pic_Class.Add(class_Show_Pill.FLD_PID, class_Show_Pill);
								Send_Packet_Show_Pic(BitConverter.GetBytes(class_Show_Pill.FLD_PID), 1, 1200000);
								GameMessage("Buff khiì công 2", 9);
								base.Character_Qigong += 2;
								UpdatePowersAndStatus();
								更新广播人物数据();
								break;
							}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "quay số lỗi 出错" + base.Userid + "|" + base.UserName + " " + ex.Message);
			}
		}

		public void 石头剪子布(byte[] data, int length)
		{
			try
			{
				int num = BitConverter.ToInt16(data, 11);
				switch (num)
				{
					case 1:
						{
							int id2 = new Random(World.GetRandomSeed()).Next(10001, 10101);
							石头剪子布提示(num, 1, id2, 0);
							break;
						}
					case 2:
						{
							int id = new Random(World.GetRandomSeed()).Next(1, 101);
							石头剪子布提示(num, 1, id, 0);
							break;
						}
					case 3:
						{
							int num2 = BitConverter.ToInt16(data, 15);
							if (num2 != 0)
							{
								int[,] array = new int[3, 3]
								{
							{
								0,
								2,
								1
							},
							{
								1,
								0,
								2
							},
							{
								2,
								1,
								0
							}
								};
								int[] array2 = new int[3]
								{
							0,
							1,
							2
								};
								int num3 = new Random(World.GetRandomSeed()).Next(0, 3);
								int num4 = 0;
								num4 = array2[array[num2 - 1, num3]];
								Console.WriteLine(TITLE_OAN_TU_XI(num2 - 1) + ":" + TITLE_OAN_TU_XI(num3) + " " + TITLE_THANG_THUA(num4));
								int d = 0;
								switch (num4)
								{
									case 1:
										石头剪子布赢次数++;
										d = 石头剪子布赢次数;
										break;
									case 2:
										石头剪子布赢次数 = 0;
										d = 200;
										break;
								}
								石头剪子布提示(num, 1, num3 + 1, d);
							}
							break;
						}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "石头剪子布 出错" + base.Userid + "|" + base.UserName + " " + ex.Message);
			}
		}

		public void 石头剪子布提示(int 主ID, int 状态ID, int id, int d2)
		{
			string hex = "AA55170001D10374170800030001000300010000000000000065FD55AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(主ID), 0, array, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(状态ID), 0, array, 13, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 15, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(d2), 0, array, 17, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			Console.WriteLine(Converter.ToString(array));
		}

		public void Ranking(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				int num = BitConverter.ToInt16(data, 7);
				byte b = data[13];
				if (num == 345 || num == 789)
				{
					if (b != 0)
					{
						DataTable dBToDataTable = DBA.GetDBToDataTable(string.Format($"SELECT TOP 20 * FROM TBL_XWWL_Char where FLD_ID!='1' and FLD_ID!='2' and FLD_JOB_LEVEL = {b} order by FLD_GETWX desc"));
						PacketData packetData = new PacketData();
						for (int i = 0; i < 3; i++)
						{
							string text = dBToDataTable.Rows[i]["FLD_NAME"].ToString();
							Players players = World.FindPlayerbyName(text);
							if (players != null)
							{
								byte[] sourceArray = 得到更新人物数据(players).ToArray3();
								byte[] array = new byte[380];
								Array.Copy(sourceArray, 8, array, 0, 380);
								packetData.WriteByteArray(array);
							}
							else
							{
								PlayerStyle playerStyle = new PlayerStyle((byte[])dBToDataTable.Rows[i]["FLD_FACE"]);
								物品类[] array2 = new 物品类[16];
								byte[] array3 = (byte[])dBToDataTable.Rows[i]["FLD_WEARITEM"];
								for (int j = 0; j < 16; j++)
								{
									byte[] array4 = new byte[(World.Newversion >= 14) ? 76 : 73];
									if (array3.Length >= j * ((World.Newversion >= 14) ? 76 : 73) + ((World.Newversion >= 14) ? 76 : 73))
									{
										try
										{
											Buffer.BlockCopy(array3, j * ((World.Newversion >= 14) ? 76 : 73), array4, 0, (World.Newversion >= 14) ? 76 : 73);
										}
										catch (Exception arg)
										{
											Console.WriteLine(j + " " + arg);
										}
									}
									array2[j] = new 物品类(array4, j);
								}
								packetData.WriteString(text);
								packetData.WriteByte(0);
								packetData.WriteInt(0);
								DataTable userNameBp = RxjhClass.GetUserNameBp(text);
								if (userNameBp != null)
								{
									packetData.WriteString(userNameBp.Rows[0]["G_Name"].ToString());
								}
								else
								{
									packetData.WriteString("");
								}
								packetData.WriteByte(0);
								packetData.WriteShort(World.Server_Group_ID);
								packetData.WriteByte((int)dBToDataTable.Rows[i]["FLD_ZX"]);
								packetData.WriteByte((int)dBToDataTable.Rows[i]["FLD_LEVEL"]);
								packetData.WriteByte((int)dBToDataTable.Rows[i]["FLD_JOB_LEVEL"]);
								packetData.WriteByte((int)dBToDataTable.Rows[i]["FLD_JOB"]);
								packetData.WriteShort(0);
								packetData.WriteShort(playerStyle.Hair_Color);
								packetData.WriteShort(playerStyle.Hair_Style);
								packetData.WriteShort(0);
								packetData.WriteByte(0);
								packetData.WriteByte(playerStyle.Sex);
								packetData.WriteInt(0);
								packetData.WriteInt(0);
								packetData.WriteInt(0);
								packetData.WriteInt(0);
								packetData.WriteInt((int)Item_Wear[0].FLD_PID);
								packetData.WriteInt(0);
								packetData.WriteInt((int)array2[1].FLD_PID);
								packetData.WriteInt(0);
								packetData.WriteInt((int)array2[2].FLD_PID);
								packetData.WriteInt(0);
								if (World.是否启动披风强化 == 1)
								{
									packetData.WriteInt((int)array2[4].FLD_PID);
									packetData.WriteInt(0);
								}
								packetData.WriteInt((int)array2[3].FLD_PID);
								packetData.WriteInt(0);
								packetData.WriteInt((int)array2[5].FLD_PID);
								packetData.WriteInt(0);
								packetData.WriteInt(array2[3].FLD_强化数量);
								packetData.WriteInt(0);
								if (World.是否启动披风强化 == 1)
								{
									packetData.WriteInt(0);
									packetData.WriteInt(0);
								}
								packetData.WriteInt(array2[3].FLD_强化数量);
								packetData.WriteInt((int)array2[11].FLD_PID);
								packetData.WriteInt(0);
								packetData.WriteByte(0);
								packetData.WriteByte(0);
								packetData.WriteShort(0);
								packetData.WriteInt(0, 5);
								packetData.WriteInt(0);
								packetData.WriteInt(0);
								packetData.WriteInt(0);
								packetData.WriteInt(0);
								packetData.WriteInt(255);
								packetData.WriteInt(0);
								packetData.WriteInt((int)array2[13].FLD_PID);
								packetData.WriteInt(0);
								for (int k = packetData.Length - 392 * i; k < 386; k++)
								{
									packetData.WriteByte(0);
								}
							}
							packetData.WriteInt(i + 1);
							packetData.WriteLong(0L);
						}
						PacketData packetData2 = new PacketData();
						packetData2.WriteInt(dBToDataTable.Rows.Count);
						packetData2.WriteByteArray(new byte[8]
						{
							0,
							1,
							5,
							5,
							1,
							0,
							0,
							0
						});
						for (int i = 0; i < dBToDataTable.Rows.Count; i++)
						{
							packetData2.WriteString(dBToDataTable.Rows[i]["FLD_NAME"].ToString());
							packetData2.WriteString(base.Guild_Name);
							packetData2.WriteShort((int)dBToDataTable.Rows[i]["FLD_Job"]);
							packetData2.WriteShort(0);
							packetData2.WriteShort((int)dBToDataTable.Rows[i]["FLD_ZX"]);
							packetData2.WriteShort((int)dBToDataTable.Rows[i]["FLD_LEVEL"]);
							packetData2.WriteShort(0);
							packetData2.WriteLong((int)dBToDataTable.Rows[i]["FLD_GETWX"]);
							packetData2.WriteLong(i + 1);
						}
						if (base.Client != null)
						{
							base.Client.SendPak(packetData, 5635, base.UserSessionID);
							base.Client.SendPak(packetData2, 23041, base.UserSessionID);
						}
					}
					else
					{
						string hex = "AA55003A0068046900340000000000B8190000DF08000000000000B8190000260B0000E8030000000000000000000000000000EA010000000000000000000055AA";
						byte[] array5 = Converter.hexStringToByte(hex);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array5, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array5, array5.Length);
							base.Client.Send单包(array5, array5.Length);
							base.Client.Send多包(array5, array5.Length);
							base.Client.Send多包11(array5, array5.Length);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "Error Ranking![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 使用土灵符(byte[] data, int length)
		{
			try
			{
				if (!base.PlayerIsDead && !打开仓库中)
				{
					PacketVerify(data, length);
					byte[] array = new byte[4];
					byte[] array2 = new byte[4];
					Buffer.BlockCopy(data, 11, array, 0, 2);
					Buffer.BlockCopy(data, 13, array2, 0, 2);
					string hex = "AA552C00002C0108101C0001000A003E44030000000000C399053C00000000010018943577010000000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					byte[] array4 = new byte[4];
					byte[] array5 = new byte[8];
					byte[] dst = new byte[4];
					int num = BitConverter.ToInt32(array, 0);
					if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == 1007000002 || BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == 1007000003)
					{
						Buffer.BlockCopy(Item_In_Bag[num].Byte_Item, 16, array4, 0, 4);
						Buffer.BlockCopy(Item_In_Bag[num].Byte_Item, 8, dst, 0, 4);
						Buffer.BlockCopy(Item_In_Bag[num].Byte_Item, 0, array5, 0, 8);
						int num2 = BitConverter.ToInt32(array4, 0) - 2000000000 - 1;
						if (num2 <= 0)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(2000000000), 0, array3, 33, 4);
						}
						else
						{
							Buffer.BlockCopy(BitConverter.GetBytes(num2 + 2000000000), 0, array3, 33, 4);
							Buffer.BlockCopy(BitConverter.GetBytes(num2 + 2000000000), 0, Item_In_Bag[num].Byte_Item, 16, 4);
						}
						Buffer.BlockCopy(array5, 0, array3, 15, 8);
						Buffer.BlockCopy(array, 0, array3, 13, 2);
						Buffer.BlockCopy(Item_In_Bag[num].Get_Byte_Item_PID, 0, array3, 23, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array3, array3.Length);
						}
						if (num2 <= 0)
						{
							Send_Packet_Delete_Item(num, 1);
						}
						CoordinateClass CoordinateClass = (CoordinateClass)土灵符坐标[BitConverter.ToInt32(array2, 0)];
						if (CoordinateClass != null)
						{
							Move(CoordinateClass.Rxjh_X, CoordinateClass.Rxjh_Y, CoordinateClass.Rxjh_Z, CoordinateClass.Rxjh_Map);
						}
						获取复查范围玩家();
						获取复查范围Npc();
						获取复查范围地面物品();
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "使用土灵符出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void ReQuest_Join_Warfare_System()
		{
			if ((base.Player_Job_Level >= 2 && World.势力战进程 <= 3 && World.势力战时间 > 900) || (World.势力战进程 > 0 && World.势力战进程 <= 2 && World.EventTop.ContainsKey(base.UserName)))
			{
				if (base.Player_Zx == 1)
				{
					if (World.势力战正人数 >= 150 && !World.EventTop.ContainsKey(base.UserName))
					{
						GameMessage("ÐaÞ ðuÒ sôì ngýõÌi baìo danh, vui loÌng quay laòi sau!", 6);
						发送势力战邀请广播2();
					}
					else if (World.势力战正人数 <= World.势力战邪人数 + 10 || World.EventTop.ContainsKey(base.UserName))
					{
						Move(-565f, 0f, 15f, 801);
						if (!World.EventTop.ContainsKey(base.UserName))
						{
							World.势力战正人数++;
						}
						UPDATECDSKILL(801);
					}
					else
					{
						GameMessage("Chiình phaìi quaì ðông, vui loÌng quay laòi sau! (" + World.势力战正人数 + "/" + World.势力战邪人数 + ") (Chiình/TaÌ)", 6);
						发送势力战邀请广播2();
					}
				}
				else if (World.势力战邪人数 >= 150 && !World.EventTop.ContainsKey(base.UserName))
				{
					GameMessage("ÐaÞ ðuÒ sôì ngýõÌi baìo danh, vui loÌng quay laòi sau!", 6);
					发送势力战邀请广播2();
				}
				else if (World.势力战邪人数 <= World.势力战正人数 + 10 || World.EventTop.ContainsKey(base.UserName))
				{
					Move(545f, 0f, 15f, 801);
					if (!World.EventTop.ContainsKey(base.UserName))
					{
						World.势力战邪人数++;
					}
					UPDATECDSKILL(801);
				}
				else
				{
					GameMessage("TaÌ phaìi quaì ðông, vui loÌng quay laòi sau! (" + World.势力战正人数 + "/" + World.势力战邪人数 + ") (Chiình/TaÌ)", 6);
					发送势力战邀请广播2();
				}
			}
			if (World.势力战时间 <= 900 && World.势力战进程 == 3)
			{
				GameMessage("ÐaÞ quaì thõÌi gian tham gia Thêì Lýòc Chiêìn", 6);
			}
			else if (World.势力战进程 < 3 && !World.EventTop.ContainsKey(base.UserName))
			{
				GameMessage("Hêò thôìng ðang kiêÒm tra, haÞy thýÒ laòi !", 6);
			}
		}

		public void Force_Warfare_System(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				string hex = "AA552F00012C0114222000020001000B000000010000000000000000000000000000000000000000000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = new byte[2];
				byte[] array3 = new byte[2];
				Buffer.BlockCopy(data, 11, array2, 0, 2);
				Buffer.BlockCopy(data, 19, array3, 0, 2);
				switch (BitConverter.ToInt16(array2, 0))
				{
					case 2:
						{
							short num = BitConverter.ToInt16(array3, 0);
							if (num == 2)
							{
							}
							break;
						}
					case 3:
						switch (BitConverter.ToInt16(array3, 0))
						{
							case 1:
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 11, 2);
								Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array, 15, 2);
								ReQuest_Join_Warfare_System();
								break;
						}
						break;
					case 4:
						switch (BitConverter.ToInt16(array3, 0))
						{
							case 1:
								if (base.Player_FLD_Map == 801)
								{
									base.Player_FLD_HP = base.Player_HP_Max;
									base.Player_Shield = base.Player_Shield_Max;
									base.PlayerIsDead = false;
									if (base.Player_Zx == 1)
									{
										Move(-500f, -400f, 15f, 801);
									}
									else
									{
										Move(500f, -400f, 15f, 801);
									}
								}
								Update_HP_MP_SP();
								break;
							case 2:
								if (base.Player_FLD_Map == 801)
								{
									base.Player_FLD_HP = base.Player_HP_Max;
									base.Player_Shield = base.Player_Shield_Max;
									base.PlayerIsDead = false;
									if (base.Player_Zx == 1)
									{
										Move(-500f, 400f, 15f, 801);
									}
									else
									{
										Move(500f, 400f, 15f, 801);
									}
								}
								Update_HP_MP_SP();
								break;
						}
						break;
					default:
						Buffer.BlockCopy(array2, 0, array, 11, 2);
						Buffer.BlockCopy(array2, 0, array, 15, 2);
						break;
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, " 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
			}
		}

		public void 说话(byte[] data, int length)
		{
			if (base.Player_Level < World.发言等级)
			{
				GameMessage("Baòn câÌn " + World.发言等级 + " câìp ðôò ðêÒ troÌ chuyêòn!", 10);
				return;
			}
			int num = 0;
			try
			{
				string empty = string.Empty;
				string empty2 = string.Empty;
				int num2 = data[11];
				int num3 = data[(World.Newversion >= 16) ? 35 : 34];
				if (num3 > 99)
				{
					num3 = 99;
				}
				byte[] array = new byte[num3];
				num = 1;
				try
				{
					Buffer.BlockCopy(data, (World.Newversion >= 16) ? 36 : 35, array, 0, array.Length);
					empty = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
						.Trim();
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "说话出错1![" + base.Userid + "]-[" + base.UserName + "]" + array.Length + " " + ex.Message);
					return;
				}
				num = 2;
				byte[] array2 = new byte[15];
				Buffer.BlockCopy(data, (World.Newversion >= 16) ? 13 : 12, array2, 0, array2.Length);
				empty2 = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "")
					.Trim();
				if (empty.Length > 0 && num2 != 100)
				{
					num = 3;
					if (!empty.ToString().Contains("@"))
					{
						foreach (KillClass item in World.Kill)
						{
							if (empty.Replace(" ", "").IndexOf(item.Txt) != -1)
							{
								Form1.WriteLine(0, "Filter text： " + empty + " - [" + base.Userid + "] [" + base.UserName + "]");
								if (item.Sffh == 0)
								{
									empty = empty.Replace(item.Txt, World.过滤文字替换 ?? "");
								}
								else
								{
									if (item.Sffh == 1)
									{
										if (base.Client != null)
										{
											GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 20", 7);
											base.Client.Dispose();
										}
										return;
									}
									if (item.Sffh == 2)
									{
										Form1.WriteLine(100, "Banned account: [" + base.Userid + "] - [" + base.UserName + "]");
										DBA.ExeSqlCommand($"UPDATE TBL_ACCOUNT SET FLD_ZT=1 WHERE FLD_ID='{base.Userid}'", "rxjhaccount");
										if (base.Client != null)
										{
											GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 19", 7);
											base.Client.Dispose();
										}
										return;
									}
									if (item.Sffh == 3)
									{
										return;
									}
								}
							}
						}
					}
					num = 4;
					if (empty.Length <= 98 && !ParseCommand(empty))
					{
						num = 5;
						Player_Chat(empty, num2, empty2);
						num = 6;
					}
				}
			}
			catch (Exception ex2)
			{
				string text = Converter.ToString(data);
				Form1.WriteLine(1, "说话出错![" + base.Userid + "]-[" + base.UserName + "] [" + num + "]  [" + text + "]" + ex2.Message);
			}
		}

		public void method_1851()
		{
			base.Int32_671 = 0;
			base.Int32_672 = 0;
			base.Int32_673 = 0;
			base.Int32_674 = 0;
			UpdatePowersAndStatus();
			Update_HP_MP_SP();
			Pet.计算基本数据();
			Pet.保存数据();
			Item_Wear[14].LockMove = false;
			召唤提示(1, 1);
			解除召唤(this, this);
			Pet.Dispose();
			Pet = null;
			if (World.int_1140 != 1)
			{
				World.gclass11_3.Remove(base.UserSessionID);
			}
			GameMessage("灵兽辅助效果消失,人物经验加成正常！", 9, "灵兽属性");
		}

		public void Player_Die(int deadByNPC = 0)
		{
			try
			{
				if (World.JlMsg == 1)
				{
					Form1.WriteLine(0, "Players_死亡");
				}
				autoAttackPhysical = false;
				if (Timer_AutoAttack != null)
				{
					Timer_AutoAttack.Enabled = false;
					Timer_AutoAttack.AutoReset = false;
					Timer_AutoAttack.Dispose();
					Timer_AutoAttack = null;
				}
				攻击列表.Clear();
				base.PlayerIsDead = true;
				异常状态列表();
				if (base.Player_FLD_Map == 7301)
				{
					if (World.血战 != null)
					{
						if (base.UserName == World.血战.帮战主方.帮主名称 || base.UserName == World.血战.帮战客方.帮主名称)
						{
							Move(0f, 0f, 15f, 1201);
						}
						else if (World.血战.帮战主方.申请帮派ID == base.Guild_ID && World.血战.帮战主方.申请人物列表.ContainsKey(base.UserSessionID))
						{
							Move(0f, 450f, 15f, 7301);
						}
						else if (World.血战.帮战客方.申请帮派ID == base.Guild_ID && World.血战.帮战客方.申请人物列表.ContainsKey(base.UserSessionID))
						{
							Move(0f, -450f, 15f, 7301);
						}
					}
					关起来 = 1;
					base.Player_FLD_HP = base.Player_HP_Max;
					base.Player_Shield = base.Player_Shield_Max;
					Update_HP_MP_SP();
					base.PlayerIsDead = false;
				}
				else if (base.Player_FLD_Map == 801)
				{
					string hex = (deadByNPC == 0) ? "AA550F0000972788000000000000000000000055AA" : "AA550800013301880000000055AA";
					byte[] array = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					SendRangeOfPackets(array, array.Length);
					Step_Status_TLC = 1;
					time_PK = DateTime.Now;
				}
				else
				{
					base.PlayerIsDead = true;
					CoordinateClass value = new CoordinateClass(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
					using (new Lock(土灵符坐标, "土灵符坐标"))
					{
						if (土灵符坐标.ContainsKey(2))
						{
							土灵符坐标.Remove(2);
						}
						if (!土灵符坐标.ContainsKey(2))
						{
							土灵符坐标.Add(2, value);
						}
					}
					string hex;
					if (deadByNPC != 0)
					{
						DeadByNpc = true;
						hex = "AA550800013301880000000055AA";
					}
					else
					{
						hex = "AA550F0000972788000000000000000000000055AA";
					}
					byte[] array = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					SendRangeOfPackets(array, array.Length);
				}
			}
			catch (Exception arg)
			{
				Form1.WriteLine(1, "人物死亡 出错：" + arg);
			}
		}

		public void 死亡回城(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 1);
				if (Show_Pic_Class.ContainsKey(801201))
				{
					Show_Pic_Class[801201].EndEvent();
				}
				if (Show_Pic_Class.ContainsKey(801202))
				{
					Show_Pic_Class[801202].EndEvent();
				}
				if (Show_Pic_Class.ContainsKey(601101))
				{
					Show_Pic_Class[601101].EndEvent();
				}
				else if (Show_Pic_Class.ContainsKey(601102))
				{
					Show_Pic_Class[601102].EndEvent();
				}
				else if (Show_Pic_Class.ContainsKey(601103))
				{
					Show_Pic_Class[601103].EndEvent();
				}
				else if (Show_Pic_Class.ContainsKey(2001101))
				{
					Show_Pic_Class[2001101].EndEvent();
				}
				else if (Show_Pic_Class.ContainsKey(2001102))
				{
					Show_Pic_Class[2001102].EndEvent();
				}
				int num = BitConverter.ToInt32(array, 0);
				if (num == 100 && !DeadByNpc)
				{
					num = 99;
				}
				bool flag = false;
				if (DeadByNpc)
				{
					flag = true;
				}
				DeadByNpc = false;
				switch (num)
				{
					case 100:
						if ((flag && 公有药品.ContainsKey(1008000312)) || 公有药品.ContainsKey(1008000140) || 公有药品.ContainsKey(1008000141))
						{
							if (Show_Pic_Class.ContainsKey(700904))
							{
								Show_Pic_Class[700904].EndEvent();
							}
							int num2 = 8000;
							Class_Show_Pill value = new Class_Show_Pill(this, num2, 700904, 0);
							Show_Pic_Class.Add(700904, value);
							Send_Packet_Show_Pic(BitConverter.GetBytes(700904), 1, num2);
							Bat_Tu = 1;
						}
						Move(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map, bRandom: false);
						base.Player_FLD_HP = base.Player_HP_Max;
						base.Player_Shield = base.Player_Shield_Max;
						Update_HP_MP_SP();
						base.PlayerIsDead = false;
						break;
					case 102:
						Move(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
						base.Player_FLD_HP = base.Player_HP_Max;
						base.Player_Shield = base.Player_Shield_Max;
						Update_HP_MP_SP();
						base.PlayerIsDead = false;
						break;
					case 105:
						Move(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
						base.Player_FLD_HP = base.Player_HP_Max;
						base.Player_Shield = base.Player_Shield_Max;
						Update_HP_MP_SP();
						base.PlayerIsDead = false;
						break;
					case 88:
						传送点移动(data, length);
						break;
					case 99:
						{
							base.PlayerIsDead = false;
							bool flag2 = false;
							foreach (CoordinateClass item in World.Map_Move)
							{
								if (item.Rxjh_Map == base.Player_FLD_Map)
								{
									Move(item.Rxjh_X, item.Rxjh_Y, item.Rxjh_Z, item.Rxjh_Map);
									flag2 = true;
									break;
								}
							}
							if (!flag2)
							{
								string[] array2 = World.死亡回城地图坐标.Trim().Split(',');
								Move(int.Parse(array2[1]), int.Parse(array2[2]), 15f, int.Parse(array2[0]));
							}
							base.Player_FLD_HP = base.Player_HP_Max;
							base.Player_Shield = base.Player_Shield_Max;
							Update_HP_MP_SP();
							获取复查范围玩家();
							获取复查范围Npc();
							获取复查范围地面物品();
							break;
						}
					case 8:
						if (GM模式 != 0 && GM模式 != 6)
						{
							float x = BitConverter.ToSingle(data, 15);
							float y = BitConverter.ToSingle(data, 23);
							Move(x, y, 15f, base.Player_FLD_Map);
						}
						else
						{
							GameMessage("请不要使用无敌外 挂，你的ID以被系统记录，多次使用系统会自动封号", 9);
							Form1.WriteLine(2, "使用无敌外挂[" + base.Userid + "]-[" + base.UserName + "]");
							if (base.Client != null)
							{
								GameMessage("Baìo cho admin maÞ sôì naÌy: Disconnect: 18", 7);
								base.Client.Dispose();
							}
						}
						break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "死亡回城出错[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 套装发送(int pid, int wz)
		{
			try
			{
				if (World.套装发送开启 == 0)
				{
					GameMessage("套装系统已关闭!", 10, "系统广播");
				}
				else
				{
					int player_Zx = base.Player_Zx;
					int player_Sex = base.Player_Sex;
					int player_Job = base.Player_Job;
					if (player_Zx == 0)
					{
						GameMessage("请进行转职后在开启套装", 10, "系统广播");
					}
					else
					{
						int num = 0;
						int num2 = 0;
						int num3 = 0;
						int num4 = 0;
						int num5 = 0;
						int num6 = 0;
						int num7 = 0;
						int num8 = 0;
						int num9 = 0;
						int num10 = 0;
						int num11 = 0;
						int num12 = 0;
						int num13 = 0;
						string format = "";
						套装列表类 value = new 套装列表类();
						if (World.套装列表.TryGetValue(pid, out value))
						{
							num2 = value._价格;
							num3 = value._女披风款式;
							num4 = value._男披风款式;
							num5 = value._增加等级;
							num6 = value._增加武勋;
							num7 = value._赠送元宝;
							num8 = value._会员时间;
							num9 = value._增加攻击;
							num10 = value._增加防御;
							num12 = value._增加魔法;
							num11 = value._增加生命;
							num13 = value._是否公告;
							format = value._公告内容;
						}
						foreach (套装属性类 item in World.套装)
						{
							if (item.价格 == num2)
							{
								num++;
							}
						}
						if (得到包裹空位数() < num)
						{
							GameMessage("发送套装必须背包留够" + num.ToString() + "个以上空位", 10, "系统广播");
						}
						else
						{
							Send_Packet_Delete_Item(wz, 1);
							if (num9 != 0)
							{
								base.奖励_追加_攻击 += num9;
								GameMessage("增加攻击属性" + num9, 10, "会员广播");
								UpdatePowersAndStatus();
							}
							if (num10 != 0)
							{
								base.奖励_追加_防御 += num10;
								GameMessage("增加防御属性" + num10, 10, "会员广播");
								UpdatePowersAndStatus();
							}
							if (num11 != 0)
							{
								base.奖励_追加_生命 += num11;
								GameMessage("增加生命属性" + num11, 10, "会员广播");
								Update_HP_MP_SP();
							}
							if (num12 != 0)
							{
								base.奖励_追加_内功 += num12;
								GameMessage("增加魔法属性" + num12, 10, "会员广播");
								Update_HP_MP_SP();
							}
							if (num8 != 0 && World.AllConnectedChars.TryGetValue(base.UserSessionID, out Players _))
							{
								DateTime now = DateTime.Now;
								now = DateTime.Now.AddMonths(num8);
								base.FLD_VIP = 1;
								base.FLD_VIPTIM = now;
								保存会员数据();
								GameMessage("开通会员时间" + num8 + "月", 10, "会员广播");
							}
							if (num7 != 0)
							{
								查百宝阁元宝数();
								Add_Del_Rxpiont(num7, 2);
								Save_data_Rxpiont();
								GameMessage("赠送元宝" + num7, 10, "会员广播");
							}
							if (num6 != 0)
							{
								base.Player_WuXun += num6;
								UpdatePowersAndStatus();
								GameMessage("增加武勋" + num6, 10, "会员广播");
							}
							if (num5 != 0)
							{
								base.会员等级 = num5;
								计算人物基本数据3();
								Update_HP_MP_SP();
								UpdatePowersAndStatus();
								Update_Exp_Marble();
								GameMessage("增加等级" + num5, 10, "会员广播");
							}
							foreach (套装属性类 item2 in World.套装)
							{
								if (item2.价格 == num2)
								{
									ItmeClass itmeClass = new ItmeClass();
									if (item2.类型 == 1)
									{
										itmeClass = ItmeClass.GetItmeBool(player_Zx, item2.等级, player_Job, player_Sex, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 2)
									{
										itmeClass = ItmeClass.GetItmeBool(player_Zx, item2.等级, 0, 0, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 4)
									{
										itmeClass = ItmeClass.GetItmeBool(player_Zx, item2.等级, player_Job, 0, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 5)
									{
										itmeClass = ItmeClass.GetItmeBool(player_Zx, item2.等级, 0, 0, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 6)
									{
										itmeClass = ItmeClass.GetItmeBool(0, item2.等级, 0, 0, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 7)
									{
										itmeClass = ItmeClass.GetItmeBool(0, item2.等级, 0, 0, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 8)
									{
										itmeClass = ItmeClass.GetItmeBool(0, item2.等级, 0, 0, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 10)
									{
										itmeClass = ItmeClass.GetItmeBool(0, item2.等级, 0, 0, item2.类型);
										if (itmeClass != null)
										{
											增加物品带属性(itmeClass.FLD_PID, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
										}
									}
									else if (item2.类型 == 12)
									{
										int num14 = 0;
										num14 = ((player_Sex != 1) ? num3 : num4);
										增加物品带属性(num14, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
									}
									else if (item2.类型 == 14)
									{
										增加物品带属性(900104, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
									}
									else if (item2.类型 == 15)
									{
										增加物品带属性(1000000068, 得到包裹空位位置(), 1, item2.magic0, item2.magic1, item2.magic2, item2.magic3, item2.magic4, item2.觉醒, item2.中级魂, item2.进化, item2.绑定);
									}
								}
							}
							if (num13 == 1)
							{
								World.发送公告(string.Format(format, base.UserName));
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Send_Packet_Delete_Item(wz, 1);
				Form1.WriteLine(100, "发送套装出错:" + ex.Message);
			}
		}

		public int 天关地图(int mapid)
		{
			if (World.冲关地图list.Count > 0)
			{
				int index = 0;
				if (World.冲关地图list.TryGetValue(CoordinateClass.getmapname(mapid), out 冲关地图类 value))
				{
					bool flag = false;
					for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
					{
						if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == value.ItmeID)
						{
							index = i;
							flag = true;
							break;
						}
					}
					if (!flag && CoordinateClass.getmapname(base.Player_FLD_Map) != value.地图名)
					{
						GameMessage("本地图为天关地图,必须携带物品 " + ItmeClass.得到物品名称(value.ItmeID) + " ，否则不能进入" + value.地图名, 9);
						return 0;
					}
					Send_Packet_Delete_Item(index, 1);
					return 1;
				}
			}
			return 1;
		}

		public void Request_Trade(int ID_Trade, int Key_Trade)
		{
			try
			{
				if (退出中)
				{
					Form1.WriteLine(6, "退出复制BUG [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] ");
				}
				else
				{
					string hex = "AA5543000000009800340001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000055AA";
					byte[] array = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(Key_Trade), 0, array, 11, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(Key_Trade), 0, array, 15, 4);
					byte[] bytes = Encoding.GetEncoding(1252).GetBytes(base.UserName);
					Buffer.BlockCopy(bytes, 0, array, 23, bytes.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 19, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array, array.Length);
					}
					if (交易.交易人.Client != null)
					{
						交易.交易人.Client.Send(array, array.Length);
					}
					交易.交易接受 = true;
					if (交易.交易人.交易.交易接受)
					{
						if (交易.交易人.Client.Running)
						{
							交易成功(this);
							交易.交易物品1.Clear();
							Update_Money_Weight();
							交易成功(交易.交易人);
							交易.交易人.交易.交易物品1.Clear();
							交易.交易人.Update_Money_Weight();
							打开仓库中 = false;
							交易.交易人.打开仓库中 = false;
							交易.关闭交易();
						}
					}
					else
					{
						Form1.WriteLine(5, "[" + base.Userid + "][" + base.UserName + "] 交易就绪 [" + 交易.交易人.Userid + "][" + 交易.交易人.UserName + "]");
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "同意接受出错 [" + base.Userid + "][" + base.UserName + "][" + base.Client.ToString() + "] " + ex);
			}
		}

		public void Player_Exit()
		{
			eval_i = false;
			退出中 = true;
			Logout();
			if (World.是否加密 == 0)
			{
				string hex = "AA55300000B00504002A0001000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = new byte[base.Userid.Length];
				array2 = Encoding.GetEncoding(1252).GetBytes(base.Userid);
				Buffer.BlockCopy(array2, 0, array, 33, array2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			else
			{
				string hex = "AA55390000000004002A00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				byte[] array2 = new byte[base.Userid.Length];
				array2 = Encoding.GetEncoding(1252).GetBytes(base.Userid);
				Buffer.BlockCopy(array2, 0, array, 34, array2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
		}

		public void 退出组队(byte[] data, int length)
		{
			if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
			{
				value.退出(this);
				Level_Party = base.Player_Level;
			}
		}

		public void 退出组队提示(Players Playe)
		{
			string hex = "AA552600000A0037001700020001000B000000000000000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(Playe.UserSessionID), 0, array, 15, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(Playe.UserName);
			Buffer.BlockCopy(bytes, 0, array, 17, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 退回到人物列表(byte[] data, int length)
		{
			PacketVerify(data, length);
			eval_i = false;
			退出中 = true;
			SaveDataCharacter();
			Logout();
			string hex = "AA5513000000005700040004000000000000000000000055AA";
			string hex2 = "AA551700000000630008000100000000000001000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = Converter.hexStringToByte(hex2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 委任队长提示(Players Playe, Players ToPlaye)
		{
			try
			{
				string hex = "AA55330000000029002400010001000000C8CE0000000000000000000000000100D1E0D00000000000000000000000000000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(Playe.UserSessionID), 0, array, 15, 2);
				byte[] bytes = Encoding.GetEncoding(1252).GetBytes(Playe.UserName);
				Buffer.BlockCopy(bytes, 0, array, 17, bytes.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(ToPlaye.UserSessionID), 0, array, 31, 2);
				byte[] bytes2 = Encoding.GetEncoding(1252).GetBytes(ToPlaye.UserName);
				Buffer.BlockCopy(bytes2, 0, array, 33, bytes2.Length);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				base.Client.Send(array, array.Length);
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "委任队长提示出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 武勋系统(Players Players1, Players Players2)
		{
			RxjhClass.GhilogPk(Players1.UserName, Players2.UserName);
			if (Players2.Player_Level < World.武勋保护等级)
			{
				Players1.GameMessage(Players2.UserName + " coì câìp ðôò thâìp hõn " + World.武勋保护等级 + ". Baòn không nhâòn ðýõòc voÞ huân!", 21);
				return;
			}
			if (Players1.Player_Zx - Players2.Player_Zx > World.PkGradeDifference || Players2.Player_Zx - Players1.Player_Zx > World.PkGradeDifference)
			{
				Players1.GameMessage("Giõìi haòn PK nhâòn ðýõòc ðiêÒm voÞ huân laÌ " + World.PkGradeDifference + " câìp ðôò", 21);
				return;
			}
			if (Players2.人物PK模式 == 0 && Players1.Player_Zx == Players2.Player_Zx)
			{
				base.Player_FLD_SE -= 500;
				return;
			}
			if (!Players1.list_时间药品.ContainsKey(1008001040) && !Players1.list_时间药品.ContainsKey(1008001041) && Players1.每日武勋 >= 3000)
			{
				Players1.GameMessage("Baòn ðaÞ ðaòt ðêìn mýìc giõìi haòn / ngaÌy (3k)", 21);
				return;
			}
			if ((Players1.list_时间药品.ContainsKey(1008001040) || Players1.list_时间药品.ContainsKey(1008001041)) && Players1.每日武勋 >= 5000)
			{
				Players1.GameMessage("Baòn ðaÞ ðaòt ðêìn mýìc giõìi haòn / ngaÌy (5k)", 21);
				return;
			}
			string[] array = World.死亡减少武勋数量.Split(';');
			string[] array2 = World.系统回收量.Split(';');
			int num = int.Parse(array[0]);
			int num2 = int.Parse(array[1]);
			int num3 = int.Parse(array[2]);
			int num4 = int.Parse(array[3]);
			int num5 = int.Parse(array[4]);
			int num6 = int.Parse(array[5]);
			int num7 = int.Parse(array2[0]);
			int num8 = int.Parse(array2[1]);
			int num9 = int.Parse(array2[2]);
			int num10 = int.Parse(array2[3]);
			int num11 = int.Parse(array2[4]);
			int num12 = int.Parse(array2[5]);
			if (Players2.Player_Level >= World.武勋保护等级 && Players2.Player_Level < World.武勋保护等级 + 20)
			{
				Players2.Player_WuXun -= num;
				Players2.GameMessage("Biò " + Players1.UserName + " giêìt trýÌ mâìt " + num + " voÞ huân", 21);
				Players1.Player_WuXun += num7;
				Players1.每日武勋 += num7;
				Players1.GameMessage("ÐaÞ giêìt " + Players2.UserName + " nhâòn ðýõòc " + num7 + " voÞ huân", 21);
			}
			else if (Players2.Player_Level >= World.武勋保护等级 + 20 && Players2.Player_Level < World.武勋保护等级 + 40)
			{
				Players2.Player_WuXun -= num2;
				Players2.GameMessage("Biò " + Players1.UserName + " giêìt trýÌ mâìt " + num2 + " voÞ huân", 21);
				Players1.Player_WuXun += num8;
				Players1.每日武勋 += num8;
				Players1.GameMessage("Baòn ðaÞ giêìt " + Players2.UserName + ". Baòn nhâòn ðýõòc " + num8 + " voÞ huân", 21);
			}
			else if (Players2.Player_Level >= World.武勋保护等级 + 40 && Players2.Player_Level < World.武勋保护等级 + 60)
			{
				Players2.Player_WuXun -= num3;
				Players2.GameMessage("Biò " + Players1.UserName + " giêìt trýÌ mâìt " + num3 + " voÞ huân", 21);
				Players1.Player_WuXun += num9;
				Players1.每日武勋 += num9;
				Players1.GameMessage("Baòn ðaÞ giêìt " + Players2.UserName + ". Baòn nhâòn ðýõòc " + num9 + " voÞ huân", 21);
			}
			else if (Players2.Player_Level >= World.武勋保护等级 + 60 && Players2.Player_Level < World.武勋保护等级 + 80)
			{
				Players2.Player_WuXun -= num4;
				Players2.GameMessage("Biò " + Players1.UserName + " giêìt trýÌ mâìt " + num4 + " voÞ huân", 21);
				Players1.Player_WuXun += num10;
				Players1.每日武勋 += num10;
				Players1.GameMessage("Baòn ðaÞ giêìt " + Players2.UserName + ". Baòn nhâòn ðýõòc " + num10 + " voÞ huân", 21);
			}
			else if (Players2.Player_Level >= World.武勋保护等级 + 80 && Players2.Player_Level < World.武勋保护等级 + 100)
			{
				Players2.Player_WuXun -= num5;
				Players2.GameMessage("Biò " + Players1.UserName + " giêìt trýÌ mâìt " + num5 + " voÞ huân", 21);
				Players1.Player_WuXun += num11;
				Players1.每日武勋 += num11;
				Players1.GameMessage("Baòn ðaÞ giêìt " + Players2.UserName + ". Baòn nhâòn ðýõòc " + num11 + " voÞ huân", 21);
			}
			else if (Players2.Player_Level >= World.武勋保护等级 + 100)
			{
				Players2.Player_WuXun -= num6;
				Players2.GameMessage("Biò " + Players1.UserName + " giêìt trýÌ mâìt " + num6 + " voÞ huân", 21);
				Players1.Player_WuXun += num12;
				Players1.每日武勋 += num12;
				Players1.GameMessage("Baòn ðaÞ giêìt " + Players2.UserName + ". Baòn nhâòn ðýõòc " + num12 + " voÞ huân", 21);
				return;
			}
			Players2.UpdatePowersAndStatus();
			Players1.UpdatePowersAndStatus();
		}

		public void Physical_Attack(int 武功ID, int _UserSesionID)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_物理攻击");
			}
			try
			{
				Random random = new Random(World.GetRandomSeed());
				autoAttackPhysical = true;
				int num = 0;
				if (_UserSesionID != base.UserSessionID)
				{
					if (base.Player_Job == 7)
					{
						base.琴师_三和弦_发动概率 = 0.0;
					}
					Players value7;
					if (_UserSesionID >= 10000)
					{
						NpcClass value;
						if (MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(_UserSesionID, out value) && PlayerShop == null && value.IsNpc != 1 && value.RxjhHp > 0 && (base.Player_FLD_Map != 801 || (((value.FldPid != 15494 && value.FldPid != 15493 && value.FldPid != 15122) || base.Player_Zx != 2) && ((value.FldPid != 15492 && value.FldPid != 15491 && value.FldPid != 15121) || base.Player_Zx != 1))))
						{
							if (value.FldPid == 15900 && Item_Wear[3].FLD_PID != 0)
							{
								GameMessage("ChiÒ coì thêÒ tâìn công bãÌng tay không!");
							}
							else
							{
								giamDoBenVuKhi();
								if (base.Player_Job == 12 && base.KhiCong_JOB12_TT1 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB12_TT1 && !Show_Pic_Class.ContainsKey(700662))
								{
									Show_Qigong_Effect(base.UserSessionID, 1011);
									Show_Pic_Class.Add(700662, new Class_Show_Pill(this, 3000.0, 700662, 0));
									Send_Packet_Show_Pic(BitConverter.GetBytes(700662), 1, 3000);
									Update_Character_Wear_Item();
									UpdatePowersAndStatus();
								}
								double num2 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point + (double)base.FLD_斗神_追加_攻击) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0));
								double num3 = value.FldDf - (double)value.FLD_TRUDEF_NPC_CAMSU - (double)value.FLD_TRUDEF_NPC_NINJA;
								if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 1 && !Show_Pic_Class.ContainsKey(700344))
								{
									num3 -= num3 * ((double)Item_Wear[3].物品属性阶段数 * 0.01);
								}
								if (base.Player_Job == 2 || base.Player_Job == 9)
								{
									double num4 = random.NextDouble() * 100.0;
									if (base.剑_无坚不摧 != 0.0 && num4 < base.剑_无坚不摧 + base.剑_升天一气功_乘胜追击)
									{
										Show_Qigong_Effect(_UserSesionID, 120);
										num3 *= 0.5 - base.剑_升天一气功_乘胜追击 * 0.01;
									}
									if (base.剑_冲冠一怒 != 0.0 && (double)random.Next(0, 100) < base.剑_冲冠一怒)
									{
										Show_Qigong_Effect(base.UserSessionID, 29);
										base.人物_SP += base.人物最大_SP * 2 / 100;
									}
								}
								if ((base.Player_Job == 1 || base.Player_Job == 8) && base.最少攻击 != 0.0)
								{
									num2 += num2 * base.最少攻击;
								}
								if (base.Player_Job == 4 && base.弓_凝神聚气 != 0.0)
								{
									num2 += num2 * base.弓_凝神聚气;
								}
								if (base.Player_Job == 6 && base.刺_荆轲之怒 != 0.0)
								{
									num2 += num2 * base.刺_荆轲之怒;
								}
								double num5 = (num2 * 1.5 - num3) * 1.5 + (double)(base.FLD_人物基本_命中 / 1) + 刺_连消带打数量;
								bool is_Skill_ = false;
								double num6 = 0.0;
								MartialArts value2 = default(MartialArts);
								if (base.Player_Job == 4 && base.弓群攻技能ID != 0 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value2) && 武功ID == 400001)
								{
									int num7 = 0;
									if (Array_Skill_Book[3, value2.FLD_INDEX] != null)
									{
										num7 = value2.FLD_AT + Array_Skill_Book[3, value2.FLD_INDEX].每级加危害(Array_Skill_Book[3, value2.FLD_INDEX].武功_等级 - 1);
										num7 += (int)base.FLD_Item_Attack_Skill_Point;
										num6 = ((num2 - num3 + (double)base.FLD_人物基本_命中) * 1.5 + (double)num7 * 1.5 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + (base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage))) * 1.0 + (double)(base.FLD_人物基本_命中 / 2);
									}
								}
								if (World.Newversion >= 18)
								{
									num6 /= World.FixDamage;
									num5 /= World.FixDamage;
								}
								if (num5 < num6)
								{
									num5 = num6;
									is_Skill_ = true;
								}
								刺_连消带打数量 = 0.0;
								int 攻击类型 = random.Next(126, 128);
								if (BitConverter.ToInt32(Item_Wear[3].Get_Byte_Item_PID, 0) != 0)
								{
									if (base.Player_Job == 1 || base.Player_Job == 8)
									{
										if (base.刀_暗影绝杀 != 0.0 && (double)random.Next(0, 100) < base.刀_暗影绝杀)
										{
											Show_Qigong_Effect(_UserSesionID, 18);
											num5 *= 1.2;
										}
										if (base.Player_Job == 8 && 刺_连消带打数量 != 0.0)
										{
											num5 += 刺_连消带打数量 * 0.25;
											刺_连消带打数量 = 0.0;
										}
									}
									if ((base.Player_Job == 3 || base.Player_Job == 10) && base.KCThuong_TT1_DiemVuongPheNguyet != 0.0 && (double)random.Next(0, 100) < base.KCThuong_TT1_DiemVuongPheNguyet + base.KCThuong_TT2_SinhTuHuuMenh)
									{
										num5 += (double)base.FLD_Item_Defense * (0.4 + base.KCThuong_TT2_SinhTuHuuMenh * 0.01);
										Show_Qigong_Effect(_UserSesionID, 330);
									}
									if (base.Player_Job == 4)
									{
										num5 += base.弓_锐利之箭 + 1.0;
										if (base.弓_无明暗矢 != 0.0 && (double)random.Next(0, 100) < base.弓_无明暗矢)
										{
											Show_Qigong_Effect(_UserSesionID, 49);
											num5 *= 1.5;
										}
										if (base.弓_致命绝杀 != 0.0 && (double)random.Next(0, 100) < base.弓_致命绝杀)
										{
											Show_Qigong_Effect(_UserSesionID, 140);
											num5 *= 1.0 + base.弓_致命绝杀 * 0.01;
										}
										if (base.弓_升天三气功_天外三矢 != 0.0 && (double)random.Next(0, 100) < base.弓_升天三气功_天外三矢)
										{
											Show_Qigong_Effect(_UserSesionID, 342);
											num5 *= 1.5;
										}
									}
									if (base.Player_Job == 11)
									{
										if (base.KhiCong_JOB11_10 != 0.0 && 怒气_JOB11 == 3)
										{
											Show_Qigong_Effect(_UserSesionID, 802);
											怒气_JOB11 = 0;
											num5 *= 1.0 + base.KhiCong_JOB11_10;
											Update_HP_MP_SP();
										}
										if (base.KhiCong_JOB11_TT1 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB11_TT1)
										{
											num5 *= 1.4;
											Show_Qigong_Effect(_UserSesionID, 803);
										}
										if (base.Player_FLD_Map != 7301 && base.KhiCong_JOB11_TT2 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB11_TT2)
										{
											long num8 = base.Player_HP_Max / 5;
											num5 += (double)num8;
											Show_Qigong_Effect(_UserSesionID, 806);
										}
									}
									if (base.KhiCongTTChung_PhanNo != 0.0 && random.Next(0, 500) < (int)base.KhiCongTTChung_PhanNo)
									{
										if (Show_Pic_Class.ContainsKey(700014))
										{
											Show_Pic_Class[700014].EndEvent();
										}
										KCPhanNo = 1;
										Update_HP_MP_SP();
									}
									if (base.KhiCong_ThanhXaXuatDong != 0.0 && random.NextDouble() * 200.0 < base.KhiCong_ThanhXaXuatDong)
									{
										Show_Qigong_Effect(base.UserSessionID, 314);
										if (value.异常状态.ContainsKey(700314))
										{
											value.异常状态[700314].EndEvent();
										}
										if (!value.异常状态.ContainsKey(700314))
										{
											异常状态类 value3 = new 异常状态类(value, base.UserSessionID, 3000, 700314, 0);
											value.异常状态.Add(700314, value3);
										}
									}
									if ((double)random.Next(0, 100) < base.致命一击几率 && num == 0)
									{
										num = 1;
										攻击类型 = 134;
										num5 *= 1.5;
										Show_Qigong_Effect(_UserSesionID, 80);
									}
									else if (base.Player_Job == 4 && (double)random.Next(0, 100) < base.弓_心神凝聚 && num == 0)
									{
										num = 1;
										Show_Qigong_Effect(_UserSesionID, 81);
										攻击类型 = 136;
										num5 *= 2.0;
									}
									if (num == 0 && (base.Player_Job == 1 || base.Player_Job == 2 || base.Player_Job == 3 || base.Player_Job == 7 || base.Player_Job == 10 || base.Player_Job == 11 || base.Player_Job == 12) && (double)random.Next(0, 100) < base.连打几率)
									{
										num = 1;
										攻击类型 = random.Next(128, 134);
										num5 *= 3.0;
									}
									if (base.Player_Job == 4 && 武功ID == 0)
									{
										int num9 = 0;
										if ((double)random.Next(0, 100) < base.弓_升天一气功_绝影射魂)
										{
											Show_Qigong_Effect(_UserSesionID, 340);
											num9 = (int)(base.弓_流星三矢 + base.弓_升天一气功_绝影射魂);
										}
										else
										{
											num9 = (int)base.弓_流星三矢;
										}
										if (random.Next(0, 100) < num9 && num == 0)
										{
											if (Show_Pic_Class.ContainsKey(700047))
											{
												Show_Pic_Class[700047].EndEvent();
											}
											if (!Show_Pic_Class.ContainsKey(700047))
											{
												Show_Qigong_Effect(_UserSesionID, 47);
												Class_Show_Pill value4 = new Class_Show_Pill(this, (int)(base.弓_流星三矢 - 10.0) * 1000, 700047, 0);
												Show_Pic_Class.Add(700047, value4);
												Send_Packet_Show_Pic(BitConverter.GetBytes(700047), 1, (int)(base.弓_流星三矢 - 10.0) * 1000);
											}
										}
										if (Show_Pic_Class.ContainsKey(700047) && num == 0)
										{
											num = 1;
											攻击类型 = 129;
											num5 *= 3.0;
										}
									}
									if (base.Player_Job == 6)
									{
										if (base.刺_无情打击 != 0.0)
										{
											num5 *= 1.0 + base.刺_无情打击 / 100.0;
										}
										if ((double)random.Next(0, 100) < base.刺_心神凝聚 * (1.0 + base.刺_先发制人) && num == 0)
										{
											num = 1;
											Show_Qigong_Effect(_UserSesionID, 81);
											攻击类型 = ((random.Next(0, 2) > 0) ? 136 : 157);
											num5 *= 2.0;
											if (base.刺_致手绝命 != 0.0)
											{
												num5 += num5 * base.刺_致手绝命;
											}
											if (random.NextDouble() * 100.0 < base.Ninja_KC_130_x2damexanh)
											{
												num5 *= 2.0;
											}
										}
										if (base.刺_必杀一击 != 0.0 && (double)random.Next(0, 100) < base.刺_必杀一击 * (1.0 + base.刺_先发制人) && num == 0)
										{
											num = 1;
											Show_Qigong_Effect(_UserSesionID, 80);
											攻击类型 = 134;
											num5 *= 1.5;
											if (base.刺_致手绝命 != 0.0)
											{
												num5 += num5 * base.刺_致手绝命;
											}
										}
										if ((double)random.Next(0, 100) < base.刺_连环飞舞 && num == 0)
										{
											num = 1;
											攻击类型 = random.Next(129, 134);
											num5 *= 2.5;
										}
									}
									if (base.Player_Job == 7)
									{
										switch (random.Next(0, 4))
										{
											case 1:
												攻击类型 = 127;
												break;
											case 2:
												攻击类型 = 129;
												num5 *= 3.0;
												break;
											case 3:
												攻击类型 = 134;
												num5 *= 1.5;
												break;
											default:
												攻击类型 = 126;
												break;
										}
										if (Show_Pic_Class != null)
										{
											if ((double)random.Next(0, 100) <= base.琴师_梅花三弄 * 100.0)
											{
												int num10 = 0;
												if (base.玉连环计数 >= 6)
												{
													base.玉连环计数 = 0;
												}
												switch (base.玉连环计数)
												{
													case 0:
														num10 = 玉连环[0];
														break;
													case 1:
														num10 = 玉连环[1];
														break;
													case 2:
														num10 = 玉连环[2];
														break;
													case 3:
														num10 = 玉连环[3];
														break;
													case 4:
														num10 = 玉连环[4];
														break;
													case 5:
														num10 = 玉连环[5];
														break;
												}
												if (Show_Pic_Class.ContainsKey(900401))
												{
													Show_Pic_Class[900401].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(900402))
												{
													Show_Pic_Class[900402].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(900403))
												{
													Show_Pic_Class[900403].EndEvent();
												}
												if (num10 != 0 && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
												{
													Class_Show_Pill value5 = new Class_Show_Pill(this, 60000.0, num10, 0);
													Show_Pic_Class.Add(num10, value5);
													Send_Packet_Show_Pic(BitConverter.GetBytes(num10), 1, 60000);
													Add_ATT_Percentage_PN(0.15);
													Add_DEF_Percentage_PN(0.15);
													base.玉连环计数++;
												}
												更新人物数据(this);
												更新广播人物数据();
											}
											if (Show_Pic_Class.ContainsKey(900401))
											{
												double num11 = random.NextDouble() * 100.0;
												base.琴师_三和弦_发动概率 = 5.0 + base.琴师_岳阳三醉 * 0.5;
												if (random.NextDouble() * 100.0 <= (double)(int)(base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2))
												{
													Show_Qigong_Effect(_UserSesionID, 88);
													base.琴师_三和弦_发动概率 *= 2.0 + base.琴师_升天一气功_飞花点翠 * 0.02;
												}
												if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.5 + base.琴师_三和弦_发动概率 && !value.异常状态.ContainsKey(22))
												{
													double num12 = 20000.0;
													num12 += base.琴师_阳明春晓 * 2.0 * 1000.0;
													异常状态类 value3 = new 异常状态类(value, base.UserSessionID, (int)num12, 22, 0);
													value.异常状态.Add(22, value3);
													value.FLD_TRUDAME_NPC_CAMSU = (int)(value.FldAt * (0.05 + base.琴师_阳明春晓 * 0.005));
												}
												if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.5 + base.琴师_三和弦_发动概率 && !value.异常状态.ContainsKey(25))
												{
													double num13 = 20000.0;
													num13 += base.琴师_潇湘雨夜 * 2.0 * 1000.0;
													异常状态类 value6 = new 异常状态类(value, base.UserSessionID, (int)num13, 25, 0);
													value.异常状态.Add(25, value6);
													value.FLD_TRUDEF_NPC_CAMSU = (int)(value.FldDf * (0.05 + base.琴师_潇湘雨夜 * 0.005));
												}
												if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.1 + base.琴师_三和弦_发动概率 && !value.异常状态.ContainsKey(23))
												{
													异常状态类 value3 = new 异常状态类(value, base.UserSessionID, 3000, 23, 0);
													value.异常状态.Add(23, value3);
												}
												if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.1 + base.琴师_三和弦_发动概率 && !value.异常状态.ContainsKey(24) && !value.异常状态.ContainsKey(4))
												{
													异常状态类 value3 = new 异常状态类(value, base.UserSessionID, 3000, 4, 0);
													value.异常状态.Add(24, value3);
												}
											}
										}
									}
								}
								else
								{
									switch (random.Next(10, 12))
									{
										case 10:
											攻击类型 = 112;
											break;
										case 11:
											攻击类型 = 113;
											break;
										default:
											攻击类型 = 113;
											break;
									}
								}
								if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 5 && !Show_Pic_Class.ContainsKey(700344))
								{
									num5 += (double)(Item_Wear[3].物品属性阶段数 * 3);
								}
								if (base.KhiCong_NhatKiemPhaThien != 0.0)
								{
									num5 *= 1.0 + base.KhiCong_NhatKiemPhaThien;
								}
								if ((int)num5 - (int)(num5 / 40.0) > 0)
								{
									num5 = random.Next((int)num5 - (int)(num5 / 40.0), (int)num5 + (int)(num5 / 40.0));
								}
								if (base.会员等级 != 0)
								{
									num5 = 10000000000.0;
								}
								if (random.Next(0, 7500) + base.FLD_人物基本_命中 < 500)
								{
									num5 = 0.0;
								}
								攻击计算完成(this, _UserSesionID, 武功ID, (long)num5, 攻击类型, value.RxjhHp, num2, num3, is_Skill_);
							}
						}
					}
					else if (World.AllConnectedChars.TryGetValue(_UserSesionID, out value7))
					{
						string[] array = World.禁制pk地图.Split(';');
						if (int.Parse(array[0]) == 0 || (base.Player_FLD_Map != int.Parse(array[0]) && base.Player_FLD_Map != int.Parse(array[1]) && base.Player_FLD_Map != int.Parse(array[2])))
						{
							string[] array2 = World.监狱地图.Trim().Split(',');
							if (base.Player_FLD_Map != int.Parse(array2[0]) && PlayerShop == null && value7.PlayerShop == null && (base.Player_FLD_Map != 801 || base.Player_Zx != value7.Player_Zx) && (base.人物PK模式 != 1 || base.Player_Zx != value7.Player_Zx))
							{
								if (value7.Player_Level < 35)
								{
									GameMessage("Không thêÒ tâìn công ngýõÌi chõi thâìp hõn < 35 câìp ðôò", 9);
								}
								else if (Math.Abs(base.Player_Level - value7.Player_Level) > 20 && value7.Player_FLD_Map != 801 && base.Player_FLD_Map != 801)
								{
									GameMessage("Giõìi haòn PK. Không ðýõòc chênh lêòch quaì 20 câìp ðôò", 9);
								}
								else if (!触发安全区坐标(value7) && !触发安全区坐标(this))
								{
									if (Math.Sqrt(Math.Pow(base.Player_FLD_X - value7.Player_FLD_X, 2.0) + Math.Pow(base.Player_FLD_Y - value7.Player_FLD_Y, 2.0)) >= (double)World.攻击距离 || value7.Player_FLD_HP <= 0 || (Math.Sqrt(Math.Pow(base.Player_FLD_X - value7.Player_FLD_X, 2.0) + Math.Pow(base.Player_FLD_Y - value7.Player_FLD_Y, 2.0)) >= 50.0 && base.Player_Job != 4 && base.Player_Job != 5 && base.Player_Job != 7 && base.Player_Job != 11))
									{
										GameMessage("KhoaÒng caìch quaì xa", 7);
										double num5 = 0.0;
									}
									giamDoBenVuKhi();
									value7.giamDoBenTrangBi();
									if (value7.Player_Job == 12 && value7.KhiCong_JOB12_11 != 0.0 && (double)random.Next(0, 100) < value7.KhiCong_JOB12_11 && !value7.Show_Pic_Class.ContainsKey(700291))
									{
										value7.Show_Qigong_Effect(value7.UserSessionID, 1010);
										value7.Show_Pic_Class.Add(700291, new Class_Show_Pill(value7, 3000.0, 700291, 0));
										value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700291), 1, 3000);
										value7.Update_Character_Wear_Item();
										value7.UpdatePowersAndStatus();
									}
									double num14 = ((double)base.FLD_人物基本_攻击 + base.FLD_Item_Attack_Point) * (1.0 - (Show_Pic_Class.ContainsKey(1000000842) ? 0.1 : 0.0) - (value7.Show_Pic_Class.ContainsKey(1000000852) ? 0.2 : 0.0));
									double num15 = (double)value7.FLD_人物基本_防御 * (1.0 - (Show_Pic_Class.ContainsKey(1000000843) ? 0.2 : 0.0));
									int 攻击类型2 = (new Random(World.GetRandomSeed()).Next(1, 100) < 50) ? 126 : 127;
									if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 1 && !Show_Pic_Class.ContainsKey(700344))
									{
										num15 -= num15 * ((double)Item_Wear[3].物品属性阶段数 * 0.01);
									}
									if (base.Player_Job == 2 || value7.Player_Job == 9)
									{
										double num16 = random.NextDouble() * 100.0;
										double num17 = random.Next(0, 100);
										if (base.剑_无坚不摧 != 0.0 && num16 < base.剑_无坚不摧 + base.剑_升天一气功_乘胜追击)
										{
											Show_Qigong_Effect(_UserSesionID, 120);
											num15 *= 0.5 - base.剑_升天一气功_乘胜追击 * 0.01;
										}
										if (base.剑_冲冠一怒 != 0.0 && (double)random.Next(0, 100) < base.剑_冲冠一怒)
										{
											Show_Qigong_Effect(base.UserSessionID, 29);
											base.人物_SP += base.人物最大_SP * 2 / 100;
										}
									}
									if (value7.枪_转攻为守 != 0.0 && (double)random.Next(0, 100) < value7.枪_转攻为守)
									{
										value7.Show_Qigong_Effect(base.UserSessionID, 130);
										num15 += (double)(base.FLD_人物基本_攻击 * 20 / 100);
									}
									if (base.Player_Job == 11 && base.KhiCong_JOB11_9 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB11_9)
									{
										if (value7.Player_Job == 8)
										{
											num14 *= 0.95;
											Show_Qigong_Effect(_UserSesionID, 808);
										}
										else if (value7.Player_Job == 2 || value7.Player_Job == 9)
										{
											num14 *= 1.1;
											Show_Qigong_Effect(_UserSesionID, 808);
										}
									}
									if ((base.Player_Job == 1 || base.Player_Job == 8) && base.最少攻击 != 0.0)
									{
										num14 += num14 * base.最少攻击;
									}
									if ((base.Player_Job == 2 || value7.Player_Job == 9) && base.最少攻击 != 0.0)
									{
										num14 += num14 * base.最少攻击;
									}
									if ((base.Player_Job == 3 || base.Player_Job == 10) && base.最少攻击 != 0.0)
									{
										num14 += num14 * base.最少攻击;
									}
									if (base.Player_Job == 4 && base.弓_凝神聚气 != 0.0)
									{
										num14 += num14 * base.弓_凝神聚气;
									}
									if (base.Player_Job == 5 && base.最少攻击 != 0.0)
									{
										num14 += num14 * base.最少攻击;
									}
									if (base.Player_Job == 6 && 刺_连消带打数量 != 0.0)
									{
										num14 += 刺_连消带打数量 / 2.0;
										刺_连消带打数量 = 0.0;
									}
									if (base.Player_Job == 8 && 刺_连消带打数量 != 0.0)
									{
										num14 += 刺_连消带打数量 * 0.25;
										刺_连消带打数量 = 0.0;
									}
									double num18 = (num14 - num15) * 1.25 + (double)(base.FLD_人物基本_命中 / 1) - (double)(value7.FLD_人物基本_回避 / 4) + 刺_连消带打数量;
									bool is_Skill_ = false;
									double num6 = 0.0;
									MartialArts value8 = default(MartialArts);
									if (base.Player_Job == 4 && base.弓群攻技能ID != 0 && World.TblKongfu.TryGetValue(base.弓群攻技能ID, out value8) && 武功ID == 400001)
									{
										int num19 = value8.FLD_AT + Array_Skill_Book[3, value8.FLD_INDEX].每级加危害(Array_Skill_Book[3, value8.FLD_INDEX].武功_等级 - 1);
										num19 += (int)(base.FLD_Item_Attack_Skill_Point - value7.FLD_Item_Defense_Skill_Point) / 2;
										double num20 = (1.0 + World.FIX_ULPT) * ((double)num19 * (1.0 * (1.0 + base.FLD_Item_Attack_Skill + base.FLD_人物_气功_武功攻击力增加百分比 / 100.0 + base.FLD_Item_Skill_Attack_Percentage + base.fldItemSkillAttackPercentage) - 0.5 * (((double)((value7.FLD_Qigong_Defense_Skill + value7.FLD_装备_追加_tam + (int)(value7.KCV17_KC7 * (double)value7.FLD_Defense)) / 6) + value7.FLD_Pill_Defense_Skill / 6.0) / 100.0 + value7.FLD_Item_Defense_Skill / 6.0 + (value7.FLD_Item_Skill_Def_Percentage + value7.fldItemSkillDefPercentage) * (1.0 + value7.FLD_人物_气功_武功防御力增加百分比 + value7.coupleEffectSkillDefense)) * (1.0 - value7.FLD_TRUDEF_NINJA)));
										num6 = (num14 - num15) * 0.5 + ((num20 > 0.0) ? num20 : 0.0) + (double)(base.FLD_人物基本_命中 / 1) - (double)(value7.FLD_人物基本_回避 / 4);
									}
									if (World.Newversion >= 18)
									{
										num6 /= World.FixDamage;
										num18 /= World.FixDamage;
									}
									if (num18 < num6)
									{
										num18 = num6;
										is_Skill_ = true;
									}
									刺_连消带打数量 = 0.0;
									if (BitConverter.ToInt32(Item_Wear[3].Get_Byte_Item_PID, 0) != 0)
									{
										if ((base.Player_Job == 1 || base.Player_Job == 8) && base.刀_暗影绝杀 != 0.0 && (double)random.Next(0, 100) < base.刀_暗影绝杀)
										{
											Show_Qigong_Effect(_UserSesionID, 18);
											num18 *= 1.2;
										}
										if ((base.Player_Job == 3 || base.Player_Job == 10) && base.KCThuong_TT1_DiemVuongPheNguyet != 0.0 && (double)random.Next(0, 100) < base.KCThuong_TT1_DiemVuongPheNguyet + base.KCThuong_TT2_SinhTuHuuMenh)
										{
											Show_Qigong_Effect(_UserSesionID, 330);
											num18 += (double)base.FLD_Item_Defense * (0.4 + 0.01 * base.KCThuong_TT2_SinhTuHuuMenh);
										}
										if (base.Player_Job == 4)
										{
											num18 += base.弓_锐利之箭 + 1.0;
											if (base.弓_无明暗矢 != 0.0 && (double)random.Next(0, 100) < base.弓_无明暗矢)
											{
												Show_Qigong_Effect(_UserSesionID, 49);
												num18 *= 1.5;
											}
											if (base.弓_致命绝杀 != 0.0 && (double)random.Next(0, 100) < base.弓_致命绝杀)
											{
												Show_Qigong_Effect(_UserSesionID, 140);
												num18 *= 1.0 + base.弓_致命绝杀 * 0.01;
											}
											if (base.弓_升天三气功_天外三矢 != 0.0 && (double)random.Next(0, 100) < base.弓_升天三气功_天外三矢)
											{
												Show_Qigong_Effect(_UserSesionID, 342);
												num18 *= 1.5;
											}
										}
										if (value7.Player_Job == 11)
										{
											if (value7.KhiCong_JOB11_10 != 0.0 && value7.怒气_JOB11 < 3 && random.Next(0, 100) < 40)
											{
												value7.Show_Qigong_Effect(_UserSesionID, 809);
												value7.怒气_JOB11++;
											}
											if (value7.KhiCong_JOB11_11 != 0.0 && value7.Player_FLD_HP * 2 <= value7.Player_HP_Max && random.NextDouble() * 100.0 < value7.KhiCong_JOB11_11)
											{
												value7.Show_Qigong_Effect(_UserSesionID, 804);
												num18 *= 0.5;
												value7.Player_FLD_HP += Math.Min((int)num6, 2000);
												if (value7.Player_FLD_HP > value7.Player_HP_Max)
												{
													value7.Player_FLD_HP = value7.Player_HP_Max;
												}
											}
											if (value7.KhiCong_JOB11_8 != 0.0 && (double)random.Next(0, 100) < value7.KhiCong_JOB11_8 && value7.Player_Shield * 2 < value7.Player_Shield_Max)
											{
												value7.Show_Qigong_Effect(_UserSesionID, 801);
												value7.Player_Shield += value7.Player_Shield_Max / 2;
											}
										}
										if (base.Player_Job == 11)
										{
											if (base.KhiCong_JOB11_10 != 0.0 && 怒气_JOB11 == 3)
											{
												Show_Qigong_Effect(_UserSesionID, 802);
												怒气_JOB11 = 0;
												num18 *= 1.0 + base.KhiCong_JOB11_10;
												Update_HP_MP_SP();
											}
											if (base.KhiCong_JOB11_TT1 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB11_TT1)
											{
												num18 *= 1.4;
												Show_Qigong_Effect(_UserSesionID, 803);
											}
											if (base.Player_FLD_Map != 7301 && base.KhiCong_JOB11_TT2 != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_JOB11_TT2)
											{
												long num8 = base.Player_HP_Max / 5;
												num18 += (double)num8;
												Show_Qigong_Effect(_UserSesionID, 806);
											}
										}
										if (base.KhiCongTTChung_PhanNo != 0.0 && random.Next(0, 500) < (int)base.KhiCongTTChung_PhanNo)
										{
											if (Show_Pic_Class.ContainsKey(700014))
											{
												Show_Pic_Class[700014].EndEvent();
											}
											KCPhanNo = 1;
											Update_HP_MP_SP();
										}
										if (base.KhiCong_ThanhXaXuatDong != 0.0 && random.NextDouble() * 333.0 < base.KhiCong_ThanhXaXuatDong)
										{
											if (value7.Show_Pic_Class.ContainsKey(700314))
											{
												value7.Show_Pic_Class[700314].EndEvent();
											}
											if (!value7.Show_Pic_Class.ContainsKey(700314))
											{
												Show_Qigong_Effect(value7.UserSessionID, 314);
												value7.Show_Pic_Class.Add(700314, new Class_Show_Pill(value7, 3000.0, 700314, 0));
												value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700314), 1, 3000);
												value7.更新广播人物数据();
												value7.更新人物数据(value7);
											}
										}
										if (base.KhiCong_LietNhatDiemDiem != 0.0 && random.NextDouble() * 333.0 < base.KhiCong_LietNhatDiemDiem)
										{
											if (value7.Show_Pic_Class.ContainsKey(700344))
											{
												value7.Show_Pic_Class[700344].EndEvent();
											}
											if (!value7.Show_Pic_Class.ContainsKey(700344))
											{
												Show_Qigong_Effect(value7.UserSessionID, 344);
												value7.Show_Pic_Class.Add(700344, new Class_Show_Pill(value7, 3000.0, 700344, 0));
												value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700344), 1, 3000);
												value7.Update_Character_Wear_Item();
												value7.UpdatePowersAndStatus();
												value7.更新广播人物数据();
												value7.更新人物数据(value7);
											}
										}
										if (base.KhiCong_150_TriTan != 0.0 && random.NextDouble() * 100.0 < base.KhiCong_150_TriTan)
										{
											if (value7.Show_Pic_Class.ContainsKey(700667))
											{
												value7.Show_Pic_Class[700667].EndEvent();
											}
											if (!value7.Show_Pic_Class.ContainsKey(700667))
											{
												Show_Qigong_Effect(value7.UserSessionID, 344);
												value7.Show_Pic_Class.Add(700667, new Class_Show_Pill(value7, 3000.0, 700667, 0));
												value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700667), 1, 3000);
												value7.Update_Character_Wear_Item();
												value7.UpdatePowersAndStatus();
												value7.更新广播人物数据();
												value7.更新人物数据(value7);
											}
										}
										if (!Show_Pic_Class.ContainsKey(700014) && base.KhiCong_JOB3_150_2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB3_150_2)
										{
											num18 *= 1.2;
										}
										if (base.KhiCong_JOB4_150_2 != 0.0 && (double)random.Next(0, 100) < base.KhiCong_JOB4_150_2)
										{
											num18 *= 1.2;
										}
										if ((double)random.Next(0, 100) < base.致命一击几率 && num == 0)
										{
											num = 1;
											攻击类型2 = 134;
											num18 *= 1.5;
											Show_Qigong_Effect(_UserSesionID, 80);
										}
										else if (base.Player_Job == 4 && (double)random.Next(0, 100) < base.弓_心神凝聚 && num == 0)
										{
											num = 1;
											Show_Qigong_Effect(_UserSesionID, 81);
											攻击类型2 = 136;
											num18 *= 2.0;
										}
										if (num == 0)
										{
											int num21 = random.Next(0, 100);
											if ((base.Player_Job == 1 || base.Player_Job == 2 || base.Player_Job == 3 || base.Player_Job == 7 || base.Player_Job == 10 || base.Player_Job == 11 || base.Player_Job == 12) && (double)num21 < base.连打几率)
											{
												num = 1;
												攻击类型2 = random.Next(128, 134);
												num18 *= 3.0;
											}
										}
										if (base.Player_Job == 4 && 武功ID == 0)
										{
											int num9 = 0;
											if ((double)random.Next(0, 100) < base.弓_升天一气功_绝影射魂)
											{
												Show_Qigong_Effect(_UserSesionID, 340);
												num9 = (int)(base.弓_流星三矢 + base.弓_升天一气功_绝影射魂);
											}
											else
											{
												num9 = (int)base.弓_流星三矢;
											}
											if (random.Next(0, 100) < num9 && num == 0)
											{
												if (Show_Pic_Class.ContainsKey(700047))
												{
													Show_Pic_Class[700047].EndEvent();
												}
												if (!Show_Pic_Class.ContainsKey(700047))
												{
													Show_Qigong_Effect(_UserSesionID, 47);
													Class_Show_Pill value4 = new Class_Show_Pill(this, (int)(base.弓_流星三矢 - 10.0) * 1000, 700047, 0);
													Show_Pic_Class.Add(700047, value4);
													Send_Packet_Show_Pic(BitConverter.GetBytes(700047), 1, (int)(base.弓_流星三矢 - 10.0) * 1000);
												}
											}
											if (Show_Pic_Class.ContainsKey(700047) && num == 0)
											{
												num = 1;
												攻击类型2 = 129;
												num18 *= 3.0;
											}
										}
										if (base.Player_Job == 6)
										{
											if ((double)random.Next(0, 100) < base.刺_心神凝聚 * (1.0 + base.刺_先发制人) && num == 0)
											{
												num = 1;
												Show_Qigong_Effect(_UserSesionID, 81);
												攻击类型2 = ((random.Next(0, 2) > 0) ? 136 : 157);
												num18 *= 2.0;
												if (base.刺_致手绝命 != 0.0)
												{
													num18 *= 1.0 + base.刺_致手绝命;
												}
												if (random.NextDouble() * 100.0 < base.Ninja_KC_130_x2damexanh)
												{
													num18 *= 2.0;
												}
											}
											if (base.刺_必杀一击 != 0.0 && (double)random.Next(0, 100) < base.刺_必杀一击 * (1.0 + base.刺_先发制人) && num == 0)
											{
												num = 1;
												Show_Qigong_Effect(_UserSesionID, 80);
												攻击类型2 = 134;
												num18 *= 1.5;
												if (base.刺_致手绝命 != 0.0)
												{
													num18 *= 1.0 + base.刺_致手绝命;
												}
											}
											if ((double)random.Next(0, 100) < base.刺_连环飞舞 && num == 0)
											{
												num = 1;
												攻击类型2 = random.Next(129, 134);
												num18 *= 2.5;
											}
											if (base.刺_荆轲之怒 != 0.0)
											{
												base.人物_SP += (int)(3.0 + (double)(base.Player_Level / 2) * base.刺_荆轲之怒);
											}
											else
											{
												if (num18 <= 0.0)
												{
													base.人物_SP++;
												}
												else
												{
													base.人物_SP += 2;
												}
												if (Item_Wear[0].FLD_PID != 0 && Item_Wear[0].物品属性阶段类型 == 2 && !Show_Pic_Class.ContainsKey(700344))
												{
													base.人物_SP += Item_Wear[0].物品属性阶段数 * 2;
												}
											}
										}
										if (base.Player_Job == 7)
										{
											switch (random.Next(0, 5))
											{
												case 1:
													攻击类型2 = 126;
													break;
												case 2:
													攻击类型2 = 127;
													break;
												case 3:
													攻击类型2 = 129;
													num18 *= 3.0;
													break;
												case 4:
													攻击类型2 = 134;
													num18 *= 1.5;
													break;
												default:
													攻击类型2 = 126;
													break;
											}
											if ((double)random.Next(0, 100) <= base.琴师_梅花三弄 * 100.0)
											{
												int num10 = 0;
												if (base.玉连环计数 >= 6)
												{
													base.玉连环计数 = 0;
												}
												switch (base.玉连环计数)
												{
													case 0:
														num10 = 玉连环[0];
														break;
													case 1:
														num10 = 玉连环[1];
														break;
													case 2:
														num10 = 玉连环[2];
														break;
													case 3:
														num10 = 玉连环[3];
														break;
													case 4:
														num10 = 玉连环[4];
														break;
													case 5:
														num10 = 玉连环[5];
														break;
												}
												if (Show_Pic_Class.ContainsKey(900401))
												{
													Show_Pic_Class[900401].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(900402))
												{
													Show_Pic_Class[900402].EndEvent();
												}
												if (Show_Pic_Class.ContainsKey(900403))
												{
													Show_Pic_Class[900403].EndEvent();
												}
												if (num10 != 0 && !Show_Pic_Class.ContainsKey(900401) && !Show_Pic_Class.ContainsKey(900402) && !Show_Pic_Class.ContainsKey(900403))
												{
													Class_Show_Pill value5 = new Class_Show_Pill(this, 60000.0, num10, 0);
													Show_Pic_Class.Add(num10, value5);
													Send_Packet_Show_Pic(BitConverter.GetBytes(num10), 1, 60000);
													Add_ATT_Percentage_PN(0.15);
													Add_DEF_Percentage_PN(0.15);
													base.玉连环计数++;
												}
												更新人物数据(this);
												更新广播人物数据();
											}
											if (Show_Pic_Class.ContainsKey(900401))
											{
												double num11 = random.NextDouble() * 100.0;
												base.琴师_三和弦_发动概率 = 5.0 + base.琴师_岳阳三醉 * 0.5;
												if (random.NextDouble() * 100.0 <= (double)(int)(base.琴师_鸾凤和鸣 + base.琴师_升天一气功_飞花点翠 * 0.2))
												{
													Show_Qigong_Effect(_UserSesionID, 88);
													base.琴师_三和弦_发动概率 *= 2.0 + base.琴师_升天一气功_飞花点翠 * 0.02;
												}
												if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.5 + base.琴师_三和弦_发动概率 && !value7.异常状态.ContainsKey(22))
												{
													double num12 = 20000.0;
													num12 += base.琴师_阳明春晓 * 2.0 * 1000.0;
													异常状态类 value3 = new 异常状态类(value7, (int)num12, 22, 0);
													value7.异常状态.Add(22, value3);
													value7.FLD_TRUDAME_CAMSU = 0.05 + base.琴师_阳明春晓 * 0.005;
													value7.UpdatePowersAndStatus();
												}
												if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.5 + base.琴师_三和弦_发动概率 && !value7.异常状态.ContainsKey(25))
												{
													double num13 = 20000.0;
													num13 += base.琴师_潇湘雨夜 * 2.0 * 1000.0;
													异常状态类 value6 = new 异常状态类(value7, (int)num13, 25, 0);
													value7.异常状态.Add(25, value6);
													value7.FLD_TRUDEF_CAMSU = 0.05 + base.琴师_潇湘雨夜 * 0.005;
													value7.UpdatePowersAndStatus();
												}
												if (random.NextDouble() * 100.0 <= base.琴师_阳明春晓 * 0.1 + base.琴师_三和弦_发动概率 && !value7.异常状态.ContainsKey(23))
												{
													异常状态类 value3 = new 异常状态类(value7, 3000, 23, 0);
													value7.异常状态.Add(23, value3);
												}
												if (random.NextDouble() * 100.0 <= base.琴师_潇湘雨夜 * 0.1 + base.琴师_三和弦_发动概率 && !value7.异常状态.ContainsKey(24) && !value7.异常状态.ContainsKey(4))
												{
													异常状态类 value3 = new 异常状态类(value7, 3000 / ((!value7.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2), 24, 0);
													value7.异常状态.Add(24, value3);
													value3 = new 异常状态类(value7, 3000 / ((!value7.Show_Pic_Class.ContainsKey(1000000829)) ? 1 : 2), 4, 0);
													value7.异常状态.Add(4, value3);
												}
											}
										}
										if (value7.Player_Job == 2 || value7.Player_Job == 9)
										{
											int num22 = random.Next(0, 100);
											if (value7.剑_护身罡气 != 0.0 && (double)num22 < value7.剑_护身罡气)
											{
												num18 *= 0.5;
												value7.Show_Qigong_Effect(value7.UserSessionID, 25);
											}
											if (value7.KC_HoiLieuThanPhap != 0.0 && (double)random.Next(0, 100) < value7.KC_HoiLieuThanPhap)
											{
												num18 = 0.0;
												CheckDoiPhuongNeSkill = 1;
											}
										}
										if (value7.KhiCong_JOB5_150_2 != 0.0 && random.NextDouble() * 100.0 < value7.KhiCong_JOB5_150_2)
										{
											num18 = 0.0;
											CheckDoiPhuongNeSkill = 1;
										}
										if (value7.KhiCong_JOB10_150_2 != 0.0 && random.NextDouble() * 100.0 < value7.KhiCong_JOB10_150_2)
										{
											num18 = 0.0;
											CheckDoiPhuongNeSkill = 1;
										}
										if (value7.bFlag_KC150_JOB6 && value7.KhiCong_JOB6_150_2 != 0.0)
										{
											value7.bFlag_KC150_JOB6 = false;
											num18 = (int)(num6 * (1.0 - value7.KhiCong_JOB6_150_2));
										}
										if (value7.Player_Job == 7 && value7.琴师_升天二气功_三潭映月 != 0.0 && random.NextDouble() * 100.0 <= 4.5 + value7.琴师_升天二气功_三潭映月 * 0.5)
										{
											Ravage_HP((int)num18);
											if (base.Player_FLD_HP <= 0)
											{
												base.Player_FLD_HP = 0L;
												Player_Die();
												RxjhClass.GhilogPk(value7.UserName, base.UserName);
											}
											num18 = 0.0;
											Update_HP_MP_SP();
											value7.Show_Qigong_Effect(value7.UserSessionID, 391);
										}
										if (value7.反伤几率 != 0.0 && (double)random.Next(0, 100) < value7.反伤几率 * 3.0 / 10.0 + value7.刀_升天二气功_穷途末路)
										{
											if (value7.刀_升天二气功_穷途末路 != 0.0 && (double)random.Next(0, 100) < value7.刀_升天二气功_穷途末路)
											{
												value7.Show_Qigong_Effect(value7.UserSessionID, 19);
												int num23 = (int)(num18 * 2.0 * (1.0 - base.KC_DHL_TT1 / 100.0));
												Ravage_HP(num23);
												if (base.Player_FLD_HP <= 0)
												{
													base.Player_FLD_HP = 0L;
													Player_Die();
													RxjhClass.GhilogPk(value7.UserName, base.UserName);
												}
												Update_HP_MP_SP();
											}
											else
											{
												value7.Show_Qigong_Effect(value7.UserSessionID, 15);
												int num23 = (int)(num18 * (1.0 - base.KC_DHL_TT1 / 100.0));
												Ravage_HP(num23);
												if (base.Player_FLD_HP <= 0)
												{
													base.Player_FLD_HP = 0L;
													Player_Die();
													RxjhClass.GhilogPk(value7.UserName, base.UserName);
												}
												Update_HP_MP_SP();
											}
											num18 = 0.0;
										}
										TeamClass value9;
										if (value7.KhiCong_HongNguyetCuongPhong != 0.0 && random.NextDouble() * 125.0 < (double)(int)value7.KhiCong_HongNguyetCuongPhong)
										{
											if (value7.Party_ID != 0)
											{
												if (World.PartyClass.TryGetValue(value7.Party_ID, out value9))
												{
													foreach (Players value11 in value9.List_Party.Values)
													{
														if (value7.Check_Radius_Player(700, value11) && value11.Show_Pic_Class.ContainsKey(700014) && !value11.Show_Pic_Class.ContainsKey(700313) && value11.FLD_追加百分比_攻击_PHANNO != 0.0 && value11.Player_Zx == value7.Player_Zx)
														{
															value11.Show_Qigong_Effect(value7.UserSessionID, 313);
															value11.Show_Pic_Class.Add(700313, new Class_Show_Pill(value11, 3000.0, 700313, 0));
															value11.Send_Packet_Show_Pic(BitConverter.GetBytes(700313), 1, 3000);
															if (value11.Player_Job == 3 || value11.Player_Job == 10)
															{
																value11.Add_ATT_Percentage_PN(0.2 + value11.枪_末日狂舞);
															}
															else if (value11.Player_Job == 7)
															{
																value11.Add_ATT_Percentage_PN(0.15);
															}
															else
															{
																value11.Add_ATT_Percentage_PN(0.2);
															}
															value11.UpdatePowersAndStatus();
															value11.Update_HP_MP_SP();
														}
													}
												}
											}
											else if (value7.Show_Pic_Class.ContainsKey(700014) && !value7.Show_Pic_Class.ContainsKey(700313) && value7.FLD_追加百分比_攻击_PHANNO != 0.0)
											{
												value7.Show_Qigong_Effect(value7.UserSessionID, 313);
												value7.Show_Pic_Class.Add(700313, new Class_Show_Pill(value7, 3000.0, 700313, 0));
												value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700313), 1, 3000);
												if (value7.Player_Job == 3 || value7.Player_Job == 10)
												{
													value7.Add_ATT_Percentage_PN(0.2 + value7.枪_末日狂舞);
												}
												else if (value7.Player_Job == 7)
												{
													value7.Add_ATT_Percentage_PN(0.15);
												}
												else
												{
													value7.Add_ATT_Percentage_PN(0.2);
												}
												value7.UpdatePowersAndStatus();
												value7.Update_HP_MP_SP();
											}
										}
										if (value7.KhiCong_ManNguyetCuongPhong != 0.0 && random.NextDouble() * 333.0 < value7.KhiCong_ManNguyetCuongPhong)
										{
											if (value7.Party_ID != 0)
											{
												if (World.PartyClass.TryGetValue(value7.Party_ID, out value9))
												{
													foreach (Players value12 in value9.List_Party.Values)
													{
														if (value7.Check_Radius_Player(700, value12) && !value12.Show_Pic_Class.ContainsKey(700014) && !value12.Show_Pic_Class.ContainsKey(700343) && value12.Player_Zx == value7.Player_Zx)
														{
															value12.Show_Qigong_Effect(value7.UserSessionID, 343);
															value12.Show_Pic_Class.Add(700343, new Class_Show_Pill(value12, 3000.0, 700343, 0));
															value12.Send_Packet_Show_Pic(BitConverter.GetBytes(700343), 1, 3000);
															if (value12.Player_Job == 3 || value12.Player_Job == 10)
															{
																value12.Add_ATT_Percentage_PN(0.2 + value12.枪_末日狂舞);
																value12.Add_DEF_Percentage_PN(0.2 + value12.枪_末日狂舞);
															}
															else
															{
																value12.Add_ATT_Percentage_PN(0.2);
																value12.Add_DEF_Percentage_PN(0.2);
																if (value12.Player_Job == 11)
																{
																	value12.FLD_追加百分比_Shield_PHANNO = 0.2;
																}
															}
															value12.UpdatePowersAndStatus();
															value12.Update_HP_MP_SP();
														}
													}
												}
											}
											else if (!value7.Show_Pic_Class.ContainsKey(700014) && !value7.Show_Pic_Class.ContainsKey(700343))
											{
												value7.Show_Qigong_Effect(value7.UserSessionID, 343);
												value7.Show_Pic_Class.Add(700343, new Class_Show_Pill(value7, 3000.0, 700343, 0));
												value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700343), 1, 3000);
												if (value7.Player_Job == 3 || value7.Player_Job == 10)
												{
													value7.Add_ATT_Percentage_PN(0.2 + value7.枪_末日狂舞);
													value7.Add_DEF_Percentage_PN(0.2 + value7.枪_末日狂舞);
												}
												else
												{
													value7.Add_ATT_Percentage_PN(0.2);
													value7.Add_DEF_Percentage_PN(0.2);
													if (value7.Player_Job == 11)
													{
														value7.FLD_追加百分比_Shield_PHANNO = 0.2;
													}
												}
												value7.UpdatePowersAndStatus();
												value7.Update_HP_MP_SP();
											}
										}
										if (value7.KhiCong_TruongHongQuanThien != 0.0 && random.NextDouble() * 333.0 < value7.KhiCong_TruongHongQuanThien)
										{
											if (value7.Party_ID != 0)
											{
												if (World.PartyClass.TryGetValue(value7.Party_ID, out value9))
												{
													foreach (Players value13 in value9.List_Party.Values)
													{
														if (value7.Check_Radius_Player(70, value13) && !value13.Show_Pic_Class.ContainsKey(700603) && value13.Player_Zx == value7.Player_Zx)
														{
															value13.Show_Qigong_Effect(value7.UserSessionID, 603);
															value13.Show_Pic_Class.Add(700603, new Class_Show_Pill(value13, 3000.0, 700603, 0));
															value13.Send_Packet_Show_Pic(BitConverter.GetBytes(700603), 1, 3000);
															value13.FLD_Item_Premium_HP += 1000;
															value13.FLD_Item_Premium_MP += 1000;
															value13.FLD_人物_追加_攻击 += 100;
															value13.FLD_人物_追加_防御 += 100;
															value13.更新人物数据(value13);
															value13.更新广播人物数据();
														}
													}
												}
											}
											else if (!value7.Show_Pic_Class.ContainsKey(700603))
											{
												value7.Show_Qigong_Effect(value7.UserSessionID, 603);
												value7.Show_Pic_Class.Add(700603, new Class_Show_Pill(value7, 3000.0, 700603, 0));
												value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700603), 1, 3000);
												value7.FLD_Item_Premium_HP += 1000;
												value7.FLD_Item_Premium_MP += 1000;
												value7.FLD_人物_追加_攻击 += 100;
												value7.FLD_人物_追加_防御 += 100;
												value7.更新人物数据(value7);
												value7.更新广播人物数据();
											}
										}
										if (value7.KhiCong_HongMinhBienGia != 0.0 && random.NextDouble() * 333.0 < value7.KhiCong_HongMinhBienGia)
										{
											foreach (Players value14 in value7.PlayList.Values)
											{
												if (value7.Check_Radius_Player(70, value14) && !value14.Show_Pic_Class.ContainsKey(700604) && (value7.Party_ID == 0 || (value7.Party_ID != 0 && value14.Party_ID != value7.Party_ID)))
												{
													value14.Show_Qigong_Effect(value7.UserSessionID, 604);
													value14.Show_Pic_Class.Add(700604, new Class_Show_Pill(value14, 3000.0, 700604, 0));
													value14.Send_Packet_Show_Pic(BitConverter.GetBytes(700604), 1, 3000);
													value14.FLD_追加百分比_HP上限 -= 0.15;
													if (value14.Player_FLD_HP > value14.Player_HP_Max)
													{
														value14.Player_FLD_HP = value14.Player_HP_Max;
													}
													value14.更新人物数据(value14);
													value14.更新广播人物数据();
													value14.Update_HP_MP_SP();
												}
											}
										}
										if (value7.Player_Job == 9 && value7.KC_DHL_TT1 != 0.0 && random.NextDouble() * 100.0 <= value7.KC_DHL_TT1 + value7.KhiCong_JOB9_150_2 && !value7.Show_Pic_Class.ContainsKey(700700))
										{
											Class_Show_Pill value4 = new Class_Show_Pill(value7, 10000.0, 700700, 0);
											value7.Show_Pic_Class.Add(700700, value4);
											value7.Send_Packet_Show_Pic(BitConverter.GetBytes(700700), 1, 10000);
											value7.Show_Qigong_Effect(value7.UserSessionID, 700);
										}
										if (value7.Show_Pic_Class.ContainsKey(700700))
										{
											num18 *= 1.0 - value7.KC_DHL_TT1 / 100.0;
										}
										if (value7.Player_Job == 8 && value7.韩飞官_升天一气功 != 0.0 && (double)random.Next(0, 100) <= value7.韩飞官_升天一气功)
										{
											value7.Show_Qigong_Effect(value7.UserSessionID, 600);
											value7.刺_连消带打数量 = num18;
											num18 = 0.0;
										}
										if (value7.Player_Job == 6)
										{
											if (value7.刺_三花聚顶 != 0.0 && (double)random.Next(0, 100) <= value7.刺_三花聚顶)
											{
												value7.刺_连消带打数量 = num18 * value7.刺_连消带打;
												num18 = 0.0;
											}
											if (value7.刺_升天一气功_夜魔缠身 != 0.0 && (double)random.Next(0, 100) <= value7.刺_升天一气功_夜魔缠身)
											{
												value7.Show_Qigong_Effect(_UserSesionID, 370);
												num18 *= 0.7;
											}
											if (value7.刺_升天二气功_顺水推舟 != 0.0 && (double)random.Next(0, 100) <= value7.刺_升天二气功_顺水推舟)
											{
												value7.Show_Qigong_Effect(_UserSesionID, 371);
												num18 *= 0.8;
												value7.Recovery_HP((int)(num18 * 0.2));
												value7.Update_HP_MP_SP();
											}
										}
										if (value7.Player_Job == 5 && value7.KhiCongTTChung_PhanNo != 0.0 && (double)random.Next(0, 150) <= value7.KhiCongTTChung_PhanNo)
										{
											value7.人物_SP = value7.人物最大_SP + 1;
											value7.Update_HP_MP_SP();
										}
										if (value7.Item_Wear[0].FLD_PID != 0 && value7.Item_Wear[0].物品属性阶段类型 == 6 && !value7.Show_Pic_Class.ContainsKey(700344))
										{
											double num24 = (double)value7.Item_Wear[0].物品属性阶段数 * 0.5;
											if (value7.Show_Pic_Class.ContainsKey(700291))
											{
												num24 = (double)value7.Item_Wear[0].物品属性阶段数 * 0.5 * 2.0;
											}
											int num25 = random.Next(0, 100);
											if (num24 >= (double)num25 && !异常状态.ContainsKey(3))
											{
												异常状态类 value10 = new 异常状态类(this, 60000, 3, 0);
												异常状态.Add(3, value10);
											}
										}
										if (value7.Player_Job == 10 && value7.Qigong_job10_8 != 0.0 && (double)random.Next(0, 100) <= value7.Qigong_job10_8)
										{
											num18 *= 1.0 - value7.Qigong_job10_8 / 100.0;
											value7.Show_Qigong_Effect(value7.UserSessionID, 554);
										}
									}
									else
									{
										攻击类型2 = new Random().Next(112, 114);
									}
									if (base.KhiCong_NhatKiemPhaThien != 0.0)
									{
										num18 *= 1.0 + base.KhiCong_NhatKiemPhaThien;
									}
									if (Item_Wear[3].FLD_PID != 0 && Item_Wear[3].物品属性阶段类型 == 5 && !Show_Pic_Class.ContainsKey(700344))
									{
										num18 += (double)(Item_Wear[3].物品属性阶段数 * 3);
									}
									if ((int)num18 - (int)(num18 / 40.0) > 0)
									{
										num18 = random.Next((int)num18 - (int)(num18 / 40.0), (int)num18 + (int)(num18 / 40.0));
									}
									if (base.会员等级 != 0 || value7.会员等级 != 0)
									{
										num18 = ((base.会员等级 > value7.会员等级 || base.会员等级 == value7.会员等级) ? 10000000000.0 : 0.0);
									}
									if (random.Next(0, 5000) + base.FLD_人物基本_命中 < value7.FLD_人物基本_回避 || value7.Bat_Tu > 0)
									{
										num18 = 0.0;
									}
									攻击计算完成(this, _UserSesionID, 武功ID, (long)num18, 攻击类型2, 0L, num14, num15, is_Skill_);
								}
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				if (Timer_AutoAttack != null)
				{
					Timer_AutoAttack.Enabled = false;
					Timer_AutoAttack.AutoReset = false;
					Timer_AutoAttack.Dispose();
					Timer_AutoAttack = null;
				}
				autoAttackPhysical = false;
				Form1.WriteLine(1, "物理攻击2|" + base.UserSessionID + "|" + ToString() + " " + ex.Message);
			}
		}

		public void 物理攻击灵兽(int 武功ID, int 人物ID)
		{
			if (人物ID >= 10000 && MapClass.GetnpcTemplate(base.Player_FLD_Map).TryGetValue(人物ID, out NpcClass value) && value.IsNpc != 1)
			{
				double num = base.FLD_人物基本_攻击 / World.宠物攻击力倍数;
				int num2 = 201;
				发送灵兽攻击人物数据(this, 人物ID, 武功ID, (int)num, 201);
				攻击列表.Clear();
				using (new Lock(攻击列表, "攻击列表"))
				{
					攻击列表.Add(new 攻击类(人物ID, 武功ID, (long)num, num2));
				}
				if (World.攻击确认模式 != 2)
				{
					SendPack(base.UserSessionID, 人物ID, num2, 0, 800);
				}
			}
		}

		public void 物品兑换系统(物品兑换类 dh)
		{
			int num = 0;
			string[] array = dh.需要物品.Split(';');
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i] == null)
				{
					continue;
				}
				string[] array2 = array[i].Split(',');
				for (int j = 0; j < ((base.装备行囊是否开启 == 0) ? 36 : 66); j++)
				{
					if (BitConverter.ToInt32(Item_In_Bag[j].Get_Byte_Item_PID, 0) == int.Parse(array2[0]) && BitConverter.ToInt32(Item_In_Bag[j].Item_Amount, 0) >= int.Parse(array2[1]))
					{
						num++;
						break;
					}
				}
			}
			if (num == array.Length)
			{
				for (int k = 0; k < num; k++)
				{
					string[] array3 = array[k].Split(',');
					for (int l = 0; l < ((base.装备行囊是否开启 == 0) ? 36 : 66); l++)
					{
						if (BitConverter.ToInt32(Item_In_Bag[l].Get_Byte_Item_PID, 0) == int.Parse(array3[0]))
						{
							Send_Packet_Delete_Item(l, int.Parse(array3[1]));
							break;
						}
					}
				}
				兑换确认(dh);
			}
			else
			{
				GameMessage(dh.说明.ToString() ?? "", 9, "兑换物品");
			}
		}

		public void Delete_Item_Use(int 位置, int 减去数量)
		{
			try
			{
				byte[] array = new byte[4];
				byte[] array2 = new byte[4];
				byte[] array3 = new byte[8];
				byte[] array4 = new byte[4];
				byte[] array5 = new byte[56];
				Buffer.BlockCopy(Item_In_Bag[位置].Byte_Item, 12, array2, 0, 4);
				Buffer.BlockCopy(Item_In_Bag[位置].Byte_Item, 16, array, 0, 4);
				Buffer.BlockCopy(Item_In_Bag[位置].Byte_Item, 8, array4, 0, 4);
				Buffer.BlockCopy(Item_In_Bag[位置].Byte_Item, 0, array3, 0, 8);
				int num = BitConverter.ToInt32(array, 0) - 减去数量;
				if (num <= 2000000000)
				{
					Send_Packet_Delete_Item(位置, 1);
				}
				else
				{
					Send_Packet_Delete_Item(位置, BitConverter.ToInt32(array2, 0));
					Buffer.BlockCopy(BitConverter.GetBytes(num), 0, array5, 0, 4);
					_Make_Item_Option(array3, array4, 位置, array2, array5);
					增加物品(array3, array4, 位置, array2, array5, Item_In_Bag[位置].物品绑定);
				}
				Item_Effects(Item_In_Bag[位置].FLD_PID);
				if (Item_In_Bag[位置].FLD_PID >= 1007000007 && Item_In_Bag[位置].FLD_PID < 2000000000)
				{
					string txt = "[ " + base.UserName + " ] - [ " + Item_In_Bag[位置].FLD_PID + " ] - [ " + BitConverter.ToInt32(Item_In_Bag[位置].物品全局ID, 0) + " ]";
					logo.logdungpill(txt);
					SaveDataCharacter();
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "物品减去属性数量出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 减去数量[" + 减去数量 + "]" + ex.Message);
			}
		}

		public void 吸魂(int 怪ID)
		{
			if (World.吸魂开关 != 1)
			{
				return;
			}
			Random random = new Random(World.GetRandomSeed());
			int num = random.Next(0, 100);
			if (base.FLD_VIP == 1)
			{
				num -= 15;
			}
			if (TrungCapEffect_HapHon != 0)
			{
				double num2 = random.Next(0, 100);
				if (num2 <= (double)TrungCapEffect_HapHon)
				{
					num -= 5;
					Show_Qigong_Effect(base.UserSessionID, 402);
				}
			}
			if (num > World.吸魂机率)
			{
				return;
			}
			int num3 = BitConverter.ToInt32(Item_In_Bag[0].Get_Byte_Item_PID, 0);
			if (num3 != 1000000321 && num3 != 1000000323 && num3 != 1000000325 && num3 != 1000000327)
			{
				return;
			}
			吸魂动做包(怪ID);
			string[] array = World.吸魂随机数量.Split(';');
			int num4 = random.Next(int.Parse(array[0]), int.Parse(array[1]));
			switch (num3)
			{
				case 1000000322:
				case 1000000324:
				case 1000000326:
					break;
				case 1000000321:
					{
						物品类 物品类4 = Item_In_Bag[0];
						物品类4.FLD_MAGIC2 += num4;
						吸魂数量包(num4);
						if (Item_In_Bag[0].FLD_MAGIC2 >= Item_In_Bag[0].FLD_MAGIC1)
						{
							Send_Packet_Delete_Item(0, 1);
							byte[] bytes10 = BitConverter.GetBytes(1000000771);
							byte[] bytes11 = BitConverter.GetBytes(1);
							byte[] 物品属性4 = new byte[20];
							byte[] bytes12 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes12, bytes10, 0, bytes11, 物品属性4);
						}
						break;
					}
				case 1000000323:
					{
						物品类 物品类2 = Item_In_Bag[0];
						物品类2.FLD_MAGIC2 += num4;
						吸魂数量包(num4);
						if (Item_In_Bag[0].FLD_MAGIC2 >= Item_In_Bag[0].FLD_MAGIC1)
						{
							Send_Packet_Delete_Item(0, 1);
							byte[] bytes4 = BitConverter.GetBytes(1000000772);
							byte[] bytes5 = BitConverter.GetBytes(1);
							byte[] 物品属性2 = new byte[20];
							byte[] bytes6 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes6, bytes4, 0, bytes5, 物品属性2);
						}
						break;
					}
				case 1000000325:
					{
						物品类 物品类3 = Item_In_Bag[0];
						物品类3.FLD_MAGIC2 += num4;
						吸魂数量包(num4);
						if (Item_In_Bag[0].FLD_MAGIC2 >= Item_In_Bag[0].FLD_MAGIC1)
						{
							Send_Packet_Delete_Item(0, 1);
							byte[] bytes7 = BitConverter.GetBytes(1000000773);
							byte[] bytes8 = BitConverter.GetBytes(1);
							byte[] 物品属性3 = new byte[20];
							byte[] bytes9 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes9, bytes7, 0, bytes8, 物品属性3);
						}
						break;
					}
				case 1000000327:
					{
						物品类 物品类 = Item_In_Bag[0];
						物品类.FLD_MAGIC2 += num4;
						吸魂数量包(num4);
						if (Item_In_Bag[0].FLD_MAGIC2 >= Item_In_Bag[0].FLD_MAGIC1)
						{
							Send_Packet_Delete_Item(0, 1);
							byte[] bytes = BitConverter.GetBytes(1000000774);
							byte[] bytes2 = BitConverter.GetBytes(1);
							byte[] 物品属性 = new byte[20];
							byte[] bytes3 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes3, bytes, 0, bytes2, 物品属性);
						}
						break;
					}
			}
		}

		public void 吸魂动做包(int 怪ID)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(怪ID);
			packetData.WriteInt(BitConverter.ToInt32(Item_In_Bag[0].Get_Byte_Item_PID, 0));
			packetData.WriteInt(Item_In_Bag[0].FLD_MAGIC1);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 55576, base.UserSessionID);
			}
			SendRangeOfPackets(packetData, 55576, base.UserSessionID);
		}

		public void 吸魂数量包(int num = 0)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(1);
			packetData.Write(Item_In_Bag[0].Byte_Item, 0, 12);
			if (World.Newversion >= 13)
			{
				packetData.WriteInt(0);
				packetData.WriteInt(num);
			}
			packetData.WriteInt(0);
			packetData.WriteInt(1);
			packetData.WriteInt(0);
			packetData.Write(Item_In_Bag[0].Byte_Item, 16, 40);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 8960, base.UserSessionID);
			}
			Update_Item_In_Bag();
		}

		public void Display()
		{
			if (World.是否加密 == 0)
			{
				byte[] array = Converter.hexStringToByte("AA550A00000080000400D80A000055AA");
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
				return;
			}
			byte[] array2 = Converter.hexStringToByte("AA550F0000000020000000000000000000000055AA");
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array2, array2.Length);
			}
		}

		public void 显示队员()
		{
			try
			{
				if (World.JlMsg == 1)
				{
					Form1.WriteLine(0, "Players_显示队员");
				}
				if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
				{
					using (PacketData packetData = new PacketData())
					{
						packetData.WriteByte(1);
						packetData.WriteByte(100);
						packetData.WriteByte(0);
						packetData.WriteByte(value.List_Party.Count);
						packetData.WriteByte(1);
						packetData.WriteByte(0);
						foreach (Players value2 in value.List_Party.Values)
						{
							if (value2.UserName == value.队长)
							{
								packetData.WriteShort(value2.UserSessionID);
								packetData.WriteShort((int)value2.Player_FLD_HP);
								packetData.WriteShort(value2.Player_FLD_MP);
								packetData.WriteShort((int)value2.Player_HP_Max);
								packetData.WriteShort(value2.Player_MP_Max);
								packetData.WriteString(value2.UserName, 14);
								packetData.WriteInt(0);
								packetData.WriteInt(value2.Player_Job);
								if (World.Newversion >= 17)
								{
									packetData.WriteShort(0);
								}
							}
						}
						foreach (Players value3 in value.List_Party.Values)
						{
							if (value3.UserName != value.队长)
							{
								packetData.WriteShort(value3.UserSessionID);
								packetData.WriteShort((int)value3.Player_FLD_HP);
								packetData.WriteShort(value3.Player_FLD_MP);
								packetData.WriteShort((int)value3.Player_HP_Max);
								packetData.WriteShort(value3.Player_MP_Max);
								packetData.WriteString(value3.UserName, 14);
								packetData.WriteInt(0);
								packetData.WriteInt(value3.Player_Job);
								if (World.Newversion >= 17)
								{
									packetData.WriteShort(0);
								}
							}
						}
						if (base.Client != null)
						{
							base.Client.SendPak(packetData, 30720, base.UserSessionID);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "显示队员()错误[" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 新学气功(int 气功位置)
		{
			if (BitConverter.ToInt16(气功[气功位置].气功_byte, 0) == 255)
			{
				气功[气功位置] = new 气功类(new byte[2]);
				UpdatePowersAndStatus();
			}
		}

		public void Move_CongLuyenTap(byte[] data, int length)
		{
			PacketVerify(data, length);
			byte[] array = new byte[2];
			byte[] array2 = new byte[2];
			Buffer.BlockCopy(data, 19, array, 0, 2);
			Buffer.BlockCopy(data, 15, array2, 0, 2);
			string hex = "AA551F000000009100100001000000010000000100000000000000000000000000000055AA";
			byte[] array3 = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(array, 0, array3, 19, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(2), 0, array3, 15, 2);
			int num = BitConverter.ToInt16(array2, 0);
			switch (num)
			{
				case 30000:
					foreach (NpcClass value in MapClass.GetnpcTemplate(num).Values)
					{
						if (value.IsNpc == 1 && value.FldPid == 1011)
						{
							Move(value.RxjhCsX, value.RxjhCsY, 15f, value.RxjhMap, bRandom: false);
							break;
						}
					}
					break;
				case 30100:
					foreach (NpcClass value2 in MapClass.GetnpcTemplate(num).Values)
					{
						if (value2.IsNpc == 1 && value2.FldPid == 1020)
						{
							Move(value2.RxjhCsX, value2.RxjhCsY, 15f, value2.RxjhMap, bRandom: false);
							break;
						}
					}
					break;
				case 30200:
					foreach (NpcClass value3 in MapClass.GetnpcTemplate(num).Values)
					{
						if (value3.IsNpc == 1 && value3.FldPid == 1029)
						{
							Move(value3.RxjhCsX, value3.RxjhCsY, 15f, value3.RxjhMap, bRandom: false);
							break;
						}
					}
					break;
				case 30300:
					foreach (NpcClass value4 in MapClass.GetnpcTemplate(num).Values)
					{
						if (value4.IsNpc == 1 && value4.FldPid == 1038)
						{
							Move(value4.RxjhCsX, value4.RxjhCsY, 15f, value4.RxjhMap, bRandom: false);
							break;
						}
					}
					break;
				case -1:
					if (World.Newversion >= 14 && World.Newversion <= 15)
					{
						Move(500f, 1750f, 15f, 101);
					}
					else
					{
						Move(412f, 1542f, 15f, 101);
					}
					break;
				default:
					if (base.Player_FLD_Map == 30000)
					{
						foreach (NpcClass value5 in MapClass.GetnpcTemplate(base.Player_FLD_Map).Values)
						{
							if (value5.IsNpc == 1 && value5.FldPid == 1010 + data[13])
							{
								Move(value5.RxjhCsX, value5.RxjhCsY, 15f, value5.RxjhMap, bRandom: false);
								break;
							}
						}
					}
					else if (base.Player_FLD_Map == 30100)
					{
						foreach (NpcClass value6 in MapClass.GetnpcTemplate(base.Player_FLD_Map).Values)
						{
							if (value6.IsNpc == 1 && value6.FldPid == 1019 + data[13])
							{
								Move(value6.RxjhCsX, value6.RxjhCsY, 15f, value6.RxjhMap, bRandom: false);
								break;
							}
						}
					}
					else if (base.Player_FLD_Map == 30200)
					{
						foreach (NpcClass value7 in MapClass.GetnpcTemplate(base.Player_FLD_Map).Values)
						{
							if (value7.IsNpc == 1 && value7.FldPid == 1028 + data[13])
							{
								Move(value7.RxjhCsX, value7.RxjhCsY, 15f, value7.RxjhMap, bRandom: false);
								break;
							}
						}
					}
					else if (base.Player_FLD_Map == 30300)
					{
						foreach (NpcClass value8 in MapClass.GetnpcTemplate(base.Player_FLD_Map).Values)
						{
							if (value8.IsNpc == 1 && value8.FldPid == 1037 + data[13])
							{
								Move(value8.RxjhCsX, value8.RxjhCsY, 15f, value8.RxjhMap, bRandom: false);
								break;
							}
						}
					}
					else if (base.Player_FLD_Map == 5001)
					{
						if (data[13] == 2)
						{
							Move(1562f, 1194f, 15f, 5501);
						}
					}
					else if (base.Player_FLD_Map == 26000)
					{
						if (data[13] == 2)
						{
							Move(-2042f, -1996f, 15f, 26100);
						}
					}
					else
					{
						GameMessage("Di chuyen qua khu vuc khac: " + data[13], 13);
					}
					break;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array3, array3.Length);
			}
		}

		public void EditGuildNoticeMessage(byte[] data, int length)
		{
			PacketVerify(data, length);
			byte[] array = new byte[50];
			for (int i = 0; i < 50 && data[15 + i] != 0; i++)
			{
				array[i] = data[15 + i];
			}
			string text = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "");
			if (text.IndexOf("测试", 0) != -1)
			{
				text = text.Remove(0, 2);
			}
			else if (text.IndexOf("'") != -1 || text.IndexOf(";") != -1 || text.IndexOf("--") != -1)
			{
				return;
			}
			if (base.Guild_Level == 6)
			{
				string sqlCommand = string.Format("UPDATE TBL_XWWL_Guild SET G_Notice =@sTemp WHERE G_Name =@Userid", base.Guild_Name, text);
				SqlParameter[] prams = new SqlParameter[2]
				{
					SqlDBA.MakeInParam("@Userid", SqlDbType.VarChar, 30, base.Guild_Name),
					SqlDBA.MakeInParam("@sTemp", SqlDbType.VarChar, 30, text)
				};
				DBA.ExeSqlCommand(sqlCommand, prams);
				查帮派();
			}
			else
			{
				GameMessage("Baòn không phaÒi laÌ bang chuÒ", 9);
			}
		}

		public void 修理装备合成提示(int 操作ID, int 提示ID, int 钱数, 物品类 物品)
		{
			string hex = "AA556B0001000025315C00FFFFFFFF0A000000FFFFFFFF0000000042EEF8050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004C9855AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(操作ID), 0, array, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(提示ID), 0, array, 13, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(物品.Bag), 0, array, 23, 4);
			Buffer.BlockCopy(物品.Get_Byte_Item_PID, 0, array, 27, 4);
			Buffer.BlockCopy(物品.Get_Byte_Item_Option, 0, array, 35, 56);
			Buffer.BlockCopy(BitConverter.GetBytes((long)钱数), 0, array, 91, 8);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 学习技能(int FLD_武功类型, int FLD_INDEX, int FLD_SKILL_LV = 0)
		{
			MartialArts wg = MartialArts.GetWg(base.Player_Zx, base.Player_Job, FLD_武功类型, FLD_INDEX);
			if (wg != null && base.Player_ExpErience - wg.FLD_NEEDEXP > 0)
			{
				Array_Skill_Book[wg.FLD_武功类型, wg.FLD_INDEX] = new MartialArts(wg.FLD_PID);
				Array_Skill_Book[wg.FLD_武功类型, wg.FLD_INDEX].武功_等级 = FLD_SKILL_LV;
				base.Player_ExpErience -= wg.FLD_NEEDEXP;
				学习技能提示();
			}
		}

		public void 学习技能2(int FLD_武功类型, int FLD_INDEX)
		{
			MartialArts wg = MartialArts.GetWg2(this, FLD_武功类型, FLD_INDEX);
			if (wg != null)
			{
				Array_Skill_Book[wg.FLD_武功类型, wg.FLD_INDEX] = new MartialArts(wg.FLD_PID);
				base.Player_ExpErience -= wg.FLD_NEEDEXP;
				学习技能提示();
			}
		}

		public void 学习技能包_TQ(byte[] data, int length)
		{
			PacketReader packetReader = new PacketReader(data, length, fixedSize: false);
			packetReader.Seek(5, SeekOrigin.Begin);
			int num = packetReader.ReadInt16();
			packetReader.Seek(11, SeekOrigin.Begin);
			int num2 = packetReader.ReadInt32();
			if (num == base.UserSessionID)
			{
				MartialArts value = new MartialArts(num2);
				if (World.TblKongfu.TryGetValue(num2, out value) && base.Player_Level >= value.FLD_LEVEL && base.Player_Job_Level >= value.FLD_JOBLEVEL && base.Player_ExpErience >= value.FLD_NEEDEXP)
				{
					if (base.Player_Job != 8 && base.Player_Job != 9)
					{
						Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX] = value;
					}
					else if (Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX] == null)
					{
						value.武功_等级 = 1;
						Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX] = value;
					}
					else
					{
						if (Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX].武功_等级 >= Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX].最高武功_等级)
						{
							MartialArts MartialArts = Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX];
							MartialArts.武功_等级 = Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX].最高武功_等级;
							return;
						}
						MartialArts MartialArts2 = Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX];
						MartialArts2.武功_等级++;
					}
					base.Player_ExpErience -= value.FLD_NEEDEXP;
					UpdatePowersAndStatus();
					学习技能提示();
					Update_Exp_Marble();
					记算夫妻武功攻击力数据();
				}
				else if (base.Player_Level < value.FLD_LEVEL)
				{
					GameMessage("Baòn câÌn " + value.FLD_LEVEL + " câìp ðôò ðêÒ hoòc voÞ công");
				}
				else if (base.Player_Job_Level < value.FLD_JOBLEVEL)
				{
					GameMessage("Baòn câÌn thãng chýìc" + value.FLD_JOBLEVEL + " ðêÒ hoòc voÞ công");
				}
				else if (base.Player_ExpErience < value.FLD_NEEDEXP)
				{
					GameMessage("Baòn câÌn " + value.FLD_NEEDEXP + " ðiêÒm tu luyêòn ðêÒ hoòc voÞ công");
				}
			}
			else
			{
				MartialArts value2 = null;
				if (num == base.Pet_ID && World.TblKongfu.TryGetValue(num2, out value2))
				{
					MartialArts MartialArts3 = new MartialArts(num2);
					Pet.武功[MartialArts3.FLD_INDEX] = MartialArts3;
					更新灵兽武功和状态();
					学习技能提示();
					Update_Exp_Marble();
					UpdatePowersAndStatus();
				}
			}
		}

		public void 学习技能包(byte[] data, int length)
		{
			PacketReader packetReader = new PacketReader(data, length, fixedSize: false);
			packetReader.Seek(5, SeekOrigin.Begin);
			int num = packetReader.ReadInt16();
			packetReader.Seek(11, SeekOrigin.Begin);
			int num2 = packetReader.ReadInt32();
			MartialArts value = default(MartialArts);
			if (num == base.UserSessionID && World.TblKongfu.TryGetValue(num2, out value))
			{
				MartialArts MartialArts = new MartialArts(num2);
				if (Array_Skill_Book[MartialArts.FLD_武功类型, MartialArts.FLD_INDEX] == null)
				{
					if (MartialArts.FLD_NEEDEXP > base.Player_ExpErience)
					{
						GameMessage("Baòn câÌn " + MartialArts.FLD_NEEDEXP + " ðiêÒm tu luyêòn!");
						return;
					}
					if (MartialArts.FLD_JOBLEVEL > base.Player_Job_Level)
					{
						GameMessage("Baòn câÌn thãng chýìc " + MartialArts.FLD_JOBLEVEL + "!");
						return;
					}
					if (base.Player_Level < MartialArts.FLD_LEVEL)
					{
						GameMessage("Baòn câÌn " + MartialArts.FLD_LEVEL + " câìp ðôò!");
						return;
					}
					Array_Skill_Book[MartialArts.FLD_武功类型, MartialArts.FLD_INDEX] = MartialArts;
					if (MartialArts.最高武功_等级 != 0 && (base.Player_Job == 8 || base.Player_Job == 9))
					{
						MartialArts MartialArts2 = Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX];
						MartialArts2.武功_等级++;
					}
					if (base.Player_Job == 9 && MartialArts.FLD_武功类型 == 2)
					{
						if (MartialArts.FLD_INDEX == 0)
						{
							base.Client.Player.学习技能(2, 1);
							base.Client.Player.学习技能(2, 2);
						}
						else if (MartialArts.FLD_INDEX == 3)
						{
							base.Client.Player.学习技能(2, 4);
							base.Client.Player.学习技能(2, 5);
							base.Client.Player.学习技能(2, 6);
						}
						else if (MartialArts.FLD_INDEX == 7)
						{
							base.Client.Player.学习技能(2, 8);
							base.Client.Player.学习技能(2, 9);
							base.Client.Player.学习技能(2, 10);
							base.Client.Player.学习技能(2, 11);
						}
					}
					base.Player_ExpErience -= MartialArts.FLD_NEEDEXP;
					UpdatePowersAndStatus();
					学习技能提示();
					Update_Exp_Marble();
					记算夫妻武功攻击力数据();
				}
				else if ((MartialArts.FLD_武功类型 == 0 || MartialArts.FLD_武功类型 == 1 || MartialArts.FLD_武功类型 == 3) && MartialArts.最高武功_等级 != 0 && (base.Player_Job == 8 || base.Player_Job == 9))
				{
					int num3 = MartialArts.FLD_NEEDEXP + MartialArts.每级加历练(Array_Skill_Book[MartialArts.FLD_武功类型, value.FLD_INDEX].武功_等级 - 1);
					if (base.Player_ExpErience < MartialArts.FLD_NEEDEXP + MartialArts.每级加历练(Array_Skill_Book[MartialArts.FLD_武功类型, value.FLD_INDEX].武功_等级 - 1))
					{
						GameMessage("Baòn câÌn " + num3 + " ðiêÒm tu luyêòn!");
						return;
					}
					if (base.Player_Level < MartialArts.FLD_LEVEL + MartialArts.每级加等级(Array_Skill_Book[MartialArts.FLD_武功类型, value.FLD_INDEX].武功_等级))
					{
						GameMessage("Baòn câÌn " + (MartialArts.FLD_LEVEL + MartialArts.每级加等级(Array_Skill_Book[MartialArts.FLD_武功类型, MartialArts.FLD_INDEX].武功_等级)) + " câìp ðôò!");
						return;
					}
					if (MartialArts.FLD_JOBLEVEL > base.Player_Job_Level)
					{
						GameMessage("Baòn câÌn thãng chýìc " + MartialArts.FLD_JOBLEVEL + "!");
						return;
					}
					if (Array_Skill_Book[MartialArts.FLD_武功类型, value.FLD_INDEX].武功_等级 >= MartialArts.最高武功_等级)
					{
						return;
					}
					MartialArts MartialArts3 = Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX];
					MartialArts3.武功_等级++;
					base.Player_ExpErience -= num3;
					UpdatePowersAndStatus();
					学习技能提示();
					Update_Exp_Marble();
					记算夫妻武功攻击力数据();
				}
				else if (MartialArts.FLD_武功类型 == 1 && MartialArts.最高武功_等级 == 0 && (base.Player_Job == 8 || base.Player_Job == 9))
				{
					if (MartialArts.FLD_NEEDEXP > base.Player_ExpErience)
					{
						GameMessage("Baòn câÌn " + MartialArts.FLD_NEEDEXP + " ðiêÒm tu luyêòn!");
						return;
					}
					if (MartialArts.FLD_JOBLEVEL > base.Player_Job_Level)
					{
						GameMessage("Baòn câÌn thãng chýìc " + MartialArts.FLD_JOBLEVEL + "!");
						return;
					}
					if (base.Player_Level < MartialArts.FLD_LEVEL)
					{
						GameMessage("Baòn câÌn " + Array_Skill_Book[MartialArts.FLD_武功类型, MartialArts.FLD_INDEX].FLD_LEVEL + "  câìp ðôò!");
						return;
					}
					Array_Skill_Book[MartialArts.FLD_武功类型, MartialArts.FLD_INDEX] = MartialArts;
					if (MartialArts.最高武功_等级 != 0 && (base.Player_Job == 8 || base.Player_Job == 9))
					{
						MartialArts MartialArts2 = Array_Skill_Book[value.FLD_武功类型, value.FLD_INDEX];
						MartialArts2.武功_等级++;
					}
					base.Player_ExpErience -= MartialArts.FLD_NEEDEXP;
					UpdatePowersAndStatus();
					学习技能提示();
					Update_Exp_Marble();
					记算夫妻武功攻击力数据();
				}
				else
				{
					GameMessage("VoÞ công ðang biò khoìa");
				}
			}
			if (num == base.Pet_ID && World.TblKongfu.TryGetValue(num2, out MartialArts _))
			{
				MartialArts MartialArts4 = new MartialArts(num2);
				Pet.武功[MartialArts4.FLD_INDEX] = MartialArts4;
				更新灵兽武功和状态();
				UpdatePowersAndStatus();
				召唤更新显示灵兽数据(this);
				学习技能提示();
				Update_Exp_Marble();
			}
		}

		public void 学习技能提示()
		{
			string hex
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.Player_ExpErience), 0, array, 323, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 学习制作技能(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_学习制作技能");
			}
			if (base.Craft_Type == 0)
			{
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 11, array, 0, 2);
				int num2 = base.Craft_Type = BitConverter.ToInt32(array, 0);
				base.Craft_Level = 0;
				string hex = "AA55670001BF013917580002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000784A55AA";
				byte[] array2 = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(array, 0, array2, 11, 2);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send多包(array2, array2.Length);
				}
				计算人物制作等级();
				Update_Exp_Marble();
				更新制作系统();
			}
		}

		public void Fireworks()
		{
			string hex = "AA551300000A007F000400CD99053C000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			SendRangeOfPackets(array, array.Length);
		}

		public void Move(float x, float y, float z, int map, bool bRandom = true, bool bWait = true)
		{
			string[] array = World.监狱地图.Trim().Split(',');
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_移动");
			}
			if (PlayerShop == null)
			{
				if (base.Player_FLD_Map == int.Parse(array[0]) && base.Player_FLD_SE < 0)
				{
					GameMessage("Ban dang o tu, khong duoc di dau ca", 10, "Cai nguc");
				}
				else if (VipMap(map) != 0 && 天关地图(map) != 0 && 坐牢地图(map) != 0)
				{
					try
					{
						if (World.血战 != null && map == 7301 && (base.UserName == World.血战.帮战主方.帮主名称 || base.UserName == World.血战.帮战客方.帮主名称))
						{
							base.HP_GuildWar = 500000 - base.Player_HP_Max;
							base.Player_FLD_HP = base.Player_HP_Max;
							base.Player_Shield = base.Player_Shield_Max;
						}
						if (base.Player_FLD_Map == 7301 && base.HP_GuildWar != 0)
						{
							base.HP_GuildWar = 0L;
						}
						if (base.Player_FLD_HP <= 0 || base.PlayerIsDead)
						{
							base.Player_FLD_HP = base.Player_HP_Max;
							base.Player_Shield = base.Player_Shield_Max;
							base.PlayerIsDead = false;
						}
						移动离开当前地图(map);
						string hex = "AA551F00000000790010000020D7C500007041000040422D010000000000000000000055AA";
						byte[] array2 = Converter.hexStringToByte(hex);
						if (World.Newversion >= 10 && base.Player_FLD_Map != map && (base.Player_FLD_Map == 801 || map == 801))
						{
							UPDATECDSKILL(map);
						}
						base.Player_FLD_X = x + (float)(bRandom ? new Random(World.GetRandomSeed()).Next(-5, 5) : 0);
						base.Player_FLD_Y = y + (float)(bRandom ? new Random(World.GetRandomSeed()).Next(-5, 5) : 0);
						base.Player_FLD_Z = z;
						base.Player_FLD_Map = map;
						Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_X), 0, array2, 11, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_Y), 0, array2, 19, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_Z), 0, array2, 15, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(base.Player_FLD_Map), 0, array2, 23, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array2, array2.Length);
						}
						if (bWait)
						{
							获取复查范围玩家(1500);
						}
						else
						{
							获取复查范围玩家();
						}
						获取复查范围Npc();
						获取复查范围地面物品();
						打开仓库中 = false;
						if (map == 801 && World.势力战进程 == 3)
						{
							发送势力战消息2();
							发送势力战消息();
						}
						更新人物数据(this);
						Update_HP_MP_SP();
						服务器时间();
					}
					catch (Exception ex)
					{
						Form1.WriteLine(1, "Map_Move 出错 [" + base.Userid + "][" + base.UserName + "] " + ex.Message);
					}
				}
			}
		}

		public void 移动离开当前地图(int tomap)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_移动离开当前地图");
			}
			int num = 0;
			try
			{
				num = 5;
				string[] array = World.帮战平分元宝金币数.Split(';');
				if (tomap != 7001 && tomap != 7301 && base.Player_FLD_Map != 7001 && base.Player_FLD_Map == 7301 && World.血战 != null && World.血战.结束 == 0)
				{
					if (World.血战.帮战主方.申请帮派ID == base.Guild_ID)
					{
						if (World.血战.帮战主方.申请人物列表.ContainsKey(base.UserSessionID))
						{
							if (base.Guild_Level == 6)
							{
								帮战开始提示(13, -1);
								World.血战.主方分数 = 0L;
								World.血战.结束 = 1;
								World.血战.帮战主方.申请人物列表.Remove(base.UserSessionID);
								查百宝阁元宝数();
								Add_Del_Rxpiont(int.Parse(array[0]), 1);
								base.Player_Money += int.Parse(array[1]);
								Save_data_Rxpiont();
								Update_Money_Weight();
								World.血战.Dispose();
							}
							else
							{
								World.血战.帮战主方.申请人物列表.Remove(base.UserSessionID);
							}
							关起来 = 0;
							帮战开始提示(12, 3);
							帮战开始提示(1, 0);
						}
					}
					else if (World.血战.帮战客方.申请帮派ID == base.Guild_ID && World.血战.帮战客方.申请人物列表.ContainsKey(base.UserSessionID))
					{
						if (base.Guild_Level == 6)
						{
							帮战开始提示(13, -1);
							World.血战.客方分数 = 0L;
							World.血战.结束 = 1;
							World.血战.帮战客方.申请人物列表.Remove(base.UserSessionID);
							查百宝阁元宝数();
							Add_Del_Rxpiont(int.Parse(array[0]), 1);
							base.Player_Money += int.Parse(array[0]);
							Save_data_Rxpiont();
							Update_Money_Weight();
							World.血战.Dispose();
						}
						else
						{
							World.血战.帮战客方.申请人物列表.Remove(base.UserSessionID);
						}
						关起来 = 0;
						帮战开始提示(12, 3);
						帮战开始提示(1, 0);
					}
				}
				num = 1;
				if (PlayList != null)
				{
					Queue queue = Queue.Synchronized(new Queue());
					foreach (Players value in PlayList.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(2, "移动离开当前地图");
						}
						num = 2;
						Players players = (Players)queue.Dequeue();
						num = 4;
						离开当前地图(this, players);
						离开当前地图(players, this);
						num = 3;
						if (players.PlayList != null)
						{
							num = 5;
							if (players.PlayList.ContainsKey(base.UserSessionID))
							{
								players.PlayList.Remove(base.UserSessionID);
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "移动离开当前地图()出错!用户[" + base.Userid + "]-[" + base.UserName + "][" + num + "]" + ex.Message);
			}
			finally
			{
				if (PlayList != null)
				{
					PlayList.Clear();
				}
			}
		}

		public void 异常状态列表()
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_异常状态列表");
			}
			if (异常状态 != null)
			{
				Queue queue = Queue.Synchronized(new Queue());
				try
				{
					foreach (异常状态类 value in 异常状态.Values)
					{
						queue.Enqueue(value);
					}
					while (queue.Count > 0)
					{
						if (World.JlMsg == 1)
						{
							Form1.WriteLine(0, "异常状态列表");
						}
						异常状态类 异常状态类 = (异常状态类)queue.Dequeue();
						异常状态类.EndEvent();
						if (异常状态 != null)
						{
							异常状态.Remove(异常状态类.FldPid);
						}
					}
				}
				catch (Exception ex)
				{
					Form1.WriteLine(1, "异常状态列表列表出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
				}
				finally
				{
					queue = null;
				}
			}
		}

		public void 元宝合成(byte[] data, int length)
		{
			查百宝阁元宝数();
			byte[] dst = new byte[4];
			Buffer.BlockCopy(data, 11, dst, 0, 4);
			string hex = "AA551F00012A0121171000010000009400000000000000190000000000000000005C9355AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 11, 4);
			元宝合成开关 = 0;
			Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_RXPIONT), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(5), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 元宝合成2(byte[] data, int length)
		{
			查百宝阁元宝数();
			byte[] dst = new byte[4];
			Buffer.BlockCopy(data, 11, dst, 0, 4);
			string hex = "AA551F00012A0123171000010000009400000000000000190000000000000000005C9355AA";
			byte[] array = Converter.hexStringToByte(hex);
			if (base.FLD_RXPIONT >= World.元宝合成)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 11, 4);
				元宝合成开关 = 1;
				if (base.PlayerIsDead)
				{
					Move(base.Player_FLD_X, base.Player_FLD_Y, base.Player_FLD_Z, base.Player_FLD_Map);
					base.Player_FLD_HP = base.Player_HP_Max;
					base.Player_Shield = base.Player_Shield_Max;
					Update_HP_MP_SP();
					base.PlayerIsDead = false;
				}
			}
			else
			{
				元宝合成开关 = 0;
				Buffer.BlockCopy(BitConverter.GetBytes(4), 0, array, 11, 4);
			}
			Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_RXPIONT), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 19, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(5), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
			元宝合成开关 = 0;
			Save_data_Rxpiont();
		}

		public void 在线时间奖励()
		{
			try
			{
				foreach (在线时间奖励类 value in World.在线时间奖励数据.Values)
				{
					if (base.总在线时间 == value.时间分钟)
					{
						string[] array = World.升级会员需要属性.Split(',');
						if (value.武勋 != 0)
						{
							base.Player_WuXun += value.武勋;
							GameMessage("得到武勋" + value.武勋.ToString() + "点！", 20, "在线时间奖励");
							UpdatePowersAndStatus();
						}
						if (value.套装ID != 0)
						{
							int num = 得到包裹空位位置();
							if (num == -1)
							{
								GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20, "在线时间奖励");
								break;
							}
							byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							byte[] 物品属性 = new byte[56];
							增加物品(bytes, BitConverter.GetBytes(value.套装ID), num, BitConverter.GetBytes(1), 物品属性, 绑定: false);
							GameMessage("恭喜你获得一个礼包。快快打开看吧", 20, "在线时间奖励");
						}
						if (value.元宝 != 0)
						{
							查百宝阁元宝数();
							Add_Del_Rxpiont(value.元宝, 1);
							GameMessage("得到" + value.元宝.ToString() + "个元宝！", 20, "在线时间奖励");
							Save_data_Rxpiont();
						}
						if (value.生命 != 0)
						{
							base.奖励_追加_生命 += value.生命;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.生命.ToString() + "生命值！", 20, "在线时间奖励");
						}
						if (value.攻击 != 0 && base.奖励_追加_攻击 < long.Parse(array[0]))
						{
							base.奖励_追加_攻击 += value.攻击;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.攻击.ToString() + "攻击值！", 20, "在线时间奖励");
						}
						if (value.防御 != 0 && base.奖励_追加_防御 < long.Parse(array[1]))
						{
							base.奖励_追加_防御 += value.防御;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.防御.ToString() + "防御值！", 20, "在线时间奖励");
						}
						if (value.回避 != 0)
						{
							base.奖励_追加_回避 += value.回避;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.回避.ToString() + "回避值！", 20, "在线时间奖励");
						}
						if (value.命中 != 0)
						{
							base.奖励_追加_命中 += value.命中;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.命中.ToString() + "命中值！", 20, "在线时间奖励");
						}
						if (value.内功 != 0)
						{
							base.奖励_追加_内功 += value.内功;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.内功.ToString() + "内功值！", 20, "在线时间奖励");
						}
						if (value.金钱 != "")
						{
							base.Player_Money += long.Parse(value.金钱);
							GameMessage("得到游戏币" + value.金钱 + "两！", 20, "在线时间奖励");
							得到钱的提示(uint.Parse(value.金钱));
							Update_Money_Weight();
						}
						if (value.单件物品 != "")
						{
							int num2 = 得到包裹空位位置();
							if (num2 == -1)
							{
								GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20, "在线时间奖励");
								break;
							}
							string[] array2 = value.单件物品.Split(';');
							百宝增加物品带属性(int.Parse(array2[0]), num2, int.Parse(array2[1]), int.Parse(array2[2]), int.Parse(array2[3]), int.Parse(array2[4]), int.Parse(array2[5]), int.Parse(array2[6]), int.Parse(array2[7]), int.Parse(array2[8]), int.Parse(array2[9]), int.Parse(array2[10]), int.Parse(array2[11]));
							GameMessage("恭喜你获得一件奖品。快快打开看吧", 20, "在线时间奖励");
						}
						if (value.会员天数 != 0)
						{
							DateTime now = DateTime.Now;
							now = DateTime.Now.AddDays(value.会员天数);
							base.FLD_VIP = 1;
							base.FLD_VIPTIM = now;
							保存会员数据();
							GameMessage("恭喜你获得" + value.会员天数.ToString() + "天会员,请小退后查收！", 10, "在线时间奖励");
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "在线时间奖励系统出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void _Make_Item_Option(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				ItmeClass value;
				if (World.Newversion >= 16)
				{
					if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
					{
						byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
						if (value.FLD_SIDE != 0)
						{
							byte[] array2 = new byte[4];
							Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
							物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
							if (物品类 != null)
							{
								位置 = 物品类.Bag;
								物品全局ID = 物品类.物品全局ID;
								物品属性 = 物品类.Get_Byte_Item_Option;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
								if (物品类.物品绑定)
								{
									Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
								}
							}
							else
							{
								long dbItmeId = RxjhClass.GetDbItmeId();
								物品全局ID = BitConverter.GetBytes(dbItmeId);
							}
						}
						else
						{
							数量 = BitConverter.GetBytes(1);
						}
						Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
						Buffer.BlockCopy(物品ID, 0, array, 8, 4);
						Buffer.BlockCopy(数量, 0, array, 12, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, 物品属性, 44, 2);
						Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
						Item_In_Bag[位置].Byte_Item = array;
						Update_Item_In_Bag();
					}
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					string hex = "AA556B0001940223005C00010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (value.FLD_SIDE != 0)
					{
						byte[] array2 = new byte[4];
						Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
						if (物品类 != null)
						{
							位置 = 物品类.Bag;
							物品全局ID = 物品类.物品全局ID;
							物品属性 = 物品类.Get_Byte_Item_Option;
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
							if (物品类.物品绑定)
							{
								Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
								Buffer.BlockCopy(BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 20000), 0, array3, 23, 4);
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
					Buffer.BlockCopy(物品ID, 0, array, 8, 4);
					Buffer.BlockCopy(数量, 0, array, 12, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, 物品属性, 44, 2);
					Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array3, 40, 2);
					Buffer.BlockCopy(array, 0, array3, 15, 12);
					Buffer.BlockCopy(array, 12, array3, 31, 4);
					Buffer.BlockCopy(array, 16, array3, 47, 物品属性.Length);
					Item_In_Bag[位置].Byte_Item = array;
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void Make_Item_Upgrade(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				ItmeClass value;
				if (World.Newversion >= 16)
				{
					if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
					{
						byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
						if (value.FLD_SIDE != 0)
						{
							byte[] array2 = new byte[4];
							Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
							物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
							if (物品类 != null)
							{
								位置 = 物品类.Bag;
								物品全局ID = 物品类.物品全局ID;
								物品属性 = 物品类.Get_Byte_Item_Option;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
								if (物品类.物品绑定)
								{
									Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
								}
							}
							else
							{
								物品全局ID = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							}
						}
						else
						{
							数量 = BitConverter.GetBytes(1);
						}
						Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
						Buffer.BlockCopy(物品ID, 0, array, 8, 4);
						Buffer.BlockCopy(数量, 0, array, 12, 4);
						Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
						Item_In_Bag[位置].Byte_Item = array;
						Update_Item_In_Bag();
					}
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					string hex = "AA556B0001940223005C00010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (value.FLD_SIDE != 0)
					{
						byte[] array2 = new byte[4];
						Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
						if (物品类 != null)
						{
							位置 = 物品类.Bag;
							物品全局ID = 物品类.物品全局ID;
							物品属性 = 物品类.Get_Byte_Item_Option;
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
							if (物品类.物品绑定)
							{
								Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
								Buffer.BlockCopy(BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 20000), 0, array3, 23, 4);
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
					Buffer.BlockCopy(物品ID, 0, array, 8, 4);
					Buffer.BlockCopy(数量, 0, array, 12, 4);
					Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array3, 40, 2);
					Buffer.BlockCopy(array, 0, array3, 15, 12);
					Buffer.BlockCopy(array, 12, array3, 31, 4);
					Buffer.BlockCopy(array, 16, array3, 47, 物品属性.Length);
					Item_In_Bag[位置].Byte_Item = array;
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性, bool 绑定)
		{
			try
			{
				ItmeClass value;
				if (World.Newversion >= 16)
				{
					if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
					{
						byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
						if (value.FLD_SIDE != 0)
						{
							byte[] array2 = new byte[4];
							Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
							物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
							if (物品类 != null)
							{
								位置 = 物品类.Bag;
								物品全局ID = 物品类.物品全局ID;
								物品属性 = 物品类.Get_Byte_Item_Option;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
							}
							else
							{
								物品全局ID = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							}
						}
						else
						{
							数量 = BitConverter.GetBytes(1);
						}
						Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
						Buffer.BlockCopy(物品ID, 0, array, 8, 4);
						Buffer.BlockCopy(数量, 0, array, 12, 4);
						Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
						Buffer.BlockCopy(物品属性, 55, array, 71, 1);
						if (绑定)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
						}
						Item_In_Bag[位置].Byte_Item = array;
						Update_Item_In_Bag();
					}
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					string hex = "AA556B0001940223005C00010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (value.FLD_SIDE != 0)
					{
						byte[] array2 = new byte[4];
						Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
						if (物品类 != null)
						{
							位置 = 物品类.Bag;
							物品全局ID = 物品类.物品全局ID;
							物品属性 = 物品类.Get_Byte_Item_Option;
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
					Buffer.BlockCopy(物品ID, 0, array, 8, 4);
					Buffer.BlockCopy(数量, 0, array, 12, 4);
					Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array3, 40, 2);
					Buffer.BlockCopy(array, 0, array3, 15, 12);
					Buffer.BlockCopy(array, 12, array3, 31, 4);
					Buffer.BlockCopy(array, 16, array3, 47, 物品属性.Length);
					if (绑定)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 20000), 0, array3, 23, 4);
					}
					Item_In_Bag[位置].Byte_Item = array;
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错1 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品2(byte[] 物品全局ID, byte[] 物品ID, int 位置, byte[] 数量, byte[] 物品属性)
		{
			try
			{
				ItmeClass value;
				if (World.Newversion >= 16)
				{
					if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
					{
						byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
						if (value.FLD_SIDE != 0)
						{
							byte[] array2 = new byte[4];
							Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
							物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
							if (物品类 != null)
							{
								位置 = 物品类.Bag;
								物品全局ID = 物品类.物品全局ID;
								物品属性 = 物品类.Get_Byte_Item_Option;
								数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
								if (物品类.物品绑定)
								{
									Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
								}
							}
							else
							{
								物品全局ID = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							}
						}
						else
						{
							数量 = BitConverter.GetBytes(1);
						}
						Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
						Buffer.BlockCopy(物品ID, 0, array, 8, 4);
						Buffer.BlockCopy(数量, 0, array, 12, 4);
						Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
						if (value.FLD_CJL != 0)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_CJL), 0, array, 60, 2);
						}
						Item_In_Bag[位置].Byte_Item = array;
						Update_Item_In_Bag();
					}
				}
				else if (World.Itme.TryGetValue(BitConverter.ToInt32(物品ID, 0), out value))
				{
					string hex = "AA556B000194020D005C00010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					byte[] array = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (value.FLD_SIDE != 0)
					{
						byte[] array2 = new byte[4];
						Buffer.BlockCopy(物品属性, 0, array2, 0, 4);
						物品类 物品类 = 得到人物物品类型(BitConverter.ToInt32(物品ID, 0), BitConverter.ToInt32(array2, 0));
						if (物品类 != null)
						{
							位置 = 物品类.Bag;
							物品全局ID = 物品类.物品全局ID;
							物品属性 = 物品类.Get_Byte_Item_Option;
							数量 = BitConverter.GetBytes(BitConverter.ToInt32(物品类.Item_Amount, 0) + BitConverter.ToInt32(数量, 0));
							if (物品类.物品绑定)
							{
								Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 72, 1);
								Buffer.BlockCopy(BitConverter.GetBytes(BitConverter.ToInt32(物品ID, 0) + 20000), 0, array3, 23, 4);
							}
						}
						else
						{
							物品全局ID = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
						}
					}
					else
					{
						数量 = BitConverter.GetBytes(1);
					}
					Buffer.BlockCopy(物品全局ID, 0, array, 0, 8);
					Buffer.BlockCopy(物品ID, 0, array, 8, 4);
					Buffer.BlockCopy(数量, 0, array, 12, 4);
					Buffer.BlockCopy(物品属性, 0, array, 16, 物品属性.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array3, 40, 2);
					Buffer.BlockCopy(array, 0, array3, 15, 12);
					Buffer.BlockCopy(array, 12, array3, 31, 4);
					Buffer.BlockCopy(array, 16, array3, 47, 物品属性.Length);
					if (value.FLD_CJL != 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_CJL), 0, array, 60, 2);
					}
					Item_In_Bag[位置].Byte_Item = array;
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错2 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + BitConverter.ToInt32(数量, 0) + "]" + ex.Message);
			}
		}

		public void 增加物品Script(int 物品ID, int 空位, int 数量)
		{
			byte[] array = new byte[56];
			if (World.Itme.TryGetValue(物品ID, out ItmeClass value))
			{
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC0), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC1), 0, array, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC2), 0, array, 8, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC3), 0, array, 12, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(value.FLD_MAGIC4), 0, array, 16, 4);
				byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
				增加物品2(bytes, BitConverter.GetBytes(物品ID), 空位, BitConverter.GetBytes(数量), array);
			}
		}

		public void 增加物品带属性(int 物品ID, int 位置, int 数量, int 物品属性0, int 物品属性1, int 物品属性2, int 物品属性3, int 物品属性4, int 初级附魂, int 中级附魂, int 进化, int 绑定)
		{
			try
			{
				ItmeClass value;
				if (World.Newversion >= 16)
				{
					if (World.Itme.TryGetValue(物品ID, out value))
					{
						byte[] array = new byte[56];
						Buffer.BlockCopy(BitConverter.GetBytes(物品属性0), 0, array, 0, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(物品属性1), 0, array, 4, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(物品属性2), 0, array, 8, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(物品属性3), 0, array, 12, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(物品属性4), 0, array, 16, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(初级附魂), 0, array, 46, 4);
						if (中级附魂 > 0)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 22, 2);
						}
						Buffer.BlockCopy(BitConverter.GetBytes(中级附魂), 0, array, 24, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(进化), 0, array, 52, 4);
						long value2 = RxjhClass.GetDbItmeId();
						byte[] array2 = new byte[(World.Newversion >= 14) ? 76 : 73];
						if (value.FLD_SIDE != 0)
						{
							物品类 物品类 = 得到人物物品类型(物品ID, 物品属性0);
							if (物品类 != null)
							{
								位置 = 物品类.Bag;
								value2 = BitConverter.ToInt64(物品类.物品全局ID, 0);
								数量 = BitConverter.ToInt32(物品类.Item_Amount, 0) + 数量;
							}
						}
						else
						{
							数量 = 1;
						}
						Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array2, 0, 8);
						Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array2, 8, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array2, 12, 4);
						Buffer.BlockCopy(array, 0, array2, 16, array.Length);
						if (绑定 == 1)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 72, 1);
						}
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 60, 2);
						Item_In_Bag[位置].Byte_Item = array2;
						Update_Item_In_Bag();
					}
				}
				else if (World.Itme.TryGetValue(物品ID, out value))
				{
					byte[] array = new byte[56];
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性0), 0, array, 0, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性1), 0, array, 4, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性2), 0, array, 8, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性3), 0, array, 12, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(物品属性4), 0, array, 16, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(初级附魂), 0, array, 46, 4);
					if (中级附魂 > 0)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array, 22, 2);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(中级附魂), 0, array, 24, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(进化), 0, array, 52, 4);
					long value2 = RxjhClass.GetDbItmeId();
					string hex = "AA556B000194020D005C00010000008716E567818320060208AF2F000000000100000000000000010F020F00020000470D030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C3E755AA";
					byte[] array3 = Converter.hexStringToByte(hex);
					byte[] array2 = new byte[(World.Newversion >= 14) ? 76 : 73];
					if (value.FLD_SIDE != 0)
					{
						物品类 物品类 = 得到人物物品类型(物品ID, 物品属性0);
						if (物品类 != null)
						{
							位置 = 物品类.Bag;
							value2 = BitConverter.ToInt64(物品类.物品全局ID, 0);
							数量 = BitConverter.ToInt32(物品类.Item_Amount, 0) + 数量;
						}
					}
					else
					{
						数量 = 1;
					}
					Buffer.BlockCopy(BitConverter.GetBytes(value2), 0, array2, 0, 8);
					Buffer.BlockCopy(BitConverter.GetBytes(物品ID), 0, array2, 8, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array2, 12, 4);
					Buffer.BlockCopy(array, 0, array2, 16, array.Length);
					Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array3, 40, 2);
					Buffer.BlockCopy(array2, 0, array3, 15, 12);
					Buffer.BlockCopy(array2, 12, array3, 31, 4);
					Buffer.BlockCopy(array2, 16, array3, 47, array.Length);
					if (绑定 == 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 72, 1);
						Buffer.BlockCopy(BitConverter.GetBytes(物品ID + 20000), 0, array3, 23, 4);
					}
					Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array2, 60, 2);
					Item_In_Bag[位置].Byte_Item = array2;
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send(array3, array3.Length);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "增加物品出错1 [" + base.Userid + "][" + base.UserName + "] 位置[" + 位置 + "] 数量[" + 数量 + "]" + ex.Message);
			}
		}

		public void 长白丹(byte[] data, int length)
		{
			try
			{
				PacketVerify(data, length);
				byte[] array = new byte[4];
				Buffer.BlockCopy(data, 19, array, 0, 2);
				if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array, 0)].Get_Byte_Item_PID, 0) == 1008000009 || BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array, 0)].Get_Byte_Item_PID, 0) == 1008000010)
				{
					Send_Packet_Delete_Item(BitConverter.ToInt32(array, 0), 1);
					int num = 0;
					for (int i = 0; i < 12; i++)
					{
						if (data[19 + i * 4] != 0)
						{
							int num2 = data[19 + i * 4];
							for (int j = 0; j < 12; j++)
							{
								if (气功[j].气功ID == data[19 + i * 4])
								{
									int num3 = data[21 + i * 4];
									num += data[21 + i * 4];
									气功类 气功类 = 气功[j];
									气功类.气功量 -= num3;
									break;
								}
							}
						}
					}
					base.Player_Qigong_point += num;
					string hex = "AA553600015204021027000100060007FC64EF294B210809DC143C0000000000000500000000000000000000000000000000000000000000D01155AA";
					byte[] array2 = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
					if (base.Client != null)
					{
						base.Client.Send多包(array2, array2.Length);
					}
					Update_Character_Wear_Item();
					UpdatePowersAndStatus();
					Update_HP_MP_SP();
				}
			}
			catch (Exception arg)
			{
				Form1.WriteLine(1, "长白丹 出错：" + arg);
			}
		}

		public void Sp_Ask(byte[] data, int lenght)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && data[13 + i] != 0; i++)
				{
					array[i] = data[13 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
					.Trim();
				switch (data[11])
				{
					case 1:
						if ((base.FLD_Student1 != "" && base.FLD_Student2 != "" && base.FLD_Student3 != "") || base.FLD_Teacher == text)
						{
							Send_Packet_Teacher(21, text);
						}
						else if (base.Player_Job_Level < 2)
						{
							Send_Packet_Teacher(11, text);
						}
						else
						{
							Players players2 = World.FindPlayerbyName(text);
							if (players2 != null)
							{
								if (players2.FLD_Teacher != "")
								{
									Send_Packet_Teacher(22, text);
								}
								else if (players2.Player_Job_Level < 1)
								{
									Send_Packet_Teacher(12, text);
								}
								else if (base.Player_Level - players2.Player_Level < 20)
								{
									Send_Packet_Teacher(13, text);
								}
								else if (players2.Player_Zx == 0 || base.Player_Zx == 0)
								{
									GameMessage("Baòn chýa thãng chýìc lâÌn 2", 9);
								}
								else if (players2.Player_Zx != 0 && base.Player_Zx != players2.Player_Zx)
								{
									Send_Packet_Teacher(14, text);
								}
								else if (base.Player_Job != players2.Player_Job && World.Sudocungphai == 1)
								{
									GameMessage("Không cuÌng nghêÌ nghiêòp", 9);
								}
								else if (!Check_Radius_Player(40, players2))
								{
									Send_Packet_Teacher(15, text);
								}
								else
								{
									base.Teacher_Student_Temporary = text;
									players2.Teacher_Student_Temporary = base.UserName;
									Send_Packet_Teacher(257, text);
									players2.Send_Packet_Teacher(257, base.UserName);
								}
							}
							else
							{
								Send_Packet_Teacher(41, text);
							}
						}
						break;
					case 2:
						if (base.FLD_Teacher != "")
						{
							Send_Packet_Teacher(22, text);
						}
						else if (base.Player_Job_Level < 1)
						{
							Send_Packet_Teacher(12, text);
						}
						else
						{
							Players players = World.FindPlayerbyName(text);
							if (players != null)
							{
								if (players.FLD_Student1 != "" && players.FLD_Student2 != "" && players.FLD_Student3 != "")
								{
									Send_Packet_Teacher(21, text);
								}
								else if (players.Player_Job_Level < 2)
								{
									Send_Packet_Teacher(11, text);
								}
								else if (players.Player_Level - base.Player_Level < 20)
								{
									Send_Packet_Teacher(13, text);
								}
								else if (players.Player_Zx == 0 || base.Player_Zx == 0)
								{
									GameMessage("Baòn chýa thãng chýìc lâÌn 2", 9);
								}
								else if (base.Player_Zx != 0 && base.Player_Zx != players.Player_Zx)
								{
									Send_Packet_Teacher(14, text);
								}
								else if (base.Player_Job != players.Player_Job && World.Sudocungphai == 1)
								{
									GameMessage("Không cuÌng nghêÌ nghiêòp", 9);
								}
								else if (!Check_Radius_Player(40, players))
								{
									Send_Packet_Teacher(15, text);
								}
								else
								{
									base.Teacher_Student_Temporary = text;
									players.Teacher_Student_Temporary = base.UserName;
									Send_Packet_Teacher(513, text);
									players.Send_Packet_Teacher(513, base.UserName);
								}
							}
							else
							{
								Send_Packet_Teacher(41, text);
							}
						}
						break;
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void Sp_ReQuest(byte[] data, int lenght)
		{
			try
			{
				int num = data[11];
				int num2 = data[12];
				Players players = World.FindPlayerbyName(base.Teacher_Student_Temporary);
				if (players != null)
				{
					switch (num)
					{
						case 1:
							switch (num2)
							{
								case 1:
									{
										int num3 = 3;
										players.FLD_Teacher = players.Teacher_Student_Temporary;
										if (base.FLD_Student1 == "")
										{
											num3 = 0;
											base.FLD_Student1 = base.Teacher_Student_Temporary;
										}
										else if (base.FLD_Student2 == "")
										{
											num3 = 1;
											base.FLD_Student2 = base.Teacher_Student_Temporary;
										}
										else
										{
											if (!(base.FLD_Student3 == ""))
											{
												players.GameMessage("Doi phuong da co de tu", 10);
												GameMessage("Ban da nhan de tu roi", 10);
												base.Teacher_Student_Temporary = "";
												players.Teacher_Student_Temporary = "";
												method_323(514, "");
												players.method_323(514, base.UserName);
												break;
											}
											num3 = 2;
											base.FLD_Student3 = base.Teacher_Student_Temporary;
										}
										if (num3 != 3)
										{
											method_323(257, base.Teacher_Student_Temporary);
											players.Write_Name_Teacher();
											Write_Student(num3, base.Teacher_Student_Temporary);
											players.GameMessage("Bai su thaÌnh công, su phu la: " + players.Teacher_Student_Temporary, 10);
											GameMessage("Bai su thaÌnh công, de tu la: " + base.Teacher_Student_Temporary, 10);
											base.Teacher_Student_Temporary = "";
											players.Teacher_Student_Temporary = "";
											players.method_324(769, "偷包的是孙子");
										}
										break;
									}
								case 2:
									base.Teacher_Student_Temporary = "";
									players.Teacher_Student_Temporary = "";
									method_323(513, "");
									players.method_323(513, base.UserName);
									break;
							}
							break;
						case 2:
							switch (num2)
							{
								case 1:
									{
										int num3 = 3;
										base.FLD_Teacher = base.Teacher_Student_Temporary;
										if (players.FLD_Student1 == "")
										{
											num3 = 0;
											players.FLD_Student1 = players.Teacher_Student_Temporary;
										}
										else if (players.FLD_Student2 == "")
										{
											num3 = 1;
											players.FLD_Student2 = players.Teacher_Student_Temporary;
										}
										else
										{
											if (!(players.FLD_Student3 == ""))
											{
												GameMessage("Doi phuong da co de tu", 10);
												players.GameMessage("Ban da nhan de tu roi", 10);
												players.Teacher_Student_Temporary = "";
												base.Teacher_Student_Temporary = "";
												players.method_323(514, "");
												method_323(514, players.UserName);
												break;
											}
											num3 = 2;
											players.FLD_Student3 = players.Teacher_Student_Temporary;
										}
										if (num3 != 3)
										{
											players.method_323(257, players.Teacher_Student_Temporary);
											Write_Name_Teacher();
											players.Write_Student(num3, players.Teacher_Student_Temporary);
											GameMessage("Bai su thaÌnh công, su phu la: " + base.Teacher_Student_Temporary, 10);
											players.GameMessage("Bai su thaÌnh công, de tu la: " + players.Teacher_Student_Temporary, 10);
											players.Teacher_Student_Temporary = "";
											base.Teacher_Student_Temporary = "";
											method_324(769, "偷包的是孙子");
										}
										break;
									}
								case 2:
									base.Teacher_Student_Temporary = "";
									players.Teacher_Student_Temporary = "";
									method_323(514, "");
									players.method_323(514, base.UserName);
									break;
							}
							break;
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统请求 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void Sp_Cancel(byte[] data, int lenght)
		{
			try
			{
				int num = data[11];
				int num2 = data[12];
				Players players = World.FindPlayerbyName(base.Teacher_Student_Temporary);
				if (players != null)
				{
					int num3;
					switch (num)
					{
						case 1:
							if (num2 == 3)
							{
								method_324(769, "偷包的是孙子");
								players.method_324(769, "偷包的是孙子");
							}
							return;
						case 2:
							num3 = ((num2 != 3) ? 1 : 0);
							break;
						default:
							num3 = 1;
							break;
					}
					if (num3 == 0)
					{
						method_324(770, "偷包的是孙子");
						players.method_324(769, "偷包的是孙子");
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统取消 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void method_323(int id, string name)
		{
			string hex = "AA55210001D5034310120001020F000000000000000000000000000000000000000000DBE955AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(name);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 2);
			Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void method_324(int id, string name)
		{
			string hex = "AA55210001FF034510120001020F0000000000000000000000000000000000000000008BA555AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(name);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 2);
			Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Delete_Teacher_Student(int id, string name)
		{
			string hex = "AA55210001D5034710120001010F000000000000000000000000000000000000000000DBE955AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(name);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 11, 2);
			Buffer.BlockCopy(bytes, 0, array, 14, bytes.Length);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void Sp_Refused(byte[] data, int lenght)
		{
			try
			{
				int num = data[11];
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && data[13 + i] != 0; i++)
				{
					array[i] = data[13 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
					.Trim();
				switch (num)
				{
					case 1:
						{
							if (base.FLD_Student1 == text)
							{
								base.FLD_Student1 = "";
							}
							else if (base.FLD_Student2 == text)
							{
								base.FLD_Student2 = "";
							}
							else if (base.FLD_Student3 == text)
							{
								base.FLD_Student3 = "";
							}
							Delete_Teacher_Student(257, text);
							Players players2 = World.FindPlayerbyName(text);
							if (players2 != null)
							{
								if (disable_Skill_List.Contains(players2.FLD_师徒_武功ID1_1))
								{
									disable_Skill_List.Remove(players2.FLD_师徒_武功ID1_1);
								}
								if (disable_Skill_List.Contains(players2.FLD_师徒_武功ID1_2))
								{
									disable_Skill_List.Remove(players2.FLD_师徒_武功ID1_2);
								}
								if (disable_Skill_List.Contains(players2.FLD_师徒_武功ID1_3))
								{
									disable_Skill_List.Remove(players2.FLD_师徒_武功ID1_3);
								}
								players2.FLD_Teacher = "";
								players2.FLD_师徒_武功ID1_1 = 0;
								players2.FLD_师徒_武功ID1_2 = 0;
								players2.FLD_师徒_武功ID1_3 = 0;
								players2.Delete_Teacher_Student(257, base.UserName);
							}
							else
							{
								DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_师傅='',FLD_师徒武功1_1=0,FLD_师徒武功1_2=0,FLD_师徒武功1_3=0 WHERE FLD_NAME='{text}'");
							}
							break;
						}
					case 2:
						{
							base.FLD_师徒_武功ID1_1 = 0;
							base.FLD_师徒_武功ID1_2 = 0;
							base.FLD_师徒_武功ID1_3 = 0;
							base.FLD_Teacher = "";
							Delete_Teacher_Student(257, text);
							Players players = World.FindPlayerbyName(text);
							if (players != null)
							{
								if (players.disable_Skill_List.Contains(base.FLD_师徒_武功ID1_1))
								{
									players.disable_Skill_List.Remove(base.FLD_师徒_武功ID1_1);
								}
								if (players.disable_Skill_List.Contains(base.FLD_师徒_武功ID1_2))
								{
									players.disable_Skill_List.Remove(base.FLD_师徒_武功ID1_2);
								}
								if (players.disable_Skill_List.Contains(base.FLD_师徒_武功ID1_3))
								{
									players.disable_Skill_List.Remove(base.FLD_师徒_武功ID1_3);
								}
								if (players.FLD_Student1 == base.UserName)
								{
									players.FLD_Student1 = "";
								}
								else if (players.FLD_Student2 == base.UserName)
								{
									players.FLD_Student2 = "";
								}
								else if (players.FLD_Student3 == base.UserName)
								{
									players.FLD_Student3 = "";
								}
								players.Delete_Teacher_Student(257, base.UserName);
							}
							else
							{
								string sqlCommand = $"select * from [TBL_XWWL_Char] where FLD_NAME=@teacher";
								SqlParameter[] prams = new SqlParameter[1]
								{
							SqlDBA.MakeInParam("@teacher", SqlDbType.VarChar, 30, text)
								};
								DataTable dBToDataTable = DBA.GetDBToDataTable(sqlCommand, prams);
								if (dBToDataTable.Rows[0]["FLD_徒弟1"].ToString() == base.UserName)
								{
									DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_徒弟1='' WHERE FLD_NAME='{text}'");
								}
								else if (dBToDataTable.Rows[0]["FLD_徒弟2"].ToString() == base.UserName)
								{
									DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_徒弟2='' WHERE FLD_NAME='{text}'");
								}
								else if (dBToDataTable.Rows[0]["FLD_徒弟3"].ToString() == base.UserName)
								{
									DBA.ExeSqlCommand($"UPDATE TBL_XWWL_Char SET FLD_徒弟3='' WHERE FLD_NAME='{text}'");
								}
							}
							break;
						}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒系统解除 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void Sp_Check_MasterStudent(byte[] data, int lenght)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && data[13 + i] != 0; i++)
				{
					array[i] = data[13 + i];
				}
				Players players = World.FindPlayerbyName(Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
					.Trim());
				if (players != null)
				{
					string hex = "AA55100001D5036110010003000000000000EC0F55AA";
					byte[] array2 = Converter.hexStringToByte(hex);
					Buffer.BlockCopy(BitConverter.GetBytes(players.UserSessionID), 0, array2, 5, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(players.Player_Job), 0, array2, 11, 1);
					if (base.Client != null)
					{
						base.Client.Send多包(array2, array2.Length);
					}
				}
				else
				{
					string hex2 = "AA55100001D5036110010003000000000000EC0F55AA";
					byte[] array3 = Converter.hexStringToByte(hex2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
					Buffer.BlockCopy(BitConverter.GetBytes(base.Player_Job), 0, array3, 11, 1);
					if (base.Client != null)
					{
						base.Client.Send多包(array3, array3.Length);
					}
				}
				if (base.FLD_Student1 != "")
				{
					Write_Student(0, base.FLD_Student1);
				}
				if (base.FLD_Student2 != "")
				{
					Write_Student(1, base.FLD_Student2);
				}
				if (base.FLD_Student3 != "")
				{
					Write_Student(2, base.FLD_Student3);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒武功检查 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void Sp_Learn_Skill(byte[] data, int lenght)
		{
			try
			{
				byte[] array = new byte[15];
				for (int i = 0; i < 15 && data[13 + i] != 0; i++)
				{
					array[i] = data[13 + i];
				}
				string text = Encoding.GetEncoding(1252).GetString(array).Replace("\0", "")
					.Trim();
				byte[] array2 = new byte[4];
				int num = data[28];
				Buffer.BlockCopy(data, 29, array2, 0, 4);
				Players players = World.FindPlayerbyName(text);
				if (players != null && World.TblKongfu.TryGetValue(BitConverter.ToInt32(array2, 0), out MartialArts value) && players.Player_Job_Level >= value.FLD_JOBLEVEL - 1)
				{
					if (num == 0)
					{
						if (players.FLD_师徒_武功ID1_1 == 0)
						{
							players.FLD_师徒_武功ID1_1 = BitConverter.ToInt32(array2, 0);
							players.Add_KongFu_Student();
							if (!disable_Skill_List.Contains(BitConverter.ToInt32(array2, 0)))
							{
								disable_Skill_List.Add(BitConverter.ToInt32(array2, 0));
							}
							if (base.FLD_Student1 == text)
							{
								Write_Student(0, text);
							}
							else if (base.FLD_Student2 == text)
							{
								Write_Student(1, text);
							}
							else if (base.FLD_Student3 == text)
							{
								Write_Student(2, text);
							}
						}
						else
						{
							GameMessage("ÐaÞ truyêÌn thuò voÞ công rôÌi", 10);
						}
					}
					if (num == 1)
					{
						if (players.FLD_师徒_武功ID1_2 == 0)
						{
							players.FLD_师徒_武功ID1_2 = BitConverter.ToInt32(array2, 0);
							players.Add_KongFu_Student();
							if (!disable_Skill_List.Contains(BitConverter.ToInt32(array2, 0)))
							{
								disable_Skill_List.Add(BitConverter.ToInt32(array2, 0));
							}
							if (base.FLD_Student1 == text)
							{
								Write_Student(0, text);
							}
							else if (base.FLD_Student2 == text)
							{
								Write_Student(1, text);
							}
							else if (base.FLD_Student3 == text)
							{
								Write_Student(2, text);
							}
						}
						else
						{
							GameMessage("ÐaÞ truyêÌn thuò voÞ công rôÌi", 10);
						}
					}
					if (num == 2)
					{
						if (players.FLD_师徒_武功ID1_3 == 0)
						{
							players.FLD_师徒_武功ID1_3 = BitConverter.ToInt32(array2, 0);
							players.Add_KongFu_Student();
							if (!disable_Skill_List.Contains(BitConverter.ToInt32(array2, 0)))
							{
								disable_Skill_List.Add(BitConverter.ToInt32(array2, 0));
							}
							if (base.FLD_Student1 == text)
							{
								Write_Student(0, text);
							}
							else if (base.FLD_Student2 == text)
							{
								Write_Student(1, text);
							}
							else if (base.FLD_Student3 == text)
							{
								Write_Student(2, text);
							}
						}
						else
						{
							GameMessage("ÐaÞ truyêÌn thuò voÞ công rôÌi", 10);
						}
					}
					UpdatePowersAndStatus();
					players.UpdatePowersAndStatus();
				}
				if (players == null)
				{
					GameMessage("Ðêò týÒ không trýòc tuyêìn", 10);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "师徒传授武功 出错" + base.Client.WorldId + "|" + base.Client.ToString() + " " + ex.Message);
			}
		}

		public void Add_KongFu_Student()
		{
			string hex = "AA551C0001D50349100D0001000000000000000000000000000000000000A15D55AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.FLD_师徒_武功ID1_1 != 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_师徒_武功ID1_1), 0, array, 12, 4);
			}
			if (base.FLD_师徒_武功ID1_2 != 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_师徒_武功ID1_2), 0, array, 16, 4);
			}
			if (base.FLD_师徒_武功ID1_3 != 0)
			{
				Buffer.BlockCopy(BitConverter.GetBytes(base.FLD_师徒_武功ID1_3), 0, array, 20, 4);
			}
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void method_132(int int_101, int int_102)
		{
			try
			{
				byte[] array = Converter.hexStringToByte("AA552C00002C013B001C003C05000065CA9A3B000000000100000009000000000000000000000000000000000000000055AA");
				byte[] array2 = new byte[4];
				Buffer.BlockCopy(Pet.宠物装备栏[int_101].Byte_Item, 20, array2, 0, 4);
				int num = BitConverter.ToInt32(array2, 0) - 2010000000 - int_102;
				Buffer.BlockCopy(BitConverter.GetBytes(int_101), 0, array, 12, 2);
				Buffer.BlockCopy(Pet.宠物装备栏[int_101].Get_Byte_Item_PID, 0, array, 15, 4);
				if (num <= 0)
				{
					if (BitConverter.ToInt32(Pet.宠物装备栏[int_101].Item_Amount, 0) <= 1)
					{
						Buffer.BlockCopy(BitConverter.GetBytes(0), 0, array, 27, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(2010000000), 0, array, 31, 4);
						Pet.宠物装备栏[int_101].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
					}
					else
					{
						int value = BitConverter.ToInt32(Pet.宠物装备栏[int_101].Item_Amount, 0) - 1;
						Pet.宠物装备栏[int_101].Item_Amount = BitConverter.GetBytes(value);
						Buffer.BlockCopy(BitConverter.GetBytes(2010600000), 0, Pet.宠物装备栏[int_101].Byte_Item, 20, 4);
						Buffer.BlockCopy(Pet.宠物装备栏[int_101].Item_Amount, 0, array, 27, 4);
						Buffer.BlockCopy(BitConverter.GetBytes(2010600000), 0, array, 31, 4);
					}
				}
				else
				{
					Buffer.BlockCopy(BitConverter.GetBytes(num + 2010000000), 0, Pet.宠物装备栏[int_101].Byte_Item, 20, 4);
					Buffer.BlockCopy(Pet.宠物装备栏[int_101].Item_Amount, 0, array, 27, 4);
					Buffer.BlockCopy(BitConverter.GetBytes(num + 2010000000), 0, array, 31, 4);
				}
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				if (base.Client != null)
				{
					base.Client.Send(array, array.Length);
				}
			}
			catch
			{
			}
		}

		public void Summon_pets(byte[] data, int length)
		{
			PacketVerify(data, length);
			if (BitConverter.ToInt32(Item_Wear[14].Get_Byte_Item_PID, 0) != 0 && World.Itme.ContainsKey(BitConverter.ToInt32(Item_Wear[14].Get_Byte_Item_PID, 0)) && Int32_80 != 0)
			{
				ItmeClass itmeClass = World.Itme[BitConverter.ToInt32(Item_Wear[14].Get_Byte_Item_PID, 0)];
				if (itmeClass.FLD_RESIDE2 != 15 && itmeClass.FLD_RESIDE2 != 22)
				{
					return;
				}
				if (Pet == null)
				{
					读出灵兽数据(BitConverter.ToInt64(Item_Wear[14].物品全局ID, 0));
					if (Pet != null && base.Client != null)
					{
						if (Pet.FLD_SXBL == 0)
						{
							Random random = new Random(World.GetRandomSeed());
							string[] array = World.int_12581.Split(';');
							Pet.FLD_SXBL = random.Next(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]));
						}
						if (World.int_1140 != 1 && !World.gclass11_3.ContainsKey(base.UserSessionID))
						{
							World.gclass11_3.Add(base.UserSessionID, this);
						}
						Item_Wear[14].LockMove = true;
						召唤提示(0, 1);
						if (itmeClass.FLD_PID == 1000001377)
						{
							Pet.Bs = 1;
						}
						else if (itmeClass.FLD_PID == 1000001378)
						{
							Pet.Bs = 2;
						}
						else if (itmeClass.FLD_PID == 1000001379)
						{
							Pet.Bs = 3;
						}
						else if (itmeClass.FLD_PID == 1000001380)
						{
							Pet.Bs = 4;
						}
						else if (itmeClass.FLD_PID == 1000001381)
						{
							Pet.Bs = 5;
						}
						if (Pet.FLD_HP <= 0)
						{
							Pet.FLD_HP = 0;
						}
						if (Pet.FLD_HP == 0 && base.Int32_1197 == 99 && Pet.FLD_JOB_LEVEL == 0)
						{
							Pet.FLD_HP += 100;
						}
						if (Pet.FLD_HP == 0 && base.Int32_1198 == 99 && Pet.FLD_JOB_LEVEL == 1)
						{
							Pet.FLD_HP += 100;
						}
						if (Pet.FLD_ZCD == 0 && base.Int32_1199 == 99 && Pet.FLD_JOB_LEVEL == 2)
						{
							Pet.FLD_ZCD += 100;
						}
						if (Pet.FLD_ZCD == 0 && base.Int32_1200 == 99 && Pet.FLD_JOB_LEVEL == 3)
						{
							Pet.FLD_ZCD += 100;
						}
						base.Int32_1196 = 0;
						base.Int32_1197 = 0;
						Pet.Int32_16 = -1;
						Pet.人物坐标_X = base.Player_FLD_X;
						Pet.人物坐标_Y = base.Player_FLD_Y;
						Pet.人物坐标_Z = base.Player_FLD_Z;
						Pet.人物坐标_MAP = base.Player_FLD_Map;
						更新灵兽HP_MP_SP();
						更新灵兽经验和历练();
						更新灵兽武功和状态();
						更新灵兽负重();
						召唤更新显示灵兽数据(this);
						Pet.method_5(this);
						method_192();
						method_193();
						UpdatePowersAndStatus();
						Update_HP_MP_SP();
						method_1911(this);
					}
					else
					{
						eval_m = BitConverter.ToInt64(Item_Wear[14].物品全局ID, 0);
						if (itmeClass.FLD_PID == 1000000065)
						{
							MyPet_Type = 1;
						}
						else if (itmeClass.FLD_PID == 1000000066)
						{
							MyPet_Type = 2;
						}
						else if (itmeClass.FLD_PID == 1000000067)
						{
							MyPet_Type = 3;
						}
						else if (itmeClass.FLD_PID == 1000000068)
						{
							MyPet_Type = 4;
						}
						else if (itmeClass.FLD_PID == 1000000083 || itmeClass.FLD_PID == 1008001201 || itmeClass.FLD_PID == 1008001202 || itmeClass.FLD_PID == 1008001203 || itmeClass.FLD_PID == 1008001204 || itmeClass.FLD_PID == 1008001205 || itmeClass.FLD_PID == 1008001206 || itmeClass.FLD_PID == 1008001207 || itmeClass.FLD_PID == 1008001208 || itmeClass.FLD_PID == 1008001209)
						{
							MyPet_Type = 1;
						}
						else if (itmeClass.FLD_PID == 1000000084)
						{
							MyPet_Type = 2;
						}
						else if (itmeClass.FLD_PID == 1000000085)
						{
							MyPet_Type = 3;
						}
						else if (itmeClass.FLD_PID == 1000000086)
						{
							MyPet_Type = 4;
						}
						else if (itmeClass.FLD_PID == 1000001011 || itmeClass.FLD_PID == 1000001377 || itmeClass.FLD_PID == 1000001378 || itmeClass.FLD_PID == 1000001379)
						{
							MyPet_Type = 5;
						}
						else if (itmeClass.FLD_PID == 1000001380)
						{
							MyPet_Type = 5;
						}
						else if (itmeClass.FLD_PID == 1000001381)
						{
							MyPet_Type = 5;
						}
						Item_Wear[14].LockMove = true;
						召唤提示(0, 100);
					}
				}
				else
				{
					base.Int32_671 = 0;
					base.Int32_672 = 0;
					base.Int32_673 = 0;
					base.Int32_674 = 0;
					UpdatePowersAndStatus();
					Update_HP_MP_SP();
					if (World.int_1140 != 1)
					{
						World.gclass11_3.Remove(base.UserSessionID);
					}
					Pet.计算基本数据();
					Pet.保存数据();
					召唤提示(1, 1);
					解除召唤(this, this);
					Pet.Dispose();
					Pet = null;
					Item_Wear[14].LockMove = false;
				}
			}
			else if (Int32_80 == 0)
			{
				召唤提示(0, 2);
			}
			else
			{
				召唤提示(0, 7);
			}
			更新广播人物数据();
			更新人物数据(this);
		}

		public void method_193()
		{
			byte[] array = Converter.hexStringToByte("AA551F0000549C6A00100000000000000000000000000000000000000000000000000055AA");
			double num = Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL]) - Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL - 1]);
			double num2 = Pet.FLD_EXP - Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL - 1]);
			if (num2 < 1.0)
			{
				Pet.FLD_EXP = Convert.ToInt64(World.Level[Pet.Pet_FLD_LEVEL - 1]);
				num2 = 0.0;
			}
			Buffer.BlockCopy(BitConverter.GetBytes((int)num2), 0, array, 11, 4);
			Buffer.BlockCopy(BitConverter.GetBytes((int)num), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(Pet.全服ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 召唤更新显示灵兽数据(Players thisPlay)
		{
			string hex = "AA556800019E9E64005800010000009E9E0000BDDCBDDC000000000000000000000000000000003203040000000000FA590544000070417F86C64465000000E69EA42770920F24000000008425A627000100009CBBFF43D322BDC370F9CD440000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet_ID), 0, array, 5, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet_ID), 0, array, 15, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(thisPlay.Pet.Name);
			Buffer.BlockCopy(bytes, 0, array, 19, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.Pet_FLD_LEVEL), 0, array, 39, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.FLD_JOB_LEVEL), 0, array, 40, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.FLD_JOB), 0, array, 41, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.Bs), 0, array, 43, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_X), 0, array, 47, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_Z), 0, array, 51, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_Y), 0, array, 55, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_MAP), 0, array, 59, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_X), 0, array, 83, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_Y), 0, array, 91, 4);
			int num = 0;
			while (true)
			{
				bool flag = true;
				if (num >= 4)
				{
					break;
				}
				try
				{
					byte[] get_Byte_Item_PID = Pet.宠物以装备[num].Get_Byte_Item_PID;
				}
				catch
				{
				}
				num++;
			}
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
			发送当前范围广播数据多包(array, array.Length);
		}

		public void 召唤更新显示已装备物品(Players thisPlay)
		{
			string hex
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet_ID), 0, array, 15, 2);
			byte[] bytes = Encoding.GetEncoding(1252).GetBytes(thisPlay.Pet.Name);
			Buffer.BlockCopy(bytes, 0, array, 19, bytes.Length);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.Pet_FLD_LEVEL), 0, array, 39, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.FLD_JOB_LEVEL), 0, array, 41, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.FLD_JOB), 0, array, 42, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_X), 0, array, 47, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_Z), 0, array, 51, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_Y), 0, array, 55, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet.人物坐标_MAP), 0, array, 59, 2);
			int num = 0;
			while (true)
			{
				bool flag = true;
				if (num >= 4)
				{
					break;
				}
				byte[] src;
				try
				{
					src = Pet.宠物以装备[num].Byte_Item;
				}
				catch
				{
					src = new byte[(World.Newversion >= 14) ? 76 : 73];
				}
				Buffer.BlockCopy(src, 0, array, 63 + num * 72, (World.Newversion >= 14) ? 76 : 73);
				num++;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(thisPlay.Pet_ID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 召唤提示(int kg, int id)
		{
			string hex = "AA551300000A005110050000000000030000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(kg), 0, array, 11, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 15, 1);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 制造减去物品(int 位置, int 数量)
		{
			Item_In_Bag[位置].Byte_Item = new byte[(World.Newversion >= 14) ? 76 : 73];
			string hex = "AA552300000000220014000111000041EEF805000000000000000000000000000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes((short)位置), 0, array, 12, 2);
			Buffer.BlockCopy(BitConverter.GetBytes((int)Item_In_Bag[位置].FLD_PID), 0, array, 15, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(数量), 0, array, 23, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 制造物品(int 位置, byte[] 物品ID)
		{
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
			byte[] array = new byte[56];
			ItmeClass itmeClass = new ItmeClass();
			itmeClass = ItmeClass.GetItmeID(BitConverter.ToInt32(物品ID, 0));
			switch (BitConverter.ToInt32(物品ID, 0))
			{
				case 800000011:
					{
						int fLD_MAGIC4 = new Random(World.GetRandomSeed()).Next(100002, 100010);
						物品ID = BitConverter.GetBytes(800000001);
						itmeClass.FLD_MAGIC0 = fLD_MAGIC4;
						break;
					}
				case 800000012:
					{
						int fLD_MAGIC3 = new Random(World.GetRandomSeed()).Next(200002, 200010);
						物品ID = BitConverter.GetBytes(800000002);
						itmeClass.FLD_MAGIC0 = fLD_MAGIC3;
						break;
					}
				case 800000025:
					{
						int fLD_MAGIC2 = new Random(World.GetRandomSeed()).Next(1000002, 1000010);
						物品ID = BitConverter.GetBytes(800000001);
						itmeClass.FLD_MAGIC0 = fLD_MAGIC2;
						break;
					}
				case 800000026:
					{
						int fLD_MAGIC = new Random(World.GetRandomSeed()).Next(700002, 700010);
						物品ID = BitConverter.GetBytes(800000001);
						itmeClass.FLD_MAGIC0 = fLD_MAGIC;
						break;
					}
				case 800000027:
					{
						int num = new Random(World.GetRandomSeed()).Next(0, 7);
						string str = "200";
						string str2 = "000";
						string s = str + num.ToString() + str2;
						物品ID = BitConverter.GetBytes(800000028);
						itmeClass.FLD_MAGIC0 = int.Parse(s);
						break;
					}
			}
			Buffer.BlockCopy(BitConverter.GetBytes(itmeClass.FLD_MAGIC0), 0, array, 0, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeClass.FLD_MAGIC1), 0, array, 4, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeClass.FLD_MAGIC2), 0, array, 8, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeClass.FLD_MAGIC3), 0, array, 12, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(itmeClass.FLD_MAGIC4), 0, array, 16, 4);
			_Make_Item_Option(bytes, 物品ID, 位置, BitConverter.GetBytes(1), array);
		}

		public void 制造物品2(int 位置, byte[] 物品ID)
		{
			string hex = "AA5543000000002300340001000000CE4303000000000043EEF8050100000000000000010A0003010000014F68333CE3969800E3969800E3969800E3969800000000000000000055AA";
			byte[] array = Converter.hexStringToByte(hex);
			byte[] array2 = new byte[(World.Newversion >= 14) ? 76 : 73];
			Buffer.BlockCopy(BitConverter.GetBytes(RxjhClass.GetDbItmeId()), 0, array2, 0, 4);
			Buffer.BlockCopy(物品ID, 0, array2, 8, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(1), 0, array2, 12, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(位置), 0, array, 36, 2);
			Buffer.BlockCopy(array2, 0, array, 15, 16);
			Buffer.BlockCopy(array2, 16, array, 43, 20);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send(array, array.Length);
			}
		}

		public void 制作分解检查(byte[] data, int length)
		{
		}

		public void 制作分解系统(byte[] data, int length)
		{
			PacketVerify(data, length);
			byte[] array = new byte[4];
			byte[] array2 = new byte[4];
			Buffer.BlockCopy(data, 19, array, 0, 4);
			Buffer.BlockCopy(data, 27, array2, 0, 4);
			if (Item_In_Bag[BitConverter.ToInt32(array2, 0)].物品绑定)
			{
				分解物品提示(-1);
				return;
			}
			if (BitConverter.ToInt32(Item_In_Bag[BitConverter.ToInt32(array2, 0)].Get_Byte_Item_PID, 0) != BitConverter.ToInt32(array, 0))
			{
				分解物品提示(-1);
				return;
			}
			int num = Find_Package_Empty(this);
			if (num == -1)
			{
				分解物品提示(-1);
				return;
			}
			switch (base.Craft_Type)
			{
				case 1:
					{
						Random random = new Random(World.GetRandomSeed());
						if (World.Itme.TryGetValue(BitConverter.ToInt32(array, 0), out ItmeClass value3) && value3.FLD_RESIDE2 == 4)
						{
							switch (value3.FLD_JOB_LEVEL)
							{
								case 2:
									{
										int value7 = random.Next(7, 10);
										Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
										byte[] bytes13 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										增加物品2(bytes13, BitConverter.GetBytes(1000000721), num, BitConverter.GetBytes(value7), new byte[56]);
										break;
									}
								case 3:
									{
										int value6 = random.Next(19, 22);
										Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
										byte[] bytes12 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										增加物品2(bytes12, BitConverter.GetBytes(1000000722), num, BitConverter.GetBytes(value6), new byte[56]);
										break;
									}
								case 4:
									{
										int value5 = random.Next(7, 12);
										Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
										byte[] bytes11 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										增加物品2(bytes11, BitConverter.GetBytes(1000000723), num, BitConverter.GetBytes(value5), new byte[56]);
										break;
									}
								case 5:
									{
										int value4 = random.Next(7, 12);
										Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
										byte[] bytes10 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
										增加物品2(bytes10, BitConverter.GetBytes(1000000724), num, BitConverter.GetBytes(value4), new byte[56]);
										break;
									}
							}
						}
						break;
					}
				case 2:
					{
						int value = new Random(World.GetRandomSeed()).Next(7, 10);
						if (!World.Itme.TryGetValue(BitConverter.ToInt32(array, 0), out ItmeClass value2))
						{
							break;
						}
						if (value2.FLD_LEVEL < 100)
						{
							if (value2.FLD_LEVEL >= 80 && value2.FLD_LEVEL < 99)
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes6 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes6, BitConverter.GetBytes(1000000735), num, BitConverter.GetBytes(value), new byte[56]);
							}
							else if (value2.FLD_LEVEL >= 60 && value2.FLD_LEVEL < 79)
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes7 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes7, BitConverter.GetBytes(1000000734), num, BitConverter.GetBytes(value), new byte[56]);
							}
							else if (value2.FLD_LEVEL >= 40 && value2.FLD_LEVEL < 59)
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes8 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes8, BitConverter.GetBytes(1000000733), num, BitConverter.GetBytes(value), new byte[56]);
							}
						}
						else
						{
							Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
							byte[] bytes9 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes9, BitConverter.GetBytes(1000000736), num, BitConverter.GetBytes(value), new byte[56]);
						}
						break;
					}
				case 3:
					switch (BitConverter.ToInt32(array, 0))
					{
						case 800000001:
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes5 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes5, BitConverter.GetBytes(1000000745), num, BitConverter.GetBytes(1), new byte[56]);
								break;
							}
						case 800000002:
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes4 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes4, BitConverter.GetBytes(1000000746), num, BitConverter.GetBytes(1), new byte[56]);
								break;
							}
						case 800000023:
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes3 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes3, BitConverter.GetBytes(1000000747), num, BitConverter.GetBytes(1), new byte[56]);
								break;
							}
						case 800000024:
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes2, BitConverter.GetBytes(1000000748), num, BitConverter.GetBytes(1), new byte[56]);
								break;
							}
						case 800000028:
							{
								Send_Packet_Delete_Item(BitConverter.ToInt32(array2, 0), 1);
								byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
								增加物品2(bytes, BitConverter.GetBytes(1000000749), num, BitConverter.GetBytes(1), new byte[56]);
								break;
							}
					}
					break;
			}
			string hex = "AA5513000154003117040001000000000000000000477B55AA";
			byte[] array3 = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array3, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array3, array3.Length);
			}
		}

		public void 制作物品(ItmeClass 物品, int 空位)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_制作物品");
			}
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
			byte[] array = new byte[56];
			int num = new Random(World.GetRandomSeed()).Next(0, 700 - base.Craft_Level);
			int num2 = 0;
			if (num < 10)
			{
				num2 = 2;
			}
			else if (num < 45)
			{
				num2 = 1;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 52, 2);
			增加物品2(bytes, BitConverter.GetBytes(物品.FLD_PID), 空位, BitConverter.GetBytes(1), array);
			Form1.WriteLine(5, "制作物品 [" + base.Userid + "] [" + base.UserName + "] 物品名[" + 物品.ItmeNAME + "] 全局ID=[" + BitConverter.ToInt32(bytes, 0) + "]  LV[" + num2 + "]");
		}

		public void 制作物品New(clsItemCraft 物品, int 空位)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_制作物品");
			}
			byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
			byte[] array = new byte[56];
			int num = new Random(World.GetRandomSeed()).Next(0, Math.Max(1, 700 - base.Craft_Level));
			int num2 = 0;
			if (num < 10)
			{
				num2 = 2;
			}
			else if (num < 45)
			{
				num2 = 1;
			}
			Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 52, 2);
			增加物品2(bytes, BitConverter.GetBytes(物品.物品ID), 空位, BitConverter.GetBytes(1), array);
			Form1.WriteLine(5, "制作物品 [" + base.Userid + "] [" + base.UserName + "] 物品名[" + 物品.物品名 + "] 全局ID=[" + BitConverter.ToInt32(bytes, 0) + "]  LV[" + num2 + "]");
		}

		public void 制作系统动做(byte[] data, int length)
		{
			byte[] array = new byte[4];
			Buffer.BlockCopy(data, 11, array, 0, 2);
			string hex = "AA55130000FA0341170400FA030200000000000000000055AA";
			byte[] array2 = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(array, 0, array2, 13, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 11, 2);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array2, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array2, array2.Length);
			}
			发送当前范围广播数据多包(array2, array2.Length);
		}

		public void 制作系统检查(byte[] data, int length)
		{
			PacketVerify(data, length);
			int key = BitConverter.ToInt32(data, 11);
			clsItemCraft value;
			if (Find_Package_Empty(this) == -1)
			{
				分解物品提示(-1);
			}
			else if (World.制作物品列表.TryGetValue(key, out value))
			{
				if (base.Craft_Type == value.制作类型 && base.FLD_制作等级 >= value.制作等级)
				{
					if (value.需要物品.Count <= 0)
					{
						分解物品提示(-3);
						Form1.WriteLine(1, "制作物品列表    错误" + value.物品名);
					}
					else
					{
						foreach (clsItemCraftRequired item in value.需要物品)
						{
							bool flag = false;
							for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
							{
								if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == item.Id && BitConverter.ToInt32(Item_In_Bag[i].Item_Amount, 0) >= item.number)
								{
									if (item.Id != 0)
									{
										flag = true;
									}
									break;
								}
							}
							if (!flag)
							{
								分解物品提示(-3);
								break;
							}
						}
					}
				}
				else
				{
					分解物品提示(-1);
				}
			}
			else
			{
				分解物品提示(-1);
			}
		}

		public void 制作系统制作(byte[] data, int length)
		{
			string text = "[ " + base.UserName + " ] - ";
			PacketVerify(data, length);
			int key = BitConverter.ToInt32(data, 11);
			int num = Find_Package_Empty(this);
			if (num == -1)
			{
				分解物品提示(-1);
				return;
			}
			if (!World.制作物品列表.TryGetValue(key, out clsItemCraft value))
			{
				分解物品提示(-2);
			}
			else if (base.Craft_Type != value.制作类型 || base.FLD_制作等级 < value.制作等级)
			{
				分解物品提示(-2);
			}
			else
			{
				if (value.需要物品.Count <= 0)
				{
					分解物品提示(-3);
					Form1.WriteLine(1, "制作物品列表    错误" + value.物品名);
					return;
				}
				object obj = text;
				text = obj + "[ " + value.物品ID + " ]";
				foreach (clsItemCraftRequired item in value.需要物品)
				{
					bool flag = false;
					for (int i = 0; i < ((base.装备行囊是否开启 == 0) ? 36 : 66); i++)
					{
						if (BitConverter.ToInt32(Item_In_Bag[i].Get_Byte_Item_PID, 0) == item.Id && BitConverter.ToInt32(Item_In_Bag[i].Item_Amount, 0) >= item.number)
						{
							obj = text;
							text = obj + " - [ " + Item_In_Bag[i].Get物品全局ID + " " + item.Id + " " + BitConverter.ToInt32(Item_In_Bag[i].Item_Amount, 0) + "-" + item.number + "=" + (BitConverter.ToInt32(Item_In_Bag[i].Item_Amount, 0) - item.number) + " ]";
							if (item.Id != 0)
							{
								flag = true;
							}
							break;
						}
					}
					if (!flag)
					{
						分解物品提示(-3);
						return;
					}
				}
				while (true)
				{
				IL_02d3:
					foreach (clsItemCraftRequired item2 in value.需要物品)
					{
						int num2 = 0;
						while (num2 < ((base.装备行囊是否开启 == 0) ? 36 : 66))
						{
							if (BitConverter.ToInt32(Item_In_Bag[num2].Get_Byte_Item_PID, 0) != item2.Id)
							{
								num2++;
								continue;
							}
							Send_Packet_Delete_Item(num2, item2.number);
							goto IL_034a;
						}
						goto IL_02d3;
					IL_034a:;
					}
					break;
				}
				logo.logchedo(text);
				switch (base.Craft_Type)
				{
					case 1:
						if (!World.Itme.TryGetValue(value.物品ID, out ItmeClass value2))
						{
							break;
						}
						if (value2.FLD_RESIDE2 == 0)
						{
							byte[] bytes2 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes2, BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(value.物品数量), new byte[56]);
							break;
						}
						制作物品New(value, num);
						if (base.FLD_制作等级 <= value.制作等级)
						{
							base.Craft_Level++;
							Update_Exp_Marble();
							计算人物制作等级();
						}
						break;
					case 2:
						if (!World.Itme.TryGetValue(value.物品ID, out ItmeClass value3))
						{
							break;
						}
						if (value3.FLD_RESIDE2 == 0)
						{
							byte[] bytes3 = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes3, BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(value.物品数量), new byte[56]);
							break;
						}
						制作物品New(value, num);
						if (base.FLD_制作等级 <= value.制作等级)
						{
							base.Craft_Level++;
							Update_Exp_Marble();
							计算人物制作等级();
						}
						break;
					case 3:
						{
							byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							增加物品2(bytes, BitConverter.GetBytes(value.物品ID), num, BitConverter.GetBytes(value.物品数量), new byte[56]);
							if (base.FLD_制作等级 <= value.制作等级)
							{
								base.Craft_Level++;
								Update_Exp_Marble();
								计算人物制作等级();
							}
							break;
						}
				}
			}
			string hex = "AA5513000184023617040001000000000000000000D80855AA";
			byte[] array = Converter.hexStringToByte(hex);
			Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
			if (base.Client != null)
			{
				base.Client.Send多包(array, array.Length);
			}
		}

		public void 转生次数奖励()
		{
			try
			{
				foreach (转生次数类 value in World.转生次数数据.Values)
				{
					if (base.转生次数 == value.转生次数)
					{
						string[] array = World.升级会员需要属性.Split(',');
						if (value.武勋 != 0)
						{
							base.Player_WuXun += value.武勋;
							GameMessage("得到武勋" + value.武勋.ToString() + "点！", 20, "转生次数奖励");
							UpdatePowersAndStatus();
						}
						if (value.套装ID != 0)
						{
							int num = 得到包裹空位位置();
							if (num == -1)
							{
								GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20, "转生次数奖励");
								break;
							}
							byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
							byte[] 物品属性 = new byte[56];
							增加物品(bytes, BitConverter.GetBytes(value.套装ID), num, BitConverter.GetBytes(1), 物品属性, 绑定: false);
							GameMessage("恭喜你获得一套装备。快快打开看吧", 20, "转生次数奖励");
						}
						if (value.元宝 != 0)
						{
							查百宝阁元宝数();
							Add_Del_Rxpiont(value.元宝, 1);
							GameMessage("得到" + value.元宝.ToString() + "个元宝！", 20, "转生次数奖励");
							Save_data_Rxpiont();
						}
						if (value.生命 != 0)
						{
							base.奖励_追加_生命 += value.生命;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.生命.ToString() + "生命值！", 20, "转生次数奖励");
						}
						if (value.攻击 != 0 && base.奖励_追加_攻击 < long.Parse(array[0]))
						{
							base.奖励_追加_攻击 += value.攻击;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.攻击.ToString() + "攻击值！", 20, "转生次数奖励");
						}
						if (value.防御 != 0 && base.奖励_追加_防御 < long.Parse(array[1]))
						{
							base.奖励_追加_防御 += value.防御;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.防御.ToString() + "防御值！", 20, "转生次数奖励");
						}
						if (value.回避 != 0)
						{
							base.奖励_追加_回避 += value.回避;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.回避.ToString() + "回避值！", 20, "转生次数奖励");
						}
						if (value.命中 != 0)
						{
							base.奖励_追加_命中 += value.命中;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.命中.ToString() + "命中值！", 20, "转生次数奖励");
						}
						if (value.内功 != 0)
						{
							base.奖励_追加_内功 += value.内功;
							UpdatePowersAndStatus();
							GameMessage("得到" + value.内功.ToString() + "内功值！", 20, "转生次数奖励");
						}
						if (value.金钱 != "")
						{
							base.Player_Money += long.Parse(value.金钱);
							GameMessage("得到游戏币" + value.金钱 + "两！", 20, "转生次数奖励");
							得到钱的提示(uint.Parse(value.金钱));
							Update_Money_Weight();
						}
						if (value.单件物品 != "")
						{
							int num2 = 得到包裹空位位置();
							if (num2 == -1)
							{
								GameMessage("Tuìi ðôÌ ðaÞ ðâÌy !", 20, "转生次数奖励");
								break;
							}
							string[] array2 = value.单件物品.Split(';');
							百宝增加物品带属性(int.Parse(array2[0]), num2, int.Parse(array2[1]), int.Parse(array2[2]), int.Parse(array2[3]), int.Parse(array2[4]), int.Parse(array2[5]), int.Parse(array2[6]), int.Parse(array2[7]), int.Parse(array2[8]), int.Parse(array2[9]), int.Parse(array2[10]), int.Parse(array2[11]));
							GameMessage("恭喜你获得一件装备。快快打开看吧", 20, "转生次数奖励");
						}
						if (value.会员天数 != 0)
						{
							DateTime now = DateTime.Now;
							now = DateTime.Now.AddDays(value.会员天数);
							base.FLD_VIP = 1;
							base.FLD_VIPTIM = now;
							保存会员数据();
							GameMessage("恭喜你获得" + value.会员天数.ToString() + "天会员,请小退后查收！", 10, "转生次数奖励");
						}
						if (value.会员等级 != 0)
						{
							base.会员等级 += value.会员等级;
							SaveDataCharacter();
							UpdatePowersAndStatus();
							GameMessage("恭喜你获得VIP等级" + value.会员等级.ToString() + "级！", 10, "转生次数奖励");
						}
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "转生次数奖励系统出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 转生系统()
		{
			try
			{
				if (base.转生次数 < World.限制转生次数)
				{
					if (base.Player_Level >= World.转生需要等级 && base.Player_Job_Level >= World.转生需要几转)
					{
						switch (World.转生奖励类型)
						{
							case 0:
								base.Player_WuXun += World.转生奖励数量;
								UpdatePowersAndStatus();
								GameMessage("转生成功,系统赠送您" + World.转生奖励数量 + "点武勋！", 10, "转生提示");
								break;
							case 1:
								查百宝阁元宝数();
								Add_Del_Rxpiont(World.转生奖励数量, 1);
								GameMessage("转生成功,系统赠送您" + World.转生奖励数量 + "个元宝！", 10, "转生提示");
								Save_data_Rxpiont();
								break;
							case 2:
								base.Player_Money += World.转生奖励数量;
								GameMessage("转生成功,系统赠送您" + World.转生奖励数量 + "金钱！", 10, "转生提示");
								Update_Money_Weight();
								break;
							case 3:
								{
									string[] array2 = World.转生获得属性.Split(';');
									string[] array3 = World.升级会员需要属性.Split(',');
									if (int.Parse(array2[0]) != 0)
									{
										base.奖励_追加_生命 += long.Parse(array2[0]);
										GameMessage("生命" + int.Parse(array2[0]), 10, "转生提示");
									}
									if (long.Parse(array2[1]) != 0 && base.奖励_追加_攻击 < long.Parse(array3[0]))
									{
										base.奖励_追加_攻击 += long.Parse(array2[1]);
										GameMessage("攻击" + long.Parse(array2[1]), 10, "转生提示");
									}
									if (long.Parse(array2[2]) != 0 && base.奖励_追加_防御 < long.Parse(array3[1]))
									{
										base.奖励_追加_防御 += long.Parse(array2[2]);
										GameMessage("防御" + long.Parse(array2[2]), 10, "转生提示");
									}
									if (int.Parse(array2[3]) != 0)
									{
										base.奖励_追加_回避 += int.Parse(array2[3]);
										GameMessage("回避" + int.Parse(array2[3]), 10, "转生提示");
									}
									if (int.Parse(array2[4]) != 0)
									{
										base.奖励_追加_内功 += int.Parse(array2[4]);
										GameMessage("内功" + int.Parse(array2[4]), 10, "转生提示");
									}
									if (int.Parse(array2[5]) != 0)
									{
										base.奖励_追加_命中 += int.Parse(array2[5]);
										GameMessage("命中" + int.Parse(array2[5]), 10, "转生提示");
									}
									if (int.Parse(array2[6]) != 0)
									{
										查百宝阁元宝数();
										Add_Del_Rxpiont(int.Parse(array2[6]), 1);
										GameMessage("转生成功,系统赠送您" + int.Parse(array2[6]) + "个元宝！", 10, "转生提示");
										Save_data_Rxpiont();
									}
									if (int.Parse(array2[7]) != 0)
									{
										base.会员等级 += int.Parse(array2[7]);
										GameMessage("转生成功,系统赠送您VIP等级" + int.Parse(array2[7]) + "级！", 10, "转生提示");
									}
									break;
								}
							case 4:
								{
									int num2 = Find_Package_Empty(this);
									if (num2 == -1)
									{
										GameMessage("请把背包留一个空位,送你一个套装！", 10, "转生提示");
										return;
									}
									byte[] bytes = BitConverter.GetBytes(RxjhClass.GetDbItmeId());
									byte[] 物品属性 = new byte[56];
									增加物品(bytes, BitConverter.GetBytes(World.转生奖励套装), num2, BitConverter.GetBytes(1), 物品属性, 绑定: false);
									break;
								}
							case 5:
								{
									string[] array = World.转生奖励物品.Split(';');
									int num = Find_Package_Empty(this);
									if (num == -1)
									{
										GameMessage("请把背包留一个空位,送你一件神秘礼物哦！", 10, "转生提示");
										return;
									}
									百宝增加物品带属性(int.Parse(array[0]), num, int.Parse(array[1]), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[4]), int.Parse(array[5]), int.Parse(array[6]), int.Parse(array[7]), int.Parse(array[8]), int.Parse(array[9]), int.Parse(array[10]), int.Parse(array[11]));
									GameMessage("恭喜你获得系统奖励物品一件,请查收！", 10, "转生提示");
									break;
								}
							case 6:
								if (World.AllConnectedChars.TryGetValue(base.UserSessionID, out Players _))
								{
									DateTime now = DateTime.Now;
									now = DateTime.Now.AddDays(World.转生奖励数量);
									base.FLD_VIP = 1;
									base.FLD_VIPTIM = now;
									保存会员数据();
								}
								GameMessage("恭喜你获得" + World.转生奖励数量 + "天会员,请小退后查收！", 10, "转生提示");
								break;
							default:
								GameMessage("本服未开放转生功能！", 10);
								return;
						}
						base.转生次数++;
						if (World.是否开启转生次数奖励 == 1)
						{
							foreach (转生次数类 value2 in World.转生次数数据.Values)
							{
								if (base.转生次数 == value2.转生次数)
								{
									World.FindPlayerbyID(base.UserSessionID)?.转生次数奖励();
								}
							}
						}
						base.Player_Level = World.转生回落等级;
						base.Player_FLD_EXP = 0L;
						人物转职业(base.Player_Zx, World.转生降落几转);
						Update_HP_MP_SP();
						Update_Exp_Marble();
						UpdatePowersAndStatus();
						更新人物数据(this);
						升级后的提示(1);
						if (World.转生公告 == 1)
						{
							World.发送公告(string.Format(World.转生公告内容, base.UserName));
						}
					}
					else
					{
						GameMessage("必须达到" + World.转生需要等级 + "级和" + World.转生需要几转 + "才能转生!", 10, "转生提示");
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "转生系统出错! [" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 装备修理(byte[] data, int length)
		{
			if (World.JlMsg == 1)
			{
				Form1.WriteLine(0, "Players_合成系统");
			}
			if (!打开仓库中)
			{
				Form1.WriteLine(6, "Upgrade_Item BUG![" + base.Userid + "]-[" + base.UserName + "]");
				return;
			}
			int num = BitConverter.ToUInt16(data, 11);
			int num2 = data[23];
			try
			{
				PacketVerify(data, length);
				打开仓库中 = true;
				string hex = "AA556B0001000025315C00FFFFFFFFB0000000FFFFFFFF0000000042EEF8050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004C9855AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(0L), 0, array, 95, 8);
				if (length > 30)
				{
					byte[] dst = new byte[4];
					Buffer.BlockCopy(data, 11, dst, 0, 4);
					int num3 = num;
					if (num3 == 2)
					{
						try
						{
							ClassHcItimes.Clear();
							Buffer.BlockCopy(BitConverter.GetBytes(num2), 0, array, 27, 4);
							Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_PID, 0, array, 31, 4);
							Buffer.BlockCopy(Item_In_Bag[num2].Get_Byte_Item_Option, 0, array, 39, 56);
							HcItimesClass hcItimesClass = new HcItimesClass();
							hcItimesClass.index = num2;
							hcItimesClass.Get_Byte_Item = Item_In_Bag[num2].Byte_Item;
							ClassHcItimes.Add(1, hcItimesClass);
							Item_In_Bag[num2].LockMove = true;
						}
						catch (Exception ex)
						{
							Form1.WriteLine(1, "Upgrade_Item 合成属性 合成3 出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
							return;
						}
						if (num != 0)
						{
							Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
							if (base.Client != null)
							{
								base.Client.Send多包(array, array.Length);
							}
						}
					}
				}
			}
			catch (Exception ex2)
			{
				元宝合成开关 = 0;
				Form1.WriteLine(1, "Upgrade_Item出错![" + base.Userid + "]-[" + base.UserName + "][" + num + "]" + ex2.Message);
			}
		}

		public void Send_Packet_Show_Pic(byte[] wg_id, int 开关int, int sj)
		{
			PacketData packetData = new PacketData();
			packetData.WriteLong(BitConverter.ToInt32(wg_id, 0));
			packetData.WriteInt(0);
			packetData.WriteInt(开关int);
			packetData.WriteInt(sj + 500);
			packetData.WriteInt(0);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 34560, base.UserSessionID);
			}
			SendRangeOfPackets(packetData, 34560, base.UserSessionID);
		}

		public void 状态效果New(int 状态ID, int 开关, int 时间, int 数量, int 数量类型)
		{
			PacketData packetData = new PacketData();
			packetData.WriteInt(状态ID);
			packetData.WriteInt(开关);
			packetData.WriteInt(时间);
			packetData.WriteInt(0);
			packetData.WriteInt(数量);
			packetData.WriteInt(数量类型);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 35328, base.UserSessionID);
			}
		}

		public void 状态效果人物灵兽(byte[] wg_id, int 开关int, int sj)
		{
			PacketData packetData = new PacketData();
			packetData.WriteLong(BitConverter.ToInt32(wg_id, 0));
			packetData.WriteInt(开关int);
			packetData.WriteInt(sj);
			packetData.WriteInt(0);
			if (base.Client != null)
			{
				base.Client.SendPak(packetData, 34560, base.Pet_ID);
			}
			SendRangeOfPackets(packetData, 34560, base.Pet_ID);
		}

		public void 组队传送(byte[] data, int length)
		{
			try
			{
				byte[] array = new byte[2];
				Buffer.BlockCopy(data, 15, array, 0, 2);
				byte[] array2 = new byte[20];
				for (int i = 0; i < 20 && data[27 + i] != 0; i++)
				{
					array2[i] = data[27 + i];
				}
				string username = Encoding.GetEncoding(1252).GetString(array2).Replace("\0", "");
				int num = BitConverter.ToInt16(array, 0);
				if (BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) == 1008000120 && BitConverter.ToInt32(Item_In_Bag[num].Get_Byte_Item_PID, 0) != 0)
				{
					Players players = World.FindPlayerbyName(username);
					if (players != null)
					{
						if (players.UserName == base.UserName)
						{
							组队传送符提示(3);
						}
						else if (players.Party_ID != Party_ID)
						{
							组队传送符提示(6);
						}
						else if (players.Player_FLD_Map == 801)
						{
							GameMessage("Ðôìi phýõng ðang trong thêì lýòc chiêìn, không thêÒ sýÒ duòng.");
						}
						else
						{
							组队传送符提示(1);
							Delete_Item_Use(num, 1);
							Move(players.Player_FLD_X, players.Player_FLD_Y, players.Player_FLD_Z, players.Player_FLD_Map);
						}
					}
					else
					{
						组队传送符提示(2);
					}
				}
			}
			catch (Exception ex)
			{
				组队传送符提示(7);
				Form1.WriteLine(1, "组队传送出错![" + base.Userid + "]-[" + base.UserName + "]" + ex.Message);
			}
		}

		public void 组队道具分配规则(byte[] data, int length)
		{
			PacketVerify(data, length);
			int 人物ID = BitConverter.ToInt16(data, 5);
			int num = BitConverter.ToInt16(data, 11);
			if (Select_Character_ID(人物ID) != null)
			{
				PacketData packetData = new PacketData();
				packetData.WriteShort(1);
				packetData.WriteShort(num);
				if (World.PartyClass.TryGetValue(Party_ID, out TeamClass value))
				{
					foreach (Players value2 in value.List_Party.Values)
					{
						if (value2.Client != null)
						{
							value.Type_Share_ItemDrop = num;
							if (value.Type_Share_ItemDrop == 1)
							{
								value2.GameMessage(value.队长 + " thay ðôÒi kiêÒu chia seÒ laÌ [Theo thýì týò]", 6);
							}
							else if (value.Type_Share_ItemDrop == 2)
							{
								value2.GameMessage(value.队长 + " thay ðôÒi kiêÒu chia seÒ laÌ [NgâÞu nhiên]", 6);
							}
							else if (value.Type_Share_ItemDrop == 3)
							{
								value2.GameMessage(value.队长 + " thay ðôÒi kiêÒu chia seÒ laÌ [Týò do]", 6);
							}
							else if (value.Type_Share_ItemDrop == 4)
							{
								value2.GameMessage(value.队长 + " thay ðôÒi kiêÒu chia seÒ laÌ [Theo thýì týò - trýõÒng nhoìm]", 6);
							}
							value2.Client.SendPak(packetData, 11008, value2.UserSessionID);
						}
					}
				}
			}
		}

		public int 坐牢地图(int mapid)
		{
			string[] array = World.监狱地图.Trim().Split(',');
			if (mapid == int.Parse(array[0]) && base.Player_FLD_SE > World.坐牢善恶)
			{
				GameMessage("本地图为监狱地图无法传送进入", 9);
				return 0;
			}
			return 1;
		}

		public void Show_Qigong_Effect(int 对方ID, int id)
		{
			try
			{
				string hex = "AA551B00009F0489000C002C010000500000000000000055AA";
				byte[] array = Converter.hexStringToByte(hex);
				Buffer.BlockCopy(BitConverter.GetBytes(id), 0, array, 15, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(对方ID), 0, array, 11, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
				foreach (Players value in PlayList.Values)
				{
					if (value.Client != null)
					{
						value.Client.Send多包(array, array.Length);
					}
				}
				if (base.Client != null)
				{
					base.Client.Send多包(array, array.Length);
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "xsz出错!" + ex.Message);
			}
		}

		public void 显示大字2(int 对方ID, int id)
		{
			try
			{
				using (PacketData packetData = new PacketData())
				{
					packetData.WriteInt(对方ID);
					packetData.WriteInt(id);
					packetData.WriteInt(0);
					if (base.Client != null)
					{
						base.Client.SendPak(packetData, 35072, base.UserSessionID);
					}
				}
			}
			catch (Exception ex)
			{
				Form1.WriteLine(1, "xsz2出错!" + ex.Message);
			}
		}

		private void Timer_Player_OneSec(object sender, ElapsedEventArgs e)
		{
			try
			{
				if (DateTime.Now.Subtract(time_UpdateTime).TotalMilliseconds > 5000.0)
				{
					time_UpdateTime = DateTime.Now;
					if (!base.PlayerIsDead && base.Player_FLD_HP > 0)
					{
						if (vancong == 0 && !base.PlayerIsDead)
						{
							if (base.Player_FLD_HP < base.Player_HP_Max)
							{
								base.Player_FLD_HP += base.Player_Level / 10;
							}
							if (base.Player_FLD_MP < base.Player_MP_Max)
							{
								base.Player_FLD_MP += base.Player_Level / 10;
							}
							Update_HP_MP_SP();
						}
						else if (vancong == 1)
						{
							if (new Random(World.GetRandomSeed()).Next(1, 100) > 75)
							{
								if (base.Player_Level < 35)
								{
									if (base.Player_FLD_HP < base.Player_HP_Max)
									{
										base.Player_FLD_HP += 10L;
									}
									if (base.Player_FLD_MP < base.Player_MP_Max)
									{
										base.Player_FLD_MP += 20;
									}
									Update_HP_MP_SP();
								}
								if (base.Player_Level < 100 && base.Player_Level >= 35)
								{
									if (base.Player_FLD_HP < base.Player_HP_Max)
									{
										base.Player_FLD_HP += 100L;
									}
									if (base.Player_FLD_MP < base.Player_MP_Max)
									{
										base.Player_FLD_MP += 200;
									}
									Update_HP_MP_SP();
								}
								if (base.Player_Level >= 100)
								{
									if (base.Player_FLD_HP < base.Player_HP_Max)
									{
										base.Player_FLD_HP += 200L;
									}
									if (base.Player_FLD_MP < base.Player_MP_Max)
									{
										base.Player_FLD_MP += 300;
									}
									Update_HP_MP_SP();
								}
							}
							else
							{
								if (base.Player_Level < 35)
								{
									if (base.Player_FLD_HP < base.Player_HP_Max)
									{
										base.Player_FLD_HP += 5L;
									}
									if (base.Player_FLD_MP < base.Player_MP_Max)
									{
										base.Player_FLD_MP += 10;
									}
									Update_HP_MP_SP();
								}
								if (base.Player_Level < 100 && base.Player_Level >= 35)
								{
									if (base.Player_FLD_HP < base.Player_HP_Max)
									{
										base.Player_FLD_HP += 50L;
									}
									if (base.Player_FLD_MP < base.Player_MP_Max)
									{
										base.Player_FLD_MP += 100;
									}
									Update_HP_MP_SP();
								}
								if (base.Player_Level >= 100)
								{
									if (base.Player_FLD_HP < base.Player_HP_Max)
									{
										base.Player_FLD_HP += 75L;
									}
									if (base.Player_FLD_MP < base.Player_MP_Max)
									{
										base.Player_FLD_MP += 100;
									}
									Update_HP_MP_SP();
								}
							}
						}
					}
				}
				if (!base.PlayerIsDead && base.Player_FLD_HP > 0 && base.Player_HP_Max > 0)
				{
					if (base.Player_Job == 11)
					{
						int num = (int)(base.KhiCong_JOB11_1 + (double)base.FLD_Item_Shield_Recover);
						if (base.Player_Shield < base.Player_Shield_Max)
						{
							base.Player_Shield += (int)(base.KhiCong_JOB11_1 + (double)base.FLD_Item_Shield_Recover);
						}
						if (base.Player_Shield > base.Player_Shield_Max)
						{
							base.Player_Shield = base.Player_Shield_Max;
						}
					}
					if (base.Player_FLD_HP < base.Player_HP_Max)
					{
						base.Player_FLD_HP += base.FLD_Item_HP_Recover;
					}
					if (base.Player_FLD_HP > base.Player_HP_Max)
					{
						base.Player_FLD_HP = base.Player_HP_Max;
					}
					if (base.Player_FLD_MP < base.Player_MP_Max)
					{
						base.Player_FLD_MP += base.FLD_Item_MP_Recover;
					}
					if (base.Player_FLD_MP > base.Player_MP_Max)
					{
						base.Player_FLD_MP = base.Player_MP_Max;
					}
					Update_HP_MP_SP();
				}
				if (base.Player_FLD_Map == 801)
				{
					if (Step_Status_TLC == 1 || base.Player_FLD_HP <= 0 || base.PlayerIsDead)
					{
						if ((int)DateTime.Now.Subtract(time_PK).TotalMilliseconds > 3000)
						{
							base.PlayerIsDead = false;
							base.Player_FLD_HP = base.Player_HP_Max;
							base.Player_Shield = base.Player_Shield_Max;
							if (base.Player_Zx == 1)
							{
								Move(0f, -232f, 15f, 801);
							}
							else
							{
								Move(0f, 228f, 15f, 801);
							}
							Step_Status_TLC = 2;
							time_PK = DateTime.Now;
						}
					}
					else if (Step_Status_TLC == 2 && (int)DateTime.Now.Subtract(time_PK).TotalMilliseconds > 2000)
					{
						string hex = "AA552F00010F2713222000010001000A000000010000000400000005000000050000000000000000000000000000000000153555AA";
						byte[] array = Converter.hexStringToByte(hex);
						Buffer.BlockCopy(BitConverter.GetBytes(base.UserSessionID), 0, array, 5, 2);
						if (base.Client != null)
						{
							base.Client.Send(array, array.Length);
						}
						Step_Status_TLC = 0;
						base.PlayerIsDead = false;
					}
				}
			}
			catch
			{
			}
		}

		public void Addexporll(int iditem, long time)
		{
			int num = 0;
			if (Show_Pic_Class.ContainsKey(iditem))
			{
				num = (int)Show_Pic_Class[iditem].FLD_sj;
				Show_Pic_Class[iditem].EndEvent();
			}
			Show_Pic_Class.Add(iditem, new Class_Show_Pill(this, time + num, iditem, 1));
			Send_Packet_Show_Pic(BitConverter.GetBytes(iditem), 1, (int)time + num);
		}
	}
}
